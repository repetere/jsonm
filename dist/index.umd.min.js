(function (global, factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
            typeof define === 'function' && define.amd ? define(['exports'], factory) :
            (global = global || self, factory(global.ModelX = {}));
}(this, (function (exports) { 'use strict';

            var global$1 = (typeof global !== "undefined" ? global :
                        typeof self !== "undefined" ? self :
                        typeof window !== "undefined" ? window : {});

            var lookup = [];
            var revLookup = [];
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
            var inited = false;
            function init () {
              inited = true;
              var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
              for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i];
                revLookup[code.charCodeAt(i)] = i;
              }

              revLookup['-'.charCodeAt(0)] = 62;
              revLookup['_'.charCodeAt(0)] = 63;
            }

            function toByteArray (b64) {
              if (!inited) {
                init();
              }
              var i, j, l, tmp, placeHolders, arr;
              var len = b64.length;

              if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4')
              }

              // the number of equal signs (place holders)
              // if there are two placeholders, than the two characters before it
              // represent one byte
              // if there is only one, then the three characters before it represent 2 bytes
              // this is just a cheap hack to not do indexOf twice
              placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

              // base64 is 4/3 + up to two characters of the original data
              arr = new Arr(len * 3 / 4 - placeHolders);

              // if there are placeholders, only get up to the last complete 4 chars
              l = placeHolders > 0 ? len - 4 : len;

              var L = 0;

              for (i = 0, j = 0; i < l; i += 4, j += 3) {
                tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
                arr[L++] = (tmp >> 16) & 0xFF;
                arr[L++] = (tmp >> 8) & 0xFF;
                arr[L++] = tmp & 0xFF;
              }

              if (placeHolders === 2) {
                tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
                arr[L++] = tmp & 0xFF;
              } else if (placeHolders === 1) {
                tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
                arr[L++] = (tmp >> 8) & 0xFF;
                arr[L++] = tmp & 0xFF;
              }

              return arr
            }

            function tripletToBase64 (num) {
              return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
            }

            function encodeChunk (uint8, start, end) {
              var tmp;
              var output = [];
              for (var i = start; i < end; i += 3) {
                tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
                output.push(tripletToBase64(tmp));
              }
              return output.join('')
            }

            function fromByteArray (uint8) {
              if (!inited) {
                init();
              }
              var tmp;
              var len = uint8.length;
              var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
              var output = '';
              var parts = [];
              var maxChunkLength = 16383; // must be multiple of 3

              // go through the array every three bytes, we'll deal with trailing stuff later
              for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
              }

              // pad the end with zeros, but make sure to not forget the extra bytes
              if (extraBytes === 1) {
                tmp = uint8[len - 1];
                output += lookup[tmp >> 2];
                output += lookup[(tmp << 4) & 0x3F];
                output += '==';
              } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
                output += lookup[tmp >> 10];
                output += lookup[(tmp >> 4) & 0x3F];
                output += lookup[(tmp << 2) & 0x3F];
                output += '=';
              }

              parts.push(output);

              return parts.join('')
            }

            function read (buffer, offset, isLE, mLen, nBytes) {
              var e, m;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var nBits = -7;
              var i = isLE ? (nBytes - 1) : 0;
              var d = isLE ? -1 : 1;
              var s = buffer[offset + i];

              i += d;

              e = s & ((1 << (-nBits)) - 1);
              s >>= (-nBits);
              nBits += eLen;
              for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              m = e & ((1 << (-nBits)) - 1);
              e >>= (-nBits);
              nBits += mLen;
              for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

              if (e === 0) {
                e = 1 - eBias;
              } else if (e === eMax) {
                return m ? NaN : ((s ? -1 : 1) * Infinity)
              } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
              }
              return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
            }

            function write (buffer, value, offset, isLE, mLen, nBytes) {
              var e, m, c;
              var eLen = nBytes * 8 - mLen - 1;
              var eMax = (1 << eLen) - 1;
              var eBias = eMax >> 1;
              var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
              var i = isLE ? 0 : (nBytes - 1);
              var d = isLE ? 1 : -1;
              var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

              value = Math.abs(value);

              if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
              } else {
                e = Math.floor(Math.log(value) / Math.LN2);
                if (value * (c = Math.pow(2, -e)) < 1) {
                  e--;
                  c *= 2;
                }
                if (e + eBias >= 1) {
                  value += rt / c;
                } else {
                  value += rt * Math.pow(2, 1 - eBias);
                }
                if (value * c >= 2) {
                  e++;
                  c /= 2;
                }

                if (e + eBias >= eMax) {
                  m = 0;
                  e = eMax;
                } else if (e + eBias >= 1) {
                  m = (value * c - 1) * Math.pow(2, mLen);
                  e = e + eBias;
                } else {
                  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                  e = 0;
                }
              }

              for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

              e = (e << mLen) | m;
              eLen += mLen;
              for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

              buffer[offset + i - d] |= s * 128;
            }

            var toString = {}.toString;

            var isArray = Array.isArray || function (arr) {
              return toString.call(arr) == '[object Array]';
            };

            var INSPECT_MAX_BYTES = 50;

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Use Object implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * Due to various browser bugs, sometimes the Object implementation will be used even
             * when the browser supports typed arrays.
             *
             * Note:
             *
             *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
             *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
             *
             *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
             *
             *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
             *     incorrect length in some situations.

             * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
             * get the Object implementation, which is slower but behaves correctly.
             */
            Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
              ? global$1.TYPED_ARRAY_SUPPORT
              : true;

            function kMaxLength () {
              return Buffer.TYPED_ARRAY_SUPPORT
                ? 0x7fffffff
                : 0x3fffffff
            }

            function createBuffer (that, length) {
              if (kMaxLength() < length) {
                throw new RangeError('Invalid typed array length')
              }
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = new Uint8Array(length);
                that.__proto__ = Buffer.prototype;
              } else {
                // Fallback: Return an object instance of the Buffer class
                if (that === null) {
                  that = new Buffer(length);
                }
                that.length = length;
              }

              return that
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer (arg, encodingOrOffset, length) {
              if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
                return new Buffer(arg, encodingOrOffset, length)
              }

              // Common case.
              if (typeof arg === 'number') {
                if (typeof encodingOrOffset === 'string') {
                  throw new Error(
                    'If encoding is specified then the first argument must be a string'
                  )
                }
                return allocUnsafe(this, arg)
              }
              return from(this, arg, encodingOrOffset, length)
            }

            Buffer.poolSize = 8192; // not used by this implementation

            // TODO: Legacy, not needed anymore. Remove in next major version.
            Buffer._augment = function (arr) {
              arr.__proto__ = Buffer.prototype;
              return arr
            };

            function from (that, value, encodingOrOffset, length) {
              if (typeof value === 'number') {
                throw new TypeError('"value" argument must not be a number')
              }

              if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
                return fromArrayBuffer(that, value, encodingOrOffset, length)
              }

              if (typeof value === 'string') {
                return fromString(that, value, encodingOrOffset)
              }

              return fromObject(that, value)
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
              return from(null, value, encodingOrOffset, length)
            };

            if (Buffer.TYPED_ARRAY_SUPPORT) {
              Buffer.prototype.__proto__ = Uint8Array.prototype;
              Buffer.__proto__ = Uint8Array;
            }

            function assertSize (size) {
              if (typeof size !== 'number') {
                throw new TypeError('"size" argument must be a number')
              } else if (size < 0) {
                throw new RangeError('"size" argument must not be negative')
              }
            }

            function alloc (that, size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(that, size)
              }
              if (fill !== undefined) {
                // Only pay attention to encoding if it's a string. This
                // prevents accidentally sending in a number that would
                // be interpretted as a start offset.
                return typeof encoding === 'string'
                  ? createBuffer(that, size).fill(fill, encoding)
                  : createBuffer(that, size).fill(fill)
              }
              return createBuffer(that, size)
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
              return alloc(null, size, fill, encoding)
            };

            function allocUnsafe (that, size) {
              assertSize(size);
              that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
              if (!Buffer.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < size; ++i) {
                  that[i] = 0;
                }
              }
              return that
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
              return allocUnsafe(null, size)
            };
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
              return allocUnsafe(null, size)
            };

            function fromString (that, string, encoding) {
              if (typeof encoding !== 'string' || encoding === '') {
                encoding = 'utf8';
              }

              if (!Buffer.isEncoding(encoding)) {
                throw new TypeError('"encoding" must be a valid string encoding')
              }

              var length = byteLength(string, encoding) | 0;
              that = createBuffer(that, length);

              var actual = that.write(string, encoding);

              if (actual !== length) {
                // Writing a hex string, for example, that contains invalid characters will
                // cause everything after the first invalid character to be ignored. (e.g.
                // 'abxxcd' will be treated as 'ab')
                that = that.slice(0, actual);
              }

              return that
            }

            function fromArrayLike (that, array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              that = createBuffer(that, length);
              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }
              return that
            }

            function fromArrayBuffer (that, array, byteOffset, length) {
              array.byteLength; // this throws if `array` is not a valid ArrayBuffer

              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('\'offset\' is out of bounds')
              }

              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('\'length\' is out of bounds')
              }

              if (byteOffset === undefined && length === undefined) {
                array = new Uint8Array(array);
              } else if (length === undefined) {
                array = new Uint8Array(array, byteOffset);
              } else {
                array = new Uint8Array(array, byteOffset, length);
              }

              if (Buffer.TYPED_ARRAY_SUPPORT) {
                // Return an augmented `Uint8Array` instance, for best performance
                that = array;
                that.__proto__ = Buffer.prototype;
              } else {
                // Fallback: Return an object instance of the Buffer class
                that = fromArrayLike(that, array);
              }
              return that
            }

            function fromObject (that, obj) {
              if (internalIsBuffer(obj)) {
                var len = checked(obj.length) | 0;
                that = createBuffer(that, len);

                if (that.length === 0) {
                  return that
                }

                obj.copy(that, 0, 0, len);
                return that
              }

              if (obj) {
                if ((typeof ArrayBuffer !== 'undefined' &&
                    obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
                  if (typeof obj.length !== 'number' || isnan(obj.length)) {
                    return createBuffer(that, 0)
                  }
                  return fromArrayLike(that, obj)
                }

                if (obj.type === 'Buffer' && isArray(obj.data)) {
                  return fromArrayLike(that, obj.data)
                }
              }

              throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
            }

            function checked (length) {
              // Note: cannot use `length < kMaxLength()` here because that fails when
              // length is NaN (which is otherwise coerced to zero.)
              if (length >= kMaxLength()) {
                throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                                     'size: 0x' + kMaxLength().toString(16) + ' bytes')
              }
              return length | 0
            }
            Buffer.isBuffer = isBuffer;
            function internalIsBuffer (b) {
              return !!(b != null && b._isBuffer)
            }

            Buffer.compare = function compare (a, b) {
              if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
                throw new TypeError('Arguments must be Buffers')
              }

              if (a === b) return 0

              var x = a.length;
              var y = b.length;

              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break
                }
              }

              if (x < y) return -1
              if (y < x) return 1
              return 0
            };

            Buffer.isEncoding = function isEncoding (encoding) {
              switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'latin1':
                case 'binary':
                case 'base64':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return true
                default:
                  return false
              }
            };

            Buffer.concat = function concat (list, length) {
              if (!isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers')
              }

              if (list.length === 0) {
                return Buffer.alloc(0)
              }

              var i;
              if (length === undefined) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }

              var buffer = Buffer.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (!internalIsBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers')
                }
                buf.copy(buffer, pos);
                pos += buf.length;
              }
              return buffer
            };

            function byteLength (string, encoding) {
              if (internalIsBuffer(string)) {
                return string.length
              }
              if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
                  (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                return string.byteLength
              }
              if (typeof string !== 'string') {
                string = '' + string;
              }

              var len = string.length;
              if (len === 0) return 0

              // Use a for loop to avoid recursion
              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                    return len
                  case 'utf8':
                  case 'utf-8':
                  case undefined:
                    return utf8ToBytes(string).length
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return len * 2
                  case 'hex':
                    return len >>> 1
                  case 'base64':
                    return base64ToBytes(string).length
                  default:
                    if (loweredCase) return utf8ToBytes(string).length // assume utf8
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer.byteLength = byteLength;

            function slowToString (encoding, start, end) {
              var loweredCase = false;

              // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
              // property of a typed array.

              // This behaves neither like String nor Uint8Array in that we set start/end
              // to their upper/lower bounds if the value passed is out of range.
              // undefined is handled specially as per ECMA-262 6th Edition,
              // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
              if (start === undefined || start < 0) {
                start = 0;
              }
              // Return early if start > this.length. Done here to prevent potential uint32
              // coercion fail below.
              if (start > this.length) {
                return ''
              }

              if (end === undefined || end > this.length) {
                end = this.length;
              }

              if (end <= 0) {
                return ''
              }

              // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
              end >>>= 0;
              start >>>= 0;

              if (end <= start) {
                return ''
              }

              if (!encoding) encoding = 'utf8';

              while (true) {
                switch (encoding) {
                  case 'hex':
                    return hexSlice(this, start, end)

                  case 'utf8':
                  case 'utf-8':
                    return utf8Slice(this, start, end)

                  case 'ascii':
                    return asciiSlice(this, start, end)

                  case 'latin1':
                  case 'binary':
                    return latin1Slice(this, start, end)

                  case 'base64':
                    return base64Slice(this, start, end)

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return utf16leSlice(this, start, end)

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                    encoding = (encoding + '').toLowerCase();
                    loweredCase = true;
                }
              }
            }

            // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
            // Buffer instances.
            Buffer.prototype._isBuffer = true;

            function swap (b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }

            Buffer.prototype.swap16 = function swap16 () {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 16-bits')
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this
            };

            Buffer.prototype.swap32 = function swap32 () {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 32-bits')
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this
            };

            Buffer.prototype.swap64 = function swap64 () {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError('Buffer size must be a multiple of 64-bits')
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this
            };

            Buffer.prototype.toString = function toString () {
              var length = this.length | 0;
              if (length === 0) return ''
              if (arguments.length === 0) return utf8Slice(this, 0, length)
              return slowToString.apply(this, arguments)
            };

            Buffer.prototype.equals = function equals (b) {
              if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
              if (this === b) return true
              return Buffer.compare(this, b) === 0
            };

            Buffer.prototype.inspect = function inspect () {
              var str = '';
              var max = INSPECT_MAX_BYTES;
              if (this.length > 0) {
                str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
                if (this.length > max) str += ' ... ';
              }
              return '<Buffer ' + str + '>'
            };

            Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
              if (!internalIsBuffer(target)) {
                throw new TypeError('Argument must be a Buffer')
              }

              if (start === undefined) {
                start = 0;
              }
              if (end === undefined) {
                end = target ? target.length : 0;
              }
              if (thisStart === undefined) {
                thisStart = 0;
              }
              if (thisEnd === undefined) {
                thisEnd = this.length;
              }

              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError('out of range index')
              }

              if (thisStart >= thisEnd && start >= end) {
                return 0
              }
              if (thisStart >= thisEnd) {
                return -1
              }
              if (start >= end) {
                return 1
              }

              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;

              if (this === target) return 0

              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);

              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);

              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break
                }
              }

              if (x < y) return -1
              if (y < x) return 1
              return 0
            };

            // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
            // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
            //
            // Arguments:
            // - buffer - a Buffer to search
            // - val - a string, Buffer, or number
            // - byteOffset - an index into `buffer`; will be clamped to an int32
            // - encoding - an optional encoding, relevant is val is a string
            // - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
              // Empty buffer means no match
              if (buffer.length === 0) return -1

              // Normalize byteOffset
              if (typeof byteOffset === 'string') {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 0x7fffffff) {
                byteOffset = 0x7fffffff;
              } else if (byteOffset < -0x80000000) {
                byteOffset = -0x80000000;
              }
              byteOffset = +byteOffset;  // Coerce to Number.
              if (isNaN(byteOffset)) {
                // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                byteOffset = dir ? 0 : (buffer.length - 1);
              }

              // Normalize byteOffset: negative offsets start from the end of the buffer
              if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir) return -1
                else byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir) byteOffset = 0;
                else return -1
              }

              // Normalize val
              if (typeof val === 'string') {
                val = Buffer.from(val, encoding);
              }

              // Finally, search either indexOf (if dir is true) or lastIndexOf
              if (internalIsBuffer(val)) {
                // Special case: looking for empty string/buffer always fails
                if (val.length === 0) {
                  return -1
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
              } else if (typeof val === 'number') {
                val = val & 0xFF; // Search for a byte value [0-255]
                if (Buffer.TYPED_ARRAY_SUPPORT &&
                    typeof Uint8Array.prototype.indexOf === 'function') {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                  }
                }
                return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
              }

              throw new TypeError('val must be string, number or Buffer')
            }

            function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;

              if (encoding !== undefined) {
                encoding = String(encoding).toLowerCase();
                if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                    encoding === 'utf16le' || encoding === 'utf-16le') {
                  if (arr.length < 2 || val.length < 2) {
                    return -1
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }

              function read (buf, i) {
                if (indexSize === 1) {
                  return buf[i]
                } else {
                  return buf.readUInt16BE(i * indexSize)
                }
              }

              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1) foundIndex = i;
                    if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                  } else {
                    if (foundIndex !== -1) i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break
                    }
                  }
                  if (found) return i
                }
              }

              return -1
            }

            Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1
            };

            Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
            };

            Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
            };

            function hexWrite (buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }

              // must be an even number of digits
              var strLen = string.length;
              if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (isNaN(parsed)) return i
                buf[offset + i] = parsed;
              }
              return i
            }

            function utf8Write (buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
            }

            function asciiWrite (buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length)
            }

            function latin1Write (buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length)
            }

            function base64Write (buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length)
            }

            function ucs2Write (buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
            }

            Buffer.prototype.write = function write (string, offset, length, encoding) {
              // Buffer#write(string)
              if (offset === undefined) {
                encoding = 'utf8';
                length = this.length;
                offset = 0;
              // Buffer#write(string, encoding)
              } else if (length === undefined && typeof offset === 'string') {
                encoding = offset;
                length = this.length;
                offset = 0;
              // Buffer#write(string, offset[, length][, encoding])
              } else if (isFinite(offset)) {
                offset = offset | 0;
                if (isFinite(length)) {
                  length = length | 0;
                  if (encoding === undefined) encoding = 'utf8';
                } else {
                  encoding = length;
                  length = undefined;
                }
              // legacy write(string, encoding, offset, length) - remove in v0.13
              } else {
                throw new Error(
                  'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                )
              }

              var remaining = this.length - offset;
              if (length === undefined || length > remaining) length = remaining;

              if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                throw new RangeError('Attempt to write outside buffer bounds')
              }

              if (!encoding) encoding = 'utf8';

              var loweredCase = false;
              for (;;) {
                switch (encoding) {
                  case 'hex':
                    return hexWrite(this, string, offset, length)

                  case 'utf8':
                  case 'utf-8':
                    return utf8Write(this, string, offset, length)

                  case 'ascii':
                    return asciiWrite(this, string, offset, length)

                  case 'latin1':
                  case 'binary':
                    return latin1Write(this, string, offset, length)

                  case 'base64':
                    // Warning: maxLength not taken into account in base64Write
                    return base64Write(this, string, offset, length)

                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return ucs2Write(this, string, offset, length)

                  default:
                    if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };

            Buffer.prototype.toJSON = function toJSON () {
              return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
              }
            };

            function base64Slice (buf, start, end) {
              if (start === 0 && end === buf.length) {
                return fromByteArray(buf)
              } else {
                return fromByteArray(buf.slice(start, end))
              }
            }

            function utf8Slice (buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];

              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = (firstByte > 0xEF) ? 4
                  : (firstByte > 0xDF) ? 3
                  : (firstByte > 0xBF) ? 2
                  : 1;

                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;

                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }
                      break
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                        if (tempCodePoint > 0x7F) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }

                if (codePoint === null) {
                  // we did not generate a valid codePoint so insert a
                  // replacement char (U+FFFD) and advance only 1 byte
                  codePoint = 0xFFFD;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xFFFF) {
                  // encode to utf16 (surrogate pair dance)
                  codePoint -= 0x10000;
                  res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                  codePoint = 0xDC00 | codePoint & 0x3FF;
                }

                res.push(codePoint);
                i += bytesPerSequence;
              }

              return decodeCodePointsArray(res)
            }

            // Based on http://stackoverflow.com/a/22747272/680742, the browser with
            // the lowest limit is Chrome, with 0x10000 args.
            // We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000;

            function decodeCodePointsArray (codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
              }

              // Decode in chunks to avoid "call stack size exceeded".
              var res = '';
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(
                  String,
                  codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                );
              }
              return res
            }

            function asciiSlice (buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 0x7F);
              }
              return ret
            }

            function latin1Slice (buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);

              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret
            }

            function hexSlice (buf, start, end) {
              var len = buf.length;

              if (!start || start < 0) start = 0;
              if (!end || end < 0 || end > len) end = len;

              var out = '';
              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }
              return out
            }

            function utf16leSlice (buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = '';
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res
            }

            Buffer.prototype.slice = function slice (start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;

              if (start < 0) {
                start += len;
                if (start < 0) start = 0;
              } else if (start > len) {
                start = len;
              }

              if (end < 0) {
                end += len;
                if (end < 0) end = 0;
              } else if (end > len) {
                end = len;
              }

              if (end < start) end = start;

              var newBuf;
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                newBuf = this.subarray(start, end);
                newBuf.__proto__ = Buffer.prototype;
              } else {
                var sliceLen = end - start;
                newBuf = new Buffer(sliceLen, undefined);
                for (var i = 0; i < sliceLen; ++i) {
                  newBuf[i] = this[i + start];
                }
              }

              return newBuf
            };

            /*
             * Need to make sure that buffer isn't trying to write out of bounds.
             */
            function checkOffset (offset, ext, length) {
              if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
              if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
            }

            Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }

              return val
            };

            Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }

              var val = this[offset + --byteLength];
              var mul = 1;
              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }

              return val
            };

            Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              return this[offset]
            };

            Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return this[offset] | (this[offset + 1] << 8)
            };

            Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              return (this[offset] << 8) | this[offset + 1]
            };

            Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);

              return ((this[offset]) |
                  (this[offset + 1] << 8) |
                  (this[offset + 2] << 16)) +
                  (this[offset + 3] * 0x1000000)
            };

            Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (this[offset] * 0x1000000) +
                ((this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                this[offset + 3])
            };

            Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val
            };

            Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) checkOffset(offset, byteLength, this.length);

              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }
              mul *= 0x80;

              if (val >= mul) val -= Math.pow(2, 8 * byteLength);

              return val
            };

            Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80)) return (this[offset])
              return ((0xff - this[offset] + 1) * -1)
            };

            Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset] | (this[offset + 1] << 8);
              return (val & 0x8000) ? val | 0xFFFF0000 : val
            };

            Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | (this[offset] << 8);
              return (val & 0x8000) ? val | 0xFFFF0000 : val
            };

            Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (this[offset]) |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16) |
                (this[offset + 3] << 24)
            };

            Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);

              return (this[offset] << 24) |
                (this[offset + 1] << 16) |
                (this[offset + 2] << 8) |
                (this[offset + 3])
            };

            Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return read(this, offset, true, 23, 4)
            };

            Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 4, this.length);
              return read(this, offset, false, 23, 4)
            };

            Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return read(this, offset, true, 52, 8)
            };

            Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
              if (!noAssert) checkOffset(offset, 8, this.length);
              return read(this, offset, false, 52, 8)
            };

            function checkInt (buf, value, offset, ext, max, min) {
              if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
              if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
              if (offset + ext > buf.length) throw new RangeError('Index out of range')
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var mul = 1;
              var i = 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                checkInt(this, value, offset, byteLength, maxBytes, 0);
              }

              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              this[offset] = (value & 0xff);
              return offset + 1
            };

            function objectWriteUInt16 (buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffff + value + 1;
              for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
                buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
                  (littleEndian ? i : 1 - i) * 8;
              }
            }

            Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff);
                this[offset + 1] = (value >>> 8);
              } else {
                objectWriteUInt16(this, value, offset, true);
              }
              return offset + 2
            };

            Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 8);
                this[offset + 1] = (value & 0xff);
              } else {
                objectWriteUInt16(this, value, offset, false);
              }
              return offset + 2
            };

            function objectWriteUInt32 (buf, value, offset, littleEndian) {
              if (value < 0) value = 0xffffffff + value + 1;
              for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
                buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
              }
            }

            Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset + 3] = (value >>> 24);
                this[offset + 2] = (value >>> 16);
                this[offset + 1] = (value >>> 8);
                this[offset] = (value & 0xff);
              } else {
                objectWriteUInt32(this, value, offset, true);
              }
              return offset + 4
            };

            Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 24);
                this[offset + 1] = (value >>> 16);
                this[offset + 2] = (value >>> 8);
                this[offset + 3] = (value & 0xff);
              } else {
                objectWriteUInt32(this, value, offset, false);
              }
              return offset + 4
            };

            Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);

                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }

              var i = byteLength - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
              }

              return offset + byteLength
            };

            Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
              if (value < 0) value = 0xff + value + 1;
              this[offset] = (value & 0xff);
              return offset + 1
            };

            Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff);
                this[offset + 1] = (value >>> 8);
              } else {
                objectWriteUInt16(this, value, offset, true);
              }
              return offset + 2
            };

            Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 8);
                this[offset + 1] = (value & 0xff);
              } else {
                objectWriteUInt16(this, value, offset, false);
              }
              return offset + 2
            };

            Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff);
                this[offset + 1] = (value >>> 8);
                this[offset + 2] = (value >>> 16);
                this[offset + 3] = (value >>> 24);
              } else {
                objectWriteUInt32(this, value, offset, true);
              }
              return offset + 4
            };

            Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0) value = 0xffffffff + value + 1;
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 24);
                this[offset + 1] = (value >>> 16);
                this[offset + 2] = (value >>> 8);
                this[offset + 3] = (value & 0xff);
              } else {
                objectWriteUInt32(this, value, offset, false);
              }
              return offset + 4
            };

            function checkIEEE754 (buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length) throw new RangeError('Index out of range')
              if (offset < 0) throw new RangeError('Index out of range')
            }

            function writeFloat (buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4);
              }
              write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert)
            };

            Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert)
            };

            function writeDouble (buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8);
              }
              write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert)
            };

            Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert)
            };

            // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy (target, targetStart, start, end) {
              if (!start) start = 0;
              if (!end && end !== 0) end = this.length;
              if (targetStart >= target.length) targetStart = target.length;
              if (!targetStart) targetStart = 0;
              if (end > 0 && end < start) end = start;

              // Copy 0 bytes; we're done
              if (end === start) return 0
              if (target.length === 0 || this.length === 0) return 0

              // Fatal error conditions
              if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds')
              }
              if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
              if (end < 0) throw new RangeError('sourceEnd out of bounds')

              // Are we oob?
              if (end > this.length) end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }

              var len = end - start;
              var i;

              if (this === target && start < targetStart && targetStart < end) {
                // descending copy from end
                for (i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                // ascending copy from start
                for (i = 0; i < len; ++i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(
                  target,
                  this.subarray(start, start + len),
                  targetStart
                );
              }

              return len
            };

            // Usage:
            //    buffer.fill(number[, offset[, end]])
            //    buffer.fill(buffer[, offset[, end]])
            //    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill (val, start, end, encoding) {
              // Handle string cases:
              if (typeof val === 'string') {
                if (typeof start === 'string') {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === 'string') {
                  encoding = end;
                  end = this.length;
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if (code < 256) {
                    val = code;
                  }
                }
                if (encoding !== undefined && typeof encoding !== 'string') {
                  throw new TypeError('encoding must be a string')
                }
                if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                  throw new TypeError('Unknown encoding: ' + encoding)
                }
              } else if (typeof val === 'number') {
                val = val & 255;
              }

              // Invalid ranges are not set to a default, so can range check early.
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError('Out of range index')
              }

              if (end <= start) {
                return this
              }

              start = start >>> 0;
              end = end === undefined ? this.length : end >>> 0;

              if (!val) val = 0;

              var i;
              if (typeof val === 'number') {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = internalIsBuffer(val)
                  ? val
                  : utf8ToBytes(new Buffer(val, encoding).toString());
                var len = bytes.length;
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }

              return this
            };

            // HELPER FUNCTIONS
            // ================

            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

            function base64clean (str) {
              // Node strips out invalid characters like \n and \t from the string, base64-js does not
              str = stringtrim(str).replace(INVALID_BASE64_RE, '');
              // Node converts strings with length < 2 to ''
              if (str.length < 2) return ''
              // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
              while (str.length % 4 !== 0) {
                str = str + '=';
              }
              return str
            }

            function stringtrim (str) {
              if (str.trim) return str.trim()
              return str.replace(/^\s+|\s+$/g, '')
            }

            function toHex (n) {
              if (n < 16) return '0' + n.toString(16)
              return n.toString(16)
            }

            function utf8ToBytes (string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];

              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);

                // is surrogate component
                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                  // last char was a lead
                  if (!leadSurrogate) {
                    // no lead yet
                    if (codePoint > 0xDBFF) {
                      // unexpected trail
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue
                    } else if (i + 1 === length) {
                      // unpaired lead
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      continue
                    }

                    // valid lead
                    leadSurrogate = codePoint;

                    continue
                  }

                  // 2 leads in a row
                  if (codePoint < 0xDC00) {
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    leadSurrogate = codePoint;
                    continue
                  }

                  // valid surrogate pair
                  codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                } else if (leadSurrogate) {
                  // valid bmp char, but last char was a lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                }

                leadSurrogate = null;

                // encode utf8
                if (codePoint < 0x80) {
                  if ((units -= 1) < 0) break
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0) break
                  bytes.push(
                    codePoint >> 0x6 | 0xC0,
                    codePoint & 0x3F | 0x80
                  );
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0) break
                  bytes.push(
                    codePoint >> 0xC | 0xE0,
                    codePoint >> 0x6 & 0x3F | 0x80,
                    codePoint & 0x3F | 0x80
                  );
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0) break
                  bytes.push(
                    codePoint >> 0x12 | 0xF0,
                    codePoint >> 0xC & 0x3F | 0x80,
                    codePoint >> 0x6 & 0x3F | 0x80,
                    codePoint & 0x3F | 0x80
                  );
                } else {
                  throw new Error('Invalid code point')
                }
              }

              return bytes
            }

            function asciiToBytes (str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                // Node's code seems to be doing this and not & 0x7F..
                byteArray.push(str.charCodeAt(i) & 0xFF);
              }
              return byteArray
            }

            function utf16leToBytes (str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0) break

                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }

              return byteArray
            }


            function base64ToBytes (str) {
              return toByteArray(base64clean(str))
            }

            function blitBuffer (src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if ((i + offset >= dst.length) || (i >= src.length)) break
                dst[i + offset] = src[i];
              }
              return i
            }

            function isnan (val) {
              return val !== val // eslint-disable-line no-self-compare
            }


            // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
            // The _isBuffer check is for Safari 5-7 support, because it's missing
            // Object.prototype.constructor. Remove this eventually
            function isBuffer(obj) {
              return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
            }

            function isFastBuffer (obj) {
              return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
            }

            // For Node v0.10 support. Remove this eventually.
            function isSlowBuffer (obj) {
              return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
            }

            // shim for using process in browser
            // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }
            function defaultClearTimeout () {
                throw new Error('clearTimeout has not been defined');
            }
            var cachedSetTimeout = defaultSetTimout;
            var cachedClearTimeout = defaultClearTimeout;
            if (typeof global$1.setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            }
            if (typeof global$1.clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            }

            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch(e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch(e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }



            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while(len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }
            function nextTick(fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            }
            // v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            var title = 'browser';
            var platform = 'browser';
            var browser = true;
            var env = {};
            var argv = [];
            var version = ''; // empty string to avoid regexp issues
            var versions = {};
            var release = {};
            var config = {};

            function noop() {}

            var on = noop;
            var addListener = noop;
            var once = noop;
            var off = noop;
            var removeListener = noop;
            var removeAllListeners = noop;
            var emit = noop;

            function binding(name) {
                throw new Error('process.binding is not supported');
            }

            function cwd () { return '/' }
            function chdir (dir) {
                throw new Error('process.chdir is not supported');
            }function umask() { return 0; }

            // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
            var performance$1 = global$1.performance || {};
            var performanceNow =
              performance$1.now        ||
              performance$1.mozNow     ||
              performance$1.msNow      ||
              performance$1.oNow       ||
              performance$1.webkitNow  ||
              function(){ return (new Date()).getTime() };

            // generate timestamp or delta
            // see http://nodejs.org/api/process.html#process_process_hrtime
            function hrtime(previousTimestamp){
              var clocktime = performanceNow.call(performance$1)*1e-3;
              var seconds = Math.floor(clocktime);
              var nanoseconds = Math.floor((clocktime%1)*1e9);
              if (previousTimestamp) {
                seconds = seconds - previousTimestamp[0];
                nanoseconds = nanoseconds - previousTimestamp[1];
                if (nanoseconds<0) {
                  seconds--;
                  nanoseconds += 1e9;
                }
              }
              return [seconds,nanoseconds]
            }

            var startTime = new Date();
            function uptime() {
              var currentTime = new Date();
              var dif = currentTime - startTime;
              return dif / 1000;
            }

            var process = {
              nextTick: nextTick,
              title: title,
              browser: browser,
              env: env,
              argv: argv,
              version: version,
              versions: versions,
              on: on,
              addListener: addListener,
              once: once,
              off: off,
              removeListener: removeListener,
              removeAllListeners: removeAllListeners,
              emit: emit,
              binding: binding,
              cwd: cwd,
              chdir: chdir,
              umask: umask,
              hrtime: hrtime,
              platform: platform,
              release: release,
              config: config,
              uptime: uptime
            };

            var hasFetch = isFunction(global$1.fetch) && isFunction(global$1.ReadableStream);

            var _blobConstructor;
            function blobConstructor() {
              if (typeof _blobConstructor !== 'undefined') {
                return _blobConstructor;
              }
              try {
                new global$1.Blob([new ArrayBuffer(1)]);
                _blobConstructor = true;
              } catch (e) {
                _blobConstructor = false;
              }
              return _blobConstructor
            }
            var xhr;

            function checkTypeSupport(type) {
              if (!xhr) {
                xhr = new global$1.XMLHttpRequest();
                // If location.host is empty, e.g. if this page/worker was loaded
                // from a Blob, then use example.com to avoid an error
                xhr.open('GET', global$1.location.host ? '/' : 'https://example.com');
              }
              try {
                xhr.responseType = type;
                return xhr.responseType === type
              } catch (e) {
                return false
              }

            }

            // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
            // Safari 7.1 appears to have fixed this bug.
            var haveArrayBuffer = typeof global$1.ArrayBuffer !== 'undefined';
            var haveSlice = haveArrayBuffer && isFunction(global$1.ArrayBuffer.prototype.slice);

            var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer');
              // These next two tests unavoidably show warnings in Chrome. Since fetch will always
              // be used if it's available, just return false for these to avoid the warnings.
            var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
            var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer &&
              checkTypeSupport('moz-chunked-arraybuffer');
            var overrideMimeType = isFunction(xhr.overrideMimeType);
            var vbArray = isFunction(global$1.VBArray);

            function isFunction(value) {
              return typeof value === 'function'
            }

            xhr = null; // Help gc

            var inherits;
            if (typeof Object.create === 'function'){
              inherits = function inherits(ctor, superCtor) {
                // implementation from standard node.js 'util' module
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                  constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
              };
            } else {
              inherits = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function () {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
              };
            }
            var inherits$1 = inherits;

            var formatRegExp = /%[sdj%]/g;
            function format(f) {
              if (!isString(f)) {
                var objects = [];
                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }
                return objects.join(' ');
              }

              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f).replace(formatRegExp, function(x) {
                if (x === '%%') return '%';
                if (i >= len) return x;
                switch (x) {
                  case '%s': return String(args[i++]);
                  case '%d': return Number(args[i++]);
                  case '%j':
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return '[Circular]';
                    }
                  default:
                    return x;
                }
              });
              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject(x)) {
                  str += ' ' + x;
                } else {
                  str += ' ' + inspect(x);
                }
              }
              return str;
            }

            // Mark that a method should not be used.
            // Returns a modified function which warns once by default.
            // If --no-deprecation is set, then it is a no-op.
            function deprecate(fn, msg) {
              // Allow for deprecating things in the process of starting up.
              if (isUndefined(global$1.process)) {
                return function() {
                  return deprecate(fn, msg).apply(this, arguments);
                };
              }

              if (process.noDeprecation === true) {
                return fn;
              }

              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (process.throwDeprecation) {
                    throw new Error(msg);
                  } else if (process.traceDeprecation) {
                    console.trace(msg);
                  } else {
                    console.error(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }

              return deprecated;
            }

            var debugs = {};
            var debugEnviron;
            function debuglog(set) {
              if (isUndefined(debugEnviron))
                debugEnviron = process.env.NODE_DEBUG || '';
              set = set.toUpperCase();
              if (!debugs[set]) {
                if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                  var pid = 0;
                  debugs[set] = function() {
                    var msg = format.apply(null, arguments);
                    console.error('%s %d: %s', set, pid, msg);
                  };
                } else {
                  debugs[set] = function() {};
                }
              }
              return debugs[set];
            }

            /**
             * Echos the value of a value. Trys to print the value out
             * in the best way possible given the different types.
             *
             * @param {Object} obj The object to print out.
             * @param {Object} opts Optional options object that alters the output.
             */
            /* legacy: obj, showHidden, depth, colors*/
            function inspect(obj, opts) {
              // default options
              var ctx = {
                seen: [],
                stylize: stylizeNoColor
              };
              // legacy...
              if (arguments.length >= 3) ctx.depth = arguments[2];
              if (arguments.length >= 4) ctx.colors = arguments[3];
              if (isBoolean(opts)) {
                // legacy...
                ctx.showHidden = opts;
              } else if (opts) {
                // got an "options" object
                _extend(ctx, opts);
              }
              // set default options
              if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
              if (isUndefined(ctx.depth)) ctx.depth = 2;
              if (isUndefined(ctx.colors)) ctx.colors = false;
              if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
              if (ctx.colors) ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            }

            // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
            inspect.colors = {
              'bold' : [1, 22],
              'italic' : [3, 23],
              'underline' : [4, 24],
              'inverse' : [7, 27],
              'white' : [37, 39],
              'grey' : [90, 39],
              'black' : [30, 39],
              'blue' : [34, 39],
              'cyan' : [36, 39],
              'green' : [32, 39],
              'magenta' : [35, 39],
              'red' : [31, 39],
              'yellow' : [33, 39]
            };

            // Don't use 'blue' not visible on cmd.exe
            inspect.styles = {
              'special': 'cyan',
              'number': 'yellow',
              'boolean': 'yellow',
              'undefined': 'grey',
              'null': 'bold',
              'string': 'green',
              'date': 'magenta',
              // "name": intentionally not styling
              'regexp': 'red'
            };


            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];

              if (style) {
                return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                       '\u001b[' + inspect.colors[style][1] + 'm';
              } else {
                return str;
              }
            }


            function stylizeNoColor(str, styleType) {
              return str;
            }


            function arrayToHash(array) {
              var hash = {};

              array.forEach(function(val, idx) {
                hash[val] = true;
              });

              return hash;
            }


            function formatValue(ctx, value, recurseTimes) {
              // Provide a hook for user-specified inspect functions.
              // Check that value is an object with an inspect function on it
              if (ctx.customInspect &&
                  value &&
                  isFunction$1(value.inspect) &&
                  // Filter out the util module, it's inspect function is special
                  value.inspect !== inspect &&
                  // Also filter out any prototype objects using the circular check.
                  !(value.constructor && value.constructor.prototype === value)) {
                var ret = value.inspect(recurseTimes, ctx);
                if (!isString(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }
                return ret;
              }

              // Primitive types cannot have properties
              var primitive = formatPrimitive(ctx, value);
              if (primitive) {
                return primitive;
              }

              // Look up the keys of the object.
              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);

              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              }

              // IE doesn't make error fields non-enumerable
              // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
              if (isError(value)
                  && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                return formatError(value);
              }

              // Some type of object without properties can be shortcutted.
              if (keys.length === 0) {
                if (isFunction$1(value)) {
                  var name = value.name ? ': ' + value.name : '';
                  return ctx.stylize('[Function' + name + ']', 'special');
                }
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                }
                if (isDate(value)) {
                  return ctx.stylize(Date.prototype.toString.call(value), 'date');
                }
                if (isError(value)) {
                  return formatError(value);
                }
              }

              var base = '', array = false, braces = ['{', '}'];

              // Make Array say that they are Array
              if (isArray$1(value)) {
                array = true;
                braces = ['[', ']'];
              }

              // Make functions say that they are functions
              if (isFunction$1(value)) {
                var n = value.name ? ': ' + value.name : '';
                base = ' [Function' + n + ']';
              }

              // Make RegExps say that they are RegExps
              if (isRegExp(value)) {
                base = ' ' + RegExp.prototype.toString.call(value);
              }

              // Make dates with properties first say the date
              if (isDate(value)) {
                base = ' ' + Date.prototype.toUTCString.call(value);
              }

              // Make error with message first say the error
              if (isError(value)) {
                base = ' ' + formatError(value);
              }

              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }

              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                } else {
                  return ctx.stylize('[Object]', 'special');
                }
              }

              ctx.seen.push(value);

              var output;
              if (array) {
                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
              } else {
                output = keys.map(function(key) {
                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                });
              }

              ctx.seen.pop();

              return reduceToSingleString(output, base, braces);
            }


            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize('undefined', 'undefined');
              if (isString(value)) {
                var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                         .replace(/'/g, "\\'")
                                                         .replace(/\\"/g, '"') + '\'';
                return ctx.stylize(simple, 'string');
              }
              if (isNumber(value))
                return ctx.stylize('' + value, 'number');
              if (isBoolean(value))
                return ctx.stylize('' + value, 'boolean');
              // For some reason typeof null is "object", so special case here.
              if (isNull(value))
                return ctx.stylize('null', 'null');
            }


            function formatError(value) {
              return '[' + Error.prototype.toString.call(value) + ']';
            }


            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];
              for (var i = 0, l = value.length; i < l; ++i) {
                if (hasOwnProperty(value, String(i))) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                      String(i), true));
                } else {
                  output.push('');
                }
              }
              keys.forEach(function(key) {
                if (!key.match(/^\d+$/)) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                      key, true));
                }
              });
              return output;
            }


            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
              var name, str, desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize('[Getter/Setter]', 'special');
                } else {
                  str = ctx.stylize('[Getter]', 'special');
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize('[Setter]', 'special');
                }
              }
              if (!hasOwnProperty(visibleKeys, key)) {
                name = '[' + key + ']';
              }
              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }
                  if (str.indexOf('\n') > -1) {
                    if (array) {
                      str = str.split('\n').map(function(line) {
                        return '  ' + line;
                      }).join('\n').substr(2);
                    } else {
                      str = '\n' + str.split('\n').map(function(line) {
                        return '   ' + line;
                      }).join('\n');
                    }
                  }
                } else {
                  str = ctx.stylize('[Circular]', 'special');
                }
              }
              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }
                name = JSON.stringify('' + key);
                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, 'name');
                } else {
                  name = name.replace(/'/g, "\\'")
                             .replace(/\\"/g, '"')
                             .replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, 'string');
                }
              }

              return name + ': ' + str;
            }


            function reduceToSingleString(output, base, braces) {
              var length = output.reduce(function(prev, cur) {
                if (cur.indexOf('\n') >= 0) ;
                return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
              }, 0);

              if (length > 60) {
                return braces[0] +
                       (base === '' ? '' : base + '\n ') +
                       ' ' +
                       output.join(',\n  ') +
                       ' ' +
                       braces[1];
              }

              return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
            }


            // NOTE: These type checking functions intentionally don't use `instanceof`
            // because it is fragile and can be easily faked with `Object.create()`.
            function isArray$1(ar) {
              return Array.isArray(ar);
            }

            function isBoolean(arg) {
              return typeof arg === 'boolean';
            }

            function isNull(arg) {
              return arg === null;
            }

            function isNullOrUndefined(arg) {
              return arg == null;
            }

            function isNumber(arg) {
              return typeof arg === 'number';
            }

            function isString(arg) {
              return typeof arg === 'string';
            }

            function isSymbol(arg) {
              return typeof arg === 'symbol';
            }

            function isUndefined(arg) {
              return arg === void 0;
            }

            function isRegExp(re) {
              return isObject(re) && objectToString(re) === '[object RegExp]';
            }

            function isObject(arg) {
              return typeof arg === 'object' && arg !== null;
            }

            function isDate(d) {
              return isObject(d) && objectToString(d) === '[object Date]';
            }

            function isError(e) {
              return isObject(e) &&
                  (objectToString(e) === '[object Error]' || e instanceof Error);
            }

            function isFunction$1(arg) {
              return typeof arg === 'function';
            }

            function isPrimitive(arg) {
              return arg === null ||
                     typeof arg === 'boolean' ||
                     typeof arg === 'number' ||
                     typeof arg === 'string' ||
                     typeof arg === 'symbol' ||  // ES6 symbol
                     typeof arg === 'undefined';
            }

            function isBuffer$1(maybeBuf) {
              return isBuffer(maybeBuf);
            }

            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }


            function pad(n) {
              return n < 10 ? '0' + n.toString(10) : n.toString(10);
            }


            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                          'Oct', 'Nov', 'Dec'];

            // 26 Feb 16:19:34
            function timestamp() {
              var d = new Date();
              var time = [pad(d.getHours()),
                          pad(d.getMinutes()),
                          pad(d.getSeconds())].join(':');
              return [d.getDate(), months[d.getMonth()], time].join(' ');
            }


            // log is just a thin wrapper to console.log that prepends a timestamp
            function log() {
              console.log('%s - %s', timestamp(), format.apply(null, arguments));
            }

            function _extend(origin, add) {
              // Don't do anything if add isn't an object
              if (!add || !isObject(add)) return origin;

              var keys = Object.keys(add);
              var i = keys.length;
              while (i--) {
                origin[keys[i]] = add[keys[i]];
              }
              return origin;
            }
            function hasOwnProperty(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }

            var util = {
              inherits: inherits$1,
              _extend: _extend,
              log: log,
              isBuffer: isBuffer$1,
              isPrimitive: isPrimitive,
              isFunction: isFunction$1,
              isError: isError,
              isDate: isDate,
              isObject: isObject,
              isRegExp: isRegExp,
              isUndefined: isUndefined,
              isSymbol: isSymbol,
              isString: isString,
              isNumber: isNumber,
              isNullOrUndefined: isNullOrUndefined,
              isNull: isNull,
              isBoolean: isBoolean,
              isArray: isArray$1,
              inspect: inspect,
              deprecate: deprecate,
              format: format,
              debuglog: debuglog
            };

            var domain;

            // This constructor is used to store event handlers. Instantiating this is
            // faster than explicitly calling `Object.create(null)` to get a "clean" empty
            // object (tested with v8 v4.9).
            function EventHandlers() {}
            EventHandlers.prototype = Object.create(null);

            function EventEmitter() {
              EventEmitter.init.call(this);
            }

            // nodejs oddity
            // require('events') === require('events').EventEmitter
            EventEmitter.EventEmitter = EventEmitter;

            EventEmitter.usingDomains = false;

            EventEmitter.prototype.domain = undefined;
            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._maxListeners = undefined;

            // By default EventEmitters will print a warning if more than 10 listeners are
            // added to it. This is a useful default which helps finding memory leaks.
            EventEmitter.defaultMaxListeners = 10;

            EventEmitter.init = function() {
              this.domain = null;
              if (EventEmitter.usingDomains) {
                // if there is an active domain, then attach to it.
                if (domain.active ) ;
              }

              if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
                this._events = new EventHandlers();
                this._eventsCount = 0;
              }

              this._maxListeners = this._maxListeners || undefined;
            };

            // Obviously not all Emitters should be limited to 10. This function allows
            // that to be increased. Set to zero for unlimited.
            EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
              if (typeof n !== 'number' || n < 0 || isNaN(n))
                throw new TypeError('"n" argument must be a positive number');
              this._maxListeners = n;
              return this;
            };

            function $getMaxListeners(that) {
              if (that._maxListeners === undefined)
                return EventEmitter.defaultMaxListeners;
              return that._maxListeners;
            }

            EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
              return $getMaxListeners(this);
            };

            // These standalone emit* functions are used to optimize calling of event
            // handlers for fast cases because emit() itself often has a variable number of
            // arguments and can be deoptimized because of that. These functions always have
            // the same number of arguments and thus do not get deoptimized, so the code
            // inside them can execute faster.
            function emitNone(handler, isFn, self) {
              if (isFn)
                handler.call(self);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].call(self);
              }
            }
            function emitOne(handler, isFn, self, arg1) {
              if (isFn)
                handler.call(self, arg1);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].call(self, arg1);
              }
            }
            function emitTwo(handler, isFn, self, arg1, arg2) {
              if (isFn)
                handler.call(self, arg1, arg2);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].call(self, arg1, arg2);
              }
            }
            function emitThree(handler, isFn, self, arg1, arg2, arg3) {
              if (isFn)
                handler.call(self, arg1, arg2, arg3);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].call(self, arg1, arg2, arg3);
              }
            }

            function emitMany(handler, isFn, self, args) {
              if (isFn)
                handler.apply(self, args);
              else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                  listeners[i].apply(self, args);
              }
            }

            EventEmitter.prototype.emit = function emit(type) {
              var er, handler, len, args, i, events, domain;
              var doError = (type === 'error');

              events = this._events;
              if (events)
                doError = (doError && events.error == null);
              else if (!doError)
                return false;

              domain = this.domain;

              // If there is no 'error' event listener then throw.
              if (doError) {
                er = arguments[1];
                if (domain) {
                  if (!er)
                    er = new Error('Uncaught, unspecified "error" event');
                  er.domainEmitter = this;
                  er.domain = domain;
                  er.domainThrown = false;
                  domain.emit('error', er);
                } else if (er instanceof Error) {
                  throw er; // Unhandled 'error' event
                } else {
                  // At least give some kind of context to the user
                  var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
                  err.context = er;
                  throw err;
                }
                return false;
              }

              handler = events[type];

              if (!handler)
                return false;

              var isFn = typeof handler === 'function';
              len = arguments.length;
              switch (len) {
                // fast cases
                case 1:
                  emitNone(handler, isFn, this);
                  break;
                case 2:
                  emitOne(handler, isFn, this, arguments[1]);
                  break;
                case 3:
                  emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                  break;
                case 4:
                  emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                  break;
                // slower
                default:
                  args = new Array(len - 1);
                  for (i = 1; i < len; i++)
                    args[i - 1] = arguments[i];
                  emitMany(handler, isFn, this, args);
              }

              return true;
            };

            function _addListener(target, type, listener, prepend) {
              var m;
              var events;
              var existing;

              if (typeof listener !== 'function')
                throw new TypeError('"listener" argument must be a function');

              events = target._events;
              if (!events) {
                events = target._events = new EventHandlers();
                target._eventsCount = 0;
              } else {
                // To avoid recursion in the case that type === "newListener"! Before
                // adding it to the listeners, first emit "newListener".
                if (events.newListener) {
                  target.emit('newListener', type,
                              listener.listener ? listener.listener : listener);

                  // Re-assign `events` because a newListener handler could have caused the
                  // this._events to be assigned to a new object
                  events = target._events;
                }
                existing = events[type];
              }

              if (!existing) {
                // Optimize the case of one listener. Don't need the extra array object.
                existing = events[type] = listener;
                ++target._eventsCount;
              } else {
                if (typeof existing === 'function') {
                  // Adding the second element, need to change to array.
                  existing = events[type] = prepend ? [listener, existing] :
                                                      [existing, listener];
                } else {
                  // If we've already got an array, just append.
                  if (prepend) {
                    existing.unshift(listener);
                  } else {
                    existing.push(listener);
                  }
                }

                // Check for listener leak
                if (!existing.warned) {
                  m = $getMaxListeners(target);
                  if (m && m > 0 && existing.length > m) {
                    existing.warned = true;
                    var w = new Error('Possible EventEmitter memory leak detected. ' +
                                        existing.length + ' ' + type + ' listeners added. ' +
                                        'Use emitter.setMaxListeners() to increase limit');
                    w.name = 'MaxListenersExceededWarning';
                    w.emitter = target;
                    w.type = type;
                    w.count = existing.length;
                    emitWarning(w);
                  }
                }
              }

              return target;
            }
            function emitWarning(e) {
              typeof console.warn === 'function' ? console.warn(e) : console.log(e);
            }
            EventEmitter.prototype.addListener = function addListener(type, listener) {
              return _addListener(this, type, listener, false);
            };

            EventEmitter.prototype.on = EventEmitter.prototype.addListener;

            EventEmitter.prototype.prependListener =
                function prependListener(type, listener) {
                  return _addListener(this, type, listener, true);
                };

            function _onceWrap(target, type, listener) {
              var fired = false;
              function g() {
                target.removeListener(type, g);
                if (!fired) {
                  fired = true;
                  listener.apply(target, arguments);
                }
              }
              g.listener = listener;
              return g;
            }

            EventEmitter.prototype.once = function once(type, listener) {
              if (typeof listener !== 'function')
                throw new TypeError('"listener" argument must be a function');
              this.on(type, _onceWrap(this, type, listener));
              return this;
            };

            EventEmitter.prototype.prependOnceListener =
                function prependOnceListener(type, listener) {
                  if (typeof listener !== 'function')
                    throw new TypeError('"listener" argument must be a function');
                  this.prependListener(type, _onceWrap(this, type, listener));
                  return this;
                };

            // emits a 'removeListener' event iff the listener was removed
            EventEmitter.prototype.removeListener =
                function removeListener(type, listener) {
                  var list, events, position, i, originalListener;

                  if (typeof listener !== 'function')
                    throw new TypeError('"listener" argument must be a function');

                  events = this._events;
                  if (!events)
                    return this;

                  list = events[type];
                  if (!list)
                    return this;

                  if (list === listener || (list.listener && list.listener === listener)) {
                    if (--this._eventsCount === 0)
                      this._events = new EventHandlers();
                    else {
                      delete events[type];
                      if (events.removeListener)
                        this.emit('removeListener', type, list.listener || listener);
                    }
                  } else if (typeof list !== 'function') {
                    position = -1;

                    for (i = list.length; i-- > 0;) {
                      if (list[i] === listener ||
                          (list[i].listener && list[i].listener === listener)) {
                        originalListener = list[i].listener;
                        position = i;
                        break;
                      }
                    }

                    if (position < 0)
                      return this;

                    if (list.length === 1) {
                      list[0] = undefined;
                      if (--this._eventsCount === 0) {
                        this._events = new EventHandlers();
                        return this;
                      } else {
                        delete events[type];
                      }
                    } else {
                      spliceOne(list, position);
                    }

                    if (events.removeListener)
                      this.emit('removeListener', type, originalListener || listener);
                  }

                  return this;
                };

            EventEmitter.prototype.removeAllListeners =
                function removeAllListeners(type) {
                  var listeners, events;

                  events = this._events;
                  if (!events)
                    return this;

                  // not listening for removeListener, no need to emit
                  if (!events.removeListener) {
                    if (arguments.length === 0) {
                      this._events = new EventHandlers();
                      this._eventsCount = 0;
                    } else if (events[type]) {
                      if (--this._eventsCount === 0)
                        this._events = new EventHandlers();
                      else
                        delete events[type];
                    }
                    return this;
                  }

                  // emit removeListener for all listeners on all events
                  if (arguments.length === 0) {
                    var keys = Object.keys(events);
                    for (var i = 0, key; i < keys.length; ++i) {
                      key = keys[i];
                      if (key === 'removeListener') continue;
                      this.removeAllListeners(key);
                    }
                    this.removeAllListeners('removeListener');
                    this._events = new EventHandlers();
                    this._eventsCount = 0;
                    return this;
                  }

                  listeners = events[type];

                  if (typeof listeners === 'function') {
                    this.removeListener(type, listeners);
                  } else if (listeners) {
                    // LIFO order
                    do {
                      this.removeListener(type, listeners[listeners.length - 1]);
                    } while (listeners[0]);
                  }

                  return this;
                };

            EventEmitter.prototype.listeners = function listeners(type) {
              var evlistener;
              var ret;
              var events = this._events;

              if (!events)
                ret = [];
              else {
                evlistener = events[type];
                if (!evlistener)
                  ret = [];
                else if (typeof evlistener === 'function')
                  ret = [evlistener.listener || evlistener];
                else
                  ret = unwrapListeners(evlistener);
              }

              return ret;
            };

            EventEmitter.listenerCount = function(emitter, type) {
              if (typeof emitter.listenerCount === 'function') {
                return emitter.listenerCount(type);
              } else {
                return listenerCount.call(emitter, type);
              }
            };

            EventEmitter.prototype.listenerCount = listenerCount;
            function listenerCount(type) {
              var events = this._events;

              if (events) {
                var evlistener = events[type];

                if (typeof evlistener === 'function') {
                  return 1;
                } else if (evlistener) {
                  return evlistener.length;
                }
              }

              return 0;
            }

            EventEmitter.prototype.eventNames = function eventNames() {
              return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
            };

            // About 1.5x faster than the two-arg version of Array#splice().
            function spliceOne(list, index) {
              for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
                list[i] = list[k];
              list.pop();
            }

            function arrayClone(arr, i) {
              var copy = new Array(i);
              while (i--)
                copy[i] = arr[i];
              return copy;
            }

            function unwrapListeners(arr) {
              var ret = new Array(arr.length);
              for (var i = 0; i < ret.length; ++i) {
                ret[i] = arr[i].listener || arr[i];
              }
              return ret;
            }

            var events = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        'default': EventEmitter,
                        EventEmitter: EventEmitter
            });

            function BufferList() {
              this.head = null;
              this.tail = null;
              this.length = 0;
            }

            BufferList.prototype.push = function (v) {
              var entry = { data: v, next: null };
              if (this.length > 0) this.tail.next = entry;else this.head = entry;
              this.tail = entry;
              ++this.length;
            };

            BufferList.prototype.unshift = function (v) {
              var entry = { data: v, next: this.head };
              if (this.length === 0) this.tail = entry;
              this.head = entry;
              ++this.length;
            };

            BufferList.prototype.shift = function () {
              if (this.length === 0) return;
              var ret = this.head.data;
              if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
              --this.length;
              return ret;
            };

            BufferList.prototype.clear = function () {
              this.head = this.tail = null;
              this.length = 0;
            };

            BufferList.prototype.join = function (s) {
              if (this.length === 0) return '';
              var p = this.head;
              var ret = '' + p.data;
              while (p = p.next) {
                ret += s + p.data;
              }return ret;
            };

            BufferList.prototype.concat = function (n) {
              if (this.length === 0) return Buffer.alloc(0);
              if (this.length === 1) return this.head.data;
              var ret = Buffer.allocUnsafe(n >>> 0);
              var p = this.head;
              var i = 0;
              while (p) {
                p.data.copy(ret, i);
                i += p.data.length;
                p = p.next;
              }
              return ret;
            };

            // Copyright Joyent, Inc. and other Node contributors.
            var isBufferEncoding = Buffer.isEncoding
              || function(encoding) {
                   switch (encoding && encoding.toLowerCase()) {
                     case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
                     default: return false;
                   }
                 };


            function assertEncoding(encoding) {
              if (encoding && !isBufferEncoding(encoding)) {
                throw new Error('Unknown encoding: ' + encoding);
              }
            }

            // StringDecoder provides an interface for efficiently splitting a series of
            // buffers into a series of JS strings without breaking apart multi-byte
            // characters. CESU-8 is handled as part of the UTF-8 encoding.
            //
            // @TODO Handling all encodings inside a single object makes it very difficult
            // to reason about this code, so it should be split up in the future.
            // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
            // points as used by CESU-8.
            function StringDecoder(encoding) {
              this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
              assertEncoding(encoding);
              switch (this.encoding) {
                case 'utf8':
                  // CESU-8 represents each of Surrogate Pair by 3-bytes
                  this.surrogateSize = 3;
                  break;
                case 'ucs2':
                case 'utf16le':
                  // UTF-16 represents each of Surrogate Pair by 2-bytes
                  this.surrogateSize = 2;
                  this.detectIncompleteChar = utf16DetectIncompleteChar;
                  break;
                case 'base64':
                  // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
                  this.surrogateSize = 3;
                  this.detectIncompleteChar = base64DetectIncompleteChar;
                  break;
                default:
                  this.write = passThroughWrite;
                  return;
              }

              // Enough space to store all bytes of a single character. UTF-8 needs 4
              // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
              this.charBuffer = new Buffer(6);
              // Number of bytes received for the current incomplete multi-byte character.
              this.charReceived = 0;
              // Number of bytes expected for the current incomplete multi-byte character.
              this.charLength = 0;
            }

            // write decodes the given buffer and returns it as JS string that is
            // guaranteed to not contain any partial multi-byte characters. Any partial
            // character found at the end of the buffer is buffered up, and will be
            // returned when calling write again with the remaining bytes.
            //
            // Note: Converting a Buffer containing an orphan surrogate to a String
            // currently works, but converting a String to a Buffer (via `new Buffer`, or
            // Buffer#write) will replace incomplete surrogates with the unicode
            // replacement character. See https://codereview.chromium.org/121173009/ .
            StringDecoder.prototype.write = function(buffer) {
              var charStr = '';
              // if our last write ended with an incomplete multibyte character
              while (this.charLength) {
                // determine how many remaining bytes this buffer has to offer for this char
                var available = (buffer.length >= this.charLength - this.charReceived) ?
                    this.charLength - this.charReceived :
                    buffer.length;

                // add the new bytes to the char buffer
                buffer.copy(this.charBuffer, this.charReceived, 0, available);
                this.charReceived += available;

                if (this.charReceived < this.charLength) {
                  // still not enough chars in this buffer? wait for more ...
                  return '';
                }

                // remove bytes belonging to the current character from the buffer
                buffer = buffer.slice(available, buffer.length);

                // get the character that was split
                charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

                // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
                var charCode = charStr.charCodeAt(charStr.length - 1);
                if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                  this.charLength += this.surrogateSize;
                  charStr = '';
                  continue;
                }
                this.charReceived = this.charLength = 0;

                // if there are no more bytes in this buffer, just emit our char
                if (buffer.length === 0) {
                  return charStr;
                }
                break;
              }

              // determine and set charLength / charReceived
              this.detectIncompleteChar(buffer);

              var end = buffer.length;
              if (this.charLength) {
                // buffer the incomplete character bytes we got
                buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
                end -= this.charReceived;
              }

              charStr += buffer.toString(this.encoding, 0, end);

              var end = charStr.length - 1;
              var charCode = charStr.charCodeAt(end);
              // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
              if (charCode >= 0xD800 && charCode <= 0xDBFF) {
                var size = this.surrogateSize;
                this.charLength += size;
                this.charReceived += size;
                this.charBuffer.copy(this.charBuffer, size, 0, size);
                buffer.copy(this.charBuffer, 0, 0, size);
                return charStr.substring(0, end);
              }

              // or just emit the charStr
              return charStr;
            };

            // detectIncompleteChar determines if there is an incomplete UTF-8 character at
            // the end of the given buffer. If so, it sets this.charLength to the byte
            // length that character, and sets this.charReceived to the number of bytes
            // that are available for this character.
            StringDecoder.prototype.detectIncompleteChar = function(buffer) {
              // determine how many bytes we have to check at the end of this buffer
              var i = (buffer.length >= 3) ? 3 : buffer.length;

              // Figure out if one of the last i bytes of our buffer announces an
              // incomplete char.
              for (; i > 0; i--) {
                var c = buffer[buffer.length - i];

                // See http://en.wikipedia.org/wiki/UTF-8#Description

                // 110XXXXX
                if (i == 1 && c >> 5 == 0x06) {
                  this.charLength = 2;
                  break;
                }

                // 1110XXXX
                if (i <= 2 && c >> 4 == 0x0E) {
                  this.charLength = 3;
                  break;
                }

                // 11110XXX
                if (i <= 3 && c >> 3 == 0x1E) {
                  this.charLength = 4;
                  break;
                }
              }
              this.charReceived = i;
            };

            StringDecoder.prototype.end = function(buffer) {
              var res = '';
              if (buffer && buffer.length)
                res = this.write(buffer);

              if (this.charReceived) {
                var cr = this.charReceived;
                var buf = this.charBuffer;
                var enc = this.encoding;
                res += buf.slice(0, cr).toString(enc);
              }

              return res;
            };

            function passThroughWrite(buffer) {
              return buffer.toString(this.encoding);
            }

            function utf16DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 2;
              this.charLength = this.charReceived ? 2 : 0;
            }

            function base64DetectIncompleteChar(buffer) {
              this.charReceived = buffer.length % 3;
              this.charLength = this.charReceived ? 3 : 0;
            }

            Readable.ReadableState = ReadableState;

            var debug = debuglog('stream');
            inherits$1(Readable, EventEmitter);

            function prependListener(emitter, event, fn) {
              // Sadly this is not cacheable as some libraries bundle their own
              // event emitter implementation with them.
              if (typeof emitter.prependListener === 'function') {
                return emitter.prependListener(event, fn);
              } else {
                // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.
                if (!emitter._events || !emitter._events[event])
                  emitter.on(event, fn);
                else if (Array.isArray(emitter._events[event]))
                  emitter._events[event].unshift(fn);
                else
                  emitter._events[event] = [fn, emitter._events[event]];
              }
            }
            function listenerCount$1 (emitter, type) {
              return emitter.listeners(type).length;
            }
            function ReadableState(options, stream) {

              options = options || {};

              // object stream flag. Used to make read(n) ignore n and to
              // make all the buffer merging and length checks go away
              this.objectMode = !!options.objectMode;

              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

              // the point at which it stops calling _read() to fill the buffer
              // Note: 0 is a valid value, means "don't call _read preemptively ever"
              var hwm = options.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

              // cast to ints.
              this.highWaterMark = ~ ~this.highWaterMark;

              // A linked list is used to store data chunks instead of an array because the
              // linked list can remove elements from the beginning faster than
              // array.shift()
              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false;

              // a flag to be able to tell if the onwrite cb is called immediately,
              // or on a later tick.  We set this to true at first, because any
              // actions that shouldn't happen until "later" should generally also
              // not happen before the first write call.
              this.sync = true;

              // whenever we return null, then we set a flag to say
              // that we're awaiting a 'readable' event emission.
              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false;

              // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.
              this.defaultEncoding = options.defaultEncoding || 'utf8';

              // when piping, we only care about 'readable' events that happen
              // after read()ing all the bytes and not getting any pushback.
              this.ranOut = false;

              // the number of writers that are awaiting a drain event in .pipe()s
              this.awaitDrain = 0;

              // if true, a maybeReadMore has been scheduled
              this.readingMore = false;

              this.decoder = null;
              this.encoding = null;
              if (options.encoding) {
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
              }
            }
            function Readable(options) {

              if (!(this instanceof Readable)) return new Readable(options);

              this._readableState = new ReadableState(options, this);

              // legacy
              this.readable = true;

              if (options && typeof options.read === 'function') this._read = options.read;

              EventEmitter.call(this);
            }

            // Manually shove something into the read() buffer.
            // This returns true if the highWaterMark has not been hit yet,
            // similar to how Writable.write() returns true if you should
            // write() some more.
            Readable.prototype.push = function (chunk, encoding) {
              var state = this._readableState;

              if (!state.objectMode && typeof chunk === 'string') {
                encoding = encoding || state.defaultEncoding;
                if (encoding !== state.encoding) {
                  chunk = Buffer.from(chunk, encoding);
                  encoding = '';
                }
              }

              return readableAddChunk(this, state, chunk, encoding, false);
            };

            // Unshift should *always* be something directly out of read()
            Readable.prototype.unshift = function (chunk) {
              var state = this._readableState;
              return readableAddChunk(this, state, chunk, '', true);
            };

            Readable.prototype.isPaused = function () {
              return this._readableState.flowing === false;
            };

            function readableAddChunk(stream, state, chunk, encoding, addToFront) {
              var er = chunkInvalid(state, chunk);
              if (er) {
                stream.emit('error', er);
              } else if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else if (state.objectMode || chunk && chunk.length > 0) {
                if (state.ended && !addToFront) {
                  var e = new Error('stream.push() after EOF');
                  stream.emit('error', e);
                } else if (state.endEmitted && addToFront) {
                  var _e = new Error('stream.unshift() after end event');
                  stream.emit('error', _e);
                } else {
                  var skipAdd;
                  if (state.decoder && !addToFront && !encoding) {
                    chunk = state.decoder.write(chunk);
                    skipAdd = !state.objectMode && chunk.length === 0;
                  }

                  if (!addToFront) state.reading = false;

                  // Don't add to the buffer if we've decoded to an empty string chunk and
                  // we're not in object mode
                  if (!skipAdd) {
                    // if we want the data now, just emit it.
                    if (state.flowing && state.length === 0 && !state.sync) {
                      stream.emit('data', chunk);
                      stream.read(0);
                    } else {
                      // update the buffer info.
                      state.length += state.objectMode ? 1 : chunk.length;
                      if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

                      if (state.needReadable) emitReadable(stream);
                    }
                  }

                  maybeReadMore(stream, state);
                }
              } else if (!addToFront) {
                state.reading = false;
              }

              return needMoreData(state);
            }

            // if it's past the high water mark, we can push in some more.
            // Also, if we have no data yet, we can stand some
            // more bytes.  This is to work around cases where hwm=0,
            // such as the repl.  Also, if the push() triggered a
            // readable event, and the user called read(largeNumber) such that
            // needReadable was set, then we ought to push more, so that another
            // 'readable' event will be triggered.
            function needMoreData(state) {
              return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            }

            // backwards compatibility.
            Readable.prototype.setEncoding = function (enc) {
              this._readableState.decoder = new StringDecoder(enc);
              this._readableState.encoding = enc;
              return this;
            };

            // Don't raise the hwm > 8MB
            var MAX_HWM = 0x800000;
            function computeNewHighWaterMark(n) {
              if (n >= MAX_HWM) {
                n = MAX_HWM;
              } else {
                // Get the next highest power of 2 to prevent increasing hwm excessively in
                // tiny amounts
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
              }
              return n;
            }

            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function howMuchToRead(n, state) {
              if (n <= 0 || state.length === 0 && state.ended) return 0;
              if (state.objectMode) return 1;
              if (n !== n) {
                // Only flow one buffer at a time
                if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
              }
              // If we're asking for more than the current hwm, then raise the hwm.
              if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
              if (n <= state.length) return n;
              // Don't have enough
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }
              return state.length;
            }

            // you can override either this method, or the async _read(n) below.
            Readable.prototype.read = function (n) {
              debug('read', n);
              n = parseInt(n, 10);
              var state = this._readableState;
              var nOrig = n;

              if (n !== 0) state.emittedReadable = false;

              // if we're doing read(0) to trigger a readable event, but we
              // already have a bunch of data in the buffer, then just trigger
              // the 'readable' event and move on.
              if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                debug('read: emitReadable', state.length, state.ended);
                if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                return null;
              }

              n = howMuchToRead(n, state);

              // if we've ended, and we're now clear, then finish it up.
              if (n === 0 && state.ended) {
                if (state.length === 0) endReadable(this);
                return null;
              }

              // All the actual chunk generation logic needs to be
              // *below* the call to _read.  The reason is that in certain
              // synthetic stream cases, such as passthrough streams, _read
              // may be a completely synchronous operation which may change
              // the state of the read buffer, providing enough data when
              // before there was *not* enough.
              //
              // So, the steps are:
              // 1. Figure out what the state of things will be after we do
              // a read from the buffer.
              //
              // 2. If that resulting state will trigger a _read, then call _read.
              // Note that this may be asynchronous, or synchronous.  Yes, it is
              // deeply ugly to write APIs this way, but that still doesn't mean
              // that the Readable class should behave improperly, as streams are
              // designed to be sync/async agnostic.
              // Take note if the _read call is sync or async (ie, if the read call
              // has returned yet), so that we know whether or not it's safe to emit
              // 'readable' etc.
              //
              // 3. Actually pull the requested chunks out of the buffer and return.

              // if we need a readable event, then we need to do some reading.
              var doRead = state.needReadable;
              debug('need readable', doRead);

              // if we currently have less than the highWaterMark, then also read some
              if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug('length less than watermark', doRead);
              }

              // however, if we've ended, then there's no point, and if we're already
              // reading, then it's unnecessary.
              if (state.ended || state.reading) {
                doRead = false;
                debug('reading or ended', doRead);
              } else if (doRead) {
                debug('do read');
                state.reading = true;
                state.sync = true;
                // if the length is currently zero, then we *need* a readable event.
                if (state.length === 0) state.needReadable = true;
                // call internal read method
                this._read(state.highWaterMark);
                state.sync = false;
                // If _read pushed data synchronously, then `reading` will be false,
                // and we need to re-evaluate how much data we can return to the user.
                if (!state.reading) n = howMuchToRead(nOrig, state);
              }

              var ret;
              if (n > 0) ret = fromList(n, state);else ret = null;

              if (ret === null) {
                state.needReadable = true;
                n = 0;
              } else {
                state.length -= n;
              }

              if (state.length === 0) {
                // If we have nothing in the buffer, then we want to know
                // as soon as we *do* get something into the buffer.
                if (!state.ended) state.needReadable = true;

                // If we tried to read() past the EOF, then emit end on the next tick.
                if (nOrig !== n && state.ended) endReadable(this);
              }

              if (ret !== null) this.emit('data', ret);

              return ret;
            };

            function chunkInvalid(state, chunk) {
              var er = null;
              if (!isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
              }
              return er;
            }

            function onEofChunk(stream, state) {
              if (state.ended) return;
              if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }
              state.ended = true;

              // emit 'readable' now to make sure it gets picked up.
              emitReadable(stream);
            }

            // Don't emit readable right away in sync mode, because this can trigger
            // another read() call => stack overflow.  This way, it might trigger
            // a nextTick recursion warning, but that's not so bad.
            function emitReadable(stream) {
              var state = stream._readableState;
              state.needReadable = false;
              if (!state.emittedReadable) {
                debug('emitReadable', state.flowing);
                state.emittedReadable = true;
                if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
              }
            }

            function emitReadable_(stream) {
              debug('emit readable');
              stream.emit('readable');
              flow(stream);
            }

            // at this point, the user has presumably seen the 'readable' event,
            // and called read() to consume some data.  that may have triggered
            // in turn another _read(n) call, in which case reading = true if
            // it's in progress.
            // However, if we're not ended, or reading, and the length < hwm,
            // then go ahead and try to read some more preemptively.
            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                nextTick(maybeReadMore_, stream, state);
              }
            }

            function maybeReadMore_(stream, state) {
              var len = state.length;
              while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                debug('maybeReadMore read 0');
                stream.read(0);
                if (len === state.length)
                  // didn't get any data, stop spinning.
                  break;else len = state.length;
              }
              state.readingMore = false;
            }

            // abstract method.  to be overridden in specific implementation classes.
            // call cb(er, data) where data is <= n in length.
            // for virtual (non-string, non-buffer) streams, "length" is somewhat
            // arbitrary, and perhaps not very meaningful.
            Readable.prototype._read = function (n) {
              this.emit('error', new Error('not implemented'));
            };

            Readable.prototype.pipe = function (dest, pipeOpts) {
              var src = this;
              var state = this._readableState;

              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;
                case 1:
                  state.pipes = [state.pipes, dest];
                  break;
                default:
                  state.pipes.push(dest);
                  break;
              }
              state.pipesCount += 1;
              debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

              var doEnd = (!pipeOpts || pipeOpts.end !== false);

              var endFn = doEnd ? onend : cleanup;
              if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

              dest.on('unpipe', onunpipe);
              function onunpipe(readable) {
                debug('onunpipe');
                if (readable === src) {
                  cleanup();
                }
              }

              function onend() {
                debug('onend');
                dest.end();
              }

              // when the dest drains, it reduces the awaitDrain counter
              // on the source.  This would be more elegant with a .once()
              // handler in flow(), but adding and removing repeatedly is
              // too slow.
              var ondrain = pipeOnDrain(src);
              dest.on('drain', ondrain);

              var cleanedUp = false;
              function cleanup() {
                debug('cleanup');
                // cleanup event handlers once the pipe is broken
                dest.removeListener('close', onclose);
                dest.removeListener('finish', onfinish);
                dest.removeListener('drain', ondrain);
                dest.removeListener('error', onerror);
                dest.removeListener('unpipe', onunpipe);
                src.removeListener('end', onend);
                src.removeListener('end', cleanup);
                src.removeListener('data', ondata);

                cleanedUp = true;

                // if the reader is waiting for a drain event from this
                // specific writer, then it would cause it to never start
                // flowing again.
                // So, if this is awaiting a drain, then we just call it now.
                // If we don't know, then assume that we are waiting for one.
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
              }

              // If the user pushes more data while we're writing to dest then we'll end up
              // in ondata again. However, we only want to increase awaitDrain once because
              // dest will only emit one 'drain' event for the multiple writes.
              // => Introduce a guard on increasing awaitDrain.
              var increasedAwaitDrain = false;
              src.on('data', ondata);
              function ondata(chunk) {
                debug('ondata');
                increasedAwaitDrain = false;
                var ret = dest.write(chunk);
                if (false === ret && !increasedAwaitDrain) {
                  // If the user unpiped during `dest.write()`, it is possible
                  // to get stuck in a permanently paused state if that write
                  // also returned false.
                  // => Check whether `dest` is still a piping destination.
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug('false write response, pause', src._readableState.awaitDrain);
                    src._readableState.awaitDrain++;
                    increasedAwaitDrain = true;
                  }
                  src.pause();
                }
              }

              // if the dest has an error, then stop piping into it.
              // however, don't suppress the throwing behavior for this.
              function onerror(er) {
                debug('onerror', er);
                unpipe();
                dest.removeListener('error', onerror);
                if (listenerCount$1(dest, 'error') === 0) dest.emit('error', er);
              }

              // Make sure our error handler is attached before userland ones.
              prependListener(dest, 'error', onerror);

              // Both close and finish should trigger unpipe, but only once.
              function onclose() {
                dest.removeListener('finish', onfinish);
                unpipe();
              }
              dest.once('close', onclose);
              function onfinish() {
                debug('onfinish');
                dest.removeListener('close', onclose);
                unpipe();
              }
              dest.once('finish', onfinish);

              function unpipe() {
                debug('unpipe');
                src.unpipe(dest);
              }

              // tell the dest that it's being piped to
              dest.emit('pipe', src);

              // start the flow if it hasn't been started already.
              if (!state.flowing) {
                debug('pipe resume');
                src.resume();
              }

              return dest;
            };

            function pipeOnDrain(src) {
              return function () {
                var state = src._readableState;
                debug('pipeOnDrain', state.awaitDrain);
                if (state.awaitDrain) state.awaitDrain--;
                if (state.awaitDrain === 0 && src.listeners('data').length) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }

            Readable.prototype.unpipe = function (dest) {
              var state = this._readableState;

              // if we're not piping anywhere, then do nothing.
              if (state.pipesCount === 0) return this;

              // just one destination.  most common case.
              if (state.pipesCount === 1) {
                // passed in one, but it's not the right one.
                if (dest && dest !== state.pipes) return this;

                if (!dest) dest = state.pipes;

                // got a match.
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest) dest.emit('unpipe', this);
                return this;
              }

              // slow case. multiple pipe destinations.

              if (!dest) {
                // remove all.
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;

                for (var _i = 0; _i < len; _i++) {
                  dests[_i].emit('unpipe', this);
                }return this;
              }

              // try to find the right one.
              var i = indexOf(state.pipes, dest);
              if (i === -1) return this;

              state.pipes.splice(i, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1) state.pipes = state.pipes[0];

              dest.emit('unpipe', this);

              return this;
            };

            // set up data events if they are asked for
            // Ensure readable listeners eventually get something
            Readable.prototype.on = function (ev, fn) {
              var res = EventEmitter.prototype.on.call(this, ev, fn);

              if (ev === 'data') {
                // Start flowing on next tick if stream isn't explicitly paused
                if (this._readableState.flowing !== false) this.resume();
              } else if (ev === 'readable') {
                var state = this._readableState;
                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.emittedReadable = false;
                  if (!state.reading) {
                    nextTick(nReadingNextTick, this);
                  } else if (state.length) {
                    emitReadable(this);
                  }
                }
              }

              return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;

            function nReadingNextTick(self) {
              debug('readable nexttick read 0');
              self.read(0);
            }

            // pause() and resume() are remnants of the legacy readable stream API
            // If the user uses them, then switch into old mode.
            Readable.prototype.resume = function () {
              var state = this._readableState;
              if (!state.flowing) {
                debug('resume');
                state.flowing = true;
                resume(this, state);
              }
              return this;
            };

            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                nextTick(resume_, stream, state);
              }
            }

            function resume_(stream, state) {
              if (!state.reading) {
                debug('resume read 0');
                stream.read(0);
              }

              state.resumeScheduled = false;
              state.awaitDrain = 0;
              stream.emit('resume');
              flow(stream);
              if (state.flowing && !state.reading) stream.read(0);
            }

            Readable.prototype.pause = function () {
              debug('call pause flowing=%j', this._readableState.flowing);
              if (false !== this._readableState.flowing) {
                debug('pause');
                this._readableState.flowing = false;
                this.emit('pause');
              }
              return this;
            };

            function flow(stream) {
              var state = stream._readableState;
              debug('flow', state.flowing);
              while (state.flowing && stream.read() !== null) {}
            }

            // wrap an old-style stream as the async data source.
            // This is *not* part of the readable stream interface.
            // It is an ugly unfortunate mess of history.
            Readable.prototype.wrap = function (stream) {
              var state = this._readableState;
              var paused = false;

              var self = this;
              stream.on('end', function () {
                debug('wrapped end');
                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length) self.push(chunk);
                }

                self.push(null);
              });

              stream.on('data', function (chunk) {
                debug('wrapped data');
                if (state.decoder) chunk = state.decoder.write(chunk);

                // don't skip over falsy values in objectMode
                if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

                var ret = self.push(chunk);
                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              });

              // proxy all the other methods.
              // important when wrapping filters and duplexes.
              for (var i in stream) {
                if (this[i] === undefined && typeof stream[i] === 'function') {
                  this[i] = function (method) {
                    return function () {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              }

              // proxy certain important events.
              var events = ['error', 'close', 'destroy', 'pause', 'resume'];
              forEach(events, function (ev) {
                stream.on(ev, self.emit.bind(self, ev));
              });

              // when we try to consume some more bytes, simply unpause the
              // underlying stream.
              self._read = function (n) {
                debug('wrapped _read', n);
                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };

              return self;
            };

            // exposed for testing purposes only.
            Readable._fromList = fromList;

            // Pluck off n bytes from an array of buffers.
            // Length is the combined lengths of all the buffers in the list.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function fromList(n, state) {
              // nothing buffered
              if (state.length === 0) return null;

              var ret;
              if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                // read it all, truncate the list
                if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                // read part of list
                ret = fromListPartial(n, state.buffer, state.decoder);
              }

              return ret;
            }

            // Extracts only enough buffered data to satisfy the amount requested.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function fromListPartial(n, list, hasStrings) {
              var ret;
              if (n < list.head.data.length) {
                // slice is the same for buffers and strings
                ret = list.head.data.slice(0, n);
                list.head.data = list.head.data.slice(n);
              } else if (n === list.head.data.length) {
                // first chunk is a perfect match
                ret = list.shift();
              } else {
                // result spans more than one buffer
                ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
              }
              return ret;
            }

            // Copies a specified amount of characters from the list of buffered data
            // chunks.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function copyFromBufferString(n, list) {
              var p = list.head;
              var c = 1;
              var ret = p.data;
              n -= ret.length;
              while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length) ret += str;else ret += str.slice(0, n);
                n -= nb;
                if (n === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p.next) list.head = p.next;else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = str.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list.length -= c;
              return ret;
            }

            // Copies a specified amount of bytes from the list of buffered data chunks.
            // This function is designed to be inlinable, so please take care when making
            // changes to the function body.
            function copyFromBuffer(n, list) {
              var ret = Buffer.allocUnsafe(n);
              var p = list.head;
              var c = 1;
              p.data.copy(ret);
              n -= p.data.length;
              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next) list.head = p.next;else list.head = list.tail = null;
                  } else {
                    list.head = p;
                    p.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              list.length -= c;
              return ret;
            }

            function endReadable(stream) {
              var state = stream._readableState;

              // If we get here before consuming all the bytes, then that is a
              // bug in node.  Should never happen.
              if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

              if (!state.endEmitted) {
                state.ended = true;
                nextTick(endReadableNT, state, stream);
              }
            }

            function endReadableNT(state, stream) {
              // Check that we didn't get one last unshift.
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit('end');
              }
            }

            function forEach(xs, f) {
              for (var i = 0, l = xs.length; i < l; i++) {
                f(xs[i], i);
              }
            }

            function indexOf(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x) return i;
              }
              return -1;
            }

            // A bit simpler than readable streams.
            Writable.WritableState = WritableState;
            inherits$1(Writable, EventEmitter);

            function nop() {}

            function WriteReq(chunk, encoding, cb) {
              this.chunk = chunk;
              this.encoding = encoding;
              this.callback = cb;
              this.next = null;
            }

            function WritableState(options, stream) {
              Object.defineProperty(this, 'buffer', {
                get: deprecate(function () {
                  return this.getBuffer();
                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
              });
              options = options || {};

              // object stream flag to indicate whether or not this stream
              // contains buffers or objects.
              this.objectMode = !!options.objectMode;

              if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

              // the point at which write() starts returning false
              // Note: 0 is a valid value, means that we always return false if
              // the entire buffer is not flushed immediately on write()
              var hwm = options.highWaterMark;
              var defaultHwm = this.objectMode ? 16 : 16 * 1024;
              this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

              // cast to ints.
              this.highWaterMark = ~ ~this.highWaterMark;

              this.needDrain = false;
              // at the start of calling end()
              this.ending = false;
              // when end() has been called, and returned
              this.ended = false;
              // when 'finish' is emitted
              this.finished = false;

              // should we decode strings into buffers before passing to _write?
              // this is here so that some node-core streams can optimize string
              // handling at a lower level.
              var noDecode = options.decodeStrings === false;
              this.decodeStrings = !noDecode;

              // Crypto is kind of old and crusty.  Historically, its default string
              // encoding is 'binary' so we have to make this configurable.
              // Everything else in the universe uses 'utf8', though.
              this.defaultEncoding = options.defaultEncoding || 'utf8';

              // not an actual buffer we keep track of, but a measurement
              // of how much we're waiting to get pushed to some underlying
              // socket or file.
              this.length = 0;

              // a flag to see when we're in the middle of a write.
              this.writing = false;

              // when true all writes will be buffered until .uncork() call
              this.corked = 0;

              // a flag to be able to tell if the onwrite cb is called immediately,
              // or on a later tick.  We set this to true at first, because any
              // actions that shouldn't happen until "later" should generally also
              // not happen before the first write call.
              this.sync = true;

              // a flag to know if we're processing previously buffered items, which
              // may call the _write() callback in the same tick, so that we don't
              // end up in an overlapped onwrite situation.
              this.bufferProcessing = false;

              // the callback that's passed to _write(chunk,cb)
              this.onwrite = function (er) {
                onwrite(stream, er);
              };

              // the callback that the user supplies to write(chunk,encoding,cb)
              this.writecb = null;

              // the amount that is being written when _write is called.
              this.writelen = 0;

              this.bufferedRequest = null;
              this.lastBufferedRequest = null;

              // number of pending user-supplied write callbacks
              // this must be 0 before 'finish' can be emitted
              this.pendingcb = 0;

              // emit prefinish if the only thing we're waiting for is _write cbs
              // This is relevant for synchronous Transform streams
              this.prefinished = false;

              // True if the error was already emitted and should not be thrown again
              this.errorEmitted = false;

              // count buffered requests
              this.bufferedRequestCount = 0;

              // allocate the first CorkedRequest, there is always
              // one allocated and free to use, and we maintain at most two
              this.corkedRequestsFree = new CorkedRequest(this);
            }

            WritableState.prototype.getBuffer = function writableStateGetBuffer() {
              var current = this.bufferedRequest;
              var out = [];
              while (current) {
                out.push(current);
                current = current.next;
              }
              return out;
            };
            function Writable(options) {

              // Writable ctor is applied to Duplexes, though they're not
              // instanceof Writable, they're instanceof Readable.
              if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

              this._writableState = new WritableState(options, this);

              // legacy.
              this.writable = true;

              if (options) {
                if (typeof options.write === 'function') this._write = options.write;

                if (typeof options.writev === 'function') this._writev = options.writev;
              }

              EventEmitter.call(this);
            }

            // Otherwise people can pipe Writable streams, which is just wrong.
            Writable.prototype.pipe = function () {
              this.emit('error', new Error('Cannot pipe, not readable'));
            };

            function writeAfterEnd(stream, cb) {
              var er = new Error('write after end');
              // TODO: defer error events consistently everywhere, not just the cb
              stream.emit('error', er);
              nextTick(cb, er);
            }

            // If we get something that is not a buffer, string, null, or undefined,
            // and we're not in objectMode, then that's an error.
            // Otherwise stream chunks are all considered to be of length=1, and the
            // watermarks determine how many objects to keep in the buffer, rather than
            // how many bytes or characters.
            function validChunk(stream, state, chunk, cb) {
              var valid = true;
              var er = false;
              // Always throw error if a null is written
              // if we are not in object mode then throw
              // if it is not a buffer, string, or undefined.
              if (chunk === null) {
                er = new TypeError('May not write null values to stream');
              } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                er = new TypeError('Invalid non-string/buffer chunk');
              }
              if (er) {
                stream.emit('error', er);
                nextTick(cb, er);
                valid = false;
              }
              return valid;
            }

            Writable.prototype.write = function (chunk, encoding, cb) {
              var state = this._writableState;
              var ret = false;

              if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }

              if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

              if (typeof cb !== 'function') cb = nop;

              if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, chunk, encoding, cb);
              }

              return ret;
            };

            Writable.prototype.cork = function () {
              var state = this._writableState;

              state.corked++;
            };

            Writable.prototype.uncork = function () {
              var state = this._writableState;

              if (state.corked) {
                state.corked--;

                if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
              }
            };

            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              // node::ParseEncoding() requires lower case.
              if (typeof encoding === 'string') encoding = encoding.toLowerCase();
              if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };

            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                chunk = Buffer.from(chunk, encoding);
              }
              return chunk;
            }

            // if we're already writing something, then just put this
            // in the queue, and wait our turn.  Otherwise, call _write
            // If we return false, then we need a drain event, so set that flag.
            function writeOrBuffer(stream, state, chunk, encoding, cb) {
              chunk = decodeChunk(state, chunk, encoding);

              if (Buffer.isBuffer(chunk)) encoding = 'buffer';
              var len = state.objectMode ? 1 : chunk.length;

              state.length += len;

              var ret = state.length < state.highWaterMark;
              // we must ensure that previous needDrain will not be reset to false.
              if (!ret) state.needDrain = true;

              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }

              return ret;
            }

            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }

            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) nextTick(cb, er);else cb(er);

              stream._writableState.errorEmitted = true;
              stream.emit('error', er);
            }

            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }

            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;

              onwriteStateUpdate(state);

              if (er) onwriteError(stream, state, sync, er, cb);else {
                // Check if we're actually ready to finish, but don't emit yet
                var finished = needFinish(state);

                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }

                if (sync) {
                  /*<replacement>*/
                    nextTick(afterWrite, stream, state, finished, cb);
                  /*</replacement>*/
                } else {
                    afterWrite(stream, state, finished, cb);
                  }
              }
            }

            function afterWrite(stream, state, finished, cb) {
              if (!finished) onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            }

            // Must force callback to be called on nextTick, so that we don't
            // emit 'drain' before the write() consumer gets the 'false' return
            // value, and has a chance to attach a 'drain' listener.
            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit('drain');
              }
            }

            // if there's something in the buffer waiting, then process it
            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;

              if (stream._writev && entry && entry.next) {
                // Fast case, write everything using _writev()
                var l = state.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;

                var count = 0;
                while (entry) {
                  buffer[count] = entry;
                  entry = entry.next;
                  count += 1;
                }

                doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                // doWrite is almost always async, defer these to save a bit of time
                // as the hot path ends with doWrite
                state.pendingcb++;
                state.lastBufferedRequest = null;
                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
              } else {
                // Slow case, write chunks one-by-one
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;

                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next;
                  // if we didn't call the onwrite immediately, then
                  // it means that we need to wait until it does.
                  // also, that means that the chunk and cb are currently
                  // being processed, so move the buffer counter past them.
                  if (state.writing) {
                    break;
                  }
                }

                if (entry === null) state.lastBufferedRequest = null;
              }

              state.bufferedRequestCount = 0;
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }

            Writable.prototype._write = function (chunk, encoding, cb) {
              cb(new Error('not implemented'));
            };

            Writable.prototype._writev = null;

            Writable.prototype.end = function (chunk, encoding, cb) {
              var state = this._writableState;

              if (typeof chunk === 'function') {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === 'function') {
                cb = encoding;
                encoding = null;
              }

              if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

              // .end() fully uncorks
              if (state.corked) {
                state.corked = 1;
                this.uncork();
              }

              // ignore unnecessary end() calls.
              if (!state.ending && !state.finished) endWritable(this, state, cb);
            };

            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }

            function prefinish(stream, state) {
              if (!state.prefinished) {
                state.prefinished = true;
                stream.emit('prefinish');
              }
            }

            function finishMaybe(stream, state) {
              var need = needFinish(state);
              if (need) {
                if (state.pendingcb === 0) {
                  prefinish(stream, state);
                  state.finished = true;
                  stream.emit('finish');
                } else {
                  prefinish(stream, state);
                }
              }
              return need;
            }

            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);
              if (cb) {
                if (state.finished) nextTick(cb);else stream.once('finish', cb);
              }
              state.ended = true;
              stream.writable = false;
            }

            // It seems a linked list but it is not
            // there will be only 2 of these for each stream
            function CorkedRequest(state) {
              var _this = this;

              this.next = null;
              this.entry = null;

              this.finish = function (err) {
                var entry = _this.entry;
                _this.entry = null;
                while (entry) {
                  var cb = entry.callback;
                  state.pendingcb--;
                  cb(err);
                  entry = entry.next;
                }
                if (state.corkedRequestsFree) {
                  state.corkedRequestsFree.next = _this;
                } else {
                  state.corkedRequestsFree = _this;
                }
              };
            }

            inherits$1(Duplex, Readable);

            var keys = Object.keys(Writable.prototype);
            for (var v = 0; v < keys.length; v++) {
              var method = keys[v];
              if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }
            function Duplex(options) {
              if (!(this instanceof Duplex)) return new Duplex(options);

              Readable.call(this, options);
              Writable.call(this, options);

              if (options && options.readable === false) this.readable = false;

              if (options && options.writable === false) this.writable = false;

              this.allowHalfOpen = true;
              if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

              this.once('end', onend);
            }

            // the no-half-open enforcer
            function onend() {
              // if we allow half-open state, or if the writable side ended,
              // then we're ok.
              if (this.allowHalfOpen || this._writableState.ended) return;

              // no more data can be written.
              // But allow more writes to happen in this tick.
              nextTick(onEndNT, this);
            }

            function onEndNT(self) {
              self.end();
            }

            // a transform stream is a readable/writable stream where you do
            inherits$1(Transform, Duplex);

            function TransformState(stream) {
              this.afterTransform = function (er, data) {
                return afterTransform(stream, er, data);
              };

              this.needTransform = false;
              this.transforming = false;
              this.writecb = null;
              this.writechunk = null;
              this.writeencoding = null;
            }

            function afterTransform(stream, er, data) {
              var ts = stream._transformState;
              ts.transforming = false;

              var cb = ts.writecb;

              if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

              ts.writechunk = null;
              ts.writecb = null;

              if (data !== null && data !== undefined) stream.push(data);

              cb(er);

              var rs = stream._readableState;
              rs.reading = false;
              if (rs.needReadable || rs.length < rs.highWaterMark) {
                stream._read(rs.highWaterMark);
              }
            }
            function Transform(options) {
              if (!(this instanceof Transform)) return new Transform(options);

              Duplex.call(this, options);

              this._transformState = new TransformState(this);

              // when the writable side finishes, then flush out anything remaining.
              var stream = this;

              // start out asking for a readable event once data is transformed.
              this._readableState.needReadable = true;

              // we have implemented the _read method, and done the other things
              // that Readable wants before the first _read call, so unset the
              // sync guard flag.
              this._readableState.sync = false;

              if (options) {
                if (typeof options.transform === 'function') this._transform = options.transform;

                if (typeof options.flush === 'function') this._flush = options.flush;
              }

              this.once('prefinish', function () {
                if (typeof this._flush === 'function') this._flush(function (er) {
                  done(stream, er);
                });else done(stream);
              });
            }

            Transform.prototype.push = function (chunk, encoding) {
              this._transformState.needTransform = false;
              return Duplex.prototype.push.call(this, chunk, encoding);
            };

            // This is the part where you do stuff!
            // override this function in implementation classes.
            // 'chunk' is an input chunk.
            //
            // Call `push(newChunk)` to pass along transformed output
            // to the readable side.  You may call 'push' zero or more times.
            //
            // Call `cb(err)` when you are done with this chunk.  If you pass
            // an error, then that'll put the hurt on the whole operation.  If you
            // never call cb(), then you'll never get another chunk.
            Transform.prototype._transform = function (chunk, encoding, cb) {
              throw new Error('Not implemented');
            };

            Transform.prototype._write = function (chunk, encoding, cb) {
              var ts = this._transformState;
              ts.writecb = cb;
              ts.writechunk = chunk;
              ts.writeencoding = encoding;
              if (!ts.transforming) {
                var rs = this._readableState;
                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
              }
            };

            // Doesn't matter what the args are here.
            // _transform does all the work.
            // That we got here means that the readable side wants more data.
            Transform.prototype._read = function (n) {
              var ts = this._transformState;

              if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                ts.transforming = true;
                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
              } else {
                // mark that we need a transform, so that any data that comes in
                // will get processed, now that we've asked for it.
                ts.needTransform = true;
              }
            };

            function done(stream, er) {
              if (er) return stream.emit('error', er);

              // if there's nothing in the write buffer, then that means
              // that nothing more will ever be provided
              var ws = stream._writableState;
              var ts = stream._transformState;

              if (ws.length) throw new Error('Calling transform done when ws.length != 0');

              if (ts.transforming) throw new Error('Calling transform done when still transforming');

              return stream.push(null);
            }

            inherits$1(PassThrough, Transform);
            function PassThrough(options) {
              if (!(this instanceof PassThrough)) return new PassThrough(options);

              Transform.call(this, options);
            }

            PassThrough.prototype._transform = function (chunk, encoding, cb) {
              cb(null, chunk);
            };

            inherits$1(Stream, EventEmitter);
            Stream.Readable = Readable;
            Stream.Writable = Writable;
            Stream.Duplex = Duplex;
            Stream.Transform = Transform;
            Stream.PassThrough = PassThrough;

            // Backwards-compat with node 0.4.x
            Stream.Stream = Stream;

            // old-style streams.  Note that the pipe method (the only relevant
            // part of this class) is overridden in the Readable class.

            function Stream() {
              EventEmitter.call(this);
            }

            Stream.prototype.pipe = function(dest, options) {
              var source = this;

              function ondata(chunk) {
                if (dest.writable) {
                  if (false === dest.write(chunk) && source.pause) {
                    source.pause();
                  }
                }
              }

              source.on('data', ondata);

              function ondrain() {
                if (source.readable && source.resume) {
                  source.resume();
                }
              }

              dest.on('drain', ondrain);

              // If the 'end' option is not supplied, dest.end() will be called when
              // source gets the 'end' or 'close' events.  Only dest.end() once.
              if (!dest._isStdio && (!options || options.end !== false)) {
                source.on('end', onend);
                source.on('close', onclose);
              }

              var didOnEnd = false;
              function onend() {
                if (didOnEnd) return;
                didOnEnd = true;

                dest.end();
              }


              function onclose() {
                if (didOnEnd) return;
                didOnEnd = true;

                if (typeof dest.destroy === 'function') dest.destroy();
              }

              // don't leave dangling pipes when there are errors.
              function onerror(er) {
                cleanup();
                if (EventEmitter.listenerCount(this, 'error') === 0) {
                  throw er; // Unhandled stream error in pipe.
                }
              }

              source.on('error', onerror);
              dest.on('error', onerror);

              // remove all the event listeners that were added.
              function cleanup() {
                source.removeListener('data', ondata);
                dest.removeListener('drain', ondrain);

                source.removeListener('end', onend);
                source.removeListener('close', onclose);

                source.removeListener('error', onerror);
                dest.removeListener('error', onerror);

                source.removeListener('end', cleanup);
                source.removeListener('close', cleanup);

                dest.removeListener('close', cleanup);
              }

              source.on('end', cleanup);
              source.on('close', cleanup);

              dest.on('close', cleanup);

              dest.emit('pipe', source);

              // Allow for unix-like usage: A.pipe(B).pipe(C)
              return dest;
            };

            var rStates = {
              UNSENT: 0,
              OPENED: 1,
              HEADERS_RECEIVED: 2,
              LOADING: 3,
              DONE: 4
            };
            function IncomingMessage(xhr, response, mode) {
              var self = this;
              Readable.call(self);

              self._mode = mode;
              self.headers = {};
              self.rawHeaders = [];
              self.trailers = {};
              self.rawTrailers = [];

              // Fake the 'close' event, but only once 'end' fires
              self.on('end', function() {
                // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
                nextTick(function() {
                  self.emit('close');
                });
              });
              var read;
              if (mode === 'fetch') {
                self._fetchResponse = response;

                self.url = response.url;
                self.statusCode = response.status;
                self.statusMessage = response.statusText;
                  // backwards compatible version of for (<item> of <iterable>):
                  // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
                for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
                  self.headers[header[0].toLowerCase()] = header[1];
                  self.rawHeaders.push(header[0], header[1]);
                }

                // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
                var reader = response.body.getReader();

                read = function () {
                  reader.read().then(function(result) {
                    if (self._destroyed)
                      return
                    if (result.done) {
                      self.push(null);
                      return
                    }
                    self.push(new Buffer(result.value));
                    read();
                  });
                };
                read();

              } else {
                self._xhr = xhr;
                self._pos = 0;

                self.url = xhr.responseURL;
                self.statusCode = xhr.status;
                self.statusMessage = xhr.statusText;
                var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
                headers.forEach(function(header) {
                  var matches = header.match(/^([^:]+):\s*(.*)/);
                  if (matches) {
                    var key = matches[1].toLowerCase();
                    if (key === 'set-cookie') {
                      if (self.headers[key] === undefined) {
                        self.headers[key] = [];
                      }
                      self.headers[key].push(matches[2]);
                    } else if (self.headers[key] !== undefined) {
                      self.headers[key] += ', ' + matches[2];
                    } else {
                      self.headers[key] = matches[2];
                    }
                    self.rawHeaders.push(matches[1], matches[2]);
                  }
                });

                self._charset = 'x-user-defined';
                if (!overrideMimeType) {
                  var mimeType = self.rawHeaders['mime-type'];
                  if (mimeType) {
                    var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
                    if (charsetMatch) {
                      self._charset = charsetMatch[1].toLowerCase();
                    }
                  }
                  if (!self._charset)
                    self._charset = 'utf-8'; // best guess
                }
              }
            }

            inherits$1(IncomingMessage, Readable);

            IncomingMessage.prototype._read = function() {};

            IncomingMessage.prototype._onXHRProgress = function() {
              var self = this;

              var xhr = self._xhr;

              var response = null;
              switch (self._mode) {
              case 'text:vbarray': // For IE9
                if (xhr.readyState !== rStates.DONE)
                  break
                try {
                  // This fails in IE8
                  response = new global$1.VBArray(xhr.responseBody).toArray();
                } catch (e) {
                  // pass
                }
                if (response !== null) {
                  self.push(new Buffer(response));
                  break
                }
                // Falls through in IE8
              case 'text':
                try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
                  response = xhr.responseText;
                } catch (e) {
                  self._mode = 'text:vbarray';
                  break
                }
                if (response.length > self._pos) {
                  var newData = response.substr(self._pos);
                  if (self._charset === 'x-user-defined') {
                    var buffer = new Buffer(newData.length);
                    for (var i = 0; i < newData.length; i++)
                      buffer[i] = newData.charCodeAt(i) & 0xff;

                    self.push(buffer);
                  } else {
                    self.push(newData, self._charset);
                  }
                  self._pos = response.length;
                }
                break
              case 'arraybuffer':
                if (xhr.readyState !== rStates.DONE || !xhr.response)
                  break
                response = xhr.response;
                self.push(new Buffer(new Uint8Array(response)));
                break
              case 'moz-chunked-arraybuffer': // take whole
                response = xhr.response;
                if (xhr.readyState !== rStates.LOADING || !response)
                  break
                self.push(new Buffer(new Uint8Array(response)));
                break
              case 'ms-stream':
                response = xhr.response;
                if (xhr.readyState !== rStates.LOADING)
                  break
                var reader = new global$1.MSStreamReader();
                reader.onprogress = function() {
                  if (reader.result.byteLength > self._pos) {
                    self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
                    self._pos = reader.result.byteLength;
                  }
                };
                reader.onload = function() {
                  self.push(null);
                };
                  // reader.onerror = ??? // TODO: this
                reader.readAsArrayBuffer(response);
                break
              }

              // The ms-stream case handles end separately in reader.onload()
              if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
                self.push(null);
              }
            };

            // from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js
            function toArrayBuffer (buf) {
              // If the buffer is backed by a Uint8Array, a faster version will work
              if (buf instanceof Uint8Array) {
                // If the buffer isn't a subarray, return the underlying ArrayBuffer
                if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
                  return buf.buffer
                } else if (typeof buf.buffer.slice === 'function') {
                  // Otherwise we need to get a proper copy
                  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
                }
              }

              if (isBuffer(buf)) {
                // This is the slow version that will work with any Buffer
                // implementation (even in old browsers)
                var arrayCopy = new Uint8Array(buf.length);
                var len = buf.length;
                for (var i = 0; i < len; i++) {
                  arrayCopy[i] = buf[i];
                }
                return arrayCopy.buffer
              } else {
                throw new Error('Argument must be a Buffer')
              }
            }

            function decideMode(preferBinary, useFetch) {
              if (hasFetch && useFetch) {
                return 'fetch'
              } else if (mozchunkedarraybuffer) {
                return 'moz-chunked-arraybuffer'
              } else if (msstream) {
                return 'ms-stream'
              } else if (arraybuffer && preferBinary) {
                return 'arraybuffer'
              } else if (vbArray && preferBinary) {
                return 'text:vbarray'
              } else {
                return 'text'
              }
            }

            function ClientRequest(opts) {
              var self = this;
              Writable.call(self);

              self._opts = opts;
              self._body = [];
              self._headers = {};
              if (opts.auth)
                self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
              Object.keys(opts.headers).forEach(function(name) {
                self.setHeader(name, opts.headers[name]);
              });

              var preferBinary;
              var useFetch = true;
              if (opts.mode === 'disable-fetch') {
                // If the use of XHR should be preferred and includes preserving the 'content-type' header
                useFetch = false;
                preferBinary = true;
              } else if (opts.mode === 'prefer-streaming') {
                // If streaming is a high priority but binary compatibility and
                // the accuracy of the 'content-type' header aren't
                preferBinary = false;
              } else if (opts.mode === 'allow-wrong-content-type') {
                // If streaming is more important than preserving the 'content-type' header
                preferBinary = !overrideMimeType;
              } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
                // Use binary if text streaming may corrupt data or the content-type header, or for speed
                preferBinary = true;
              } else {
                throw new Error('Invalid value for opts.mode')
              }
              self._mode = decideMode(preferBinary, useFetch);

              self.on('finish', function() {
                self._onFinish();
              });
            }

            inherits$1(ClientRequest, Writable);
            // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
            var unsafeHeaders = [
              'accept-charset',
              'accept-encoding',
              'access-control-request-headers',
              'access-control-request-method',
              'connection',
              'content-length',
              'cookie',
              'cookie2',
              'date',
              'dnt',
              'expect',
              'host',
              'keep-alive',
              'origin',
              'referer',
              'te',
              'trailer',
              'transfer-encoding',
              'upgrade',
              'user-agent',
              'via'
            ];
            ClientRequest.prototype.setHeader = function(name, value) {
              var self = this;
              var lowerName = name.toLowerCase();
                // This check is not necessary, but it prevents warnings from browsers about setting unsafe
                // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
                // http-browserify did it, so I will too.
              if (unsafeHeaders.indexOf(lowerName) !== -1)
                return

              self._headers[lowerName] = {
                name: name,
                value: value
              };
            };

            ClientRequest.prototype.getHeader = function(name) {
              var self = this;
              return self._headers[name.toLowerCase()].value
            };

            ClientRequest.prototype.removeHeader = function(name) {
              var self = this;
              delete self._headers[name.toLowerCase()];
            };

            ClientRequest.prototype._onFinish = function() {
              var self = this;

              if (self._destroyed)
                return
              var opts = self._opts;

              var headersObj = self._headers;
              var body;
              if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
                if (blobConstructor()) {
                  body = new global$1.Blob(self._body.map(function(buffer) {
                    return toArrayBuffer(buffer)
                  }), {
                    type: (headersObj['content-type'] || {}).value || ''
                  });
                } else {
                  // get utf8 string
                  body = Buffer.concat(self._body).toString();
                }
              }

              if (self._mode === 'fetch') {
                var headers = Object.keys(headersObj).map(function(name) {
                  return [headersObj[name].name, headersObj[name].value]
                });

                global$1.fetch(self._opts.url, {
                  method: self._opts.method,
                  headers: headers,
                  body: body,
                  mode: 'cors',
                  credentials: opts.withCredentials ? 'include' : 'same-origin'
                }).then(function(response) {
                  self._fetchResponse = response;
                  self._connect();
                }, function(reason) {
                  self.emit('error', reason);
                });
              } else {
                var xhr = self._xhr = new global$1.XMLHttpRequest();
                try {
                  xhr.open(self._opts.method, self._opts.url, true);
                } catch (err) {
                  nextTick(function() {
                    self.emit('error', err);
                  });
                  return
                }

                // Can't set responseType on really old browsers
                if ('responseType' in xhr)
                  xhr.responseType = self._mode.split(':')[0];

                if ('withCredentials' in xhr)
                  xhr.withCredentials = !!opts.withCredentials;

                if (self._mode === 'text' && 'overrideMimeType' in xhr)
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');

                Object.keys(headersObj).forEach(function(name) {
                  xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
                });

                self._response = null;
                xhr.onreadystatechange = function() {
                  switch (xhr.readyState) {
                  case rStates.LOADING:
                  case rStates.DONE:
                    self._onXHRProgress();
                    break
                  }
                };
                  // Necessary for streaming in Firefox, since xhr.response is ONLY defined
                  // in onprogress, not in onreadystatechange with xhr.readyState = 3
                if (self._mode === 'moz-chunked-arraybuffer') {
                  xhr.onprogress = function() {
                    self._onXHRProgress();
                  };
                }

                xhr.onerror = function() {
                  if (self._destroyed)
                    return
                  self.emit('error', new Error('XHR error'));
                };

                try {
                  xhr.send(body);
                } catch (err) {
                  nextTick(function() {
                    self.emit('error', err);
                  });
                  return
                }
              }
            };

            /**
             * Checks if xhr.status is readable and non-zero, indicating no error.
             * Even though the spec says it should be available in readyState 3,
             * accessing it throws an exception in IE8
             */
            function statusValid(xhr) {
              try {
                var status = xhr.status;
                return (status !== null && status !== 0)
              } catch (e) {
                return false
              }
            }

            ClientRequest.prototype._onXHRProgress = function() {
              var self = this;

              if (!statusValid(self._xhr) || self._destroyed)
                return

              if (!self._response)
                self._connect();

              self._response._onXHRProgress();
            };

            ClientRequest.prototype._connect = function() {
              var self = this;

              if (self._destroyed)
                return

              self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
              self.emit('response', self._response);
            };

            ClientRequest.prototype._write = function(chunk, encoding, cb) {
              var self = this;

              self._body.push(chunk);
              cb();
            };

            ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
              var self = this;
              self._destroyed = true;
              if (self._response)
                self._response._destroyed = true;
              if (self._xhr)
                self._xhr.abort();
                // Currently, there isn't a way to truly abort a fetch.
                // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
            };

            ClientRequest.prototype.end = function(data, encoding, cb) {
              var self = this;
              if (typeof data === 'function') {
                cb = data;
                data = undefined;
              }

              Writable.prototype.end.call(self, data, encoding, cb);
            };

            ClientRequest.prototype.flushHeaders = function() {};
            ClientRequest.prototype.setTimeout = function() {};
            ClientRequest.prototype.setNoDelay = function() {};
            ClientRequest.prototype.setSocketKeepAlive = function() {};

            /*! https://mths.be/punycode v1.4.1 by @mathias */


            /** Highest positive signed 32-bit float value */
            var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

            /** Bootstring parameters */
            var base = 36;
            var tMin = 1;
            var tMax = 26;
            var skew = 38;
            var damp = 700;
            var initialBias = 72;
            var initialN = 128; // 0x80
            var delimiter = '-'; // '\x2D'
            var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
            var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

            /** Error messages */
            var errors = {
              'overflow': 'Overflow: input needs wider integers to process',
              'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
              'invalid-input': 'Invalid input'
            };

            /** Convenience shortcuts */
            var baseMinusTMin = base - tMin;
            var floor = Math.floor;
            var stringFromCharCode = String.fromCharCode;

            /*--------------------------------------------------------------------------*/

            /**
             * A generic error utility function.
             * @private
             * @param {String} type The error type.
             * @returns {Error} Throws a `RangeError` with the applicable error message.
             */
            function error(type) {
              throw new RangeError(errors[type]);
            }

            /**
             * A generic `Array#map` utility function.
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} callback The function that gets called for every array
             * item.
             * @returns {Array} A new array of values returned by the callback function.
             */
            function map(array, fn) {
              var length = array.length;
              var result = [];
              while (length--) {
                result[length] = fn(array[length]);
              }
              return result;
            }

            /**
             * A simple `Array#map`-like wrapper to work with domain name strings or email
             * addresses.
             * @private
             * @param {String} domain The domain name or email address.
             * @param {Function} callback The function that gets called for every
             * character.
             * @returns {Array} A new string of characters returned by the callback
             * function.
             */
            function mapDomain(string, fn) {
              var parts = string.split('@');
              var result = '';
              if (parts.length > 1) {
                // In email addresses, only the domain name should be punycoded. Leave
                // the local part (i.e. everything up to `@`) intact.
                result = parts[0] + '@';
                string = parts[1];
              }
              // Avoid `split(regex)` for IE8 compatibility. See #17.
              string = string.replace(regexSeparators, '\x2E');
              var labels = string.split('.');
              var encoded = map(labels, fn).join('.');
              return result + encoded;
            }

            /**
             * Creates an array containing the numeric code points of each Unicode
             * character in the string. While JavaScript uses UCS-2 internally,
             * this function will convert a pair of surrogate halves (each of which
             * UCS-2 exposes as separate characters) into a single code point,
             * matching UTF-16.
             * @see `punycode.ucs2.encode`
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode.ucs2
             * @name decode
             * @param {String} string The Unicode input string (UCS-2).
             * @returns {Array} The new array of code points.
             */
            function ucs2decode(string) {
              var output = [],
                counter = 0,
                length = string.length,
                value,
                extra;
              while (counter < length) {
                value = string.charCodeAt(counter++);
                if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                  // high surrogate, and there is a next character
                  extra = string.charCodeAt(counter++);
                  if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                  } else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                  }
                } else {
                  output.push(value);
                }
              }
              return output;
            }

            /**
             * Converts a digit/integer into a basic code point.
             * @see `basicToDigit()`
             * @private
             * @param {Number} digit The numeric value of a basic code point.
             * @returns {Number} The basic code point whose value (when used for
             * representing integers) is `digit`, which needs to be in the range
             * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
             * used; else, the lowercase form is used. The behavior is undefined
             * if `flag` is non-zero and `digit` has no uppercase form.
             */
            function digitToBasic(digit, flag) {
              //  0..25 map to ASCII a..z or A..Z
              // 26..35 map to ASCII 0..9
              return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
            }

            /**
             * Bias adaptation function as per section 3.4 of RFC 3492.
             * https://tools.ietf.org/html/rfc3492#section-3.4
             * @private
             */
            function adapt(delta, numPoints, firstTime) {
              var k = 0;
              delta = firstTime ? floor(delta / damp) : delta >> 1;
              delta += floor(delta / numPoints);
              for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
                delta = floor(delta / baseMinusTMin);
              }
              return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
            }

            /**
             * Converts a string of Unicode symbols (e.g. a domain name label) to a
             * Punycode string of ASCII-only symbols.
             * @memberOf punycode
             * @param {String} input The string of Unicode symbols.
             * @returns {String} The resulting Punycode string of ASCII-only symbols.
             */
            function encode(input) {
              var n,
                delta,
                handledCPCount,
                basicLength,
                bias,
                j,
                m,
                q,
                k,
                t,
                currentValue,
                output = [],
                /** `inputLength` will hold the number of code points in `input`. */
                inputLength,
                /** Cached calculation results */
                handledCPCountPlusOne,
                baseMinusT,
                qMinusT;

              // Convert the input in UCS-2 to Unicode
              input = ucs2decode(input);

              // Cache the length
              inputLength = input.length;

              // Initialize the state
              n = initialN;
              delta = 0;
              bias = initialBias;

              // Handle the basic code points
              for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue < 0x80) {
                  output.push(stringFromCharCode(currentValue));
                }
              }

              handledCPCount = basicLength = output.length;

              // `handledCPCount` is the number of code points that have been handled;
              // `basicLength` is the number of basic code points.

              // Finish the basic string - if it is not empty - with a delimiter
              if (basicLength) {
                output.push(delimiter);
              }

              // Main encoding loop:
              while (handledCPCount < inputLength) {

                // All non-basic code points < n have been handled already. Find the next
                // larger one:
                for (m = maxInt, j = 0; j < inputLength; ++j) {
                  currentValue = input[j];
                  if (currentValue >= n && currentValue < m) {
                    m = currentValue;
                  }
                }

                // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                // but guard against overflow
                handledCPCountPlusOne = handledCPCount + 1;
                if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                  error('overflow');
                }

                delta += (m - n) * handledCPCountPlusOne;
                n = m;

                for (j = 0; j < inputLength; ++j) {
                  currentValue = input[j];

                  if (currentValue < n && ++delta > maxInt) {
                    error('overflow');
                  }

                  if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for (q = delta, k = base; /* no condition */ ; k += base) {
                      t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                      if (q < t) {
                        break;
                      }
                      qMinusT = q - t;
                      baseMinusT = base - t;
                      output.push(
                        stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                      );
                      q = floor(qMinusT / baseMinusT);
                    }

                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                  }
                }

                ++delta;
                ++n;

              }
              return output.join('');
            }

            /**
             * Converts a Unicode string representing a domain name or an email address to
             * Punycode. Only the non-ASCII parts of the domain name will be converted,
             * i.e. it doesn't matter if you call it with a domain that's already in
             * ASCII.
             * @memberOf punycode
             * @param {String} input The domain name or email address to convert, as a
             * Unicode string.
             * @returns {String} The Punycode representation of the given domain name or
             * email address.
             */
            function toASCII(input) {
              return mapDomain(input, function(string) {
                return regexNonASCII.test(string) ?
                  'xn--' + encode(string) :
                  string;
              });
            }

            // Copyright Joyent, Inc. and other Node contributors.
            //
            // Permission is hereby granted, free of charge, to any person obtaining a
            // copy of this software and associated documentation files (the
            // "Software"), to deal in the Software without restriction, including
            // without limitation the rights to use, copy, modify, merge, publish,
            // distribute, sublicense, and/or sell copies of the Software, and to permit
            // persons to whom the Software is furnished to do so, subject to the
            // following conditions:
            //
            // The above copyright notice and this permission notice shall be included
            // in all copies or substantial portions of the Software.
            //
            // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
            // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
            // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
            // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
            // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
            // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
            // USE OR OTHER DEALINGS IN THE SOFTWARE.


            // If obj.hasOwnProperty has been overridden, then calling
            // obj.hasOwnProperty(prop) will break.
            // See: https://github.com/joyent/node/issues/1707
            function hasOwnProperty$1(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }
            var isArray$2 = Array.isArray || function (xs) {
              return Object.prototype.toString.call(xs) === '[object Array]';
            };
            function stringifyPrimitive(v) {
              switch (typeof v) {
                case 'string':
                  return v;

                case 'boolean':
                  return v ? 'true' : 'false';

                case 'number':
                  return isFinite(v) ? v : '';

                default:
                  return '';
              }
            }

            function stringify (obj, sep, eq, name) {
              sep = sep || '&';
              eq = eq || '=';
              if (obj === null) {
                obj = undefined;
              }

              if (typeof obj === 'object') {
                return map$1(objectKeys(obj), function(k) {
                  var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
                  if (isArray$2(obj[k])) {
                    return map$1(obj[k], function(v) {
                      return ks + encodeURIComponent(stringifyPrimitive(v));
                    }).join(sep);
                  } else {
                    return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
                  }
                }).join(sep);

              }

              if (!name) return '';
              return encodeURIComponent(stringifyPrimitive(name)) + eq +
                     encodeURIComponent(stringifyPrimitive(obj));
            }
            function map$1 (xs, f) {
              if (xs.map) return xs.map(f);
              var res = [];
              for (var i = 0; i < xs.length; i++) {
                res.push(f(xs[i], i));
              }
              return res;
            }

            var objectKeys = Object.keys || function (obj) {
              var res = [];
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
              }
              return res;
            };

            function parse(qs, sep, eq, options) {
              sep = sep || '&';
              eq = eq || '=';
              var obj = {};

              if (typeof qs !== 'string' || qs.length === 0) {
                return obj;
              }

              var regexp = /\+/g;
              qs = qs.split(sep);

              var maxKeys = 1000;
              if (options && typeof options.maxKeys === 'number') {
                maxKeys = options.maxKeys;
              }

              var len = qs.length;
              // maxKeys <= 0 means that we should not limit keys count
              if (maxKeys > 0 && len > maxKeys) {
                len = maxKeys;
              }

              for (var i = 0; i < len; ++i) {
                var x = qs[i].replace(regexp, '%20'),
                    idx = x.indexOf(eq),
                    kstr, vstr, k, v;

                if (idx >= 0) {
                  kstr = x.substr(0, idx);
                  vstr = x.substr(idx + 1);
                } else {
                  kstr = x;
                  vstr = '';
                }

                k = decodeURIComponent(kstr);
                v = decodeURIComponent(vstr);

                if (!hasOwnProperty$1(obj, k)) {
                  obj[k] = v;
                } else if (isArray$2(obj[k])) {
                  obj[k].push(v);
                } else {
                  obj[k] = [obj[k], v];
                }
              }

              return obj;
            }

            // Copyright Joyent, Inc. and other Node contributors.
            function Url() {
              this.protocol = null;
              this.slashes = null;
              this.auth = null;
              this.host = null;
              this.port = null;
              this.hostname = null;
              this.hash = null;
              this.search = null;
              this.query = null;
              this.pathname = null;
              this.path = null;
              this.href = null;
            }

            // Reference: RFC 3986, RFC 1808, RFC 2396

            // define these here so at least they only have to be
            // compiled once on the first module load.
            var protocolPattern = /^([a-z0-9.+-]+:)/i,
              portPattern = /:[0-9]*$/,

              // Special case for a simple path URL
              simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

              // RFC 2396: characters reserved for delimiting URLs.
              // We actually just auto-escape these.
              delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

              // RFC 2396: characters not allowed for various reasons.
              unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

              // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
              autoEscape = ['\''].concat(unwise),
              // Characters that are never ever allowed in a hostname.
              // Note that any invalid chars are also handled, but these
              // are the ones that are *expected* to be seen, so we fast-path
              // them.
              nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
              hostEndingChars = ['/', '?', '#'],
              hostnameMaxLen = 255,
              hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
              hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
              // protocols that can allow "unsafe" and "unwise" chars.
              unsafeProtocol = {
                'javascript': true,
                'javascript:': true
              },
              // protocols that never have a hostname.
              hostlessProtocol = {
                'javascript': true,
                'javascript:': true
              },
              // protocols that always contain a // bit.
              slashedProtocol = {
                'http': true,
                'https': true,
                'ftp': true,
                'gopher': true,
                'file': true,
                'http:': true,
                'https:': true,
                'ftp:': true,
                'gopher:': true,
                'file:': true
              };

            function urlParse(url, parseQueryString, slashesDenoteHost) {
              if (url && isObject(url) && url instanceof Url) return url;

              var u = new Url;
              u.parse(url, parseQueryString, slashesDenoteHost);
              return u;
            }
            Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
              return parse$1(this, url, parseQueryString, slashesDenoteHost);
            };

            function parse$1(self, url, parseQueryString, slashesDenoteHost) {
              if (!isString(url)) {
                throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
              }

              // Copy chrome, IE, opera backslash-handling behavior.
              // Back slashes before the query string get converted to forward slashes
              // See: https://code.google.com/p/chromium/issues/detail?id=25916
              var queryIndex = url.indexOf('?'),
                splitter =
                (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
                uSplit = url.split(splitter),
                slashRegex = /\\/g;
              uSplit[0] = uSplit[0].replace(slashRegex, '/');
              url = uSplit.join(splitter);

              var rest = url;

              // trim before proceeding.
              // This is to support parse stuff like "  http://foo.com  \n"
              rest = rest.trim();

              if (!slashesDenoteHost && url.split('#').length === 1) {
                // Try fast path regexp
                var simplePath = simplePathPattern.exec(rest);
                if (simplePath) {
                  self.path = rest;
                  self.href = rest;
                  self.pathname = simplePath[1];
                  if (simplePath[2]) {
                    self.search = simplePath[2];
                    if (parseQueryString) {
                      self.query = parse(self.search.substr(1));
                    } else {
                      self.query = self.search.substr(1);
                    }
                  } else if (parseQueryString) {
                    self.search = '';
                    self.query = {};
                  }
                  return self;
                }
              }

              var proto = protocolPattern.exec(rest);
              if (proto) {
                proto = proto[0];
                var lowerProto = proto.toLowerCase();
                self.protocol = lowerProto;
                rest = rest.substr(proto.length);
              }

              // figure out if it's got a host
              // user@server is *always* interpreted as a hostname, and url
              // resolution will treat //foo/bar as host=foo,path=bar because that's
              // how the browser resolves relative URLs.
              if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
                var slashes = rest.substr(0, 2) === '//';
                if (slashes && !(proto && hostlessProtocol[proto])) {
                  rest = rest.substr(2);
                  self.slashes = true;
                }
              }
              var i, hec, l, p;
              if (!hostlessProtocol[proto] &&
                (slashes || (proto && !slashedProtocol[proto]))) {

                // there's a hostname.
                // the first instance of /, ?, ;, or # ends the host.
                //
                // If there is an @ in the hostname, then non-host chars *are* allowed
                // to the left of the last @ sign, unless some host-ending character
                // comes *before* the @-sign.
                // URLs are obnoxious.
                //
                // ex:
                // http://a@b@c/ => user:a@b host:c
                // http://a@b?@c => user:a host:c path:/?@c

                // v0.12 TODO(isaacs): This is not quite how Chrome does things.
                // Review our test case against browsers more comprehensively.

                // find the first instance of any hostEndingChars
                var hostEnd = -1;
                for (i = 0; i < hostEndingChars.length; i++) {
                  hec = rest.indexOf(hostEndingChars[i]);
                  if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                    hostEnd = hec;
                }

                // at this point, either we have an explicit point where the
                // auth portion cannot go past, or the last @ char is the decider.
                var auth, atSign;
                if (hostEnd === -1) {
                  // atSign can be anywhere.
                  atSign = rest.lastIndexOf('@');
                } else {
                  // atSign must be in auth portion.
                  // http://a@b/c@d => host:b auth:a path:/c@d
                  atSign = rest.lastIndexOf('@', hostEnd);
                }

                // Now we have a portion which is definitely the auth.
                // Pull that off.
                if (atSign !== -1) {
                  auth = rest.slice(0, atSign);
                  rest = rest.slice(atSign + 1);
                  self.auth = decodeURIComponent(auth);
                }

                // the host is the remaining to the left of the first non-host char
                hostEnd = -1;
                for (i = 0; i < nonHostChars.length; i++) {
                  hec = rest.indexOf(nonHostChars[i]);
                  if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                    hostEnd = hec;
                }
                // if we still have not hit it, then the entire thing is a host.
                if (hostEnd === -1)
                  hostEnd = rest.length;

                self.host = rest.slice(0, hostEnd);
                rest = rest.slice(hostEnd);

                // pull out port.
                parseHost(self);

                // we've indicated that there is a hostname,
                // so even if it's empty, it has to be present.
                self.hostname = self.hostname || '';

                // if hostname begins with [ and ends with ]
                // assume that it's an IPv6 address.
                var ipv6Hostname = self.hostname[0] === '[' &&
                  self.hostname[self.hostname.length - 1] === ']';

                // validate a little.
                if (!ipv6Hostname) {
                  var hostparts = self.hostname.split(/\./);
                  for (i = 0, l = hostparts.length; i < l; i++) {
                    var part = hostparts[i];
                    if (!part) continue;
                    if (!part.match(hostnamePartPattern)) {
                      var newpart = '';
                      for (var j = 0, k = part.length; j < k; j++) {
                        if (part.charCodeAt(j) > 127) {
                          // we replace non-ASCII char with a temporary placeholder
                          // we need this to make sure size of hostname is not
                          // broken by replacing non-ASCII by nothing
                          newpart += 'x';
                        } else {
                          newpart += part[j];
                        }
                      }
                      // we test again with ASCII char only
                      if (!newpart.match(hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match(hostnamePartStart);
                        if (bit) {
                          validParts.push(bit[1]);
                          notHost.unshift(bit[2]);
                        }
                        if (notHost.length) {
                          rest = '/' + notHost.join('.') + rest;
                        }
                        self.hostname = validParts.join('.');
                        break;
                      }
                    }
                  }
                }

                if (self.hostname.length > hostnameMaxLen) {
                  self.hostname = '';
                } else {
                  // hostnames are always lower case.
                  self.hostname = self.hostname.toLowerCase();
                }

                if (!ipv6Hostname) {
                  // IDNA Support: Returns a punycoded representation of "domain".
                  // It only converts parts of the domain name that
                  // have non-ASCII characters, i.e. it doesn't matter if
                  // you call it with a domain that already is ASCII-only.
                  self.hostname = toASCII(self.hostname);
                }

                p = self.port ? ':' + self.port : '';
                var h = self.hostname || '';
                self.host = h + p;
                self.href += self.host;

                // strip [ and ] from the hostname
                // the host field still retains them, though
                if (ipv6Hostname) {
                  self.hostname = self.hostname.substr(1, self.hostname.length - 2);
                  if (rest[0] !== '/') {
                    rest = '/' + rest;
                  }
                }
              }

              // now rest is set to the post-host stuff.
              // chop off any delim chars.
              if (!unsafeProtocol[lowerProto]) {

                // First, make 100% sure that any "autoEscape" chars get
                // escaped, even if encodeURIComponent doesn't think they
                // need to be.
                for (i = 0, l = autoEscape.length; i < l; i++) {
                  var ae = autoEscape[i];
                  if (rest.indexOf(ae) === -1)
                    continue;
                  var esc = encodeURIComponent(ae);
                  if (esc === ae) {
                    esc = escape(ae);
                  }
                  rest = rest.split(ae).join(esc);
                }
              }


              // chop off from the tail first.
              var hash = rest.indexOf('#');
              if (hash !== -1) {
                // got a fragment string.
                self.hash = rest.substr(hash);
                rest = rest.slice(0, hash);
              }
              var qm = rest.indexOf('?');
              if (qm !== -1) {
                self.search = rest.substr(qm);
                self.query = rest.substr(qm + 1);
                if (parseQueryString) {
                  self.query = parse(self.query);
                }
                rest = rest.slice(0, qm);
              } else if (parseQueryString) {
                // no query string, but parseQueryString still requested
                self.search = '';
                self.query = {};
              }
              if (rest) self.pathname = rest;
              if (slashedProtocol[lowerProto] &&
                self.hostname && !self.pathname) {
                self.pathname = '/';
              }

              //to support http.request
              if (self.pathname || self.search) {
                p = self.pathname || '';
                var s = self.search || '';
                self.path = p + s;
              }

              // finally, reconstruct the href based on what has been validated.
              self.href = format$1(self);
              return self;
            }

            function format$1(self) {
              var auth = self.auth || '';
              if (auth) {
                auth = encodeURIComponent(auth);
                auth = auth.replace(/%3A/i, ':');
                auth += '@';
              }

              var protocol = self.protocol || '',
                pathname = self.pathname || '',
                hash = self.hash || '',
                host = false,
                query = '';

              if (self.host) {
                host = auth + self.host;
              } else if (self.hostname) {
                host = auth + (self.hostname.indexOf(':') === -1 ?
                  self.hostname :
                  '[' + this.hostname + ']');
                if (self.port) {
                  host += ':' + self.port;
                }
              }

              if (self.query &&
                isObject(self.query) &&
                Object.keys(self.query).length) {
                query = stringify(self.query);
              }

              var search = self.search || (query && ('?' + query)) || '';

              if (protocol && protocol.substr(-1) !== ':') protocol += ':';

              // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
              // unless they had them to begin with.
              if (self.slashes ||
                (!protocol || slashedProtocol[protocol]) && host !== false) {
                host = '//' + (host || '');
                if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
              } else if (!host) {
                host = '';
              }

              if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
              if (search && search.charAt(0) !== '?') search = '?' + search;

              pathname = pathname.replace(/[?#]/g, function(match) {
                return encodeURIComponent(match);
              });
              search = search.replace('#', '%23');

              return protocol + host + pathname + search + hash;
            }

            Url.prototype.format = function() {
              return format$1(this);
            };

            Url.prototype.resolve = function(relative) {
              return this.resolveObject(urlParse(relative, false, true)).format();
            };

            Url.prototype.resolveObject = function(relative) {
              if (isString(relative)) {
                var rel = new Url();
                rel.parse(relative, false, true);
                relative = rel;
              }

              var result = new Url();
              var tkeys = Object.keys(this);
              for (var tk = 0; tk < tkeys.length; tk++) {
                var tkey = tkeys[tk];
                result[tkey] = this[tkey];
              }

              // hash is always overridden, no matter what.
              // even href="" will remove it.
              result.hash = relative.hash;

              // if the relative url is empty, then there's nothing left to do here.
              if (relative.href === '') {
                result.href = result.format();
                return result;
              }

              // hrefs like //foo/bar always cut to the protocol.
              if (relative.slashes && !relative.protocol) {
                // take everything except the protocol from relative
                var rkeys = Object.keys(relative);
                for (var rk = 0; rk < rkeys.length; rk++) {
                  var rkey = rkeys[rk];
                  if (rkey !== 'protocol')
                    result[rkey] = relative[rkey];
                }

                //urlParse appends trailing / to urls like http://www.example.com
                if (slashedProtocol[result.protocol] &&
                  result.hostname && !result.pathname) {
                  result.path = result.pathname = '/';
                }

                result.href = result.format();
                return result;
              }
              var relPath;
              if (relative.protocol && relative.protocol !== result.protocol) {
                // if it's a known url protocol, then changing
                // the protocol does weird things
                // first, if it's not file:, then we MUST have a host,
                // and if there was a path
                // to begin with, then we MUST have a path.
                // if it is file:, then the host is dropped,
                // because that's known to be hostless.
                // anything else is assumed to be absolute.
                if (!slashedProtocol[relative.protocol]) {
                  var keys = Object.keys(relative);
                  for (var v = 0; v < keys.length; v++) {
                    var k = keys[v];
                    result[k] = relative[k];
                  }
                  result.href = result.format();
                  return result;
                }

                result.protocol = relative.protocol;
                if (!relative.host && !hostlessProtocol[relative.protocol]) {
                  relPath = (relative.pathname || '').split('/');
                  while (relPath.length && !(relative.host = relPath.shift()));
                  if (!relative.host) relative.host = '';
                  if (!relative.hostname) relative.hostname = '';
                  if (relPath[0] !== '') relPath.unshift('');
                  if (relPath.length < 2) relPath.unshift('');
                  result.pathname = relPath.join('/');
                } else {
                  result.pathname = relative.pathname;
                }
                result.search = relative.search;
                result.query = relative.query;
                result.host = relative.host || '';
                result.auth = relative.auth;
                result.hostname = relative.hostname || relative.host;
                result.port = relative.port;
                // to support http.request
                if (result.pathname || result.search) {
                  var p = result.pathname || '';
                  var s = result.search || '';
                  result.path = p + s;
                }
                result.slashes = result.slashes || relative.slashes;
                result.href = result.format();
                return result;
              }

              var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
                isRelAbs = (
                  relative.host ||
                  relative.pathname && relative.pathname.charAt(0) === '/'
                ),
                mustEndAbs = (isRelAbs || isSourceAbs ||
                  (result.host && relative.pathname)),
                removeAllDots = mustEndAbs,
                srcPath = result.pathname && result.pathname.split('/') || [],
                psychotic = result.protocol && !slashedProtocol[result.protocol];
              relPath = relative.pathname && relative.pathname.split('/') || [];
              // if the url is a non-slashed url, then relative
              // links like ../.. should be able
              // to crawl up to the hostname, as well.  This is strange.
              // result.protocol has already been set by now.
              // Later on, put the first path part into the host field.
              if (psychotic) {
                result.hostname = '';
                result.port = null;
                if (result.host) {
                  if (srcPath[0] === '') srcPath[0] = result.host;
                  else srcPath.unshift(result.host);
                }
                result.host = '';
                if (relative.protocol) {
                  relative.hostname = null;
                  relative.port = null;
                  if (relative.host) {
                    if (relPath[0] === '') relPath[0] = relative.host;
                    else relPath.unshift(relative.host);
                  }
                  relative.host = null;
                }
                mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
              }
              var authInHost;
              if (isRelAbs) {
                // it's absolute.
                result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
                result.hostname = (relative.hostname || relative.hostname === '') ?
                  relative.hostname : result.hostname;
                result.search = relative.search;
                result.query = relative.query;
                srcPath = relPath;
                // fall through to the dot-handling below.
              } else if (relPath.length) {
                // it's relative
                // throw away the existing file, and take the new path instead.
                if (!srcPath) srcPath = [];
                srcPath.pop();
                srcPath = srcPath.concat(relPath);
                result.search = relative.search;
                result.query = relative.query;
              } else if (!isNullOrUndefined(relative.search)) {
                // just pull out the search.
                // like href='?foo'.
                // Put this after the other two cases because it simplifies the booleans
                if (psychotic) {
                  result.hostname = result.host = srcPath.shift();
                  //occationaly the auth can get stuck only in host
                  //this especially happens in cases like
                  //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                  authInHost = result.host && result.host.indexOf('@') > 0 ?
                    result.host.split('@') : false;
                  if (authInHost) {
                    result.auth = authInHost.shift();
                    result.host = result.hostname = authInHost.shift();
                  }
                }
                result.search = relative.search;
                result.query = relative.query;
                //to support http.request
                if (!isNull(result.pathname) || !isNull(result.search)) {
                  result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
                }
                result.href = result.format();
                return result;
              }

              if (!srcPath.length) {
                // no path at all.  easy.
                // we've already handled the other stuff above.
                result.pathname = null;
                //to support http.request
                if (result.search) {
                  result.path = '/' + result.search;
                } else {
                  result.path = null;
                }
                result.href = result.format();
                return result;
              }

              // if a url ENDs in . or .., then it must get a trailing slash.
              // however, if it ends in anything else non-slashy,
              // then it must NOT get a trailing slash.
              var last = srcPath.slice(-1)[0];
              var hasTrailingSlash = (
                (result.host || relative.host || srcPath.length > 1) &&
                (last === '.' || last === '..') || last === '');

              // strip single dots, resolve double dots to parent dir
              // if the path tries to go above the root, `up` ends up > 0
              var up = 0;
              for (var i = srcPath.length; i >= 0; i--) {
                last = srcPath[i];
                if (last === '.') {
                  srcPath.splice(i, 1);
                } else if (last === '..') {
                  srcPath.splice(i, 1);
                  up++;
                } else if (up) {
                  srcPath.splice(i, 1);
                  up--;
                }
              }

              // if the path is allowed to go above the root, restore leading ..s
              if (!mustEndAbs && !removeAllDots) {
                for (; up--; up) {
                  srcPath.unshift('..');
                }
              }

              if (mustEndAbs && srcPath[0] !== '' &&
                (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
                srcPath.unshift('');
              }

              if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
                srcPath.push('');
              }

              var isAbsolute = srcPath[0] === '' ||
                (srcPath[0] && srcPath[0].charAt(0) === '/');

              // put the host back
              if (psychotic) {
                result.hostname = result.host = isAbsolute ? '' :
                  srcPath.length ? srcPath.shift() : '';
                //occationaly the auth can get stuck only in host
                //this especially happens in cases like
                //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                authInHost = result.host && result.host.indexOf('@') > 0 ?
                  result.host.split('@') : false;
                if (authInHost) {
                  result.auth = authInHost.shift();
                  result.host = result.hostname = authInHost.shift();
                }
              }

              mustEndAbs = mustEndAbs || (result.host && srcPath.length);

              if (mustEndAbs && !isAbsolute) {
                srcPath.unshift('');
              }

              if (!srcPath.length) {
                result.pathname = null;
                result.path = null;
              } else {
                result.pathname = srcPath.join('/');
              }

              //to support request.http
              if (!isNull(result.pathname) || !isNull(result.search)) {
                result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
              }
              result.auth = relative.auth || result.auth;
              result.slashes = result.slashes || relative.slashes;
              result.href = result.format();
              return result;
            };

            Url.prototype.parseHost = function() {
              return parseHost(this);
            };

            function parseHost(self) {
              var host = self.host;
              var port = portPattern.exec(host);
              if (port) {
                port = port[0];
                if (port !== ':') {
                  self.port = port.substr(1);
                }
                host = host.substr(0, host.length - port.length);
              }
              if (host) self.hostname = host;
            }

            function request(opts, cb) {
              if (typeof opts === 'string')
                opts = urlParse(opts);


              // Normally, the page is loaded from http or https, so not specifying a protocol
              // will result in a (valid) protocol-relative url. However, this won't work if
              // the protocol is something else, like 'file:'
              var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

              var protocol = opts.protocol || defaultProtocol;
              var host = opts.hostname || opts.host;
              var port = opts.port;
              var path = opts.path || '/';

              // Necessary for IPv6 addresses
              if (host && host.indexOf(':') !== -1)
                host = '[' + host + ']';

              // This may be a relative url. The browser should always be able to interpret it correctly.
              opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
              opts.method = (opts.method || 'GET').toUpperCase();
              opts.headers = opts.headers || {};

              // Also valid opts.auth, opts.mode

              var req = new ClientRequest(opts);
              if (cb)
                req.on('response', cb);
              return req
            }

            function get(opts, cb) {
              var req = request(opts, cb);
              req.end();
              return req
            }

            function Agent() {}
            Agent.defaultMaxSockets = 4;

            var METHODS = [
              'CHECKOUT',
              'CONNECT',
              'COPY',
              'DELETE',
              'GET',
              'HEAD',
              'LOCK',
              'M-SEARCH',
              'MERGE',
              'MKACTIVITY',
              'MKCOL',
              'MOVE',
              'NOTIFY',
              'OPTIONS',
              'PATCH',
              'POST',
              'PROPFIND',
              'PROPPATCH',
              'PURGE',
              'PUT',
              'REPORT',
              'SEARCH',
              'SUBSCRIBE',
              'TRACE',
              'UNLOCK',
              'UNSUBSCRIBE'
            ];
            var STATUS_CODES = {
              100: 'Continue',
              101: 'Switching Protocols',
              102: 'Processing', // RFC 2518, obsoleted by RFC 4918
              200: 'OK',
              201: 'Created',
              202: 'Accepted',
              203: 'Non-Authoritative Information',
              204: 'No Content',
              205: 'Reset Content',
              206: 'Partial Content',
              207: 'Multi-Status', // RFC 4918
              300: 'Multiple Choices',
              301: 'Moved Permanently',
              302: 'Moved Temporarily',
              303: 'See Other',
              304: 'Not Modified',
              305: 'Use Proxy',
              307: 'Temporary Redirect',
              400: 'Bad Request',
              401: 'Unauthorized',
              402: 'Payment Required',
              403: 'Forbidden',
              404: 'Not Found',
              405: 'Method Not Allowed',
              406: 'Not Acceptable',
              407: 'Proxy Authentication Required',
              408: 'Request Time-out',
              409: 'Conflict',
              410: 'Gone',
              411: 'Length Required',
              412: 'Precondition Failed',
              413: 'Request Entity Too Large',
              414: 'Request-URI Too Large',
              415: 'Unsupported Media Type',
              416: 'Requested Range Not Satisfiable',
              417: 'Expectation Failed',
              418: 'I\'m a teapot', // RFC 2324
              422: 'Unprocessable Entity', // RFC 4918
              423: 'Locked', // RFC 4918
              424: 'Failed Dependency', // RFC 4918
              425: 'Unordered Collection', // RFC 4918
              426: 'Upgrade Required', // RFC 2817
              428: 'Precondition Required', // RFC 6585
              429: 'Too Many Requests', // RFC 6585
              431: 'Request Header Fields Too Large', // RFC 6585
              500: 'Internal Server Error',
              501: 'Not Implemented',
              502: 'Bad Gateway',
              503: 'Service Unavailable',
              504: 'Gateway Time-out',
              505: 'HTTP Version Not Supported',
              506: 'Variant Also Negotiates', // RFC 2295
              507: 'Insufficient Storage', // RFC 4918
              509: 'Bandwidth Limit Exceeded',
              510: 'Not Extended', // RFC 2774
              511: 'Network Authentication Required' // RFC 6585
            };

            var http = {
              request,
              get,
              Agent,
              METHODS,
              STATUS_CODES
            };

            var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

            function unwrapExports (x) {
            	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
            }

            function createCommonjsModule(fn, module) {
            	return module = { exports: {} }, fn(module, module.exports), module.exports;
            }

            function getCjsExportFromNamespace (n) {
            	return n && n['default'] || n;
            }

            var validUrl = createCommonjsModule(function (module) {
            (function(module) {

                module.exports.is_uri = is_iri;
                module.exports.is_http_uri = is_http_iri;
                module.exports.is_https_uri = is_https_iri;
                module.exports.is_web_uri = is_web_iri;
                // Create aliases
                module.exports.isUri = is_iri;
                module.exports.isHttpUri = is_http_iri;
                module.exports.isHttpsUri = is_https_iri;
                module.exports.isWebUri = is_web_iri;


                // private function
                // internal URI spitter method - direct from RFC 3986
                var splitUri = function(uri) {
                    var splitted = uri.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
                    return splitted;
                };

                function is_iri(value) {
                    if (!value) {
                        return;
                    }

                    // check for illegal characters
                    if (/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(value)) return;

                    // check for hex escapes that aren't complete
                    if (/%[^0-9a-f]/i.test(value)) return;
                    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;

                    var splitted = [];
                    var scheme = '';
                    var authority = '';
                    var path = '';
                    var query = '';
                    var fragment = '';
                    var out = '';

                    // from RFC 3986
                    splitted = splitUri(value);
                    scheme = splitted[1]; 
                    authority = splitted[2];
                    path = splitted[3];
                    query = splitted[4];
                    fragment = splitted[5];

                    // scheme and path are required, though the path can be empty
                    if (!(scheme && scheme.length && path.length >= 0)) return;

                    // if authority is present, the path must be empty or begin with a /
                    if (authority && authority.length) {
                        if (!(path.length === 0 || /^\//.test(path))) return;
                    } else {
                        // if authority is not present, the path must not start with //
                        if (/^\/\//.test(path)) return;
                    }

                    // scheme must begin with a letter, then consist of letters, digits, +, ., or -
                    if (!/^[a-z][a-z0-9\+\-\.]*$/.test(scheme.toLowerCase()))  return;

                    // re-assemble the URL per section 5.3 in RFC 3986
                    out += scheme + ':';
                    if (authority && authority.length) {
                        out += '//' + authority;
                    }

                    out += path;

                    if (query && query.length) {
                        out += '?' + query;
                    }

                    if (fragment && fragment.length) {
                        out += '#' + fragment;
                    }

                    return out;
                }

                function is_http_iri(value, allowHttps) {
                    if (!is_iri(value)) {
                        return;
                    }

                    var splitted = [];
                    var scheme = '';
                    var authority = '';
                    var path = '';
                    var port = '';
                    var query = '';
                    var fragment = '';
                    var out = '';

                    // from RFC 3986
                    splitted = splitUri(value);
                    scheme = splitted[1]; 
                    authority = splitted[2];
                    path = splitted[3];
                    query = splitted[4];
                    fragment = splitted[5];

                    if (!scheme)  return;

                    if(allowHttps) {
                        if (scheme.toLowerCase() != 'https') return;
                    } else {
                        if (scheme.toLowerCase() != 'http') return;
                    }

                    // fully-qualified URIs must have an authority section that is
                    // a valid host
                    if (!authority) {
                        return;
                    }

                    // enable port component
                    if (/:(\d+)$/.test(authority)) {
                        port = authority.match(/:(\d+)$/)[0];
                        authority = authority.replace(/:\d+$/, '');
                    }

                    out += scheme + ':';
                    out += '//' + authority;
                    
                    if (port) {
                        out += port;
                    }
                    
                    out += path;
                    
                    if(query && query.length){
                        out += '?' + query;
                    }

                    if(fragment && fragment.length){
                        out += '#' + fragment;
                    }
                    
                    return out;
                }

                function is_https_iri(value) {
                    return is_http_iri(value, true);
                }

                function is_web_iri(value) {
                    return (is_http_iri(value) || is_https_iri(value));
                }

            })(module);
            });

            /*
            The MIT License (MIT)

            Copyright (c) 2016 CoderPuppy

            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:

            The above copyright notice and this permission notice shall be included in all
            copies or substantial portions of the Software.

            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
            SOFTWARE.

            */
            var _endianness;
            function endianness() {
              if (typeof _endianness === 'undefined') {
                var a = new ArrayBuffer(2);
                var b = new Uint8Array(a);
                var c = new Uint16Array(a);
                b[0] = 1;
                b[1] = 2;
                if (c[0] === 258) {
                  _endianness = 'BE';
                } else if (c[0] === 513){
                  _endianness = 'LE';
                } else {
                  throw new Error('unable to figure out endianess');
                }
              }
              return _endianness;
            }

            function hostname() {
              if (typeof global$1.location !== 'undefined') {
                return global$1.location.hostname
              } else return '';
            }

            function loadavg() {
              return [];
            }

            function uptime$1() {
              return 0;
            }

            function freemem() {
              return Number.MAX_VALUE;
            }

            function totalmem() {
              return Number.MAX_VALUE;
            }

            function cpus() {
              return [];
            }

            function type() {
              return 'Browser';
            }

            function release$1 () {
              if (typeof global$1.navigator !== 'undefined') {
                return global$1.navigator.appVersion;
              }
              return '';
            }

            function networkInterfaces(){}
            function getNetworkInterfaces(){}

            function arch() {
              return 'javascript';
            }

            function platform$1() {
              return 'browser';
            }

            function tmpDir() {
              return '/tmp';
            }
            var tmpdir = tmpDir;

            var EOL = '\n';
            var os = {
              EOL: EOL,
              tmpdir: tmpdir,
              tmpDir: tmpDir,
              networkInterfaces:networkInterfaces,
              getNetworkInterfaces: getNetworkInterfaces,
              release: release$1,
              type: type,
              cpus: cpus,
              totalmem: totalmem,
              freemem: freemem,
              uptime: uptime$1,
              loadavg: loadavg,
              hostname: hostname,
              endianness: endianness,
            };

            var os$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        endianness: endianness,
                        hostname: hostname,
                        loadavg: loadavg,
                        uptime: uptime$1,
                        freemem: freemem,
                        totalmem: totalmem,
                        cpus: cpus,
                        type: type,
                        release: release$1,
                        networkInterfaces: networkInterfaces,
                        getNetworkInterfaces: getNetworkInterfaces,
                        arch: arch,
                        platform: platform$1,
                        tmpDir: tmpDir,
                        tmpdir: tmpdir,
                        EOL: EOL,
                        'default': os
            });

            var isUtf8 = createCommonjsModule(function (module, exports) {
            exports = module.exports = function(bytes)
            {
                var i = 0;
                while(i < bytes.length)
                {
                    if(     (// ASCII
                                bytes[i] == 0x09 ||
                                bytes[i] == 0x0A ||
                                bytes[i] == 0x0D ||
                                (0x20 <= bytes[i] && bytes[i] <= 0x7E)
                            )
                      ) {
                          i += 1;
                          continue;
                      }

                    if(     (// non-overlong 2-byte
                                (0xC2 <= bytes[i] && bytes[i] <= 0xDF) &&
                                (0x80 <= bytes[i+1] && bytes[i+1] <= 0xBF)
                            )
                      ) {
                          i += 2;
                          continue;
                      }

                    if(     (// excluding overlongs
                                bytes[i] == 0xE0 &&
                                (0xA0 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)
                            ) ||
                            (// straight 3-byte
                             ((0xE1 <= bytes[i] && bytes[i] <= 0xEC) ||
                              bytes[i] == 0xEE ||
                              bytes[i] == 0xEF) &&
                             (0x80 <= bytes[i + 1] && bytes[i+1] <= 0xBF) &&
                             (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)
                            ) ||
                            (// excluding surrogates
                             bytes[i] == 0xED &&
                             (0x80 <= bytes[i+1] && bytes[i+1] <= 0x9F) &&
                             (0x80 <= bytes[i+2] && bytes[i+2] <= 0xBF)
                            )
                      ) {
                          i += 3;
                          continue;
                      }

                    if(     (// planes 1-3
                                bytes[i] == 0xF0 &&
                                (0x90 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                                (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&
                                (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)
                            ) ||
                            (// planes 4-15
                             (0xF1 <= bytes[i] && bytes[i] <= 0xF3) &&
                             (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&
                             (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&
                             (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)
                            ) ||
                            (// plane 16
                             bytes[i] == 0xF4 &&
                             (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x8F) &&
                             (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&
                             (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)
                            )
                      ) {
                          i += 4;
                          continue;
                      }

                    return false;
                }

                return true;
            };
            });

            var stripBom = function (x) {
            	// Catches EFBBBF (UTF-8 BOM) because the buffer-to-string
            	// conversion translates it to FEFF (UTF-16 BOM)
            	if (typeof x === 'string' && x.charCodeAt(0) === 0xFEFF) {
            		return x.slice(1);
            	}

            	if (isBuffer(x) && isUtf8(x) &&
            		x[0] === 0xEF && x[1] === 0xBB && x[2] === 0xBF) {
            		return x.slice(3);
            	}

            	return x;
            };

            var numExp = /^[0-9]+$/;
            var defParam = function (params) {
              var _param = {
                constructResult: true, //set to false to not construct result in memory. suitable for big csv data
                delimiter: ',', // change the delimiter of csv columns. It is able to use an array to specify potencial delimiters. e.g. [",","|",";"]
                ignoreColumns: [], // columns to ignore upon input.
                includeColumns: [], // columns to include upon input.
                quote: '"', //quote for a column containing delimiter.
                trim: true, //trim column's space charcters
                checkType: false, //whether check column type
                toArrayString: false, //stream down stringified json array instead of string of json. (useful if downstream is file writer etc)
                ignoreEmpty: false, //Ignore empty value while parsing. if a value of the column is empty, it will be skipped parsing.
                workerNum: getEnv("CSV_WORKER", 1), //number of parallel workers. If multi-core CPU available, increase the number will get better performance for large csv data.
                fork: false, //use another CPU core to convert the csv stream
                noheader: false, //indicate if first line of CSV file is header or not.
                headers: null, //an array of header strings. If noheader is false and headers is array, csv header will be ignored.
                flatKeys: false, // Don't interpret dots and square brackets in header fields as nested object or array identifiers at all.
                maxRowLength: 0, //the max character a csv row could have. 0 means infinite. If max number exceeded, parser will emit "error" of "row_exceed". if a possibly corrupted csv data provided, give it a number like 65535 so the parser wont consume memory. default: 0
                checkColumn: false, //whether check column number of a row is the same as headers. If column number mismatched headers number, an error of "mismatched_column" will be emitted.. default: false
                escape: '"', //escape char for quoted column
                colParser:{}, //flags on columns to alter field processing.

                /**below are internal params */
                _columnConv:[],
                _headerType: [],
                _headerTitle: [],
                _headerFlag: [],
                _headers: null,
                _needFilterRow: false
              };
              if (!params) {
                params = {};
              }
              for (var key in params) {
                if (params.hasOwnProperty(key)) {
                  if (Array.isArray(params[key])) {
                    _param[key] = [].concat(params[key]);
                  } else {
                    _param[key] = params[key];
                  }
                }
              }
              if (_param.ignoreColumns.length > 0 && !numExp.test(_param.ignoreColumns.join(""))) {
                _param._postIgnoreColumns = true;
              }
              if (_param.includeColumns.length > 0 && !numExp.test(_param.includeColumns.join(""))) {
                _param._postIncludeColumns = true;
              }

              if (_param.ignoreColumns.length || _param.includeColumns.length) {
                _param._needFilterRow = true;
                if (!_param._postIgnoreColumns){
                  _param.ignoreColumns.sort(function (a, b) { return b-a;});
                }
              }


              return _param;
            };

            function getEnv(key, def) {
              if (process.env[key]) {
                return process.env[key];
              } else {
                return def;
              }
            }

            var os$2 = getCjsExportFromNamespace(os$1);

            //return eol from a data chunk.
            var eol = os$2.EOL;
            var getEol = function(data, param) {
              if (!param.eol && data) {
                for (var i = 0, len = data.length; i < len; i++) {
                  if (data[i] === "\r") {
                    if (data[i + 1] === "\n") {
                      param.eol = "\r\n";
                    } else if (data[i + 1]) {
                      param.eol = "\r";
                    }
                    return param.eol;
                  } else if (data[i] === "\n") {
                    param.eol = "\n";
                    return param.eol;
                  }
                }
              }
              return param.eol;
            };

            /**
             * convert data chunk to file lines array
             * @param  {string} data  data chunk as utf8 string
             * @param  {object} param Converter param object
             * @return {Object}   {lines:[line1,line2...],partial:String}
             */
            var fileline = function(data, param) {
              var eol = getEol(data,param);
              var lines = data.split(eol);
              var partial = lines.pop();
              return {lines: lines, partial: partial};
            };

            var getDelimiter_1 = getDelimiter;
            var defaulDelimiters = [",", "|", "\t", ";", ":"];
            function getDelimiter(rowStr,param) {
              var checker;
              if (param.delimiter === "auto"){
                checker = defaulDelimiters;
              } else if (param.delimiter instanceof Array) {
                checker = param.delimiter;
              } else {
                return param.delimiter;
              }
              var count = 0;
              var rtn = ",";
              checker.forEach(function(delim) {
                var delimCount = rowStr.split(delim).length;
                if (delimCount > count) {
                  rtn = delim;
                  count = delimCount;
                }
              });
              return rtn;
            }

            var filterRow=function filterRow(row, param) {
              if (param.ignoreColumns instanceof Array && param.ignoreColumns.length > 0) {
                for (var igRow = 0, igColLen = param.ignoreColumns.length; igRow < igColLen; igRow++) {
                  if (param.ignoreColumns[igRow] >= 0) {
                    row.splice(param.ignoreColumns[igRow], 1);
                  }
                }
              }
              if (param.includeColumns instanceof Array && param.includeColumns.length > 0) {
                var cleanRowArr = [];
                for (var inRow = 0, inColLen = param.includeColumns.length; inRow < inColLen; inRow++) {
                  if (param.includeColumns[inRow] >= 0) {
                    cleanRowArr.push(row[param.includeColumns[inRow]]);
                  }
                }
                row = cleanRowArr;
              }
              return row;
            };

            /**
             * Convert a line of string to csv columns according to its delimiter
             * the param._header may not be ready when this is called.
             * @param  {[type]} rowStr [description]
             * @param  {[type]} param  [Converter param]
             * @return {[type]}        {cols:["a","b","c"],closed:boolean} the closed field indicate if the row is a complete row
             */
            var rowSplit = function rowSplit(rowStr, param) {
              if (rowStr === "") {
                return { cols: [], closed: true };
              }
              var quote = param.quote;
              var trim = param.trim;
              var escape = param.escape;
              if (param.delimiter instanceof Array || param.delimiter.toLowerCase() === "auto") {
                param.delimiter = getDelimiter_1(rowStr, param);
              }
              var delimiter = param.delimiter;
              var rowArr = rowStr.split(delimiter);
              if (quote === "off") {
                return { cols: rowArr, closed: true };
              }
              var row = [];
              var inquote = false;
              var quoteBuff = '';
              for (var i = 0, rowLen = rowArr.length; i < rowLen; i++) {
                var e = rowArr[i];
                if (!inquote && trim) {
                  e = e.trim();
                }
                var len = e.length;
                if (!inquote) {
                  if (isQuoteOpen(e, param)) { //quote open
                    e = e.substr(1);
                    if (isQuoteClose(e, param)) { //quote close
                      e = e.substring(0, e.length - 1);
                      e = _escapeQuote(e, quote, escape);
                      row.push(e);
                      continue;
                    } else {
                      inquote = true;
                      quoteBuff += e;
                      continue;
                    }
                  } else {
                    row.push(e);
                    continue;
                  }
                } else { //previous quote not closed
                  if (isQuoteClose(e, param)) { //close double quote
                    inquote = false;
                    e = e.substr(0, len - 1);
                    quoteBuff += delimiter + e;
                    quoteBuff = _escapeQuote(quoteBuff, quote, escape);
                    if (trim) {
                      quoteBuff = quoteBuff.trimRight();
                    }
                    row.push(quoteBuff);
                    quoteBuff = "";
                  } else {
                    quoteBuff += delimiter + e;
                  }
                }
              }

              if (!inquote && param._needFilterRow) {
                row = filterRow(row, param);
              }

              return { cols: row, closed: !inquote };
              // if (param.workerNum<=1){
              // }else{
              //   if (inquote && quoteBuff.length>0){//for multi core, quote will be closed at the end of line
              //     quoteBuff=_escapeQuote(quoteBuff,quote,escape);;
              //     if (trim){
              //       quoteBuff=quoteBuff.trimRight();
              //     }
              //     row.push(quoteBuff);
              //   }
              //   return {cols:row,closed:true};
              // }

            };



            function isQuoteOpen(str, param) {
              var quote = param.quote;
              var escape = param.escape;
              return str[0] === quote && (
                str[1] !== quote ||
                str[1] === escape && (str[2] === quote || str.length === 2));
            }
            function isQuoteClose(str, param) {
              var quote = param.quote;
              var count = 0;
              var idx = str.length - 1;
              var escape = param.escape;
              while (str[idx] === quote || str[idx] === escape) {
                idx--;
                count++;
              }
              return count % 2 !== 0;
            }

            var cachedRegExp = {};
            function _escapeQuote(segment, quote, escape) {

              var key = "es|" + quote + "|" + escape;
              if (cachedRegExp[key] === undefined) {

                // if (escape === "\\") {
                //   escape = "\\\\";
                // }
                cachedRegExp[key] = new RegExp('\\'+escape + '\\'+quote, 'g');
              }
              var regExp = cachedRegExp[key];
              // console.log(regExp,segment);
              return segment.replace(regExp, quote);
            }

            /**
             * Convert lines to csv columns
             * @param  {[type]} lines [file lines]
             * @param  {[type]} param [Converter param]
             * @return {[type]}  {lines:[[col1,col2,col3...]],partial:String}
             */
            var csvline = function(lines, param) {
              var csvLines = [];
              var left = "";
              while (lines.length) {
                var line = left + lines.shift();
                var row = rowSplit(line, param);
                  if (row.closed || param.alwaysSplitAtEOL) {
                  csvLines.push(row.cols);
                  left = "";
                } else {
                  left = line + (getEol(line, param) || "\n"); // if unable to getEol from data, assume "\n"
                }
              }
              return {lines: csvLines, partial: left};
            };

            /**
             * Convert data chunk to csv lines with cols
             * @param  {[type]} data   [description]
             * @param  {[type]} params [description]
             * @return {[type]}    {lines:[[col1,col2,col3]],partial:String}
             */
            var fileLineToCSVLine = function(fileLine, params) {
              var lines = fileLine.lines;
              var csvLines = csvline(lines,params);
              return {
                lines: csvLines.lines,
                partial: csvLines.partial + fileLine.partial
              };
            };

            var explicitTypes = ["number", "string"];

            function Parser(name, regExp, parser, processSafe) {
              this.name = typeof name === "undefined" ? "Default" : name;
              this.regExp = null;
              this.type = "";
              this.processSafe = processSafe;
              if (typeof regExp !== "undefined") {
                if (typeof regExp === "string") {
                  this.regExp = new RegExp(regExp);
                } else {
                  this.regExp = regExp;
                }
              }
              if (typeof parser !== "undefined") {
                this.parse = parser;
              }
            }
            // var numReg = /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/;
            Parser.prototype.convertType = function(item) {
              var type=this.type;
              if (type === 'number') {
                var rtn = parseFloat(item);
                if (isNaN(rtn)) {
                  return 0;
                } else {
                  return rtn;
                }
              } else if (this.param && this.param.checkType && type === '') {
                var trimed = item.trim();
                if (trimed === ""){
                  return trimed;
                }
                if (!isNaN(trimed)) {
                  return parseFloat(trimed);
                } else if (trimed.length === 5 && trimed.toLowerCase() === "false") {
                  return false;
                } else if (trimed.length === 4 && trimed.toLowerCase() === "true") {
                  return true;
                } else if (trimed[0] === "{" && trimed[trimed.length - 1] === "}" || trimed[0] === "[" && trimed[trimed.length - 1]==="]") {
                  try {
                    return JSON.parse(trimed);
                  } catch (e) {
                    return item;
                  }
                } else {
                  return item;
                }
              }
              return item;
            };

            Parser.prototype.setParam = function(param) {
              this.param = param;
            };

            Parser.prototype.test = function(str) {
              return this.regExp && this.regExp.test(str);
            };

            Parser.prototype.parse = function(params) {
              params.resultRow[params.head] = params.item;
            };

            Parser.prototype.getHeadStr = function() {
              if (this.headStr) {
                return this.headStr;
              } else {
                var head = this.head;
                this.headStr = head.replace(this.regExp, '');
                if (!this.headStr) {
                  this.headStr = "Unknown Header";
                }
                return this.getHeadStr();
              }
            };

            Parser.prototype.getHead = function() {
              return this.head;
            };

            Parser.prototype.initHead = function(columnTitle) {
              this.head = columnTitle;
              var wholeHead = columnTitle.replace(this.regExp, '');
              //init type && headStr
              var splitArr = wholeHead.split("#!");
              if (splitArr.length === 1) { //no explicit type
                this.headStr = splitArr[0];
              } else {
                var type = splitArr.shift();
                if (explicitTypes.indexOf(type.toLowerCase()) > -1) {
                  this.type = type;
                  this.headStr = splitArr.join("#!");
                } else { //no explicit type
                  this.headStr = wholeHead;
                }
              }
              if (!this.headStr) {
                this.headStr = wholeHead ? wholeHead : "Unknown Head";
              }
            };

            Parser.prototype.clone = function() {
              var obj = Object.create(this);
              var newParser = new Parser();
              for (var key in obj) {
                newParser[key] = obj[key];
              }
              return newParser;
            };

            Parser.prototype.getName = function() {
              return this.name;
            };

            var parser = Parser;

            var parser_array = {
              "name": "array",
              "processSafe":true,
              "regExp": /^\*array\*/,
              "parserFunc": function parser_array(params) {
                var fieldName = params.head.replace(this.regExp, '');
                if (params.resultRow[fieldName] === undefined) {
                  params.resultRow[fieldName] = [];
                }
                params.resultRow[fieldName].push(params.item);
              }
            };

            var arrReg = /\[([0-9]*)\]/;


            function processHead(pointer, headArr, arrReg, flatKeys) {
              var headStr, match, index;
              while (headArr.length > 1) {
                headStr = headArr.shift();
                // match = headStr.match(arrReg);
                match = flatKeys ? false : headStr.match(arrReg);
                if (match) { //if its array, we need add an empty json object into specified index.
                  if (pointer[headStr.replace(match[0], '')] === undefined) {
                    pointer[headStr.replace(match[0], '')] = [];
                  }
                  index = match[1]; //get index where json object should stay
                  pointer = pointer[headStr.replace(match[0], '')];
                  if (index === '') { //if its dynamic array index, push to the end
                    index = pointer.length;
                  }
                  if (!pointer[index]) { //current index in the array is empty. we need create a new json object.
                    pointer[index] = {};
                  }
                  pointer = pointer[index];
                } else { //not array, just normal JSON object. we get the reference of it
                  if (pointer[headStr] === undefined) {
                    pointer[headStr] = {};
                  }
                  pointer = pointer[headStr];
                }
              }
              return pointer;
            }
            var parser_json = {
              "name": "json",
              "processSafe": true,
              "regExp": /^\*json\*/,
              "parserFunc": function parser_json(params) {
                var fieldStr = this.getHeadStr();
                var headArr = (params.config && params.config.flatKeys) ? [fieldStr] : fieldStr.split('.');
                var match, index, key;
                //now the pointer is pointing the position to add a key/value pair.
                var pointer = processHead(params.resultRow, headArr, arrReg, params.config && params.config.flatKeys);
                key = headArr.shift();
                match = (params.config && params.config.flatKeys) ? false : key.match(arrReg);
                if (match) { // the last element is an array, we need check and treat it as an array.
                  try {
                    key = key.replace(match[0], '');
                    if (!pointer[key] || !(pointer[key] instanceof Array)) {
                      pointer[key] = [];
                    }
                    if (pointer[key]) {
                      index = match[1];
                      if (index === '') {
                        index = pointer[key].length;
                      }
                      pointer[key][index] = params.item;
                    } else {
                      params.resultRow[fieldStr] = params.item;
                    }
                  } catch (e) {
                    params.resultRow[fieldStr] = params.item;
                  }
                } else {
                  if (typeof pointer === "string"){
                    params.resultRow[fieldStr] = params.item;
                  }else {
                    pointer[key] = params.item;
                  }
                }
              }
            };

            var parser_omit = {
              "name": "omit",
              "regExp": /^\*omit\*/,
              "processSafe":true,
              "parserFunc": function parser_omit() {}
            };

            var parser_jsonarray = {
              "name": "jsonarray",
              "processSafe":true,
              "regExp": /^\*jsonarray\*/,
              "parserFunc": function parser_jsonarray (params) {
                var fieldStr = params.head.replace(this.regExp, "");
                var headArr = fieldStr.split('.');
                var pointer = params.resultRow;
                while (headArr.length > 1) {
                  var headStr = headArr.shift();
                  if (pointer[headStr] === undefined) {
                    pointer[headStr] = {};
                  }
                  pointer = pointer[headStr];
                }
                var arrFieldName = headArr.shift();
                if (pointer[arrFieldName] === undefined) {
                  pointer[arrFieldName] = [];
                }
                pointer[arrFieldName].push(params.item);
              }
            };

            var parser_flat = {
              "name": "flat",
              "processSafe": true,
              "regExp": /^\*flat\*/,
              "parserFunc": function parser_flat (params) {
                 var key = this.getHeadStr();
                 var val = params.item;
                 params.resultRow[key] = val;
              }
            };

            var defaultParsers = [
              parser_array,
              parser_json,
              parser_omit,
              parser_jsonarray,
              parser_flat
            ];

            //implementation
            var registeredParsers = [];



            function registerParser (parser$1) {
              if (parser$1 instanceof parser && registeredParsers.indexOf(parser$1) === -1) {
                registeredParsers.push(parser$1); // TODO indexOf doesn't work with object references
              }
            }

            function getParser(columnTitle, param) {
              var inst, parser$1;
              function getParserByName(parserName) {
                var parser$1;
                registeredParsers.forEach(function(p){
                  if (p.getName() === parserName){
                    parser$1 = p;
                  }
                });
                if (parser$1) {
                  var inst = parser$1.clone();
                  return inst;
                }
                return new parser(); //TODO remove new
              }
              columnTitle = columnTitle ? columnTitle : '';
              registeredParsers.forEach(function(p) {
                if (p.test(columnTitle)) {
                  parser$1=p;
                }
              });
              if (parser$1) {
                inst = parser$1.clone();
                inst.head = columnTitle;
              } else {
                inst = getParserByName("json");
              }
              inst.setParam(param);
              inst.initHead(columnTitle);
              return inst;
            }

            function addParser(name, regExp, parseFunc) {
              var parser$1 = new parser(name, regExp, parseFunc,false); //TODO remove new
              registerParser(parser$1);
            }

            function initParsers(row, param) {
              var parsers = [];
              row.forEach(function (columnTitle) {
                parsers.push(getParser(columnTitle, param));
              });
              return parsers;
            }

            defaultParsers.forEach(function (parserCfg){
              //TODO refactor this
              addParser(parserCfg.name, parserCfg.regExp, parserCfg.parserFunc, parserCfg.processSafe);
            });

            //module interfaces
            var addParser_1 = addParser;
            var initParsers_1 = initParsers;
            var getParser_1 = getParser;

            var parserMgr = {
            	addParser: addParser_1,
            	initParsers: initParsers_1,
            	getParser: getParser_1
            };

            var CSVError_1 = CSVError;
            function CSVError(err, index, extra) {
              Error.call(this, "");
              this.err = err;
              this.line = index;
              this.extra = extra;
              this.message = "Error: " + err + ". JSON Line number: " + index + (extra ? " near: " + extra : "");
              this.name = "CSV Error";
            }
            util.inherits(CSVError, Error);

            CSVError.prototype.toString = function() {
              return JSON.stringify([this.err, this.line, this.extra]);
            };

            CSVError.column_mismatched = function(index, extra) {
              return new CSVError("column_mismatched", index, extra);
            };

            CSVError.unclosed_quote = function(index, extra) {
              return new CSVError("unclosed_quote", index, extra);
            };

            CSVError.fromArray = function(arr) {
              return new CSVError(arr[0], arr[1], arr[2]);
            };

            /** Detect free variable `global` from Node.js. */
            var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

            var _freeGlobal = freeGlobal;

            /** Detect free variable `self`. */
            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

            /** Used as a reference to the global object. */
            var root = _freeGlobal || freeSelf || Function('return this')();

            var _root = root;

            /** Built-in value references. */
            var Symbol$1 = _root.Symbol;

            var _Symbol = Symbol$1;

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty$2 = objectProto.hasOwnProperty;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Built-in value references. */
            var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
              var isOwn = hasOwnProperty$2.call(value, symToStringTag),
                  tag = value[symToStringTag];

              try {
                value[symToStringTag] = undefined;
                var unmasked = true;
              } catch (e) {}

              var result = nativeObjectToString.call(value);
              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag] = tag;
                } else {
                  delete value[symToStringTag];
                }
              }
              return result;
            }

            var _getRawTag = getRawTag;

            /** Used for built-in method references. */
            var objectProto$1 = Object.prototype;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString$1 = objectProto$1.toString;

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString$1(value) {
              return nativeObjectToString$1.call(value);
            }

            var _objectToString = objectToString$1;

            /** `Object#toString` result references. */
            var nullTag = '[object Null]',
                undefinedTag = '[object Undefined]';

            /** Built-in value references. */
            var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
              if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
              }
              return (symToStringTag$1 && symToStringTag$1 in Object(value))
                ? _getRawTag(value)
                : _objectToString(value);
            }

            var _baseGetTag = baseGetTag;

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject$1(value) {
              var type = typeof value;
              return value != null && (type == 'object' || type == 'function');
            }

            var isObject_1 = isObject$1;

            /** `Object#toString` result references. */
            var asyncTag = '[object AsyncFunction]',
                funcTag = '[object Function]',
                genTag = '[object GeneratorFunction]',
                proxyTag = '[object Proxy]';

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction$2(value) {
              if (!isObject_1(value)) {
                return false;
              }
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 9 which returns 'object' for typed arrays and other constructors.
              var tag = _baseGetTag(value);
              return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }

            var isFunction_1 = isFunction$2;

            /** Used to detect overreaching core-js shims. */
            var coreJsData = _root['__core-js_shared__'];

            var _coreJsData = coreJsData;

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function() {
              var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
              return uid ? ('Symbol(src)_1.' + uid) : '';
            }());

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
              return !!maskSrcKey && (maskSrcKey in func);
            }

            var _isMasked = isMasked;

            /** Used for built-in method references. */
            var funcProto = Function.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
              if (func != null) {
                try {
                  return funcToString.call(func);
                } catch (e) {}
                try {
                  return (func + '');
                } catch (e) {}
              }
              return '';
            }

            var _toSource = toSource;

            /**
             * Used to match `RegExp`
             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
             */
            var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

            /** Used to detect host constructors (Safari). */
            var reIsHostCtor = /^\[object .+?Constructor\]$/;

            /** Used for built-in method references. */
            var funcProto$1 = Function.prototype,
                objectProto$2 = Object.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString$1 = funcProto$1.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp('^' +
              funcToString$1.call(hasOwnProperty$3).replace(reRegExpChar, '\\$&')
              .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
            );

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
              if (!isObject_1(value) || _isMasked(value)) {
                return false;
              }
              var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
              return pattern.test(_toSource(value));
            }

            var _baseIsNative = baseIsNative;

            /**
             * Gets the value at `key` of `object`.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function getValue(object, key) {
              return object == null ? undefined : object[key];
            }

            var _getValue = getValue;

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
              var value = _getValue(object, key);
              return _baseIsNative(value) ? value : undefined;
            }

            var _getNative = getNative;

            var defineProperty = (function() {
              try {
                var func = _getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
              } catch (e) {}
            }());

            var _defineProperty = defineProperty;

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
              if (key == '__proto__' && _defineProperty) {
                _defineProperty(object, key, {
                  'configurable': true,
                  'enumerable': true,
                  'value': value,
                  'writable': true
                });
              } else {
                object[key] = value;
              }
            }

            var _baseAssignValue = baseAssignValue;

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
              return value === other || (value !== value && other !== other);
            }

            var eq_1 = eq;

            /** Used for built-in method references. */
            var objectProto$3 = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty$4 = objectProto$3.hasOwnProperty;

            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
              var objValue = object[key];
              if (!(hasOwnProperty$4.call(object, key) && eq_1(objValue, value)) ||
                  (value === undefined && !(key in object))) {
                _baseAssignValue(object, key, value);
              }
            }

            var _assignValue = assignValue;

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray$3 = Array.isArray;

            var isArray_1 = isArray$3;

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
              return value != null && typeof value == 'object';
            }

            var isObjectLike_1 = isObjectLike;

            /** `Object#toString` result references. */
            var symbolTag = '[object Symbol]';

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol$1(value) {
              return typeof value == 'symbol' ||
                (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
            }

            var isSymbol_1 = isSymbol$1;

            /** Used to match property names within property paths. */
            var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                reIsPlainProp = /^\w*$/;

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
              if (isArray_1(value)) {
                return false;
              }
              var type = typeof value;
              if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                  value == null || isSymbol_1(value)) {
                return true;
              }
              return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                (object != null && value in Object(object));
            }

            var _isKey = isKey;

            /* Built-in method references that are verified to be native. */
            var nativeCreate = _getNative(Object, 'create');

            var _nativeCreate = nativeCreate;

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
              this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
              this.size = 0;
            }

            var _hashClear = hashClear;

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
              var result = this.has(key) && delete this.__data__[key];
              this.size -= result ? 1 : 0;
              return result;
            }

            var _hashDelete = hashDelete;

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /** Used for built-in method references. */
            var objectProto$4 = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty$5 = objectProto$4.hasOwnProperty;

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
              var data = this.__data__;
              if (_nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
              }
              return hasOwnProperty$5.call(data, key) ? data[key] : undefined;
            }

            var _hashGet = hashGet;

            /** Used for built-in method references. */
            var objectProto$5 = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty$6 = objectProto$5.hasOwnProperty;

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
              var data = this.__data__;
              return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$6.call(data, key);
            }

            var _hashHas = hashHas;

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
              var data = this.__data__;
              this.size += this.has(key) ? 0 : 1;
              data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
              return this;
            }

            var _hashSet = hashSet;

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
              var index = -1,
                  length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = _hashClear;
            Hash.prototype['delete'] = _hashDelete;
            Hash.prototype.get = _hashGet;
            Hash.prototype.has = _hashHas;
            Hash.prototype.set = _hashSet;

            var _Hash = Hash;

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
              this.__data__ = [];
              this.size = 0;
            }

            var _listCacheClear = listCacheClear;

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
              var length = array.length;
              while (length--) {
                if (eq_1(array[length][0], key)) {
                  return length;
                }
              }
              return -1;
            }

            var _assocIndexOf = assocIndexOf;

            /** Used for built-in method references. */
            var arrayProto = Array.prototype;

            /** Built-in value references. */
            var splice = arrayProto.splice;

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
              var data = this.__data__,
                  index = _assocIndexOf(data, key);

              if (index < 0) {
                return false;
              }
              var lastIndex = data.length - 1;
              if (index == lastIndex) {
                data.pop();
              } else {
                splice.call(data, index, 1);
              }
              --this.size;
              return true;
            }

            var _listCacheDelete = listCacheDelete;

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
              var data = this.__data__,
                  index = _assocIndexOf(data, key);

              return index < 0 ? undefined : data[index][1];
            }

            var _listCacheGet = listCacheGet;

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
              return _assocIndexOf(this.__data__, key) > -1;
            }

            var _listCacheHas = listCacheHas;

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
              var data = this.__data__,
                  index = _assocIndexOf(data, key);

              if (index < 0) {
                ++this.size;
                data.push([key, value]);
              } else {
                data[index][1] = value;
              }
              return this;
            }

            var _listCacheSet = listCacheSet;

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
              var index = -1,
                  length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = _listCacheClear;
            ListCache.prototype['delete'] = _listCacheDelete;
            ListCache.prototype.get = _listCacheGet;
            ListCache.prototype.has = _listCacheHas;
            ListCache.prototype.set = _listCacheSet;

            var _ListCache = ListCache;

            /* Built-in method references that are verified to be native. */
            var Map$1 = _getNative(_root, 'Map');

            var _Map = Map$1;

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
              this.size = 0;
              this.__data__ = {
                'hash': new _Hash,
                'map': new (_Map || _ListCache),
                'string': new _Hash
              };
            }

            var _mapCacheClear = mapCacheClear;

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
              var type = typeof value;
              return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                ? (value !== '__proto__')
                : (value === null);
            }

            var _isKeyable = isKeyable;

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
              var data = map.__data__;
              return _isKeyable(key)
                ? data[typeof key == 'string' ? 'string' : 'hash']
                : data.map;
            }

            var _getMapData = getMapData;

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
              var result = _getMapData(this, key)['delete'](key);
              this.size -= result ? 1 : 0;
              return result;
            }

            var _mapCacheDelete = mapCacheDelete;

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
              return _getMapData(this, key).get(key);
            }

            var _mapCacheGet = mapCacheGet;

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
              return _getMapData(this, key).has(key);
            }

            var _mapCacheHas = mapCacheHas;

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
              var data = _getMapData(this, key),
                  size = data.size;

              data.set(key, value);
              this.size += data.size == size ? 0 : 1;
              return this;
            }

            var _mapCacheSet = mapCacheSet;

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
              var index = -1,
                  length = entries == null ? 0 : entries.length;

              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = _mapCacheClear;
            MapCache.prototype['delete'] = _mapCacheDelete;
            MapCache.prototype.get = _mapCacheGet;
            MapCache.prototype.has = _mapCacheHas;
            MapCache.prototype.set = _mapCacheSet;

            var _MapCache = MapCache;

            /** Error message constants. */
            var FUNC_ERROR_TEXT = 'Expected a function';

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
              if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                throw new TypeError(FUNC_ERROR_TEXT);
              }
              var memoized = function() {
                var args = arguments,
                    key = resolver ? resolver.apply(this, args) : args[0],
                    cache = memoized.cache;

                if (cache.has(key)) {
                  return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
              };
              memoized.cache = new (memoize.Cache || _MapCache);
              return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = _MapCache;

            var memoize_1 = memoize;

            /** Used as the maximum memoize cache size. */
            var MAX_MEMOIZE_SIZE = 500;

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
              var result = memoize_1(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                  cache.clear();
                }
                return key;
              });

              var cache = result.cache;
              return result;
            }

            var _memoizeCapped = memoizeCapped;

            /** Used to match property names within property paths. */
            var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

            /** Used to match backslashes in property paths. */
            var reEscapeChar = /\\(\\)?/g;

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = _memoizeCapped(function(string) {
              var result = [];
              if (string.charCodeAt(0) === 46 /* . */) {
                result.push('');
              }
              string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
              });
              return result;
            });

            var _stringToPath = stringToPath;

            /**
             * A specialized version of `_.map` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function arrayMap(array, iteratee) {
              var index = -1,
                  length = array == null ? 0 : array.length,
                  result = Array(length);

              while (++index < length) {
                result[index] = iteratee(array[index], index, array);
              }
              return result;
            }

            var _arrayMap = arrayMap;

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0;

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = _Symbol ? _Symbol.prototype : undefined,
                symbolToString = symbolProto ? symbolProto.toString : undefined;

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
              // Exit early for strings to avoid a performance hit in some environments.
              if (typeof value == 'string') {
                return value;
              }
              if (isArray_1(value)) {
                // Recursively convert values (susceptible to call stack limits).
                return _arrayMap(value, baseToString) + '';
              }
              if (isSymbol_1(value)) {
                return symbolToString ? symbolToString.call(value) : '';
              }
              var result = (value + '');
              return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            var _baseToString = baseToString;

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString$1(value) {
              return value == null ? '' : _baseToString(value);
            }

            var toString_1 = toString$1;

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
              if (isArray_1(value)) {
                return value;
              }
              return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
            }

            var _castPath = castPath;

            /** Used as references for various `Number` constants. */
            var MAX_SAFE_INTEGER = 9007199254740991;

            /** Used to detect unsigned integer values. */
            var reIsUint = /^(?:0|[1-9]\d*)$/;

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
              var type = typeof value;
              length = length == null ? MAX_SAFE_INTEGER : length;

              return !!length &&
                (type == 'number' ||
                  (type != 'symbol' && reIsUint.test(value))) &&
                    (value > -1 && value % 1 == 0 && value < length);
            }

            var _isIndex = isIndex;

            /** Used as references for various `Number` constants. */
            var INFINITY$1 = 1 / 0;

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
              if (typeof value == 'string' || isSymbol_1(value)) {
                return value;
              }
              var result = (value + '');
              return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
            }

            var _toKey = toKey;

            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
              if (!isObject_1(object)) {
                return object;
              }
              path = _castPath(path, object);

              var index = -1,
                  length = path.length,
                  lastIndex = length - 1,
                  nested = object;

              while (nested != null && ++index < length) {
                var key = _toKey(path[index]),
                    newValue = value;

                if (index != lastIndex) {
                  var objValue = nested[key];
                  newValue = customizer ? customizer(objValue, key, nested) : undefined;
                  if (newValue === undefined) {
                    newValue = isObject_1(objValue)
                      ? objValue
                      : (_isIndex(path[index + 1]) ? [] : {});
                  }
                }
                _assignValue(nested, key, newValue);
                nested = nested[key];
              }
              return object;
            }

            var _baseSet = baseSet;

            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
              return object == null ? object : _baseSet(object, path, value);
            }

            var set_1 = set;

            var numReg = /^[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?$/;
            /**
             * Convert lines of csv array into json
             * @param  {[type]} lines  [[col1,col2,col3]]
             * @param  {[type]} params Converter params with _headers field populated
             * @param  {[type]} idx start pos of the lines
             * @return {[type]}   [{err:null,json:obj,index:line,row:[csv row]}]
             */
            var linesToJson = function (lines, params, idx) {
              if (params._needParseJson) {
                if (!params._headers || !Array.isArray(params._headers)) {
                  params._headers = [];
                }
                if (!params.parseRules) {
                  var row = params._headers;
                  params.parseRules = parserMgr.initParsers(row, params);
                }
                return processRows(lines, params, idx);
              } else {
                return justReturnRows(lines, params, idx);
              }
            };

            function justReturnRows(lines, params, idx) {
              var rtn = [];
              for (var i = 0, len = lines.length; i < len; i++) {
                rtn.push({
                  err: null,
                  json: {},
                  index: idx++,
                  row: lines[i]
                });
              }
              return rtn;
            }

            function processRows(csvRows, params, startIndex) {
              var res = [];
              for (var i = 0, len = csvRows.length; i < len; i++) {
                var r = processRow(csvRows[i], params, startIndex++);
                if (r) {
                  res.push(r);
                }
              }
              return res;
            }

            function processRow(row, param, index) {
              var parseRules = param.parseRules;
              if (param.checkColumn && row.length !== parseRules.length) {
                return {
                  err: CSVError_1.column_mismatched(index)
                };
              }

              var headRow = param._headers;
              var resultRow = convertRowToJson(row, headRow, param);
              if (resultRow) {
                return {
                  json: resultRow,
                  index: index,
                  row: row
                };
              } else {
                return null;
              }
            }

            function convertRowToJson(row, headRow, param) {
              var hasValue = false;
              var resultRow = {};

              for (var i = 0, len = row.length; i < len; i++) {
                var convertFunc, head, item;
                item = row[i];

                if (param.ignoreEmpty && item === '') {
                  continue;
                }
                hasValue = true;

                head = headRow[i];
                if (!head || head === "") {
                  head = headRow[i] = "field" + (i + 1);
                }
                var convFunc = getConvFunc(head, i, param);
                if (convFunc) {
                  var convRes = convFunc(item, head, resultRow,row,i);
                  if (convRes !== undefined) {
                    setPath(resultRow, head, convRes);
                  }
                } else {
                  var flag = getFlag(head, i, param);
                  if (flag === 'omit') {
                    continue;
                  }
                  if (param.checkType) {
                    convertFunc = checkType(item, head, i, param);
                    item = convertFunc(item);
                  }
                  var title = getTitle(head, i, param);
                  if (flag === 'flat' || param.flatKeys) {
                    resultRow[title] = item;
                  } else {
                    setPath(resultRow, title, item);
                  }
                }
              }
              if (hasValue) {
                return resultRow;
              } else {
                return false;
              }
            }

            var builtInConv={
              "string":stringType,
              "number":numberType,
              "omit":function(){}
            };
            function getConvFunc(head,i,param){
              if (param._columnConv[i] !== undefined){
                return param._columnConv[i];
              }else {
                var flag=param.colParser[head];
                if (flag === undefined){
                  return param._columnConv[i]=false;
                }
                if (typeof flag ==="string"){
                  flag=flag.trim().toLowerCase();
                  var builtInFunc=builtInConv[flag];
                  if (builtInFunc){
                    return param._columnConv[i]=builtInFunc;
                  }else {
                    return param._columnConv[i]=false;  
                  }
                }else if (typeof flag ==="function"){
                  return param._columnConv[i]=flag;
                }else {
                  return param._columnConv[i]=false;
                }
              }
            }
            function setPath(json, path, value) {
              var _set = set_1;
              var pathArr = path.split('.');
              if (pathArr.length === 1) {
                json[path] = value;
              } else {
                _set(json, path, value);
              }
            }

            function getFlag(head, i, param) {
              if (typeof param._headerFlag[i] === "string") {
                return param._headerFlag[i];
              } else if (head.indexOf('*omit*') > -1) {
                return param._headerFlag[i] = 'omit';
              } else if (head.indexOf('*flat*') > -1) {
                return param._headerFlag[i] = 'flat';
              } else {
                return param._headerFlag[i] = '';
              }
            }

            function getTitle(head, i, param) {
              if (param._headerTitle[i]) {
                return param._headerTitle[i];
              }

              var flag = getFlag(head, i, param);
              var str = head.replace('*flat*', '').replace('string#!', '').replace('number#!', '');
              return param._headerTitle[i] = str;
            }

            function checkType(item, head, headIdx, param) {
              if (param._headerType[headIdx]) {
                return param._headerType[headIdx];
              } else if (head.indexOf('number#!') > -1) {
                return param._headerType[headIdx] = numberType;
              } else if (head.indexOf('string#!') > -1) {
                return param._headerType[headIdx] = stringType;
              } else if (param.checkType) {
                return param._headerType[headIdx] = dynamicType;
              } else {
                return param._headerType[headIdx] = stringType;
              }
            }

            function numberType(item) {
              var rtn = parseFloat(item);
              if (isNaN(rtn)) {
                return item;
              }
              return rtn;
            }

            function stringType(item) {
              return item.toString();
            }

            function dynamicType(item) {
              var trimed = item.trim();
              if (trimed === "") {
                return stringType(item);
              }
              if (numReg.test(trimed)) {
                return numberType(item);
              } else if (trimed.length === 5 && trimed.toLowerCase() === "false" || trimed.length === 4 && trimed.toLowerCase() === "true") {
                return booleanType(item);
              } else if (trimed[0] === "{" && trimed[trimed.length - 1] === "}" || trimed[0] === "[" && trimed[trimed.length - 1] === "]") {
                return jsonType(item);
              } else {
                return stringType(item);
              }
            }

            function booleanType(item) {
              var trimed = item.trim();
              if (trimed.length === 5 && trimed.toLowerCase() === "false") {
                return false;
              } else {
                return true;
              }
            }

            function jsonType(item) {
              try {
                return JSON.parse(item);
              } catch (e) {
                return item;
              }
            }

            var lodash = createCommonjsModule(function (module, exports) {
            (function() {

              /** Used as a safe reference for `undefined` in pre-ES5 environments. */
              var undefined$1;

              /** Used as the semantic version number. */
              var VERSION = '4.17.15';

              /** Used as the size to enable large array optimizations. */
              var LARGE_ARRAY_SIZE = 200;

              /** Error message constants. */
              var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
                  FUNC_ERROR_TEXT = 'Expected a function';

              /** Used to stand-in for `undefined` hash values. */
              var HASH_UNDEFINED = '__lodash_hash_undefined__';

              /** Used as the maximum memoize cache size. */
              var MAX_MEMOIZE_SIZE = 500;

              /** Used as the internal argument placeholder. */
              var PLACEHOLDER = '__lodash_placeholder__';

              /** Used to compose bitmasks for cloning. */
              var CLONE_DEEP_FLAG = 1,
                  CLONE_FLAT_FLAG = 2,
                  CLONE_SYMBOLS_FLAG = 4;

              /** Used to compose bitmasks for value comparisons. */
              var COMPARE_PARTIAL_FLAG = 1,
                  COMPARE_UNORDERED_FLAG = 2;

              /** Used to compose bitmasks for function metadata. */
              var WRAP_BIND_FLAG = 1,
                  WRAP_BIND_KEY_FLAG = 2,
                  WRAP_CURRY_BOUND_FLAG = 4,
                  WRAP_CURRY_FLAG = 8,
                  WRAP_CURRY_RIGHT_FLAG = 16,
                  WRAP_PARTIAL_FLAG = 32,
                  WRAP_PARTIAL_RIGHT_FLAG = 64,
                  WRAP_ARY_FLAG = 128,
                  WRAP_REARG_FLAG = 256,
                  WRAP_FLIP_FLAG = 512;

              /** Used as default options for `_.truncate`. */
              var DEFAULT_TRUNC_LENGTH = 30,
                  DEFAULT_TRUNC_OMISSION = '...';

              /** Used to detect hot functions by number of calls within a span of milliseconds. */
              var HOT_COUNT = 800,
                  HOT_SPAN = 16;

              /** Used to indicate the type of lazy iteratees. */
              var LAZY_FILTER_FLAG = 1,
                  LAZY_MAP_FLAG = 2,
                  LAZY_WHILE_FLAG = 3;

              /** Used as references for various `Number` constants. */
              var INFINITY = 1 / 0,
                  MAX_SAFE_INTEGER = 9007199254740991,
                  MAX_INTEGER = 1.7976931348623157e+308,
                  NAN = 0 / 0;

              /** Used as references for the maximum length and index of an array. */
              var MAX_ARRAY_LENGTH = 4294967295,
                  MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                  HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

              /** Used to associate wrap methods with their bit flags. */
              var wrapFlags = [
                ['ary', WRAP_ARY_FLAG],
                ['bind', WRAP_BIND_FLAG],
                ['bindKey', WRAP_BIND_KEY_FLAG],
                ['curry', WRAP_CURRY_FLAG],
                ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                ['flip', WRAP_FLIP_FLAG],
                ['partial', WRAP_PARTIAL_FLAG],
                ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                ['rearg', WRAP_REARG_FLAG]
              ];

              /** `Object#toString` result references. */
              var argsTag = '[object Arguments]',
                  arrayTag = '[object Array]',
                  asyncTag = '[object AsyncFunction]',
                  boolTag = '[object Boolean]',
                  dateTag = '[object Date]',
                  domExcTag = '[object DOMException]',
                  errorTag = '[object Error]',
                  funcTag = '[object Function]',
                  genTag = '[object GeneratorFunction]',
                  mapTag = '[object Map]',
                  numberTag = '[object Number]',
                  nullTag = '[object Null]',
                  objectTag = '[object Object]',
                  promiseTag = '[object Promise]',
                  proxyTag = '[object Proxy]',
                  regexpTag = '[object RegExp]',
                  setTag = '[object Set]',
                  stringTag = '[object String]',
                  symbolTag = '[object Symbol]',
                  undefinedTag = '[object Undefined]',
                  weakMapTag = '[object WeakMap]',
                  weakSetTag = '[object WeakSet]';

              var arrayBufferTag = '[object ArrayBuffer]',
                  dataViewTag = '[object DataView]',
                  float32Tag = '[object Float32Array]',
                  float64Tag = '[object Float64Array]',
                  int8Tag = '[object Int8Array]',
                  int16Tag = '[object Int16Array]',
                  int32Tag = '[object Int32Array]',
                  uint8Tag = '[object Uint8Array]',
                  uint8ClampedTag = '[object Uint8ClampedArray]',
                  uint16Tag = '[object Uint16Array]',
                  uint32Tag = '[object Uint32Array]';

              /** Used to match empty string literals in compiled template source. */
              var reEmptyStringLeading = /\b__p \+= '';/g,
                  reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                  reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

              /** Used to match HTML entities and HTML characters. */
              var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                  reUnescapedHtml = /[&<>"']/g,
                  reHasEscapedHtml = RegExp(reEscapedHtml.source),
                  reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

              /** Used to match template delimiters. */
              var reEscape = /<%-([\s\S]+?)%>/g,
                  reEvaluate = /<%([\s\S]+?)%>/g,
                  reInterpolate = /<%=([\s\S]+?)%>/g;

              /** Used to match property names within property paths. */
              var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                  reIsPlainProp = /^\w*$/,
                  rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

              /**
               * Used to match `RegExp`
               * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
               */
              var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                  reHasRegExpChar = RegExp(reRegExpChar.source);

              /** Used to match leading and trailing whitespace. */
              var reTrim = /^\s+|\s+$/g,
                  reTrimStart = /^\s+/,
                  reTrimEnd = /\s+$/;

              /** Used to match wrap detail comments. */
              var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                  reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                  reSplitDetails = /,? & /;

              /** Used to match words composed of alphanumeric characters. */
              var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

              /** Used to match backslashes in property paths. */
              var reEscapeChar = /\\(\\)?/g;

              /**
               * Used to match
               * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
               */
              var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

              /** Used to match `RegExp` flags from their coerced string values. */
              var reFlags = /\w*$/;

              /** Used to detect bad signed hexadecimal string values. */
              var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

              /** Used to detect binary string values. */
              var reIsBinary = /^0b[01]+$/i;

              /** Used to detect host constructors (Safari). */
              var reIsHostCtor = /^\[object .+?Constructor\]$/;

              /** Used to detect octal string values. */
              var reIsOctal = /^0o[0-7]+$/i;

              /** Used to detect unsigned integer values. */
              var reIsUint = /^(?:0|[1-9]\d*)$/;

              /** Used to match Latin Unicode letters (excluding mathematical operators). */
              var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

              /** Used to ensure capturing order of template delimiters. */
              var reNoMatch = /($^)/;

              /** Used to match unescaped characters in compiled string literals. */
              var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

              /** Used to compose unicode character classes. */
              var rsAstralRange = '\\ud800-\\udfff',
                  rsComboMarksRange = '\\u0300-\\u036f',
                  reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                  rsComboSymbolsRange = '\\u20d0-\\u20ff',
                  rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
                  rsDingbatRange = '\\u2700-\\u27bf',
                  rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                  rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                  rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                  rsPunctuationRange = '\\u2000-\\u206f',
                  rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                  rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                  rsVarRange = '\\ufe0e\\ufe0f',
                  rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

              /** Used to compose unicode capture groups. */
              var rsApos = "['\u2019]",
                  rsAstral = '[' + rsAstralRange + ']',
                  rsBreak = '[' + rsBreakRange + ']',
                  rsCombo = '[' + rsComboRange + ']',
                  rsDigits = '\\d+',
                  rsDingbat = '[' + rsDingbatRange + ']',
                  rsLower = '[' + rsLowerRange + ']',
                  rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
                  rsFitz = '\\ud83c[\\udffb-\\udfff]',
                  rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                  rsNonAstral = '[^' + rsAstralRange + ']',
                  rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                  rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                  rsUpper = '[' + rsUpperRange + ']',
                  rsZWJ = '\\u200d';

              /** Used to compose unicode regexes. */
              var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                  rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                  rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                  rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                  reOptMod = rsModifier + '?',
                  rsOptVar = '[' + rsVarRange + ']?',
                  rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
                  rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
                  rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
                  rsSeq = rsOptVar + reOptMod + rsOptJoin,
                  rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
                  rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

              /** Used to match apostrophes. */
              var reApos = RegExp(rsApos, 'g');

              /**
               * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
               * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
               */
              var reComboMark = RegExp(rsCombo, 'g');

              /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
              var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

              /** Used to match complex or compound words. */
              var reUnicodeWord = RegExp([
                rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                rsUpper + '+' + rsOptContrUpper,
                rsOrdUpper,
                rsOrdLower,
                rsDigits,
                rsEmoji
              ].join('|'), 'g');

              /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
              var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

              /** Used to detect strings that need a more robust regexp to match words. */
              var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

              /** Used to assign default `context` object properties. */
              var contextProps = [
                'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
                'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
                'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
                'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
                '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
              ];

              /** Used to make template sourceURLs easier to identify. */
              var templateCounter = -1;

              /** Used to identify `toStringTag` values of typed arrays. */
              var typedArrayTags = {};
              typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
              typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
              typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
              typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
              typedArrayTags[uint32Tag] = true;
              typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
              typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
              typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
              typedArrayTags[errorTag] = typedArrayTags[funcTag] =
              typedArrayTags[mapTag] = typedArrayTags[numberTag] =
              typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
              typedArrayTags[setTag] = typedArrayTags[stringTag] =
              typedArrayTags[weakMapTag] = false;

              /** Used to identify `toStringTag` values supported by `_.clone`. */
              var cloneableTags = {};
              cloneableTags[argsTag] = cloneableTags[arrayTag] =
              cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
              cloneableTags[boolTag] = cloneableTags[dateTag] =
              cloneableTags[float32Tag] = cloneableTags[float64Tag] =
              cloneableTags[int8Tag] = cloneableTags[int16Tag] =
              cloneableTags[int32Tag] = cloneableTags[mapTag] =
              cloneableTags[numberTag] = cloneableTags[objectTag] =
              cloneableTags[regexpTag] = cloneableTags[setTag] =
              cloneableTags[stringTag] = cloneableTags[symbolTag] =
              cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
              cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
              cloneableTags[errorTag] = cloneableTags[funcTag] =
              cloneableTags[weakMapTag] = false;

              /** Used to map Latin Unicode letters to basic Latin letters. */
              var deburredLetters = {
                // Latin-1 Supplement block.
                '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
                '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
                '\xc7': 'C',  '\xe7': 'c',
                '\xd0': 'D',  '\xf0': 'd',
                '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
                '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
                '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
                '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
                '\xd1': 'N',  '\xf1': 'n',
                '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
                '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
                '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
                '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
                '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
                '\xc6': 'Ae', '\xe6': 'ae',
                '\xde': 'Th', '\xfe': 'th',
                '\xdf': 'ss',
                // Latin Extended-A block.
                '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
                '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
                '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
                '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
                '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
                '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
                '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
                '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
                '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
                '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
                '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
                '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
                '\u0134': 'J',  '\u0135': 'j',
                '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
                '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
                '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
                '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
                '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
                '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
                '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
                '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
                '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
                '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
                '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
                '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
                '\u0163': 't',  '\u0165': 't', '\u0167': 't',
                '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
                '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
                '\u0174': 'W',  '\u0175': 'w',
                '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
                '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
                '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
                '\u0132': 'IJ', '\u0133': 'ij',
                '\u0152': 'Oe', '\u0153': 'oe',
                '\u0149': "'n", '\u017f': 's'
              };

              /** Used to map characters to HTML entities. */
              var htmlEscapes = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#39;'
              };

              /** Used to map HTML entities to characters. */
              var htmlUnescapes = {
                '&amp;': '&',
                '&lt;': '<',
                '&gt;': '>',
                '&quot;': '"',
                '&#39;': "'"
              };

              /** Used to escape characters for inclusion in compiled string literals. */
              var stringEscapes = {
                '\\': '\\',
                "'": "'",
                '\n': 'n',
                '\r': 'r',
                '\u2028': 'u2028',
                '\u2029': 'u2029'
              };

              /** Built-in method references without a dependency on `root`. */
              var freeParseFloat = parseFloat,
                  freeParseInt = parseInt;

              /** Detect free variable `global` from Node.js. */
              var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

              /** Detect free variable `self`. */
              var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

              /** Used as a reference to the global object. */
              var root = freeGlobal || freeSelf || Function('return this')();

              /** Detect free variable `exports`. */
              var freeExports =  exports && !exports.nodeType && exports;

              /** Detect free variable `module`. */
              var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

              /** Detect the popular CommonJS extension `module.exports`. */
              var moduleExports = freeModule && freeModule.exports === freeExports;

              /** Detect free variable `process` from Node.js. */
              var freeProcess = moduleExports && freeGlobal.process;

              /** Used to access faster Node.js helpers. */
              var nodeUtil = (function() {
                try {
                  // Use `util.types` for Node.js 10+.
                  var types = freeModule && freeModule.require && freeModule.require('util').types;

                  if (types) {
                    return types;
                  }

                  // Legacy `process.binding('util')` for Node.js < 10.
                  return freeProcess && freeProcess.binding && freeProcess.binding('util');
                } catch (e) {}
              }());

              /* Node.js helper references. */
              var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                  nodeIsDate = nodeUtil && nodeUtil.isDate,
                  nodeIsMap = nodeUtil && nodeUtil.isMap,
                  nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                  nodeIsSet = nodeUtil && nodeUtil.isSet,
                  nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

              /*--------------------------------------------------------------------------*/

              /**
               * A faster alternative to `Function#apply`, this function invokes `func`
               * with the `this` binding of `thisArg` and the arguments of `args`.
               *
               * @private
               * @param {Function} func The function to invoke.
               * @param {*} thisArg The `this` binding of `func`.
               * @param {Array} args The arguments to invoke `func` with.
               * @returns {*} Returns the result of `func`.
               */
              function apply(func, thisArg, args) {
                switch (args.length) {
                  case 0: return func.call(thisArg);
                  case 1: return func.call(thisArg, args[0]);
                  case 2: return func.call(thisArg, args[0], args[1]);
                  case 3: return func.call(thisArg, args[0], args[1], args[2]);
                }
                return func.apply(thisArg, args);
              }

              /**
               * A specialized version of `baseAggregator` for arrays.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} setter The function to set `accumulator` values.
               * @param {Function} iteratee The iteratee to transform keys.
               * @param {Object} accumulator The initial aggregated object.
               * @returns {Function} Returns `accumulator`.
               */
              function arrayAggregator(array, setter, iteratee, accumulator) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  var value = array[index];
                  setter(accumulator, value, iteratee(value), array);
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.forEach` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns `array`.
               */
              function arrayEach(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (iteratee(array[index], index, array) === false) {
                    break;
                  }
                }
                return array;
              }

              /**
               * A specialized version of `_.forEachRight` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns `array`.
               */
              function arrayEachRight(array, iteratee) {
                var length = array == null ? 0 : array.length;

                while (length--) {
                  if (iteratee(array[length], length, array) === false) {
                    break;
                  }
                }
                return array;
              }

              /**
               * A specialized version of `_.every` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if all elements pass the predicate check,
               *  else `false`.
               */
              function arrayEvery(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (!predicate(array[index], index, array)) {
                    return false;
                  }
                }
                return true;
              }

              /**
               * A specialized version of `_.filter` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {Array} Returns the new filtered array.
               */
              function arrayFilter(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                  var value = array[index];
                  if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                  }
                }
                return result;
              }

              /**
               * A specialized version of `_.includes` for arrays without support for
               * specifying an index to search from.
               *
               * @private
               * @param {Array} [array] The array to inspect.
               * @param {*} target The value to search for.
               * @returns {boolean} Returns `true` if `target` is found, else `false`.
               */
              function arrayIncludes(array, value) {
                var length = array == null ? 0 : array.length;
                return !!length && baseIndexOf(array, value, 0) > -1;
              }

              /**
               * This function is like `arrayIncludes` except that it accepts a comparator.
               *
               * @private
               * @param {Array} [array] The array to inspect.
               * @param {*} target The value to search for.
               * @param {Function} comparator The comparator invoked per element.
               * @returns {boolean} Returns `true` if `target` is found, else `false`.
               */
              function arrayIncludesWith(array, value, comparator) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (comparator(value, array[index])) {
                    return true;
                  }
                }
                return false;
              }

              /**
               * A specialized version of `_.map` for arrays without support for iteratee
               * shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns the new mapped array.
               */
              function arrayMap(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    result = Array(length);

                while (++index < length) {
                  result[index] = iteratee(array[index], index, array);
                }
                return result;
              }

              /**
               * Appends the elements of `values` to `array`.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {Array} values The values to append.
               * @returns {Array} Returns `array`.
               */
              function arrayPush(array, values) {
                var index = -1,
                    length = values.length,
                    offset = array.length;

                while (++index < length) {
                  array[offset + index] = values[index];
                }
                return array;
              }

              /**
               * A specialized version of `_.reduce` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @param {boolean} [initAccum] Specify using the first element of `array` as
               *  the initial value.
               * @returns {*} Returns the accumulated value.
               */
              function arrayReduce(array, iteratee, accumulator, initAccum) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                if (initAccum && length) {
                  accumulator = array[++index];
                }
                while (++index < length) {
                  accumulator = iteratee(accumulator, array[index], index, array);
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.reduceRight` for arrays without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} [accumulator] The initial value.
               * @param {boolean} [initAccum] Specify using the last element of `array` as
               *  the initial value.
               * @returns {*} Returns the accumulated value.
               */
              function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                var length = array == null ? 0 : array.length;
                if (initAccum && length) {
                  accumulator = array[--length];
                }
                while (length--) {
                  accumulator = iteratee(accumulator, array[length], length, array);
                }
                return accumulator;
              }

              /**
               * A specialized version of `_.some` for arrays without support for iteratee
               * shorthands.
               *
               * @private
               * @param {Array} [array] The array to iterate over.
               * @param {Function} predicate The function invoked per iteration.
               * @returns {boolean} Returns `true` if any element passes the predicate check,
               *  else `false`.
               */
              function arraySome(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                  if (predicate(array[index], index, array)) {
                    return true;
                  }
                }
                return false;
              }

              /**
               * Gets the size of an ASCII `string`.
               *
               * @private
               * @param {string} string The string inspect.
               * @returns {number} Returns the string size.
               */
              var asciiSize = baseProperty('length');

              /**
               * Converts an ASCII `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function asciiToArray(string) {
                return string.split('');
              }

              /**
               * Splits an ASCII `string` into an array of its words.
               *
               * @private
               * @param {string} The string to inspect.
               * @returns {Array} Returns the words of `string`.
               */
              function asciiWords(string) {
                return string.match(reAsciiWord) || [];
              }

              /**
               * The base implementation of methods like `_.findKey` and `_.findLastKey`,
               * without support for iteratee shorthands, which iterates over `collection`
               * using `eachFunc`.
               *
               * @private
               * @param {Array|Object} collection The collection to inspect.
               * @param {Function} predicate The function invoked per iteration.
               * @param {Function} eachFunc The function to iterate over `collection`.
               * @returns {*} Returns the found element or its key, else `undefined`.
               */
              function baseFindKey(collection, predicate, eachFunc) {
                var result;
                eachFunc(collection, function(value, key, collection) {
                  if (predicate(value, key, collection)) {
                    result = key;
                    return false;
                  }
                });
                return result;
              }

              /**
               * The base implementation of `_.findIndex` and `_.findLastIndex` without
               * support for iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {Function} predicate The function invoked per iteration.
               * @param {number} fromIndex The index to search from.
               * @param {boolean} [fromRight] Specify iterating from right to left.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseFindIndex(array, predicate, fromIndex, fromRight) {
                var length = array.length,
                    index = fromIndex + (fromRight ? 1 : -1);

                while ((fromRight ? index-- : ++index < length)) {
                  if (predicate(array[index], index, array)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseIndexOf(array, value, fromIndex) {
                return value === value
                  ? strictIndexOf(array, value, fromIndex)
                  : baseFindIndex(array, baseIsNaN, fromIndex);
              }

              /**
               * This function is like `baseIndexOf` except that it accepts a comparator.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @param {Function} comparator The comparator invoked per element.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function baseIndexOfWith(array, value, fromIndex, comparator) {
                var index = fromIndex - 1,
                    length = array.length;

                while (++index < length) {
                  if (comparator(array[index], value)) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * The base implementation of `_.isNaN` without support for number objects.
               *
               * @private
               * @param {*} value The value to check.
               * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
               */
              function baseIsNaN(value) {
                return value !== value;
              }

              /**
               * The base implementation of `_.mean` and `_.meanBy` without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {number} Returns the mean.
               */
              function baseMean(array, iteratee) {
                var length = array == null ? 0 : array.length;
                return length ? (baseSum(array, iteratee) / length) : NAN;
              }

              /**
               * The base implementation of `_.property` without support for deep paths.
               *
               * @private
               * @param {string} key The key of the property to get.
               * @returns {Function} Returns the new accessor function.
               */
              function baseProperty(key) {
                return function(object) {
                  return object == null ? undefined$1 : object[key];
                };
              }

              /**
               * The base implementation of `_.propertyOf` without support for deep paths.
               *
               * @private
               * @param {Object} object The object to query.
               * @returns {Function} Returns the new accessor function.
               */
              function basePropertyOf(object) {
                return function(key) {
                  return object == null ? undefined$1 : object[key];
                };
              }

              /**
               * The base implementation of `_.reduce` and `_.reduceRight`, without support
               * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
               *
               * @private
               * @param {Array|Object} collection The collection to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @param {*} accumulator The initial value.
               * @param {boolean} initAccum Specify using the first or last element of
               *  `collection` as the initial value.
               * @param {Function} eachFunc The function to iterate over `collection`.
               * @returns {*} Returns the accumulated value.
               */
              function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                eachFunc(collection, function(value, index, collection) {
                  accumulator = initAccum
                    ? (initAccum = false, value)
                    : iteratee(accumulator, value, index, collection);
                });
                return accumulator;
              }

              /**
               * The base implementation of `_.sortBy` which uses `comparer` to define the
               * sort order of `array` and replaces criteria objects with their corresponding
               * values.
               *
               * @private
               * @param {Array} array The array to sort.
               * @param {Function} comparer The function to define sort order.
               * @returns {Array} Returns `array`.
               */
              function baseSortBy(array, comparer) {
                var length = array.length;

                array.sort(comparer);
                while (length--) {
                  array[length] = array[length].value;
                }
                return array;
              }

              /**
               * The base implementation of `_.sum` and `_.sumBy` without support for
               * iteratee shorthands.
               *
               * @private
               * @param {Array} array The array to iterate over.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {number} Returns the sum.
               */
              function baseSum(array, iteratee) {
                var result,
                    index = -1,
                    length = array.length;

                while (++index < length) {
                  var current = iteratee(array[index]);
                  if (current !== undefined$1) {
                    result = result === undefined$1 ? current : (result + current);
                  }
                }
                return result;
              }

              /**
               * The base implementation of `_.times` without support for iteratee shorthands
               * or max array length checks.
               *
               * @private
               * @param {number} n The number of times to invoke `iteratee`.
               * @param {Function} iteratee The function invoked per iteration.
               * @returns {Array} Returns the array of results.
               */
              function baseTimes(n, iteratee) {
                var index = -1,
                    result = Array(n);

                while (++index < n) {
                  result[index] = iteratee(index);
                }
                return result;
              }

              /**
               * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
               * of key-value pairs for `object` corresponding to the property names of `props`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array} props The property names to get values for.
               * @returns {Object} Returns the key-value pairs.
               */
              function baseToPairs(object, props) {
                return arrayMap(props, function(key) {
                  return [key, object[key]];
                });
              }

              /**
               * The base implementation of `_.unary` without support for storing metadata.
               *
               * @private
               * @param {Function} func The function to cap arguments for.
               * @returns {Function} Returns the new capped function.
               */
              function baseUnary(func) {
                return function(value) {
                  return func(value);
                };
              }

              /**
               * The base implementation of `_.values` and `_.valuesIn` which creates an
               * array of `object` property values corresponding to the property names
               * of `props`.
               *
               * @private
               * @param {Object} object The object to query.
               * @param {Array} props The property names to get values for.
               * @returns {Object} Returns the array of property values.
               */
              function baseValues(object, props) {
                return arrayMap(props, function(key) {
                  return object[key];
                });
              }

              /**
               * Checks if a `cache` value for `key` exists.
               *
               * @private
               * @param {Object} cache The cache to query.
               * @param {string} key The key of the entry to check.
               * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
               */
              function cacheHas(cache, key) {
                return cache.has(key);
              }

              /**
               * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
               * that is not found in the character symbols.
               *
               * @private
               * @param {Array} strSymbols The string symbols to inspect.
               * @param {Array} chrSymbols The character symbols to find.
               * @returns {number} Returns the index of the first unmatched string symbol.
               */
              function charsStartIndex(strSymbols, chrSymbols) {
                var index = -1,
                    length = strSymbols.length;

                while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                return index;
              }

              /**
               * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
               * that is not found in the character symbols.
               *
               * @private
               * @param {Array} strSymbols The string symbols to inspect.
               * @param {Array} chrSymbols The character symbols to find.
               * @returns {number} Returns the index of the last unmatched string symbol.
               */
              function charsEndIndex(strSymbols, chrSymbols) {
                var index = strSymbols.length;

                while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
                return index;
              }

              /**
               * Gets the number of `placeholder` occurrences in `array`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} placeholder The placeholder to search for.
               * @returns {number} Returns the placeholder count.
               */
              function countHolders(array, placeholder) {
                var length = array.length,
                    result = 0;

                while (length--) {
                  if (array[length] === placeholder) {
                    ++result;
                  }
                }
                return result;
              }

              /**
               * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
               * letters to basic Latin letters.
               *
               * @private
               * @param {string} letter The matched letter to deburr.
               * @returns {string} Returns the deburred letter.
               */
              var deburrLetter = basePropertyOf(deburredLetters);

              /**
               * Used by `_.escape` to convert characters to HTML entities.
               *
               * @private
               * @param {string} chr The matched character to escape.
               * @returns {string} Returns the escaped character.
               */
              var escapeHtmlChar = basePropertyOf(htmlEscapes);

              /**
               * Used by `_.template` to escape characters for inclusion in compiled string literals.
               *
               * @private
               * @param {string} chr The matched character to escape.
               * @returns {string} Returns the escaped character.
               */
              function escapeStringChar(chr) {
                return '\\' + stringEscapes[chr];
              }

              /**
               * Gets the value at `key` of `object`.
               *
               * @private
               * @param {Object} [object] The object to query.
               * @param {string} key The key of the property to get.
               * @returns {*} Returns the property value.
               */
              function getValue(object, key) {
                return object == null ? undefined$1 : object[key];
              }

              /**
               * Checks if `string` contains Unicode symbols.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {boolean} Returns `true` if a symbol is found, else `false`.
               */
              function hasUnicode(string) {
                return reHasUnicode.test(string);
              }

              /**
               * Checks if `string` contains a word composed of Unicode symbols.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {boolean} Returns `true` if a word is found, else `false`.
               */
              function hasUnicodeWord(string) {
                return reHasUnicodeWord.test(string);
              }

              /**
               * Converts `iterator` to an array.
               *
               * @private
               * @param {Object} iterator The iterator to convert.
               * @returns {Array} Returns the converted array.
               */
              function iteratorToArray(iterator) {
                var data,
                    result = [];

                while (!(data = iterator.next()).done) {
                  result.push(data.value);
                }
                return result;
              }

              /**
               * Converts `map` to its key-value pairs.
               *
               * @private
               * @param {Object} map The map to convert.
               * @returns {Array} Returns the key-value pairs.
               */
              function mapToArray(map) {
                var index = -1,
                    result = Array(map.size);

                map.forEach(function(value, key) {
                  result[++index] = [key, value];
                });
                return result;
              }

              /**
               * Creates a unary function that invokes `func` with its argument transformed.
               *
               * @private
               * @param {Function} func The function to wrap.
               * @param {Function} transform The argument transform.
               * @returns {Function} Returns the new function.
               */
              function overArg(func, transform) {
                return function(arg) {
                  return func(transform(arg));
                };
              }

              /**
               * Replaces all `placeholder` elements in `array` with an internal placeholder
               * and returns an array of their indexes.
               *
               * @private
               * @param {Array} array The array to modify.
               * @param {*} placeholder The placeholder to replace.
               * @returns {Array} Returns the new array of placeholder indexes.
               */
              function replaceHolders(array, placeholder) {
                var index = -1,
                    length = array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                  var value = array[index];
                  if (value === placeholder || value === PLACEHOLDER) {
                    array[index] = PLACEHOLDER;
                    result[resIndex++] = index;
                  }
                }
                return result;
              }

              /**
               * Converts `set` to an array of its values.
               *
               * @private
               * @param {Object} set The set to convert.
               * @returns {Array} Returns the values.
               */
              function setToArray(set) {
                var index = -1,
                    result = Array(set.size);

                set.forEach(function(value) {
                  result[++index] = value;
                });
                return result;
              }

              /**
               * Converts `set` to its value-value pairs.
               *
               * @private
               * @param {Object} set The set to convert.
               * @returns {Array} Returns the value-value pairs.
               */
              function setToPairs(set) {
                var index = -1,
                    result = Array(set.size);

                set.forEach(function(value) {
                  result[++index] = [value, value];
                });
                return result;
              }

              /**
               * A specialized version of `_.indexOf` which performs strict equality
               * comparisons of values, i.e. `===`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function strictIndexOf(array, value, fromIndex) {
                var index = fromIndex - 1,
                    length = array.length;

                while (++index < length) {
                  if (array[index] === value) {
                    return index;
                  }
                }
                return -1;
              }

              /**
               * A specialized version of `_.lastIndexOf` which performs strict equality
               * comparisons of values, i.e. `===`.
               *
               * @private
               * @param {Array} array The array to inspect.
               * @param {*} value The value to search for.
               * @param {number} fromIndex The index to search from.
               * @returns {number} Returns the index of the matched value, else `-1`.
               */
              function strictLastIndexOf(array, value, fromIndex) {
                var index = fromIndex + 1;
                while (index--) {
                  if (array[index] === value) {
                    return index;
                  }
                }
                return index;
              }

              /**
               * Gets the number of symbols in `string`.
               *
               * @private
               * @param {string} string The string to inspect.
               * @returns {number} Returns the string size.
               */
              function stringSize(string) {
                return hasUnicode(string)
                  ? unicodeSize(string)
                  : asciiSize(string);
              }

              /**
               * Converts `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function stringToArray(string) {
                return hasUnicode(string)
                  ? unicodeToArray(string)
                  : asciiToArray(string);
              }

              /**
               * Used by `_.unescape` to convert HTML entities to characters.
               *
               * @private
               * @param {string} chr The matched character to unescape.
               * @returns {string} Returns the unescaped character.
               */
              var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

              /**
               * Gets the size of a Unicode `string`.
               *
               * @private
               * @param {string} string The string inspect.
               * @returns {number} Returns the string size.
               */
              function unicodeSize(string) {
                var result = reUnicode.lastIndex = 0;
                while (reUnicode.test(string)) {
                  ++result;
                }
                return result;
              }

              /**
               * Converts a Unicode `string` to an array.
               *
               * @private
               * @param {string} string The string to convert.
               * @returns {Array} Returns the converted array.
               */
              function unicodeToArray(string) {
                return string.match(reUnicode) || [];
              }

              /**
               * Splits a Unicode `string` into an array of its words.
               *
               * @private
               * @param {string} The string to inspect.
               * @returns {Array} Returns the words of `string`.
               */
              function unicodeWords(string) {
                return string.match(reUnicodeWord) || [];
              }

              /*--------------------------------------------------------------------------*/

              /**
               * Create a new pristine `lodash` function using the `context` object.
               *
               * @static
               * @memberOf _
               * @since 1.1.0
               * @category Util
               * @param {Object} [context=root] The context object.
               * @returns {Function} Returns a new `lodash` function.
               * @example
               *
               * _.mixin({ 'foo': _.constant('foo') });
               *
               * var lodash = _.runInContext();
               * lodash.mixin({ 'bar': lodash.constant('bar') });
               *
               * _.isFunction(_.foo);
               * // => true
               * _.isFunction(_.bar);
               * // => false
               *
               * lodash.isFunction(lodash.foo);
               * // => false
               * lodash.isFunction(lodash.bar);
               * // => true
               *
               * // Create a suped-up `defer` in Node.js.
               * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
               */
              var runInContext = (function runInContext(context) {
                context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

                /** Built-in constructor references. */
                var Array = context.Array,
                    Date = context.Date,
                    Error = context.Error,
                    Function = context.Function,
                    Math = context.Math,
                    Object = context.Object,
                    RegExp = context.RegExp,
                    String = context.String,
                    TypeError = context.TypeError;

                /** Used for built-in method references. */
                var arrayProto = Array.prototype,
                    funcProto = Function.prototype,
                    objectProto = Object.prototype;

                /** Used to detect overreaching core-js shims. */
                var coreJsData = context['__core-js_shared__'];

                /** Used to resolve the decompiled source of functions. */
                var funcToString = funcProto.toString;

                /** Used to check objects for own properties. */
                var hasOwnProperty = objectProto.hasOwnProperty;

                /** Used to generate unique IDs. */
                var idCounter = 0;

                /** Used to detect methods masquerading as native. */
                var maskSrcKey = (function() {
                  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                  return uid ? ('Symbol(src)_1.' + uid) : '';
                }());

                /**
                 * Used to resolve the
                 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                 * of values.
                 */
                var nativeObjectToString = objectProto.toString;

                /** Used to infer the `Object` constructor. */
                var objectCtorString = funcToString.call(Object);

                /** Used to restore the original `_` reference in `_.noConflict`. */
                var oldDash = root._;

                /** Used to detect if a method is native. */
                var reIsNative = RegExp('^' +
                  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
                );

                /** Built-in value references. */
                var Buffer = moduleExports ? context.Buffer : undefined$1,
                    Symbol = context.Symbol,
                    Uint8Array = context.Uint8Array,
                    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
                    getPrototype = overArg(Object.getPrototypeOf, Object),
                    objectCreate = Object.create,
                    propertyIsEnumerable = objectProto.propertyIsEnumerable,
                    splice = arrayProto.splice,
                    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
                    symIterator = Symbol ? Symbol.iterator : undefined$1,
                    symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

                var defineProperty = (function() {
                  try {
                    var func = getNative(Object, 'defineProperty');
                    func({}, '', {});
                    return func;
                  } catch (e) {}
                }());

                /** Mocked built-ins. */
                var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                    ctxNow = Date && Date.now !== root.Date.now && Date.now,
                    ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

                /* Built-in method references for those with the same name as other `lodash` methods. */
                var nativeCeil = Math.ceil,
                    nativeFloor = Math.floor,
                    nativeGetSymbols = Object.getOwnPropertySymbols,
                    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
                    nativeIsFinite = context.isFinite,
                    nativeJoin = arrayProto.join,
                    nativeKeys = overArg(Object.keys, Object),
                    nativeMax = Math.max,
                    nativeMin = Math.min,
                    nativeNow = Date.now,
                    nativeParseInt = context.parseInt,
                    nativeRandom = Math.random,
                    nativeReverse = arrayProto.reverse;

                /* Built-in method references that are verified to be native. */
                var DataView = getNative(context, 'DataView'),
                    Map = getNative(context, 'Map'),
                    Promise = getNative(context, 'Promise'),
                    Set = getNative(context, 'Set'),
                    WeakMap = getNative(context, 'WeakMap'),
                    nativeCreate = getNative(Object, 'create');

                /** Used to store function metadata. */
                var metaMap = WeakMap && new WeakMap;

                /** Used to lookup unminified function names. */
                var realNames = {};

                /** Used to detect maps, sets, and weakmaps. */
                var dataViewCtorString = toSource(DataView),
                    mapCtorString = toSource(Map),
                    promiseCtorString = toSource(Promise),
                    setCtorString = toSource(Set),
                    weakMapCtorString = toSource(WeakMap);

                /** Used to convert symbols to primitives and strings. */
                var symbolProto = Symbol ? Symbol.prototype : undefined$1,
                    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
                    symbolToString = symbolProto ? symbolProto.toString : undefined$1;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` object which wraps `value` to enable implicit method
                 * chain sequences. Methods that operate on and return arrays, collections,
                 * and functions can be chained together. Methods that retrieve a single value
                 * or may return a primitive value will automatically end the chain sequence
                 * and return the unwrapped value. Otherwise, the value must be unwrapped
                 * with `_#value`.
                 *
                 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                 * enabled using `_.chain`.
                 *
                 * The execution of chained methods is lazy, that is, it's deferred until
                 * `_#value` is implicitly or explicitly called.
                 *
                 * Lazy evaluation allows several methods to support shortcut fusion.
                 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                 * the creation of intermediate arrays and can greatly reduce the number of
                 * iteratee executions. Sections of a chain sequence qualify for shortcut
                 * fusion if the section is applied to an array and iteratees accept only
                 * one argument. The heuristic for whether a section qualifies for shortcut
                 * fusion is subject to change.
                 *
                 * Chaining is supported in custom builds as long as the `_#value` method is
                 * directly or indirectly included in the build.
                 *
                 * In addition to lodash methods, wrappers have `Array` and `String` methods.
                 *
                 * The wrapper `Array` methods are:
                 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                 *
                 * The wrapper `String` methods are:
                 * `replace` and `split`
                 *
                 * The wrapper methods that support shortcut fusion are:
                 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                 *
                 * The chainable wrapper methods are:
                 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                 * `zipObject`, `zipObjectDeep`, and `zipWith`
                 *
                 * The wrapper methods that are **not** chainable by default are:
                 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                 * `upperFirst`, `value`, and `words`
                 *
                 * @name _
                 * @constructor
                 * @category Seq
                 * @param {*} value The value to wrap in a `lodash` instance.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var wrapped = _([1, 2, 3]);
                 *
                 * // Returns an unwrapped value.
                 * wrapped.reduce(_.add);
                 * // => 6
                 *
                 * // Returns a wrapped value.
                 * var squares = wrapped.map(square);
                 *
                 * _.isArray(squares);
                 * // => false
                 *
                 * _.isArray(squares.value());
                 * // => true
                 */
                function lodash(value) {
                  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                    if (value instanceof LodashWrapper) {
                      return value;
                    }
                    if (hasOwnProperty.call(value, '__wrapped__')) {
                      return wrapperClone(value);
                    }
                  }
                  return new LodashWrapper(value);
                }

                /**
                 * The base implementation of `_.create` without support for assigning
                 * properties to the created object.
                 *
                 * @private
                 * @param {Object} proto The object to inherit from.
                 * @returns {Object} Returns the new object.
                 */
                var baseCreate = (function() {
                  function object() {}
                  return function(proto) {
                    if (!isObject(proto)) {
                      return {};
                    }
                    if (objectCreate) {
                      return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object;
                    object.prototype = undefined$1;
                    return result;
                  };
                }());

                /**
                 * The function whose prototype chain sequence wrappers inherit from.
                 *
                 * @private
                 */
                function baseLodash() {
                  // No operation performed.
                }

                /**
                 * The base constructor for creating `lodash` wrapper objects.
                 *
                 * @private
                 * @param {*} value The value to wrap.
                 * @param {boolean} [chainAll] Enable explicit method chain sequences.
                 */
                function LodashWrapper(value, chainAll) {
                  this.__wrapped__ = value;
                  this.__actions__ = [];
                  this.__chain__ = !!chainAll;
                  this.__index__ = 0;
                  this.__values__ = undefined$1;
                }

                /**
                 * By default, the template delimiters used by lodash are like those in
                 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                 * following template settings to use alternative delimiters.
                 *
                 * @static
                 * @memberOf _
                 * @type {Object}
                 */
                lodash.templateSettings = {

                  /**
                   * Used to detect `data` property values to be HTML-escaped.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  'escape': reEscape,

                  /**
                   * Used to detect code to be evaluated.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  'evaluate': reEvaluate,

                  /**
                   * Used to detect `data` property values to inject.
                   *
                   * @memberOf _.templateSettings
                   * @type {RegExp}
                   */
                  'interpolate': reInterpolate,

                  /**
                   * Used to reference the data object in the template text.
                   *
                   * @memberOf _.templateSettings
                   * @type {string}
                   */
                  'variable': '',

                  /**
                   * Used to import variables into the compiled template.
                   *
                   * @memberOf _.templateSettings
                   * @type {Object}
                   */
                  'imports': {

                    /**
                     * A reference to the `lodash` function.
                     *
                     * @memberOf _.templateSettings.imports
                     * @type {Function}
                     */
                    '_': lodash
                  }
                };

                // Ensure wrappers are instances of `baseLodash`.
                lodash.prototype = baseLodash.prototype;
                lodash.prototype.constructor = lodash;

                LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                LodashWrapper.prototype.constructor = LodashWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                 *
                 * @private
                 * @constructor
                 * @param {*} value The value to wrap.
                 */
                function LazyWrapper(value) {
                  this.__wrapped__ = value;
                  this.__actions__ = [];
                  this.__dir__ = 1;
                  this.__filtered__ = false;
                  this.__iteratees__ = [];
                  this.__takeCount__ = MAX_ARRAY_LENGTH;
                  this.__views__ = [];
                }

                /**
                 * Creates a clone of the lazy wrapper object.
                 *
                 * @private
                 * @name clone
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the cloned `LazyWrapper` object.
                 */
                function lazyClone() {
                  var result = new LazyWrapper(this.__wrapped__);
                  result.__actions__ = copyArray(this.__actions__);
                  result.__dir__ = this.__dir__;
                  result.__filtered__ = this.__filtered__;
                  result.__iteratees__ = copyArray(this.__iteratees__);
                  result.__takeCount__ = this.__takeCount__;
                  result.__views__ = copyArray(this.__views__);
                  return result;
                }

                /**
                 * Reverses the direction of lazy iteration.
                 *
                 * @private
                 * @name reverse
                 * @memberOf LazyWrapper
                 * @returns {Object} Returns the new reversed `LazyWrapper` object.
                 */
                function lazyReverse() {
                  if (this.__filtered__) {
                    var result = new LazyWrapper(this);
                    result.__dir__ = -1;
                    result.__filtered__ = true;
                  } else {
                    result = this.clone();
                    result.__dir__ *= -1;
                  }
                  return result;
                }

                /**
                 * Extracts the unwrapped value from its lazy wrapper.
                 *
                 * @private
                 * @name value
                 * @memberOf LazyWrapper
                 * @returns {*} Returns the unwrapped value.
                 */
                function lazyValue() {
                  var array = this.__wrapped__.value(),
                      dir = this.__dir__,
                      isArr = isArray(array),
                      isRight = dir < 0,
                      arrLength = isArr ? array.length : 0,
                      view = getView(0, arrLength, this.__views__),
                      start = view.start,
                      end = view.end,
                      length = end - start,
                      index = isRight ? end : (start - 1),
                      iteratees = this.__iteratees__,
                      iterLength = iteratees.length,
                      resIndex = 0,
                      takeCount = nativeMin(length, this.__takeCount__);

                  if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                    return baseWrapperValue(array, this.__actions__);
                  }
                  var result = [];

                  outer:
                  while (length-- && resIndex < takeCount) {
                    index += dir;

                    var iterIndex = -1,
                        value = array[index];

                    while (++iterIndex < iterLength) {
                      var data = iteratees[iterIndex],
                          iteratee = data.iteratee,
                          type = data.type,
                          computed = iteratee(value);

                      if (type == LAZY_MAP_FLAG) {
                        value = computed;
                      } else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) {
                          continue outer;
                        } else {
                          break outer;
                        }
                      }
                    }
                    result[resIndex++] = value;
                  }
                  return result;
                }

                // Ensure `LazyWrapper` is an instance of `baseLodash`.
                LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                LazyWrapper.prototype.constructor = LazyWrapper;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a hash object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Hash(entries) {
                  var index = -1,
                      length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the hash.
                 *
                 * @private
                 * @name clear
                 * @memberOf Hash
                 */
                function hashClear() {
                  this.__data__ = nativeCreate ? nativeCreate(null) : {};
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the hash.
                 *
                 * @private
                 * @name delete
                 * @memberOf Hash
                 * @param {Object} hash The hash to modify.
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function hashDelete(key) {
                  var result = this.has(key) && delete this.__data__[key];
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the hash value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Hash
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function hashGet(key) {
                  var data = this.__data__;
                  if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined$1 : result;
                  }
                  return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
                }

                /**
                 * Checks if a hash value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Hash
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function hashHas(key) {
                  var data = this.__data__;
                  return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
                }

                /**
                 * Sets the hash `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Hash
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the hash instance.
                 */
                function hashSet(key, value) {
                  var data = this.__data__;
                  this.size += this.has(key) ? 0 : 1;
                  data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
                  return this;
                }

                // Add methods to `Hash`.
                Hash.prototype.clear = hashClear;
                Hash.prototype['delete'] = hashDelete;
                Hash.prototype.get = hashGet;
                Hash.prototype.has = hashHas;
                Hash.prototype.set = hashSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an list cache object.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function ListCache(entries) {
                  var index = -1,
                      length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the list cache.
                 *
                 * @private
                 * @name clear
                 * @memberOf ListCache
                 */
                function listCacheClear() {
                  this.__data__ = [];
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the list cache.
                 *
                 * @private
                 * @name delete
                 * @memberOf ListCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function listCacheDelete(key) {
                  var data = this.__data__,
                      index = assocIndexOf(data, key);

                  if (index < 0) {
                    return false;
                  }
                  var lastIndex = data.length - 1;
                  if (index == lastIndex) {
                    data.pop();
                  } else {
                    splice.call(data, index, 1);
                  }
                  --this.size;
                  return true;
                }

                /**
                 * Gets the list cache value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf ListCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function listCacheGet(key) {
                  var data = this.__data__,
                      index = assocIndexOf(data, key);

                  return index < 0 ? undefined$1 : data[index][1];
                }

                /**
                 * Checks if a list cache value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf ListCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function listCacheHas(key) {
                  return assocIndexOf(this.__data__, key) > -1;
                }

                /**
                 * Sets the list cache `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf ListCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the list cache instance.
                 */
                function listCacheSet(key, value) {
                  var data = this.__data__,
                      index = assocIndexOf(data, key);

                  if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                  } else {
                    data[index][1] = value;
                  }
                  return this;
                }

                // Add methods to `ListCache`.
                ListCache.prototype.clear = listCacheClear;
                ListCache.prototype['delete'] = listCacheDelete;
                ListCache.prototype.get = listCacheGet;
                ListCache.prototype.has = listCacheHas;
                ListCache.prototype.set = listCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a map cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function MapCache(entries) {
                  var index = -1,
                      length = entries == null ? 0 : entries.length;

                  this.clear();
                  while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                  }
                }

                /**
                 * Removes all key-value entries from the map.
                 *
                 * @private
                 * @name clear
                 * @memberOf MapCache
                 */
                function mapCacheClear() {
                  this.size = 0;
                  this.__data__ = {
                    'hash': new Hash,
                    'map': new (Map || ListCache),
                    'string': new Hash
                  };
                }

                /**
                 * Removes `key` and its value from the map.
                 *
                 * @private
                 * @name delete
                 * @memberOf MapCache
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function mapCacheDelete(key) {
                  var result = getMapData(this, key)['delete'](key);
                  this.size -= result ? 1 : 0;
                  return result;
                }

                /**
                 * Gets the map value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf MapCache
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function mapCacheGet(key) {
                  return getMapData(this, key).get(key);
                }

                /**
                 * Checks if a map value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf MapCache
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function mapCacheHas(key) {
                  return getMapData(this, key).has(key);
                }

                /**
                 * Sets the map `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf MapCache
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the map cache instance.
                 */
                function mapCacheSet(key, value) {
                  var data = getMapData(this, key),
                      size = data.size;

                  data.set(key, value);
                  this.size += data.size == size ? 0 : 1;
                  return this;
                }

                // Add methods to `MapCache`.
                MapCache.prototype.clear = mapCacheClear;
                MapCache.prototype['delete'] = mapCacheDelete;
                MapCache.prototype.get = mapCacheGet;
                MapCache.prototype.has = mapCacheHas;
                MapCache.prototype.set = mapCacheSet;

                /*------------------------------------------------------------------------*/

                /**
                 *
                 * Creates an array cache object to store unique values.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [values] The values to cache.
                 */
                function SetCache(values) {
                  var index = -1,
                      length = values == null ? 0 : values.length;

                  this.__data__ = new MapCache;
                  while (++index < length) {
                    this.add(values[index]);
                  }
                }

                /**
                 * Adds `value` to the array cache.
                 *
                 * @private
                 * @name add
                 * @memberOf SetCache
                 * @alias push
                 * @param {*} value The value to cache.
                 * @returns {Object} Returns the cache instance.
                 */
                function setCacheAdd(value) {
                  this.__data__.set(value, HASH_UNDEFINED);
                  return this;
                }

                /**
                 * Checks if `value` is in the array cache.
                 *
                 * @private
                 * @name has
                 * @memberOf SetCache
                 * @param {*} value The value to search for.
                 * @returns {number} Returns `true` if `value` is found, else `false`.
                 */
                function setCacheHas(value) {
                  return this.__data__.has(value);
                }

                // Add methods to `SetCache`.
                SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                SetCache.prototype.has = setCacheHas;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a stack cache object to store key-value pairs.
                 *
                 * @private
                 * @constructor
                 * @param {Array} [entries] The key-value pairs to cache.
                 */
                function Stack(entries) {
                  var data = this.__data__ = new ListCache(entries);
                  this.size = data.size;
                }

                /**
                 * Removes all key-value entries from the stack.
                 *
                 * @private
                 * @name clear
                 * @memberOf Stack
                 */
                function stackClear() {
                  this.__data__ = new ListCache;
                  this.size = 0;
                }

                /**
                 * Removes `key` and its value from the stack.
                 *
                 * @private
                 * @name delete
                 * @memberOf Stack
                 * @param {string} key The key of the value to remove.
                 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                 */
                function stackDelete(key) {
                  var data = this.__data__,
                      result = data['delete'](key);

                  this.size = data.size;
                  return result;
                }

                /**
                 * Gets the stack value for `key`.
                 *
                 * @private
                 * @name get
                 * @memberOf Stack
                 * @param {string} key The key of the value to get.
                 * @returns {*} Returns the entry value.
                 */
                function stackGet(key) {
                  return this.__data__.get(key);
                }

                /**
                 * Checks if a stack value for `key` exists.
                 *
                 * @private
                 * @name has
                 * @memberOf Stack
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function stackHas(key) {
                  return this.__data__.has(key);
                }

                /**
                 * Sets the stack `key` to `value`.
                 *
                 * @private
                 * @name set
                 * @memberOf Stack
                 * @param {string} key The key of the value to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns the stack cache instance.
                 */
                function stackSet(key, value) {
                  var data = this.__data__;
                  if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                      pairs.push([key, value]);
                      this.size = ++data.size;
                      return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                  }
                  data.set(key, value);
                  this.size = data.size;
                  return this;
                }

                // Add methods to `Stack`.
                Stack.prototype.clear = stackClear;
                Stack.prototype['delete'] = stackDelete;
                Stack.prototype.get = stackGet;
                Stack.prototype.has = stackHas;
                Stack.prototype.set = stackSet;

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of the enumerable property names of the array-like `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @param {boolean} inherited Specify returning inherited property names.
                 * @returns {Array} Returns the array of property names.
                 */
                function arrayLikeKeys(value, inherited) {
                  var isArr = isArray(value),
                      isArg = !isArr && isArguments(value),
                      isBuff = !isArr && !isArg && isBuffer(value),
                      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                      skipIndexes = isArr || isArg || isBuff || isType,
                      result = skipIndexes ? baseTimes(value.length, String) : [],
                      length = result.length;

                  for (var key in value) {
                    if ((inherited || hasOwnProperty.call(value, key)) &&
                        !(skipIndexes && (
                           // Safari 9 has enumerable `arguments.length` in strict mode.
                           key == 'length' ||
                           // Node.js 0.10 has enumerable non-index properties on buffers.
                           (isBuff && (key == 'offset' || key == 'parent')) ||
                           // PhantomJS 2 has enumerable non-index properties on typed arrays.
                           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                           // Skip index properties.
                           isIndex(key, length)
                        ))) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * A specialized version of `_.sample` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @returns {*} Returns the random element.
                 */
                function arraySample(array) {
                  var length = array.length;
                  return length ? array[baseRandom(0, length - 1)] : undefined$1;
                }

                /**
                 * A specialized version of `_.sampleSize` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function arraySampleSize(array, n) {
                  return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                }

                /**
                 * A specialized version of `_.shuffle` for arrays.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function arrayShuffle(array) {
                  return shuffleSelf(copyArray(array));
                }

                /**
                 * This function is like `assignValue` except that it doesn't assign
                 * `undefined` values.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignMergeValue(object, key, value) {
                  if ((value !== undefined$1 && !eq(object[key], value)) ||
                      (value === undefined$1 && !(key in object))) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Assigns `value` to `key` of `object` if the existing value is not equivalent
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function assignValue(object, key, value) {
                  var objValue = object[key];
                  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                      (value === undefined$1 && !(key in object))) {
                    baseAssignValue(object, key, value);
                  }
                }

                /**
                 * Gets the index at which the `key` is found in `array` of key-value pairs.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} key The key to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function assocIndexOf(array, key) {
                  var length = array.length;
                  while (length--) {
                    if (eq(array[length][0], key)) {
                      return length;
                    }
                  }
                  return -1;
                }

                /**
                 * Aggregates elements of `collection` on `accumulator` with keys transformed
                 * by `iteratee` and values set by `setter`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform keys.
                 * @param {Object} accumulator The initial aggregated object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseAggregator(collection, setter, iteratee, accumulator) {
                  baseEach(collection, function(value, key, collection) {
                    setter(accumulator, value, iteratee(value), collection);
                  });
                  return accumulator;
                }

                /**
                 * The base implementation of `_.assign` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssign(object, source) {
                  return object && copyObject(source, keys(source), object);
                }

                /**
                 * The base implementation of `_.assignIn` without support for multiple sources
                 * or `customizer` functions.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @returns {Object} Returns `object`.
                 */
                function baseAssignIn(object, source) {
                  return object && copyObject(source, keysIn(source), object);
                }

                /**
                 * The base implementation of `assignValue` and `assignMergeValue` without
                 * value checks.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {string} key The key of the property to assign.
                 * @param {*} value The value to assign.
                 */
                function baseAssignValue(object, key, value) {
                  if (key == '__proto__' && defineProperty) {
                    defineProperty(object, key, {
                      'configurable': true,
                      'enumerable': true,
                      'value': value,
                      'writable': true
                    });
                  } else {
                    object[key] = value;
                  }
                }

                /**
                 * The base implementation of `_.at` without support for individual paths.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Array} Returns the picked elements.
                 */
                function baseAt(object, paths) {
                  var index = -1,
                      length = paths.length,
                      result = Array(length),
                      skip = object == null;

                  while (++index < length) {
                    result[index] = skip ? undefined$1 : get(object, paths[index]);
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.clamp` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 */
                function baseClamp(number, lower, upper) {
                  if (number === number) {
                    if (upper !== undefined$1) {
                      number = number <= upper ? number : upper;
                    }
                    if (lower !== undefined$1) {
                      number = number >= lower ? number : lower;
                    }
                  }
                  return number;
                }

                /**
                 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                 * traversed objects.
                 *
                 * @private
                 * @param {*} value The value to clone.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Deep clone
                 *  2 - Flatten inherited properties
                 *  4 - Clone symbols
                 * @param {Function} [customizer] The function to customize cloning.
                 * @param {string} [key] The key of `value`.
                 * @param {Object} [object] The parent object of `value`.
                 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                 * @returns {*} Returns the cloned value.
                 */
                function baseClone(value, bitmask, customizer, key, object, stack) {
                  var result,
                      isDeep = bitmask & CLONE_DEEP_FLAG,
                      isFlat = bitmask & CLONE_FLAT_FLAG,
                      isFull = bitmask & CLONE_SYMBOLS_FLAG;

                  if (customizer) {
                    result = object ? customizer(value, key, object, stack) : customizer(value);
                  }
                  if (result !== undefined$1) {
                    return result;
                  }
                  if (!isObject(value)) {
                    return value;
                  }
                  var isArr = isArray(value);
                  if (isArr) {
                    result = initCloneArray(value);
                    if (!isDeep) {
                      return copyArray(value, result);
                    }
                  } else {
                    var tag = getTag(value),
                        isFunc = tag == funcTag || tag == genTag;

                    if (isBuffer(value)) {
                      return cloneBuffer(value, isDeep);
                    }
                    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                      result = (isFlat || isFunc) ? {} : initCloneObject(value);
                      if (!isDeep) {
                        return isFlat
                          ? copySymbolsIn(value, baseAssignIn(result, value))
                          : copySymbols(value, baseAssign(result, value));
                      }
                    } else {
                      if (!cloneableTags[tag]) {
                        return object ? value : {};
                      }
                      result = initCloneByTag(value, tag, isDeep);
                    }
                  }
                  // Check for circular references and return its corresponding clone.
                  stack || (stack = new Stack);
                  var stacked = stack.get(value);
                  if (stacked) {
                    return stacked;
                  }
                  stack.set(value, result);

                  if (isSet(value)) {
                    value.forEach(function(subValue) {
                      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                    });
                  } else if (isMap(value)) {
                    value.forEach(function(subValue, key) {
                      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                    });
                  }

                  var keysFunc = isFull
                    ? (isFlat ? getAllKeysIn : getAllKeys)
                    : (isFlat ? keysIn : keys);

                  var props = isArr ? undefined$1 : keysFunc(value);
                  arrayEach(props || value, function(subValue, key) {
                    if (props) {
                      key = subValue;
                      subValue = value[key];
                    }
                    // Recursively populate clone (susceptible to call stack limits).
                    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.conforms` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseConforms(source) {
                  var props = keys(source);
                  return function(object) {
                    return baseConformsTo(object, source, props);
                  };
                }

                /**
                 * The base implementation of `_.conformsTo` which accepts `props` to check.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 */
                function baseConformsTo(object, source, props) {
                  var length = props.length;
                  if (object == null) {
                    return !length;
                  }
                  object = Object(object);
                  while (length--) {
                    var key = props[length],
                        predicate = source[key],
                        value = object[key];

                    if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
                      return false;
                    }
                  }
                  return true;
                }

                /**
                 * The base implementation of `_.delay` and `_.defer` which accepts `args`
                 * to provide to `func`.
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {Array} args The arguments to provide to `func`.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                function baseDelay(func, wait, args) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return setTimeout(function() { func.apply(undefined$1, args); }, wait);
                }

                /**
                 * The base implementation of methods like `_.difference` without support
                 * for excluding multiple arrays or iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Array} values The values to exclude.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 */
                function baseDifference(array, values, iteratee, comparator) {
                  var index = -1,
                      includes = arrayIncludes,
                      isCommon = true,
                      length = array.length,
                      result = [],
                      valuesLength = values.length;

                  if (!length) {
                    return result;
                  }
                  if (iteratee) {
                    values = arrayMap(values, baseUnary(iteratee));
                  }
                  if (comparator) {
                    includes = arrayIncludesWith;
                    isCommon = false;
                  }
                  else if (values.length >= LARGE_ARRAY_SIZE) {
                    includes = cacheHas;
                    isCommon = false;
                    values = new SetCache(values);
                  }
                  outer:
                  while (++index < length) {
                    var value = array[index],
                        computed = iteratee == null ? value : iteratee(value);

                    value = (comparator || value !== 0) ? value : 0;
                    if (isCommon && computed === computed) {
                      var valuesIndex = valuesLength;
                      while (valuesIndex--) {
                        if (values[valuesIndex] === computed) {
                          continue outer;
                        }
                      }
                      result.push(value);
                    }
                    else if (!includes(values, computed, comparator)) {
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.forEach` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEach = createBaseEach(baseForOwn);

                /**
                 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 */
                var baseEachRight = createBaseEach(baseForOwnRight, true);

                /**
                 * The base implementation of `_.every` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`
                 */
                function baseEvery(collection, predicate) {
                  var result = true;
                  baseEach(collection, function(value, index, collection) {
                    result = !!predicate(value, index, collection);
                    return result;
                  });
                  return result;
                }

                /**
                 * The base implementation of methods like `_.max` and `_.min` which accepts a
                 * `comparator` to determine the extremum value.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The iteratee invoked per iteration.
                 * @param {Function} comparator The comparator used to compare values.
                 * @returns {*} Returns the extremum value.
                 */
                function baseExtremum(array, iteratee, comparator) {
                  var index = -1,
                      length = array.length;

                  while (++index < length) {
                    var value = array[index],
                        current = iteratee(value);

                    if (current != null && (computed === undefined$1
                          ? (current === current && !isSymbol(current))
                          : comparator(current, computed)
                        )) {
                      var computed = current,
                          result = value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.fill` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 */
                function baseFill(array, value, start, end) {
                  var length = array.length;

                  start = toInteger(start);
                  if (start < 0) {
                    start = -start > length ? 0 : (length + start);
                  }
                  end = (end === undefined$1 || end > length) ? length : toInteger(end);
                  if (end < 0) {
                    end += length;
                  }
                  end = start > end ? 0 : toLength(end);
                  while (start < end) {
                    array[start++] = value;
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.filter` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 */
                function baseFilter(collection, predicate) {
                  var result = [];
                  baseEach(collection, function(value, index, collection) {
                    if (predicate(value, index, collection)) {
                      result.push(value);
                    }
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.flatten` with support for restricting flattening.
                 *
                 * @private
                 * @param {Array} array The array to flatten.
                 * @param {number} depth The maximum recursion depth.
                 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                 * @param {Array} [result=[]] The initial result value.
                 * @returns {Array} Returns the new flattened array.
                 */
                function baseFlatten(array, depth, predicate, isStrict, result) {
                  var index = -1,
                      length = array.length;

                  predicate || (predicate = isFlattenable);
                  result || (result = []);

                  while (++index < length) {
                    var value = array[index];
                    if (depth > 0 && predicate(value)) {
                      if (depth > 1) {
                        // Recursively flatten arrays (susceptible to call stack limits).
                        baseFlatten(value, depth - 1, predicate, isStrict, result);
                      } else {
                        arrayPush(result, value);
                      }
                    } else if (!isStrict) {
                      result[result.length] = value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `baseForOwn` which iterates over `object`
                 * properties returned by `keysFunc` and invokes `iteratee` for each property.
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseFor = createBaseFor();

                /**
                 * This function is like `baseFor` except that it iterates over properties
                 * in the opposite order.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @returns {Object} Returns `object`.
                 */
                var baseForRight = createBaseFor(true);

                /**
                 * The base implementation of `_.forOwn` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwn(object, iteratee) {
                  return object && baseFor(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 */
                function baseForOwnRight(object, iteratee) {
                  return object && baseForRight(object, iteratee, keys);
                }

                /**
                 * The base implementation of `_.functions` which creates an array of
                 * `object` function property names filtered from `props`.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Array} props The property names to filter.
                 * @returns {Array} Returns the function names.
                 */
                function baseFunctions(object, props) {
                  return arrayFilter(props, function(key) {
                    return isFunction(object[key]);
                  });
                }

                /**
                 * The base implementation of `_.get` without support for default values.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @returns {*} Returns the resolved value.
                 */
                function baseGet(object, path) {
                  path = castPath(path, object);

                  var index = 0,
                      length = path.length;

                  while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                  }
                  return (index && index == length) ? object : undefined$1;
                }

                /**
                 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Function} keysFunc The function to get the keys of `object`.
                 * @param {Function} symbolsFunc The function to get the symbols of `object`.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                  var result = keysFunc(object);
                  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                }

                /**
                 * The base implementation of `getTag` without fallbacks for buggy environments.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                function baseGetTag(value) {
                  if (value == null) {
                    return value === undefined$1 ? undefinedTag : nullTag;
                  }
                  return (symToStringTag && symToStringTag in Object(value))
                    ? getRawTag(value)
                    : objectToString(value);
                }

                /**
                 * The base implementation of `_.gt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 */
                function baseGt(value, other) {
                  return value > other;
                }

                /**
                 * The base implementation of `_.has` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHas(object, key) {
                  return object != null && hasOwnProperty.call(object, key);
                }

                /**
                 * The base implementation of `_.hasIn` without support for deep paths.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {Array|string} key The key to check.
                 * @returns {boolean} Returns `true` if `key` exists, else `false`.
                 */
                function baseHasIn(object, key) {
                  return object != null && key in Object(object);
                }

                /**
                 * The base implementation of `_.inRange` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {number} number The number to check.
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 */
                function baseInRange(number, start, end) {
                  return number >= nativeMin(start, end) && number < nativeMax(start, end);
                }

                /**
                 * The base implementation of methods like `_.intersection`, without support
                 * for iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of shared values.
                 */
                function baseIntersection(arrays, iteratee, comparator) {
                  var includes = comparator ? arrayIncludesWith : arrayIncludes,
                      length = arrays[0].length,
                      othLength = arrays.length,
                      othIndex = othLength,
                      caches = Array(othLength),
                      maxLength = Infinity,
                      result = [];

                  while (othIndex--) {
                    var array = arrays[othIndex];
                    if (othIndex && iteratee) {
                      array = arrayMap(array, baseUnary(iteratee));
                    }
                    maxLength = nativeMin(array.length, maxLength);
                    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
                      ? new SetCache(othIndex && array)
                      : undefined$1;
                  }
                  array = arrays[0];

                  var index = -1,
                      seen = caches[0];

                  outer:
                  while (++index < length && result.length < maxLength) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    value = (comparator || value !== 0) ? value : 0;
                    if (!(seen
                          ? cacheHas(seen, computed)
                          : includes(result, computed, comparator)
                        )) {
                      othIndex = othLength;
                      while (--othIndex) {
                        var cache = caches[othIndex];
                        if (!(cache
                              ? cacheHas(cache, computed)
                              : includes(arrays[othIndex], computed, comparator))
                            ) {
                          continue outer;
                        }
                      }
                      if (seen) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.invert` and `_.invertBy` which inverts
                 * `object` with values transformed by `iteratee` and set by `setter`.
                 *
                 * @private
                 * @param {Object} object The object to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform values.
                 * @param {Object} accumulator The initial inverted object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function baseInverter(object, setter, iteratee, accumulator) {
                  baseForOwn(object, function(value, key, object) {
                    setter(accumulator, iteratee(value), key, object);
                  });
                  return accumulator;
                }

                /**
                 * The base implementation of `_.invoke` without support for individual
                 * method arguments.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {Array} args The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 */
                function baseInvoke(object, path, args) {
                  path = castPath(path, object);
                  object = parent(object, path);
                  var func = object == null ? object : object[toKey(last(path))];
                  return func == null ? undefined$1 : apply(func, object, args);
                }

                /**
                 * The base implementation of `_.isArguments`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 */
                function baseIsArguments(value) {
                  return isObjectLike(value) && baseGetTag(value) == argsTag;
                }

                /**
                 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 */
                function baseIsArrayBuffer(value) {
                  return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                }

                /**
                 * The base implementation of `_.isDate` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 */
                function baseIsDate(value) {
                  return isObjectLike(value) && baseGetTag(value) == dateTag;
                }

                /**
                 * The base implementation of `_.isEqual` which supports partial comparisons
                 * and tracks traversed objects.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {boolean} bitmask The bitmask flags.
                 *  1 - Unordered comparison
                 *  2 - Partial comparison
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 */
                function baseIsEqual(value, other, bitmask, customizer, stack) {
                  if (value === other) {
                    return true;
                  }
                  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                    return value !== value && other !== other;
                  }
                  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                }

                /**
                 * A specialized version of `baseIsEqual` for arrays and objects which performs
                 * deep comparisons and tracks traversed objects enabling objects with circular
                 * references to be compared.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                  var objIsArr = isArray(object),
                      othIsArr = isArray(other),
                      objTag = objIsArr ? arrayTag : getTag(object),
                      othTag = othIsArr ? arrayTag : getTag(other);

                  objTag = objTag == argsTag ? objectTag : objTag;
                  othTag = othTag == argsTag ? objectTag : othTag;

                  var objIsObj = objTag == objectTag,
                      othIsObj = othTag == objectTag,
                      isSameTag = objTag == othTag;

                  if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                      return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                  }
                  if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack);
                    return (objIsArr || isTypedArray(object))
                      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                  }
                  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                    if (objIsWrapped || othIsWrapped) {
                      var objUnwrapped = objIsWrapped ? object.value() : object,
                          othUnwrapped = othIsWrapped ? other.value() : other;

                      stack || (stack = new Stack);
                      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                    }
                  }
                  if (!isSameTag) {
                    return false;
                  }
                  stack || (stack = new Stack);
                  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                }

                /**
                 * The base implementation of `_.isMap` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 */
                function baseIsMap(value) {
                  return isObjectLike(value) && getTag(value) == mapTag;
                }

                /**
                 * The base implementation of `_.isMatch` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Array} matchData The property names, values, and compare flags to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 */
                function baseIsMatch(object, source, matchData, customizer) {
                  var index = matchData.length,
                      length = index,
                      noCustomizer = !customizer;

                  if (object == null) {
                    return !length;
                  }
                  object = Object(object);
                  while (index--) {
                    var data = matchData[index];
                    if ((noCustomizer && data[2])
                          ? data[1] !== object[data[0]]
                          : !(data[0] in object)
                        ) {
                      return false;
                    }
                  }
                  while (++index < length) {
                    data = matchData[index];
                    var key = data[0],
                        objValue = object[key],
                        srcValue = data[1];

                    if (noCustomizer && data[2]) {
                      if (objValue === undefined$1 && !(key in object)) {
                        return false;
                      }
                    } else {
                      var stack = new Stack;
                      if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                      }
                      if (!(result === undefined$1
                            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                            : result
                          )) {
                        return false;
                      }
                    }
                  }
                  return true;
                }

                /**
                 * The base implementation of `_.isNative` without bad shim checks.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 */
                function baseIsNative(value) {
                  if (!isObject(value) || isMasked(value)) {
                    return false;
                  }
                  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                  return pattern.test(toSource(value));
                }

                /**
                 * The base implementation of `_.isRegExp` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 */
                function baseIsRegExp(value) {
                  return isObjectLike(value) && baseGetTag(value) == regexpTag;
                }

                /**
                 * The base implementation of `_.isSet` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 */
                function baseIsSet(value) {
                  return isObjectLike(value) && getTag(value) == setTag;
                }

                /**
                 * The base implementation of `_.isTypedArray` without Node.js optimizations.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 */
                function baseIsTypedArray(value) {
                  return isObjectLike(value) &&
                    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                }

                /**
                 * The base implementation of `_.iteratee`.
                 *
                 * @private
                 * @param {*} [value=_.identity] The value to convert to an iteratee.
                 * @returns {Function} Returns the iteratee.
                 */
                function baseIteratee(value) {
                  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                  if (typeof value == 'function') {
                    return value;
                  }
                  if (value == null) {
                    return identity;
                  }
                  if (typeof value == 'object') {
                    return isArray(value)
                      ? baseMatchesProperty(value[0], value[1])
                      : baseMatches(value);
                  }
                  return property(value);
                }

                /**
                 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeys(object) {
                  if (!isPrototype(object)) {
                    return nativeKeys(object);
                  }
                  var result = [];
                  for (var key in Object(object)) {
                    if (hasOwnProperty.call(object, key) && key != 'constructor') {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function baseKeysIn(object) {
                  if (!isObject(object)) {
                    return nativeKeysIn(object);
                  }
                  var isProto = isPrototype(object),
                      result = [];

                  for (var key in object) {
                    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.lt` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 */
                function baseLt(value, other) {
                  return value < other;
                }

                /**
                 * The base implementation of `_.map` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 */
                function baseMap(collection, iteratee) {
                  var index = -1,
                      result = isArrayLike(collection) ? Array(collection.length) : [];

                  baseEach(collection, function(value, key, collection) {
                    result[++index] = iteratee(value, key, collection);
                  });
                  return result;
                }

                /**
                 * The base implementation of `_.matches` which doesn't clone `source`.
                 *
                 * @private
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatches(source) {
                  var matchData = getMatchData(source);
                  if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                  }
                  return function(object) {
                    return object === source || baseIsMatch(object, source, matchData);
                  };
                }

                /**
                 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                 *
                 * @private
                 * @param {string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function baseMatchesProperty(path, srcValue) {
                  if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                  }
                  return function(object) {
                    var objValue = get(object, path);
                    return (objValue === undefined$1 && objValue === srcValue)
                      ? hasIn(object, path)
                      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                  };
                }

                /**
                 * The base implementation of `_.merge` without support for multiple sources.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} [customizer] The function to customize merged values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMerge(object, source, srcIndex, customizer, stack) {
                  if (object === source) {
                    return;
                  }
                  baseFor(source, function(srcValue, key) {
                    stack || (stack = new Stack);
                    if (isObject(srcValue)) {
                      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                    }
                    else {
                      var newValue = customizer
                        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                        : undefined$1;

                      if (newValue === undefined$1) {
                        newValue = srcValue;
                      }
                      assignMergeValue(object, key, newValue);
                    }
                  }, keysIn);
                }

                /**
                 * A specialized version of `baseMerge` for arrays and objects which performs
                 * deep merges and tracks traversed objects enabling objects with circular
                 * references to be merged.
                 *
                 * @private
                 * @param {Object} object The destination object.
                 * @param {Object} source The source object.
                 * @param {string} key The key of the value to merge.
                 * @param {number} srcIndex The index of `source`.
                 * @param {Function} mergeFunc The function to merge values.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 */
                function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                  var objValue = safeGet(object, key),
                      srcValue = safeGet(source, key),
                      stacked = stack.get(srcValue);

                  if (stacked) {
                    assignMergeValue(object, key, stacked);
                    return;
                  }
                  var newValue = customizer
                    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                    : undefined$1;

                  var isCommon = newValue === undefined$1;

                  if (isCommon) {
                    var isArr = isArray(srcValue),
                        isBuff = !isArr && isBuffer(srcValue),
                        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                    newValue = srcValue;
                    if (isArr || isBuff || isTyped) {
                      if (isArray(objValue)) {
                        newValue = objValue;
                      }
                      else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                      }
                      else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                      }
                      else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                      }
                      else {
                        newValue = [];
                      }
                    }
                    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                      newValue = objValue;
                      if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                      }
                      else if (!isObject(objValue) || isFunction(objValue)) {
                        newValue = initCloneObject(srcValue);
                      }
                    }
                    else {
                      isCommon = false;
                    }
                  }
                  if (isCommon) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, newValue);
                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                    stack['delete'](srcValue);
                  }
                  assignMergeValue(object, key, newValue);
                }

                /**
                 * The base implementation of `_.nth` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {number} n The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 */
                function baseNth(array, n) {
                  var length = array.length;
                  if (!length) {
                    return;
                  }
                  n += n < 0 ? length : 0;
                  return isIndex(n, length) ? array[n] : undefined$1;
                }

                /**
                 * The base implementation of `_.orderBy` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                 * @param {string[]} orders The sort orders of `iteratees`.
                 * @returns {Array} Returns the new sorted array.
                 */
                function baseOrderBy(collection, iteratees, orders) {
                  var index = -1;
                  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

                  var result = baseMap(collection, function(value, key, collection) {
                    var criteria = arrayMap(iteratees, function(iteratee) {
                      return iteratee(value);
                    });
                    return { 'criteria': criteria, 'index': ++index, 'value': value };
                  });

                  return baseSortBy(result, function(object, other) {
                    return compareMultiple(object, other, orders);
                  });
                }

                /**
                 * The base implementation of `_.pick` without support for individual
                 * property identifiers.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @returns {Object} Returns the new object.
                 */
                function basePick(object, paths) {
                  return basePickBy(object, paths, function(value, path) {
                    return hasIn(object, path);
                  });
                }

                /**
                 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Object} object The source object.
                 * @param {string[]} paths The property paths to pick.
                 * @param {Function} predicate The function invoked per property.
                 * @returns {Object} Returns the new object.
                 */
                function basePickBy(object, paths, predicate) {
                  var index = -1,
                      length = paths.length,
                      result = {};

                  while (++index < length) {
                    var path = paths[index],
                        value = baseGet(object, path);

                    if (predicate(value, path)) {
                      baseSet(result, castPath(path, object), value);
                    }
                  }
                  return result;
                }

                /**
                 * A specialized version of `baseProperty` which supports deep paths.
                 *
                 * @private
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 */
                function basePropertyDeep(path) {
                  return function(object) {
                    return baseGet(object, path);
                  };
                }

                /**
                 * The base implementation of `_.pullAllBy` without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAll(array, values, iteratee, comparator) {
                  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                      index = -1,
                      length = values.length,
                      seen = array;

                  if (array === values) {
                    values = copyArray(values);
                  }
                  if (iteratee) {
                    seen = arrayMap(array, baseUnary(iteratee));
                  }
                  while (++index < length) {
                    var fromIndex = 0,
                        value = values[index],
                        computed = iteratee ? iteratee(value) : value;

                    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                      if (seen !== array) {
                        splice.call(seen, fromIndex, 1);
                      }
                      splice.call(array, fromIndex, 1);
                    }
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.pullAt` without support for individual
                 * indexes or capturing the removed elements.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {number[]} indexes The indexes of elements to remove.
                 * @returns {Array} Returns `array`.
                 */
                function basePullAt(array, indexes) {
                  var length = array ? indexes.length : 0,
                      lastIndex = length - 1;

                  while (length--) {
                    var index = indexes[length];
                    if (length == lastIndex || index !== previous) {
                      var previous = index;
                      if (isIndex(index)) {
                        splice.call(array, index, 1);
                      } else {
                        baseUnset(array, index);
                      }
                    }
                  }
                  return array;
                }

                /**
                 * The base implementation of `_.random` without support for returning
                 * floating-point numbers.
                 *
                 * @private
                 * @param {number} lower The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the random number.
                 */
                function baseRandom(lower, upper) {
                  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                }

                /**
                 * The base implementation of `_.range` and `_.rangeRight` which doesn't
                 * coerce arguments.
                 *
                 * @private
                 * @param {number} start The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} step The value to increment or decrement by.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the range of numbers.
                 */
                function baseRange(start, end, step, fromRight) {
                  var index = -1,
                      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                      result = Array(length);

                  while (length--) {
                    result[fromRight ? length : ++index] = start;
                    start += step;
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.repeat` which doesn't coerce arguments.
                 *
                 * @private
                 * @param {string} string The string to repeat.
                 * @param {number} n The number of times to repeat the string.
                 * @returns {string} Returns the repeated string.
                 */
                function baseRepeat(string, n) {
                  var result = '';
                  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                    return result;
                  }
                  // Leverage the exponentiation by squaring algorithm for a faster repeat.
                  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                  do {
                    if (n % 2) {
                      result += string;
                    }
                    n = nativeFloor(n / 2);
                    if (n) {
                      string += string;
                    }
                  } while (n);

                  return result;
                }

                /**
                 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 */
                function baseRest(func, start) {
                  return setToString(overRest(func, start, identity), func + '');
                }

                /**
                 * The base implementation of `_.sample`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 */
                function baseSample(collection) {
                  return arraySample(values(collection));
                }

                /**
                 * The base implementation of `_.sampleSize` without param guards.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} n The number of elements to sample.
                 * @returns {Array} Returns the random elements.
                 */
                function baseSampleSize(collection, n) {
                  var array = values(collection);
                  return shuffleSelf(array, baseClamp(n, 0, array.length));
                }

                /**
                 * The base implementation of `_.set`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseSet(object, path, value, customizer) {
                  if (!isObject(object)) {
                    return object;
                  }
                  path = castPath(path, object);

                  var index = -1,
                      length = path.length,
                      lastIndex = length - 1,
                      nested = object;

                  while (nested != null && ++index < length) {
                    var key = toKey(path[index]),
                        newValue = value;

                    if (index != lastIndex) {
                      var objValue = nested[key];
                      newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
                      if (newValue === undefined$1) {
                        newValue = isObject(objValue)
                          ? objValue
                          : (isIndex(path[index + 1]) ? [] : {});
                      }
                    }
                    assignValue(nested, key, newValue);
                    nested = nested[key];
                  }
                  return object;
                }

                /**
                 * The base implementation of `setData` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetData = !metaMap ? identity : function(func, data) {
                  metaMap.set(func, data);
                  return func;
                };

                /**
                 * The base implementation of `setToString` without support for hot loop shorting.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var baseSetToString = !defineProperty ? identity : function(func, string) {
                  return defineProperty(func, 'toString', {
                    'configurable': true,
                    'enumerable': false,
                    'value': constant(string),
                    'writable': true
                  });
                };

                /**
                 * The base implementation of `_.shuffle`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 */
                function baseShuffle(collection) {
                  return shuffleSelf(values(collection));
                }

                /**
                 * The base implementation of `_.slice` without an iteratee call guard.
                 *
                 * @private
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseSlice(array, start, end) {
                  var index = -1,
                      length = array.length;

                  if (start < 0) {
                    start = -start > length ? 0 : (length + start);
                  }
                  end = end > length ? length : end;
                  if (end < 0) {
                    end += length;
                  }
                  length = start > end ? 0 : ((end - start) >>> 0);
                  start >>>= 0;

                  var result = Array(length);
                  while (++index < length) {
                    result[index] = array[index + start];
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.some` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 */
                function baseSome(collection, predicate) {
                  var result;

                  baseEach(collection, function(value, index, collection) {
                    result = predicate(value, index, collection);
                    return !result;
                  });
                  return !!result;
                }

                /**
                 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                 * performs a binary search of `array` to determine the index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndex(array, value, retHighest) {
                  var low = 0,
                      high = array == null ? low : array.length;

                  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                    while (low < high) {
                      var mid = (low + high) >>> 1,
                          computed = array[mid];

                      if (computed !== null && !isSymbol(computed) &&
                          (retHighest ? (computed <= value) : (computed < value))) {
                        low = mid + 1;
                      } else {
                        high = mid;
                      }
                    }
                    return high;
                  }
                  return baseSortedIndexBy(array, value, identity, retHighest);
                }

                /**
                 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                 * which invokes `iteratee` for `value` and each element of `array` to compute
                 * their sort ranking. The iteratee is invoked with one argument; (value).
                 *
                 * @private
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} iteratee The iteratee invoked per element.
                 * @param {boolean} [retHighest] Specify returning the highest qualified index.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 */
                function baseSortedIndexBy(array, value, iteratee, retHighest) {
                  value = iteratee(value);

                  var low = 0,
                      high = array == null ? 0 : array.length,
                      valIsNaN = value !== value,
                      valIsNull = value === null,
                      valIsSymbol = isSymbol(value),
                      valIsUndefined = value === undefined$1;

                  while (low < high) {
                    var mid = nativeFloor((low + high) / 2),
                        computed = iteratee(array[mid]),
                        othIsDefined = computed !== undefined$1,
                        othIsNull = computed === null,
                        othIsReflexive = computed === computed,
                        othIsSymbol = isSymbol(computed);

                    if (valIsNaN) {
                      var setLow = retHighest || othIsReflexive;
                    } else if (valIsUndefined) {
                      setLow = othIsReflexive && (retHighest || othIsDefined);
                    } else if (valIsNull) {
                      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                    } else if (valIsSymbol) {
                      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                    } else if (othIsNull || othIsSymbol) {
                      setLow = false;
                    } else {
                      setLow = retHighest ? (computed <= value) : (computed < value);
                    }
                    if (setLow) {
                      low = mid + 1;
                    } else {
                      high = mid;
                    }
                  }
                  return nativeMin(high, MAX_ARRAY_INDEX);
                }

                /**
                 * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                 * support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseSortedUniq(array, iteratee) {
                  var index = -1,
                      length = array.length,
                      resIndex = 0,
                      result = [];

                  while (++index < length) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    if (!index || !eq(computed, seen)) {
                      var seen = computed;
                      result[resIndex++] = value === 0 ? 0 : value;
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.toNumber` which doesn't ensure correct
                 * conversions of binary, hexadecimal, or octal string values.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 */
                function baseToNumber(value) {
                  if (typeof value == 'number') {
                    return value;
                  }
                  if (isSymbol(value)) {
                    return NAN;
                  }
                  return +value;
                }

                /**
                 * The base implementation of `_.toString` which doesn't convert nullish
                 * values to empty strings.
                 *
                 * @private
                 * @param {*} value The value to process.
                 * @returns {string} Returns the string.
                 */
                function baseToString(value) {
                  // Exit early for strings to avoid a performance hit in some environments.
                  if (typeof value == 'string') {
                    return value;
                  }
                  if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + '';
                  }
                  if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : '';
                  }
                  var result = (value + '');
                  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                }

                /**
                 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 */
                function baseUniq(array, iteratee, comparator) {
                  var index = -1,
                      includes = arrayIncludes,
                      length = array.length,
                      isCommon = true,
                      result = [],
                      seen = result;

                  if (comparator) {
                    isCommon = false;
                    includes = arrayIncludesWith;
                  }
                  else if (length >= LARGE_ARRAY_SIZE) {
                    var set = iteratee ? null : createSet(array);
                    if (set) {
                      return setToArray(set);
                    }
                    isCommon = false;
                    includes = cacheHas;
                    seen = new SetCache;
                  }
                  else {
                    seen = iteratee ? [] : result;
                  }
                  outer:
                  while (++index < length) {
                    var value = array[index],
                        computed = iteratee ? iteratee(value) : value;

                    value = (comparator || value !== 0) ? value : 0;
                    if (isCommon && computed === computed) {
                      var seenIndex = seen.length;
                      while (seenIndex--) {
                        if (seen[seenIndex] === computed) {
                          continue outer;
                        }
                      }
                      if (iteratee) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                    else if (!includes(seen, computed, comparator)) {
                      if (seen !== result) {
                        seen.push(computed);
                      }
                      result.push(value);
                    }
                  }
                  return result;
                }

                /**
                 * The base implementation of `_.unset`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The property path to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 */
                function baseUnset(object, path) {
                  path = castPath(path, object);
                  object = parent(object, path);
                  return object == null || delete object[toKey(last(path))];
                }

                /**
                 * The base implementation of `_.update`.
                 *
                 * @private
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to update.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize path creation.
                 * @returns {Object} Returns `object`.
                 */
                function baseUpdate(object, path, updater, customizer) {
                  return baseSet(object, path, updater(baseGet(object, path)), customizer);
                }

                /**
                 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                 * without support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to query.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function baseWhile(array, predicate, isDrop, fromRight) {
                  var length = array.length,
                      index = fromRight ? length : -1;

                  while ((fromRight ? index-- : ++index < length) &&
                    predicate(array[index], index, array)) {}

                  return isDrop
                    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
                    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
                }

                /**
                 * The base implementation of `wrapperValue` which returns the result of
                 * performing a sequence of actions on the unwrapped `value`, where each
                 * successive action is supplied the return value of the previous.
                 *
                 * @private
                 * @param {*} value The unwrapped value.
                 * @param {Array} actions Actions to perform to resolve the unwrapped value.
                 * @returns {*} Returns the resolved value.
                 */
                function baseWrapperValue(value, actions) {
                  var result = value;
                  if (result instanceof LazyWrapper) {
                    result = result.value();
                  }
                  return arrayReduce(actions, function(result, action) {
                    return action.func.apply(action.thisArg, arrayPush([result], action.args));
                  }, result);
                }

                /**
                 * The base implementation of methods like `_.xor`, without support for
                 * iteratee shorthands, that accepts an array of arrays to inspect.
                 *
                 * @private
                 * @param {Array} arrays The arrays to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of values.
                 */
                function baseXor(arrays, iteratee, comparator) {
                  var length = arrays.length;
                  if (length < 2) {
                    return length ? baseUniq(arrays[0]) : [];
                  }
                  var index = -1,
                      result = Array(length);

                  while (++index < length) {
                    var array = arrays[index],
                        othIndex = -1;

                    while (++othIndex < length) {
                      if (othIndex != index) {
                        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                      }
                    }
                  }
                  return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                }

                /**
                 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                 *
                 * @private
                 * @param {Array} props The property identifiers.
                 * @param {Array} values The property values.
                 * @param {Function} assignFunc The function to assign values.
                 * @returns {Object} Returns the new object.
                 */
                function baseZipObject(props, values, assignFunc) {
                  var index = -1,
                      length = props.length,
                      valsLength = values.length,
                      result = {};

                  while (++index < length) {
                    var value = index < valsLength ? values[index] : undefined$1;
                    assignFunc(result, props[index], value);
                  }
                  return result;
                }

                /**
                 * Casts `value` to an empty array if it's not an array like object.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Array|Object} Returns the cast array-like object.
                 */
                function castArrayLikeObject(value) {
                  return isArrayLikeObject(value) ? value : [];
                }

                /**
                 * Casts `value` to `identity` if it's not a function.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {Function} Returns cast function.
                 */
                function castFunction(value) {
                  return typeof value == 'function' ? value : identity;
                }

                /**
                 * Casts `value` to a path array if it's not one.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {Array} Returns the cast property path array.
                 */
                function castPath(value, object) {
                  if (isArray(value)) {
                    return value;
                  }
                  return isKey(value, object) ? [value] : stringToPath(toString(value));
                }

                /**
                 * A `baseRest` alias which can be replaced with `identity` by module
                 * replacement plugins.
                 *
                 * @private
                 * @type {Function}
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                var castRest = baseRest;

                /**
                 * Casts `array` to a slice if it's needed.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {number} start The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the cast slice.
                 */
                function castSlice(array, start, end) {
                  var length = array.length;
                  end = end === undefined$1 ? length : end;
                  return (!start && end >= length) ? array : baseSlice(array, start, end);
                }

                /**
                 * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                 *
                 * @private
                 * @param {number|Object} id The timer id or timeout object of the timer to clear.
                 */
                var clearTimeout = ctxClearTimeout || function(id) {
                  return root.clearTimeout(id);
                };

                /**
                 * Creates a clone of  `buffer`.
                 *
                 * @private
                 * @param {Buffer} buffer The buffer to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Buffer} Returns the cloned buffer.
                 */
                function cloneBuffer(buffer, isDeep) {
                  if (isDeep) {
                    return buffer.slice();
                  }
                  var length = buffer.length,
                      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                  buffer.copy(result);
                  return result;
                }

                /**
                 * Creates a clone of `arrayBuffer`.
                 *
                 * @private
                 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                 * @returns {ArrayBuffer} Returns the cloned array buffer.
                 */
                function cloneArrayBuffer(arrayBuffer) {
                  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                  return result;
                }

                /**
                 * Creates a clone of `dataView`.
                 *
                 * @private
                 * @param {Object} dataView The data view to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned data view.
                 */
                function cloneDataView(dataView, isDeep) {
                  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                }

                /**
                 * Creates a clone of `regexp`.
                 *
                 * @private
                 * @param {Object} regexp The regexp to clone.
                 * @returns {Object} Returns the cloned regexp.
                 */
                function cloneRegExp(regexp) {
                  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                  result.lastIndex = regexp.lastIndex;
                  return result;
                }

                /**
                 * Creates a clone of the `symbol` object.
                 *
                 * @private
                 * @param {Object} symbol The symbol object to clone.
                 * @returns {Object} Returns the cloned symbol object.
                 */
                function cloneSymbol(symbol) {
                  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                }

                /**
                 * Creates a clone of `typedArray`.
                 *
                 * @private
                 * @param {Object} typedArray The typed array to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the cloned typed array.
                 */
                function cloneTypedArray(typedArray, isDeep) {
                  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                }

                /**
                 * Compares values to sort them in ascending order.
                 *
                 * @private
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {number} Returns the sort order indicator for `value`.
                 */
                function compareAscending(value, other) {
                  if (value !== other) {
                    var valIsDefined = value !== undefined$1,
                        valIsNull = value === null,
                        valIsReflexive = value === value,
                        valIsSymbol = isSymbol(value);

                    var othIsDefined = other !== undefined$1,
                        othIsNull = other === null,
                        othIsReflexive = other === other,
                        othIsSymbol = isSymbol(other);

                    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                        (valIsNull && othIsDefined && othIsReflexive) ||
                        (!valIsDefined && othIsReflexive) ||
                        !valIsReflexive) {
                      return 1;
                    }
                    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                        (othIsNull && valIsDefined && valIsReflexive) ||
                        (!othIsDefined && valIsReflexive) ||
                        !othIsReflexive) {
                      return -1;
                    }
                  }
                  return 0;
                }

                /**
                 * Used by `_.orderBy` to compare multiple properties of a value to another
                 * and stable sort them.
                 *
                 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                 * specify an order of "desc" for descending or "asc" for ascending sort order
                 * of corresponding values.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {boolean[]|string[]} orders The order to sort by for each property.
                 * @returns {number} Returns the sort order indicator for `object`.
                 */
                function compareMultiple(object, other, orders) {
                  var index = -1,
                      objCriteria = object.criteria,
                      othCriteria = other.criteria,
                      length = objCriteria.length,
                      ordersLength = orders.length;

                  while (++index < length) {
                    var result = compareAscending(objCriteria[index], othCriteria[index]);
                    if (result) {
                      if (index >= ordersLength) {
                        return result;
                      }
                      var order = orders[index];
                      return result * (order == 'desc' ? -1 : 1);
                    }
                  }
                  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                  // that causes it, under certain circumstances, to provide the same value for
                  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                  // for more details.
                  //
                  // This also ensures a stable sort in V8 and other engines.
                  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                  return object.index - other.index;
                }

                /**
                 * Creates an array that is the composition of partially applied arguments,
                 * placeholders, and provided arguments into a single array of arguments.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to prepend to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgs(args, partials, holders, isCurried) {
                  var argsIndex = -1,
                      argsLength = args.length,
                      holdersLength = holders.length,
                      leftIndex = -1,
                      leftLength = partials.length,
                      rangeLength = nativeMax(argsLength - holdersLength, 0),
                      result = Array(leftLength + rangeLength),
                      isUncurried = !isCurried;

                  while (++leftIndex < leftLength) {
                    result[leftIndex] = partials[leftIndex];
                  }
                  while (++argsIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                      result[holders[argsIndex]] = args[argsIndex];
                    }
                  }
                  while (rangeLength--) {
                    result[leftIndex++] = args[argsIndex++];
                  }
                  return result;
                }

                /**
                 * This function is like `composeArgs` except that the arguments composition
                 * is tailored for `_.partialRight`.
                 *
                 * @private
                 * @param {Array} args The provided arguments.
                 * @param {Array} partials The arguments to append to those provided.
                 * @param {Array} holders The `partials` placeholder indexes.
                 * @params {boolean} [isCurried] Specify composing for a curried function.
                 * @returns {Array} Returns the new array of composed arguments.
                 */
                function composeArgsRight(args, partials, holders, isCurried) {
                  var argsIndex = -1,
                      argsLength = args.length,
                      holdersIndex = -1,
                      holdersLength = holders.length,
                      rightIndex = -1,
                      rightLength = partials.length,
                      rangeLength = nativeMax(argsLength - holdersLength, 0),
                      result = Array(rangeLength + rightLength),
                      isUncurried = !isCurried;

                  while (++argsIndex < rangeLength) {
                    result[argsIndex] = args[argsIndex];
                  }
                  var offset = argsIndex;
                  while (++rightIndex < rightLength) {
                    result[offset + rightIndex] = partials[rightIndex];
                  }
                  while (++holdersIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                      result[offset + holders[holdersIndex]] = args[argsIndex++];
                    }
                  }
                  return result;
                }

                /**
                 * Copies the values of `source` to `array`.
                 *
                 * @private
                 * @param {Array} source The array to copy values from.
                 * @param {Array} [array=[]] The array to copy values to.
                 * @returns {Array} Returns `array`.
                 */
                function copyArray(source, array) {
                  var index = -1,
                      length = source.length;

                  array || (array = Array(length));
                  while (++index < length) {
                    array[index] = source[index];
                  }
                  return array;
                }

                /**
                 * Copies properties of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy properties from.
                 * @param {Array} props The property identifiers to copy.
                 * @param {Object} [object={}] The object to copy properties to.
                 * @param {Function} [customizer] The function to customize copied values.
                 * @returns {Object} Returns `object`.
                 */
                function copyObject(source, props, object, customizer) {
                  var isNew = !object;
                  object || (object = {});

                  var index = -1,
                      length = props.length;

                  while (++index < length) {
                    var key = props[index];

                    var newValue = customizer
                      ? customizer(object[key], source[key], key, object, source)
                      : undefined$1;

                    if (newValue === undefined$1) {
                      newValue = source[key];
                    }
                    if (isNew) {
                      baseAssignValue(object, key, newValue);
                    } else {
                      assignValue(object, key, newValue);
                    }
                  }
                  return object;
                }

                /**
                 * Copies own symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbols(source, object) {
                  return copyObject(source, getSymbols(source), object);
                }

                /**
                 * Copies own and inherited symbols of `source` to `object`.
                 *
                 * @private
                 * @param {Object} source The object to copy symbols from.
                 * @param {Object} [object={}] The object to copy symbols to.
                 * @returns {Object} Returns `object`.
                 */
                function copySymbolsIn(source, object) {
                  return copyObject(source, getSymbolsIn(source), object);
                }

                /**
                 * Creates a function like `_.groupBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} [initializer] The accumulator object initializer.
                 * @returns {Function} Returns the new aggregator function.
                 */
                function createAggregator(setter, initializer) {
                  return function(collection, iteratee) {
                    var func = isArray(collection) ? arrayAggregator : baseAggregator,
                        accumulator = initializer ? initializer() : {};

                    return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                  };
                }

                /**
                 * Creates a function like `_.assign`.
                 *
                 * @private
                 * @param {Function} assigner The function to assign values.
                 * @returns {Function} Returns the new assigner function.
                 */
                function createAssigner(assigner) {
                  return baseRest(function(object, sources) {
                    var index = -1,
                        length = sources.length,
                        customizer = length > 1 ? sources[length - 1] : undefined$1,
                        guard = length > 2 ? sources[2] : undefined$1;

                    customizer = (assigner.length > 3 && typeof customizer == 'function')
                      ? (length--, customizer)
                      : undefined$1;

                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                      customizer = length < 3 ? undefined$1 : customizer;
                      length = 1;
                    }
                    object = Object(object);
                    while (++index < length) {
                      var source = sources[index];
                      if (source) {
                        assigner(object, source, index, customizer);
                      }
                    }
                    return object;
                  });
                }

                /**
                 * Creates a `baseEach` or `baseEachRight` function.
                 *
                 * @private
                 * @param {Function} eachFunc The function to iterate over a collection.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseEach(eachFunc, fromRight) {
                  return function(collection, iteratee) {
                    if (collection == null) {
                      return collection;
                    }
                    if (!isArrayLike(collection)) {
                      return eachFunc(collection, iteratee);
                    }
                    var length = collection.length,
                        index = fromRight ? length : -1,
                        iterable = Object(collection);

                    while ((fromRight ? index-- : ++index < length)) {
                      if (iteratee(iterable[index], index, iterable) === false) {
                        break;
                      }
                    }
                    return collection;
                  };
                }

                /**
                 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new base function.
                 */
                function createBaseFor(fromRight) {
                  return function(object, iteratee, keysFunc) {
                    var index = -1,
                        iterable = Object(object),
                        props = keysFunc(object),
                        length = props.length;

                    while (length--) {
                      var key = props[fromRight ? length : ++index];
                      if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                      }
                    }
                    return object;
                  };
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the optional `this`
                 * binding of `thisArg`.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createBind(func, bitmask, thisArg) {
                  var isBind = bitmask & WRAP_BIND_FLAG,
                      Ctor = createCtor(func);

                  function wrapper() {
                    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                    return fn.apply(isBind ? thisArg : this, arguments);
                  }
                  return wrapper;
                }

                /**
                 * Creates a function like `_.lowerFirst`.
                 *
                 * @private
                 * @param {string} methodName The name of the `String` case method to use.
                 * @returns {Function} Returns the new case function.
                 */
                function createCaseFirst(methodName) {
                  return function(string) {
                    string = toString(string);

                    var strSymbols = hasUnicode(string)
                      ? stringToArray(string)
                      : undefined$1;

                    var chr = strSymbols
                      ? strSymbols[0]
                      : string.charAt(0);

                    var trailing = strSymbols
                      ? castSlice(strSymbols, 1).join('')
                      : string.slice(1);

                    return chr[methodName]() + trailing;
                  };
                }

                /**
                 * Creates a function like `_.camelCase`.
                 *
                 * @private
                 * @param {Function} callback The function to combine each word.
                 * @returns {Function} Returns the new compounder function.
                 */
                function createCompounder(callback) {
                  return function(string) {
                    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                  };
                }

                /**
                 * Creates a function that produces an instance of `Ctor` regardless of
                 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                 *
                 * @private
                 * @param {Function} Ctor The constructor to wrap.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCtor(Ctor) {
                  return function() {
                    // Use a `switch` statement to work with class constructors. See
                    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                    // for more details.
                    var args = arguments;
                    switch (args.length) {
                      case 0: return new Ctor;
                      case 1: return new Ctor(args[0]);
                      case 2: return new Ctor(args[0], args[1]);
                      case 3: return new Ctor(args[0], args[1], args[2]);
                      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
                      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                    }
                    var thisBinding = baseCreate(Ctor.prototype),
                        result = Ctor.apply(thisBinding, args);

                    // Mimic the constructor's `return` behavior.
                    // See https://es5.github.io/#x13.2.2 for more details.
                    return isObject(result) ? result : thisBinding;
                  };
                }

                /**
                 * Creates a function that wraps `func` to enable currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {number} arity The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createCurry(func, bitmask, arity) {
                  var Ctor = createCtor(func);

                  function wrapper() {
                    var length = arguments.length,
                        args = Array(length),
                        index = length,
                        placeholder = getHolder(wrapper);

                    while (index--) {
                      args[index] = arguments[index];
                    }
                    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
                      ? []
                      : replaceHolders(args, placeholder);

                    length -= holders.length;
                    if (length < arity) {
                      return createRecurry(
                        func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
                        args, holders, undefined$1, undefined$1, arity - length);
                    }
                    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                    return apply(fn, this, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a `_.find` or `_.findLast` function.
                 *
                 * @private
                 * @param {Function} findIndexFunc The function to find the collection index.
                 * @returns {Function} Returns the new find function.
                 */
                function createFind(findIndexFunc) {
                  return function(collection, predicate, fromIndex) {
                    var iterable = Object(collection);
                    if (!isArrayLike(collection)) {
                      var iteratee = getIteratee(predicate, 3);
                      collection = keys(collection);
                      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
                    }
                    var index = findIndexFunc(collection, predicate, fromIndex);
                    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
                  };
                }

                /**
                 * Creates a `_.flow` or `_.flowRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new flow function.
                 */
                function createFlow(fromRight) {
                  return flatRest(function(funcs) {
                    var length = funcs.length,
                        index = length,
                        prereq = LodashWrapper.prototype.thru;

                    if (fromRight) {
                      funcs.reverse();
                    }
                    while (index--) {
                      var func = funcs[index];
                      if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                      }
                      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                        var wrapper = new LodashWrapper([], true);
                      }
                    }
                    index = wrapper ? index : length;
                    while (++index < length) {
                      func = funcs[index];

                      var funcName = getFuncName(func),
                          data = funcName == 'wrapper' ? getData(func) : undefined$1;

                      if (data && isLaziable(data[0]) &&
                            data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                            !data[4].length && data[9] == 1
                          ) {
                        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                      } else {
                        wrapper = (func.length == 1 && isLaziable(func))
                          ? wrapper[funcName]()
                          : wrapper.thru(func);
                      }
                    }
                    return function() {
                      var args = arguments,
                          value = args[0];

                      if (wrapper && args.length == 1 && isArray(value)) {
                        return wrapper.plant(value).value();
                      }
                      var index = 0,
                          result = length ? funcs[index].apply(this, args) : value;

                      while (++index < length) {
                        result = funcs[index].call(this, result);
                      }
                      return result;
                    };
                  });
                }

                /**
                 * Creates a function that wraps `func` to invoke it with optional `this`
                 * binding of `thisArg`, partial application, and currying.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [partialsRight] The arguments to append to those provided
                 *  to the new function.
                 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                  var isAry = bitmask & WRAP_ARY_FLAG,
                      isBind = bitmask & WRAP_BIND_FLAG,
                      isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                      isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                      isFlip = bitmask & WRAP_FLIP_FLAG,
                      Ctor = isBindKey ? undefined$1 : createCtor(func);

                  function wrapper() {
                    var length = arguments.length,
                        args = Array(length),
                        index = length;

                    while (index--) {
                      args[index] = arguments[index];
                    }
                    if (isCurried) {
                      var placeholder = getHolder(wrapper),
                          holdersCount = countHolders(args, placeholder);
                    }
                    if (partials) {
                      args = composeArgs(args, partials, holders, isCurried);
                    }
                    if (partialsRight) {
                      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                    }
                    length -= holdersCount;
                    if (isCurried && length < arity) {
                      var newHolders = replaceHolders(args, placeholder);
                      return createRecurry(
                        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                        args, newHolders, argPos, ary, arity - length
                      );
                    }
                    var thisBinding = isBind ? thisArg : this,
                        fn = isBindKey ? thisBinding[func] : func;

                    length = args.length;
                    if (argPos) {
                      args = reorder(args, argPos);
                    } else if (isFlip && length > 1) {
                      args.reverse();
                    }
                    if (isAry && ary < length) {
                      args.length = ary;
                    }
                    if (this && this !== root && this instanceof wrapper) {
                      fn = Ctor || createCtor(fn);
                    }
                    return fn.apply(thisBinding, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a function like `_.invertBy`.
                 *
                 * @private
                 * @param {Function} setter The function to set accumulator values.
                 * @param {Function} toIteratee The function to resolve iteratees.
                 * @returns {Function} Returns the new inverter function.
                 */
                function createInverter(setter, toIteratee) {
                  return function(object, iteratee) {
                    return baseInverter(object, setter, toIteratee(iteratee), {});
                  };
                }

                /**
                 * Creates a function that performs a mathematical operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @param {number} [defaultValue] The value used for `undefined` arguments.
                 * @returns {Function} Returns the new mathematical operation function.
                 */
                function createMathOperation(operator, defaultValue) {
                  return function(value, other) {
                    var result;
                    if (value === undefined$1 && other === undefined$1) {
                      return defaultValue;
                    }
                    if (value !== undefined$1) {
                      result = value;
                    }
                    if (other !== undefined$1) {
                      if (result === undefined$1) {
                        return other;
                      }
                      if (typeof value == 'string' || typeof other == 'string') {
                        value = baseToString(value);
                        other = baseToString(other);
                      } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                      }
                      result = operator(value, other);
                    }
                    return result;
                  };
                }

                /**
                 * Creates a function like `_.over`.
                 *
                 * @private
                 * @param {Function} arrayFunc The function to iterate over iteratees.
                 * @returns {Function} Returns the new over function.
                 */
                function createOver(arrayFunc) {
                  return flatRest(function(iteratees) {
                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                    return baseRest(function(args) {
                      var thisArg = this;
                      return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                      });
                    });
                  });
                }

                /**
                 * Creates the padding for `string` based on `length`. The `chars` string
                 * is truncated if the number of characters exceeds `length`.
                 *
                 * @private
                 * @param {number} length The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padding for `string`.
                 */
                function createPadding(length, chars) {
                  chars = chars === undefined$1 ? ' ' : baseToString(chars);

                  var charsLength = chars.length;
                  if (charsLength < 2) {
                    return charsLength ? baseRepeat(chars, length) : chars;
                  }
                  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                  return hasUnicode(chars)
                    ? castSlice(stringToArray(result), 0, length).join('')
                    : result.slice(0, length);
                }

                /**
                 * Creates a function that wraps `func` to invoke it with the `this` binding
                 * of `thisArg` and `partials` prepended to the arguments it receives.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} partials The arguments to prepend to those provided to
                 *  the new function.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createPartial(func, bitmask, thisArg, partials) {
                  var isBind = bitmask & WRAP_BIND_FLAG,
                      Ctor = createCtor(func);

                  function wrapper() {
                    var argsIndex = -1,
                        argsLength = arguments.length,
                        leftIndex = -1,
                        leftLength = partials.length,
                        args = Array(leftLength + argsLength),
                        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

                    while (++leftIndex < leftLength) {
                      args[leftIndex] = partials[leftIndex];
                    }
                    while (argsLength--) {
                      args[leftIndex++] = arguments[++argsIndex];
                    }
                    return apply(fn, isBind ? thisArg : this, args);
                  }
                  return wrapper;
                }

                /**
                 * Creates a `_.range` or `_.rangeRight` function.
                 *
                 * @private
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {Function} Returns the new range function.
                 */
                function createRange(fromRight) {
                  return function(start, end, step) {
                    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                      end = step = undefined$1;
                    }
                    // Ensure the sign of `-0` is preserved.
                    start = toFinite(start);
                    if (end === undefined$1) {
                      end = start;
                      start = 0;
                    } else {
                      end = toFinite(end);
                    }
                    step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
                    return baseRange(start, end, step, fromRight);
                  };
                }

                /**
                 * Creates a function that performs a relational operation on two values.
                 *
                 * @private
                 * @param {Function} operator The function to perform the operation.
                 * @returns {Function} Returns the new relational operation function.
                 */
                function createRelationalOperation(operator) {
                  return function(value, other) {
                    if (!(typeof value == 'string' && typeof other == 'string')) {
                      value = toNumber(value);
                      other = toNumber(other);
                    }
                    return operator(value, other);
                  };
                }

                /**
                 * Creates a function that wraps `func` to continue currying.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @param {Function} wrapFunc The function to create the `func` wrapper.
                 * @param {*} placeholder The placeholder value.
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to prepend to those provided to
                 *  the new function.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                  var isCurry = bitmask & WRAP_CURRY_FLAG,
                      newHolders = isCurry ? holders : undefined$1,
                      newHoldersRight = isCurry ? undefined$1 : holders,
                      newPartials = isCurry ? partials : undefined$1,
                      newPartialsRight = isCurry ? undefined$1 : partials;

                  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                  }
                  var newData = [
                    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                    newHoldersRight, argPos, ary, arity
                  ];

                  var result = wrapFunc.apply(undefined$1, newData);
                  if (isLaziable(func)) {
                    setData(result, newData);
                  }
                  result.placeholder = placeholder;
                  return setWrapToString(result, func, bitmask);
                }

                /**
                 * Creates a function like `_.round`.
                 *
                 * @private
                 * @param {string} methodName The name of the `Math` method to use when rounding.
                 * @returns {Function} Returns the new round function.
                 */
                function createRound(methodName) {
                  var func = Math[methodName];
                  return function(number, precision) {
                    number = toNumber(number);
                    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                    if (precision && nativeIsFinite(number)) {
                      // Shift with exponential notation to avoid floating-point issues.
                      // See [MDN](https://mdn.io/round#Examples) for more details.
                      var pair = (toString(number) + 'e').split('e'),
                          value = func(pair[0] + 'e' + (+pair[1] + precision));

                      pair = (toString(value) + 'e').split('e');
                      return +(pair[0] + 'e' + (+pair[1] - precision));
                    }
                    return func(number);
                  };
                }

                /**
                 * Creates a set object of `values`.
                 *
                 * @private
                 * @param {Array} values The values to add to the set.
                 * @returns {Object} Returns the new set.
                 */
                var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
                  return new Set(values);
                };

                /**
                 * Creates a `_.toPairs` or `_.toPairsIn` function.
                 *
                 * @private
                 * @param {Function} keysFunc The function to get the keys of a given object.
                 * @returns {Function} Returns the new pairs function.
                 */
                function createToPairs(keysFunc) {
                  return function(object) {
                    var tag = getTag(object);
                    if (tag == mapTag) {
                      return mapToArray(object);
                    }
                    if (tag == setTag) {
                      return setToPairs(object);
                    }
                    return baseToPairs(object, keysFunc(object));
                  };
                }

                /**
                 * Creates a function that either curries or invokes `func` with optional
                 * `this` binding and partially applied arguments.
                 *
                 * @private
                 * @param {Function|string} func The function or method name to wrap.
                 * @param {number} bitmask The bitmask flags.
                 *    1 - `_.bind`
                 *    2 - `_.bindKey`
                 *    4 - `_.curry` or `_.curryRight` of a bound function
                 *    8 - `_.curry`
                 *   16 - `_.curryRight`
                 *   32 - `_.partial`
                 *   64 - `_.partialRight`
                 *  128 - `_.rearg`
                 *  256 - `_.ary`
                 *  512 - `_.flip`
                 * @param {*} [thisArg] The `this` binding of `func`.
                 * @param {Array} [partials] The arguments to be partially applied.
                 * @param {Array} [holders] The `partials` placeholder indexes.
                 * @param {Array} [argPos] The argument positions of the new function.
                 * @param {number} [ary] The arity cap of `func`.
                 * @param {number} [arity] The arity of `func`.
                 * @returns {Function} Returns the new wrapped function.
                 */
                function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                  if (!isBindKey && typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  var length = partials ? partials.length : 0;
                  if (!length) {
                    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                    partials = holders = undefined$1;
                  }
                  ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
                  arity = arity === undefined$1 ? arity : toInteger(arity);
                  length -= holders ? holders.length : 0;

                  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                    var partialsRight = partials,
                        holdersRight = holders;

                    partials = holders = undefined$1;
                  }
                  var data = isBindKey ? undefined$1 : getData(func);

                  var newData = [
                    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                    argPos, ary, arity
                  ];

                  if (data) {
                    mergeData(newData, data);
                  }
                  func = newData[0];
                  bitmask = newData[1];
                  thisArg = newData[2];
                  partials = newData[3];
                  holders = newData[4];
                  arity = newData[9] = newData[9] === undefined$1
                    ? (isBindKey ? 0 : func.length)
                    : nativeMax(newData[9] - length, 0);

                  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                  }
                  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                    var result = createBind(func, bitmask, thisArg);
                  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                    result = createCurry(func, bitmask, arity);
                  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                    result = createPartial(func, bitmask, thisArg, partials);
                  } else {
                    result = createHybrid.apply(undefined$1, newData);
                  }
                  var setter = data ? baseSetData : setData;
                  return setWrapToString(setter(result, newData), func, bitmask);
                }

                /**
                 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                 * of source objects to the destination object for all destination properties
                 * that resolve to `undefined`.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to assign.
                 * @param {Object} object The parent object of `objValue`.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsAssignIn(objValue, srcValue, key, object) {
                  if (objValue === undefined$1 ||
                      (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                    return srcValue;
                  }
                  return objValue;
                }

                /**
                 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                 * objects into destination objects that are passed thru.
                 *
                 * @private
                 * @param {*} objValue The destination value.
                 * @param {*} srcValue The source value.
                 * @param {string} key The key of the property to merge.
                 * @param {Object} object The parent object of `objValue`.
                 * @param {Object} source The parent object of `srcValue`.
                 * @param {Object} [stack] Tracks traversed source values and their merged
                 *  counterparts.
                 * @returns {*} Returns the value to assign.
                 */
                function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                  if (isObject(objValue) && isObject(srcValue)) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, objValue);
                    baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
                    stack['delete'](srcValue);
                  }
                  return objValue;
                }

                /**
                 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                 * objects.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @param {string} key The key of the property to inspect.
                 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                 */
                function customOmitClone(value) {
                  return isPlainObject(value) ? undefined$1 : value;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for arrays with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Array} array The array to compare.
                 * @param {Array} other The other array to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `array` and `other` objects.
                 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                 */
                function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                      arrLength = array.length,
                      othLength = other.length;

                  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                    return false;
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(array);
                  if (stacked && stack.get(other)) {
                    return stacked == other;
                  }
                  var index = -1,
                      result = true,
                      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

                  stack.set(array, other);
                  stack.set(other, array);

                  // Ignore non-index properties.
                  while (++index < arrLength) {
                    var arrValue = array[index],
                        othValue = other[index];

                    if (customizer) {
                      var compared = isPartial
                        ? customizer(othValue, arrValue, index, other, array, stack)
                        : customizer(arrValue, othValue, index, array, other, stack);
                    }
                    if (compared !== undefined$1) {
                      if (compared) {
                        continue;
                      }
                      result = false;
                      break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                      if (!arraySome(other, function(othValue, othIndex) {
                            if (!cacheHas(seen, othIndex) &&
                                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                              return seen.push(othIndex);
                            }
                          })) {
                        result = false;
                        break;
                      }
                    } else if (!(
                          arrValue === othValue ||
                            equalFunc(arrValue, othValue, bitmask, customizer, stack)
                        )) {
                      result = false;
                      break;
                    }
                  }
                  stack['delete'](array);
                  stack['delete'](other);
                  return result;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for comparing objects of
                 * the same `toStringTag`.
                 *
                 * **Note:** This function only supports comparing values with tags of
                 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {string} tag The `toStringTag` of the objects to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                  switch (tag) {
                    case dataViewTag:
                      if ((object.byteLength != other.byteLength) ||
                          (object.byteOffset != other.byteOffset)) {
                        return false;
                      }
                      object = object.buffer;
                      other = other.buffer;

                    case arrayBufferTag:
                      if ((object.byteLength != other.byteLength) ||
                          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                        return false;
                      }
                      return true;

                    case boolTag:
                    case dateTag:
                    case numberTag:
                      // Coerce booleans to `1` or `0` and dates to milliseconds.
                      // Invalid dates are coerced to `NaN`.
                      return eq(+object, +other);

                    case errorTag:
                      return object.name == other.name && object.message == other.message;

                    case regexpTag:
                    case stringTag:
                      // Coerce regexes to strings and treat strings, primitives and objects,
                      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                      // for more details.
                      return object == (other + '');

                    case mapTag:
                      var convert = mapToArray;

                    case setTag:
                      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                      convert || (convert = setToArray);

                      if (object.size != other.size && !isPartial) {
                        return false;
                      }
                      // Assume cyclic values are equal.
                      var stacked = stack.get(object);
                      if (stacked) {
                        return stacked == other;
                      }
                      bitmask |= COMPARE_UNORDERED_FLAG;

                      // Recursively compare objects (susceptible to call stack limits).
                      stack.set(object, other);
                      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                      stack['delete'](object);
                      return result;

                    case symbolTag:
                      if (symbolValueOf) {
                        return symbolValueOf.call(object) == symbolValueOf.call(other);
                      }
                  }
                  return false;
                }

                /**
                 * A specialized version of `baseIsEqualDeep` for objects with support for
                 * partial deep comparisons.
                 *
                 * @private
                 * @param {Object} object The object to compare.
                 * @param {Object} other The other object to compare.
                 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                 * @param {Function} customizer The function to customize comparisons.
                 * @param {Function} equalFunc The function to determine equivalents of values.
                 * @param {Object} stack Tracks traversed `object` and `other` objects.
                 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                 */
                function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                      objProps = getAllKeys(object),
                      objLength = objProps.length,
                      othProps = getAllKeys(other),
                      othLength = othProps.length;

                  if (objLength != othLength && !isPartial) {
                    return false;
                  }
                  var index = objLength;
                  while (index--) {
                    var key = objProps[index];
                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                      return false;
                    }
                  }
                  // Assume cyclic values are equal.
                  var stacked = stack.get(object);
                  if (stacked && stack.get(other)) {
                    return stacked == other;
                  }
                  var result = true;
                  stack.set(object, other);
                  stack.set(other, object);

                  var skipCtor = isPartial;
                  while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key],
                        othValue = other[key];

                    if (customizer) {
                      var compared = isPartial
                        ? customizer(othValue, objValue, key, other, object, stack)
                        : customizer(objValue, othValue, key, object, other, stack);
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (!(compared === undefined$1
                          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                          : compared
                        )) {
                      result = false;
                      break;
                    }
                    skipCtor || (skipCtor = key == 'constructor');
                  }
                  if (result && !skipCtor) {
                    var objCtor = object.constructor,
                        othCtor = other.constructor;

                    // Non `Object` object instances with different constructors are not equal.
                    if (objCtor != othCtor &&
                        ('constructor' in object && 'constructor' in other) &&
                        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                      result = false;
                    }
                  }
                  stack['delete'](object);
                  stack['delete'](other);
                  return result;
                }

                /**
                 * A specialized version of `baseRest` which flattens the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @returns {Function} Returns the new function.
                 */
                function flatRest(func) {
                  return setToString(overRest(func, undefined$1, flatten), func + '');
                }

                /**
                 * Creates an array of own enumerable property names and symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeys(object) {
                  return baseGetAllKeys(object, keys, getSymbols);
                }

                /**
                 * Creates an array of own and inherited enumerable property names and
                 * symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names and symbols.
                 */
                function getAllKeysIn(object) {
                  return baseGetAllKeys(object, keysIn, getSymbolsIn);
                }

                /**
                 * Gets metadata for `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {*} Returns the metadata for `func`.
                 */
                var getData = !metaMap ? noop : function(func) {
                  return metaMap.get(func);
                };

                /**
                 * Gets the name of `func`.
                 *
                 * @private
                 * @param {Function} func The function to query.
                 * @returns {string} Returns the function name.
                 */
                function getFuncName(func) {
                  var result = (func.name + ''),
                      array = realNames[result],
                      length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                  while (length--) {
                    var data = array[length],
                        otherFunc = data.func;
                    if (otherFunc == null || otherFunc == func) {
                      return data.name;
                    }
                  }
                  return result;
                }

                /**
                 * Gets the argument placeholder value for `func`.
                 *
                 * @private
                 * @param {Function} func The function to inspect.
                 * @returns {*} Returns the placeholder value.
                 */
                function getHolder(func) {
                  var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                  return object.placeholder;
                }

                /**
                 * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                 * this function returns the custom method, otherwise it returns `baseIteratee`.
                 * If arguments are provided, the chosen function is invoked with them and
                 * its result is returned.
                 *
                 * @private
                 * @param {*} [value] The value to convert to an iteratee.
                 * @param {number} [arity] The arity of the created iteratee.
                 * @returns {Function} Returns the chosen function or its result.
                 */
                function getIteratee() {
                  var result = lodash.iteratee || iteratee;
                  result = result === iteratee ? baseIteratee : result;
                  return arguments.length ? result(arguments[0], arguments[1]) : result;
                }

                /**
                 * Gets the data for `map`.
                 *
                 * @private
                 * @param {Object} map The map to query.
                 * @param {string} key The reference key.
                 * @returns {*} Returns the map data.
                 */
                function getMapData(map, key) {
                  var data = map.__data__;
                  return isKeyable(key)
                    ? data[typeof key == 'string' ? 'string' : 'hash']
                    : data.map;
                }

                /**
                 * Gets the property names, values, and compare flags of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the match data of `object`.
                 */
                function getMatchData(object) {
                  var result = keys(object),
                      length = result.length;

                  while (length--) {
                    var key = result[length],
                        value = object[key];

                    result[length] = [key, value, isStrictComparable(value)];
                  }
                  return result;
                }

                /**
                 * Gets the native function at `key` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the method to get.
                 * @returns {*} Returns the function if it's native, else `undefined`.
                 */
                function getNative(object, key) {
                  var value = getValue(object, key);
                  return baseIsNative(value) ? value : undefined$1;
                }

                /**
                 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the raw `toStringTag`.
                 */
                function getRawTag(value) {
                  var isOwn = hasOwnProperty.call(value, symToStringTag),
                      tag = value[symToStringTag];

                  try {
                    value[symToStringTag] = undefined$1;
                    var unmasked = true;
                  } catch (e) {}

                  var result = nativeObjectToString.call(value);
                  if (unmasked) {
                    if (isOwn) {
                      value[symToStringTag] = tag;
                    } else {
                      delete value[symToStringTag];
                    }
                  }
                  return result;
                }

                /**
                 * Creates an array of the own enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
                  if (object == null) {
                    return [];
                  }
                  object = Object(object);
                  return arrayFilter(nativeGetSymbols(object), function(symbol) {
                    return propertyIsEnumerable.call(object, symbol);
                  });
                };

                /**
                 * Creates an array of the own and inherited enumerable symbols of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of symbols.
                 */
                var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
                  var result = [];
                  while (object) {
                    arrayPush(result, getSymbols(object));
                    object = getPrototype(object);
                  }
                  return result;
                };

                /**
                 * Gets the `toStringTag` of `value`.
                 *
                 * @private
                 * @param {*} value The value to query.
                 * @returns {string} Returns the `toStringTag`.
                 */
                var getTag = baseGetTag;

                // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                    (Map && getTag(new Map) != mapTag) ||
                    (Promise && getTag(Promise.resolve()) != promiseTag) ||
                    (Set && getTag(new Set) != setTag) ||
                    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                  getTag = function(value) {
                    var result = baseGetTag(value),
                        Ctor = result == objectTag ? value.constructor : undefined$1,
                        ctorString = Ctor ? toSource(Ctor) : '';

                    if (ctorString) {
                      switch (ctorString) {
                        case dataViewCtorString: return dataViewTag;
                        case mapCtorString: return mapTag;
                        case promiseCtorString: return promiseTag;
                        case setCtorString: return setTag;
                        case weakMapCtorString: return weakMapTag;
                      }
                    }
                    return result;
                  };
                }

                /**
                 * Gets the view, applying any `transforms` to the `start` and `end` positions.
                 *
                 * @private
                 * @param {number} start The start of the view.
                 * @param {number} end The end of the view.
                 * @param {Array} transforms The transformations to apply to the view.
                 * @returns {Object} Returns an object containing the `start` and `end`
                 *  positions of the view.
                 */
                function getView(start, end, transforms) {
                  var index = -1,
                      length = transforms.length;

                  while (++index < length) {
                    var data = transforms[index],
                        size = data.size;

                    switch (data.type) {
                      case 'drop':      start += size; break;
                      case 'dropRight': end -= size; break;
                      case 'take':      end = nativeMin(end, start + size); break;
                      case 'takeRight': start = nativeMax(start, end - size); break;
                    }
                  }
                  return { 'start': start, 'end': end };
                }

                /**
                 * Extracts wrapper details from the `source` body comment.
                 *
                 * @private
                 * @param {string} source The source to inspect.
                 * @returns {Array} Returns the wrapper details.
                 */
                function getWrapDetails(source) {
                  var match = source.match(reWrapDetails);
                  return match ? match[1].split(reSplitDetails) : [];
                }

                /**
                 * Checks if `path` exists on `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @param {Function} hasFunc The function to check properties.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 */
                function hasPath(object, path, hasFunc) {
                  path = castPath(path, object);

                  var index = -1,
                      length = path.length,
                      result = false;

                  while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                      break;
                    }
                    object = object[key];
                  }
                  if (result || ++index != length) {
                    return result;
                  }
                  length = object == null ? 0 : object.length;
                  return !!length && isLength(length) && isIndex(key, length) &&
                    (isArray(object) || isArguments(object));
                }

                /**
                 * Initializes an array clone.
                 *
                 * @private
                 * @param {Array} array The array to clone.
                 * @returns {Array} Returns the initialized clone.
                 */
                function initCloneArray(array) {
                  var length = array.length,
                      result = new array.constructor(length);

                  // Add properties assigned by `RegExp#exec`.
                  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                    result.index = array.index;
                    result.input = array.input;
                  }
                  return result;
                }

                /**
                 * Initializes an object clone.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneObject(object) {
                  return (typeof object.constructor == 'function' && !isPrototype(object))
                    ? baseCreate(getPrototype(object))
                    : {};
                }

                /**
                 * Initializes an object clone based on its `toStringTag`.
                 *
                 * **Note:** This function only supports cloning values with tags of
                 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
                 *
                 * @private
                 * @param {Object} object The object to clone.
                 * @param {string} tag The `toStringTag` of the object to clone.
                 * @param {boolean} [isDeep] Specify a deep clone.
                 * @returns {Object} Returns the initialized clone.
                 */
                function initCloneByTag(object, tag, isDeep) {
                  var Ctor = object.constructor;
                  switch (tag) {
                    case arrayBufferTag:
                      return cloneArrayBuffer(object);

                    case boolTag:
                    case dateTag:
                      return new Ctor(+object);

                    case dataViewTag:
                      return cloneDataView(object, isDeep);

                    case float32Tag: case float64Tag:
                    case int8Tag: case int16Tag: case int32Tag:
                    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
                      return cloneTypedArray(object, isDeep);

                    case mapTag:
                      return new Ctor;

                    case numberTag:
                    case stringTag:
                      return new Ctor(object);

                    case regexpTag:
                      return cloneRegExp(object);

                    case setTag:
                      return new Ctor;

                    case symbolTag:
                      return cloneSymbol(object);
                  }
                }

                /**
                 * Inserts wrapper `details` in a comment at the top of the `source` body.
                 *
                 * @private
                 * @param {string} source The source to modify.
                 * @returns {Array} details The details to insert.
                 * @returns {string} Returns the modified source.
                 */
                function insertWrapDetails(source, details) {
                  var length = details.length;
                  if (!length) {
                    return source;
                  }
                  var lastIndex = length - 1;
                  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                  details = details.join(length > 2 ? ', ' : ' ');
                  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
                }

                /**
                 * Checks if `value` is a flattenable `arguments` object or array.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                 */
                function isFlattenable(value) {
                  return isArray(value) || isArguments(value) ||
                    !!(spreadableSymbol && value && value[spreadableSymbol]);
                }

                /**
                 * Checks if `value` is a valid array-like index.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                 */
                function isIndex(value, length) {
                  var type = typeof value;
                  length = length == null ? MAX_SAFE_INTEGER : length;

                  return !!length &&
                    (type == 'number' ||
                      (type != 'symbol' && reIsUint.test(value))) &&
                        (value > -1 && value % 1 == 0 && value < length);
                }

                /**
                 * Checks if the given arguments are from an iteratee call.
                 *
                 * @private
                 * @param {*} value The potential iteratee value argument.
                 * @param {*} index The potential iteratee index or key argument.
                 * @param {*} object The potential iteratee object argument.
                 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                 *  else `false`.
                 */
                function isIterateeCall(value, index, object) {
                  if (!isObject(object)) {
                    return false;
                  }
                  var type = typeof index;
                  if (type == 'number'
                        ? (isArrayLike(object) && isIndex(index, object.length))
                        : (type == 'string' && index in object)
                      ) {
                    return eq(object[index], value);
                  }
                  return false;
                }

                /**
                 * Checks if `value` is a property name and not a property path.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @param {Object} [object] The object to query keys on.
                 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                 */
                function isKey(value, object) {
                  if (isArray(value)) {
                    return false;
                  }
                  var type = typeof value;
                  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                      value == null || isSymbol(value)) {
                    return true;
                  }
                  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                    (object != null && value in Object(object));
                }

                /**
                 * Checks if `value` is suitable for use as unique object key.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                 */
                function isKeyable(value) {
                  var type = typeof value;
                  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                    ? (value !== '__proto__')
                    : (value === null);
                }

                /**
                 * Checks if `func` has a lazy counterpart.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                 *  else `false`.
                 */
                function isLaziable(func) {
                  var funcName = getFuncName(func),
                      other = lodash[funcName];

                  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                    return false;
                  }
                  if (func === other) {
                    return true;
                  }
                  var data = getData(other);
                  return !!data && func === data[0];
                }

                /**
                 * Checks if `func` has its source masked.
                 *
                 * @private
                 * @param {Function} func The function to check.
                 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                 */
                function isMasked(func) {
                  return !!maskSrcKey && (maskSrcKey in func);
                }

                /**
                 * Checks if `func` is capable of being masked.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                 */
                var isMaskable = coreJsData ? isFunction : stubFalse;

                /**
                 * Checks if `value` is likely a prototype object.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                 */
                function isPrototype(value) {
                  var Ctor = value && value.constructor,
                      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                  return value === proto;
                }

                /**
                 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` if suitable for strict
                 *  equality comparisons, else `false`.
                 */
                function isStrictComparable(value) {
                  return value === value && !isObject(value);
                }

                /**
                 * A specialized version of `matchesProperty` for source values suitable
                 * for strict equality comparisons, i.e. `===`.
                 *
                 * @private
                 * @param {string} key The key of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 */
                function matchesStrictComparable(key, srcValue) {
                  return function(object) {
                    if (object == null) {
                      return false;
                    }
                    return object[key] === srcValue &&
                      (srcValue !== undefined$1 || (key in Object(object)));
                  };
                }

                /**
                 * A specialized version of `_.memoize` which clears the memoized function's
                 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                 *
                 * @private
                 * @param {Function} func The function to have its output memoized.
                 * @returns {Function} Returns the new memoized function.
                 */
                function memoizeCapped(func) {
                  var result = memoize(func, function(key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                      cache.clear();
                    }
                    return key;
                  });

                  var cache = result.cache;
                  return result;
                }

                /**
                 * Merges the function metadata of `source` into `data`.
                 *
                 * Merging metadata reduces the number of wrappers used to invoke a function.
                 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                 * may be applied regardless of execution order. Methods like `_.ary` and
                 * `_.rearg` modify function arguments, making the order in which they are
                 * executed important, preventing the merging of metadata. However, we make
                 * an exception for a safe combined case where curried functions have `_.ary`
                 * and or `_.rearg` applied.
                 *
                 * @private
                 * @param {Array} data The destination metadata.
                 * @param {Array} source The source metadata.
                 * @returns {Array} Returns `data`.
                 */
                function mergeData(data, source) {
                  var bitmask = data[1],
                      srcBitmask = source[1],
                      newBitmask = bitmask | srcBitmask,
                      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                  var isCombo =
                    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

                  // Exit early if metadata can't be merged.
                  if (!(isCommon || isCombo)) {
                    return data;
                  }
                  // Use source `thisArg` if available.
                  if (srcBitmask & WRAP_BIND_FLAG) {
                    data[2] = source[2];
                    // Set when currying a bound function.
                    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                  }
                  // Compose partial arguments.
                  var value = source[3];
                  if (value) {
                    var partials = data[3];
                    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                  }
                  // Compose partial right arguments.
                  value = source[5];
                  if (value) {
                    partials = data[5];
                    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                  }
                  // Use source `argPos` if available.
                  value = source[7];
                  if (value) {
                    data[7] = value;
                  }
                  // Use source `ary` if it's smaller.
                  if (srcBitmask & WRAP_ARY_FLAG) {
                    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                  }
                  // Use source `arity` if one is not provided.
                  if (data[9] == null) {
                    data[9] = source[9];
                  }
                  // Use source `func` and merge bitmasks.
                  data[0] = source[0];
                  data[1] = newBitmask;

                  return data;
                }

                /**
                 * This function is like
                 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * except that it includes inherited enumerable properties.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 */
                function nativeKeysIn(object) {
                  var result = [];
                  if (object != null) {
                    for (var key in Object(object)) {
                      result.push(key);
                    }
                  }
                  return result;
                }

                /**
                 * Converts `value` to a string using `Object.prototype.toString`.
                 *
                 * @private
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 */
                function objectToString(value) {
                  return nativeObjectToString.call(value);
                }

                /**
                 * A specialized version of `baseRest` which transforms the rest array.
                 *
                 * @private
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @param {Function} transform The rest array transform.
                 * @returns {Function} Returns the new function.
                 */
                function overRest(func, start, transform) {
                  start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
                  return function() {
                    var args = arguments,
                        index = -1,
                        length = nativeMax(args.length - start, 0),
                        array = Array(length);

                    while (++index < length) {
                      array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                      otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                  };
                }

                /**
                 * Gets the parent value at `path` of `object`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} path The path to get the parent value of.
                 * @returns {*} Returns the parent value.
                 */
                function parent(object, path) {
                  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                }

                /**
                 * Reorder `array` according to the specified indexes where the element at
                 * the first index is assigned as the first element, the element at
                 * the second index is assigned as the second element, and so on.
                 *
                 * @private
                 * @param {Array} array The array to reorder.
                 * @param {Array} indexes The arranged array indexes.
                 * @returns {Array} Returns `array`.
                 */
                function reorder(array, indexes) {
                  var arrLength = array.length,
                      length = nativeMin(indexes.length, arrLength),
                      oldArray = copyArray(array);

                  while (length--) {
                    var index = indexes[length];
                    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
                  }
                  return array;
                }

                /**
                 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function safeGet(object, key) {
                  if (key === 'constructor' && typeof object[key] === 'function') {
                    return;
                  }

                  if (key == '__proto__') {
                    return;
                  }

                  return object[key];
                }

                /**
                 * Sets metadata for `func`.
                 *
                 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                 * period of time, it will trip its breaker and transition to an identity
                 * function to avoid garbage collection pauses in V8. See
                 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                 * for more details.
                 *
                 * @private
                 * @param {Function} func The function to associate metadata with.
                 * @param {*} data The metadata.
                 * @returns {Function} Returns `func`.
                 */
                var setData = shortOut(baseSetData);

                /**
                 * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                 *
                 * @private
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @returns {number|Object} Returns the timer id or timeout object.
                 */
                var setTimeout = ctxSetTimeout || function(func, wait) {
                  return root.setTimeout(func, wait);
                };

                /**
                 * Sets the `toString` method of `func` to return `string`.
                 *
                 * @private
                 * @param {Function} func The function to modify.
                 * @param {Function} string The `toString` result.
                 * @returns {Function} Returns `func`.
                 */
                var setToString = shortOut(baseSetToString);

                /**
                 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                 * with wrapper details in a comment at the top of the source body.
                 *
                 * @private
                 * @param {Function} wrapper The function to modify.
                 * @param {Function} reference The reference function.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Function} Returns `wrapper`.
                 */
                function setWrapToString(wrapper, reference, bitmask) {
                  var source = (reference + '');
                  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                }

                /**
                 * Creates a function that'll short out and invoke `identity` instead
                 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                 * milliseconds.
                 *
                 * @private
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new shortable function.
                 */
                function shortOut(func) {
                  var count = 0,
                      lastCalled = 0;

                  return function() {
                    var stamp = nativeNow(),
                        remaining = HOT_SPAN - (stamp - lastCalled);

                    lastCalled = stamp;
                    if (remaining > 0) {
                      if (++count >= HOT_COUNT) {
                        return arguments[0];
                      }
                    } else {
                      count = 0;
                    }
                    return func.apply(undefined$1, arguments);
                  };
                }

                /**
                 * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                 *
                 * @private
                 * @param {Array} array The array to shuffle.
                 * @param {number} [size=array.length] The size of `array`.
                 * @returns {Array} Returns `array`.
                 */
                function shuffleSelf(array, size) {
                  var index = -1,
                      length = array.length,
                      lastIndex = length - 1;

                  size = size === undefined$1 ? length : size;
                  while (++index < size) {
                    var rand = baseRandom(index, lastIndex),
                        value = array[rand];

                    array[rand] = array[index];
                    array[index] = value;
                  }
                  array.length = size;
                  return array;
                }

                /**
                 * Converts `string` to a property path array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the property path array.
                 */
                var stringToPath = memoizeCapped(function(string) {
                  var result = [];
                  if (string.charCodeAt(0) === 46 /* . */) {
                    result.push('');
                  }
                  string.replace(rePropName, function(match, number, quote, subString) {
                    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
                  });
                  return result;
                });

                /**
                 * Converts `value` to a string key if it's not a string or symbol.
                 *
                 * @private
                 * @param {*} value The value to inspect.
                 * @returns {string|symbol} Returns the key.
                 */
                function toKey(value) {
                  if (typeof value == 'string' || isSymbol(value)) {
                    return value;
                  }
                  var result = (value + '');
                  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                }

                /**
                 * Converts `func` to its source code.
                 *
                 * @private
                 * @param {Function} func The function to convert.
                 * @returns {string} Returns the source code.
                 */
                function toSource(func) {
                  if (func != null) {
                    try {
                      return funcToString.call(func);
                    } catch (e) {}
                    try {
                      return (func + '');
                    } catch (e) {}
                  }
                  return '';
                }

                /**
                 * Updates wrapper `details` based on `bitmask` flags.
                 *
                 * @private
                 * @returns {Array} details The details to modify.
                 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                 * @returns {Array} Returns `details`.
                 */
                function updateWrapDetails(details, bitmask) {
                  arrayEach(wrapFlags, function(pair) {
                    var value = '_.' + pair[0];
                    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                      details.push(value);
                    }
                  });
                  return details.sort();
                }

                /**
                 * Creates a clone of `wrapper`.
                 *
                 * @private
                 * @param {Object} wrapper The wrapper to clone.
                 * @returns {Object} Returns the cloned wrapper.
                 */
                function wrapperClone(wrapper) {
                  if (wrapper instanceof LazyWrapper) {
                    return wrapper.clone();
                  }
                  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                  result.__actions__ = copyArray(wrapper.__actions__);
                  result.__index__  = wrapper.__index__;
                  result.__values__ = wrapper.__values__;
                  return result;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an array of elements split into groups the length of `size`.
                 * If `array` can't be split evenly, the final chunk will be the remaining
                 * elements.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to process.
                 * @param {number} [size=1] The length of each chunk
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the new array of chunks.
                 * @example
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 2);
                 * // => [['a', 'b'], ['c', 'd']]
                 *
                 * _.chunk(['a', 'b', 'c', 'd'], 3);
                 * // => [['a', 'b', 'c'], ['d']]
                 */
                function chunk(array, size, guard) {
                  if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
                    size = 1;
                  } else {
                    size = nativeMax(toInteger(size), 0);
                  }
                  var length = array == null ? 0 : array.length;
                  if (!length || size < 1) {
                    return [];
                  }
                  var index = 0,
                      resIndex = 0,
                      result = Array(nativeCeil(length / size));

                  while (index < length) {
                    result[resIndex++] = baseSlice(array, index, (index += size));
                  }
                  return result;
                }

                /**
                 * Creates an array with all falsey values removed. The values `false`, `null`,
                 * `0`, `""`, `undefined`, and `NaN` are falsey.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to compact.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.compact([0, 1, false, 2, '', 3]);
                 * // => [1, 2, 3]
                 */
                function compact(array) {
                  var index = -1,
                      length = array == null ? 0 : array.length,
                      resIndex = 0,
                      result = [];

                  while (++index < length) {
                    var value = array[index];
                    if (value) {
                      result[resIndex++] = value;
                    }
                  }
                  return result;
                }

                /**
                 * Creates a new array concatenating `array` with any additional arrays
                 * and/or values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to concatenate.
                 * @param {...*} [values] The values to concatenate.
                 * @returns {Array} Returns the new concatenated array.
                 * @example
                 *
                 * var array = [1];
                 * var other = _.concat(array, 2, [3], [[4]]);
                 *
                 * console.log(other);
                 * // => [1, 2, 3, [4]]
                 *
                 * console.log(array);
                 * // => [1]
                 */
                function concat() {
                  var length = arguments.length;
                  if (!length) {
                    return [];
                  }
                  var args = Array(length - 1),
                      array = arguments[0],
                      index = length;

                  while (index--) {
                    args[index - 1] = arguments[index];
                  }
                  return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                }

                /**
                 * Creates an array of `array` values not included in the other given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * **Note:** Unlike `_.pullAll`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.without, _.xor
                 * @example
                 *
                 * _.difference([2, 1], [2, 3]);
                 * // => [1]
                 */
                var difference = baseRest(function(array, values) {
                  return isArrayLikeObject(array)
                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                    : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `iteratee` which
                 * is invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var differenceBy = baseRest(function(array, values) {
                  var iteratee = last(values);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                  }
                  return isArrayLikeObject(array)
                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
                    : [];
                });

                /**
                 * This method is like `_.difference` except that it accepts `comparator`
                 * which is invoked to compare elements of `array` to `values`. The order and
                 * references of result values are determined by the first array. The comparator
                 * is invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...Array} [values] The values to exclude.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 *
                 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }]
                 */
                var differenceWith = baseRest(function(array, values) {
                  var comparator = last(values);
                  if (isArrayLikeObject(comparator)) {
                    comparator = undefined$1;
                  }
                  return isArrayLikeObject(array)
                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
                    : [];
                });

                /**
                 * Creates a slice of `array` with `n` elements dropped from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.drop([1, 2, 3]);
                 * // => [2, 3]
                 *
                 * _.drop([1, 2, 3], 2);
                 * // => [3]
                 *
                 * _.drop([1, 2, 3], 5);
                 * // => []
                 *
                 * _.drop([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function drop(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = (guard || n === undefined$1) ? 1 : toInteger(n);
                  return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with `n` elements dropped from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to drop.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.dropRight([1, 2, 3]);
                 * // => [1, 2]
                 *
                 * _.dropRight([1, 2, 3], 2);
                 * // => [1]
                 *
                 * _.dropRight([1, 2, 3], 5);
                 * // => []
                 *
                 * _.dropRight([1, 2, 3], 0);
                 * // => [1, 2, 3]
                 */
                function dropRight(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = (guard || n === undefined$1) ? 1 : toInteger(n);
                  n = length - n;
                  return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the end.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.dropRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropRightWhile(users, ['active', false]);
                 * // => objects for ['barney']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropRightWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropRightWhile(array, predicate) {
                  return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3), true, true)
                    : [];
                }

                /**
                 * Creates a slice of `array` excluding elements dropped from the beginning.
                 * Elements are dropped until `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.dropWhile(users, function(o) { return !o.active; });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.dropWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.dropWhile(users, ['active', false]);
                 * // => objects for ['pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.dropWhile(users, 'active');
                 * // => objects for ['barney', 'fred', 'pebbles']
                 */
                function dropWhile(array, predicate) {
                  return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3), true)
                    : [];
                }

                /**
                 * Fills elements of `array` with `value` from `start` up to, but not
                 * including, `end`.
                 *
                 * **Note:** This method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Array
                 * @param {Array} array The array to fill.
                 * @param {*} value The value to fill `array` with.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.fill(array, 'a');
                 * console.log(array);
                 * // => ['a', 'a', 'a']
                 *
                 * _.fill(Array(3), 2);
                 * // => [2, 2, 2]
                 *
                 * _.fill([4, 6, 8, 10], '*', 1, 3);
                 * // => [4, '*', '*', 10]
                 */
                function fill(array, value, start, end) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                    start = 0;
                    end = length;
                  }
                  return baseFill(array, value, start, end);
                }

                /**
                 * This method is like `_.find` except that it returns the index of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.findIndex(users, function(o) { return o.user == 'barney'; });
                 * // => 0
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findIndex(users, { 'user': 'fred', 'active': false });
                 * // => 1
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findIndex(users, ['active', false]);
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findIndex(users, 'active');
                 * // => 2
                 */
                function findIndex(array, predicate, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = fromIndex == null ? 0 : toInteger(fromIndex);
                  if (index < 0) {
                    index = nativeMax(length + index, 0);
                  }
                  return baseFindIndex(array, getIteratee(predicate, 3), index);
                }

                /**
                 * This method is like `_.findIndex` except that it iterates over elements
                 * of `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the found element, else `-1`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                 * // => 2
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                 * // => 0
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastIndex(users, ['active', false]);
                 * // => 2
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastIndex(users, 'active');
                 * // => 0
                 */
                function findLastIndex(array, predicate, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = length - 1;
                  if (fromIndex !== undefined$1) {
                    index = toInteger(fromIndex);
                    index = fromIndex < 0
                      ? nativeMax(length + index, 0)
                      : nativeMin(index, length - 1);
                  }
                  return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                }

                /**
                 * Flattens `array` a single level deep.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flatten([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, [3, [4]], 5]
                 */
                function flatten(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseFlatten(array, 1) : [];
                }

                /**
                 * Recursively flattens `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * _.flattenDeep([1, [2, [3, [4]], 5]]);
                 * // => [1, 2, 3, 4, 5]
                 */
                function flattenDeep(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseFlatten(array, INFINITY) : [];
                }

                /**
                 * Recursively flatten `array` up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Array
                 * @param {Array} array The array to flatten.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * var array = [1, [2, [3, [4]], 5]];
                 *
                 * _.flattenDepth(array, 1);
                 * // => [1, 2, [3, [4]], 5]
                 *
                 * _.flattenDepth(array, 2);
                 * // => [1, 2, 3, [4], 5]
                 */
                function flattenDepth(array, depth) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  depth = depth === undefined$1 ? 1 : toInteger(depth);
                  return baseFlatten(array, depth);
                }

                /**
                 * The inverse of `_.toPairs`; this method returns an object composed
                 * from key-value `pairs`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} pairs The key-value pairs.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.fromPairs([['a', 1], ['b', 2]]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function fromPairs(pairs) {
                  var index = -1,
                      length = pairs == null ? 0 : pairs.length,
                      result = {};

                  while (++index < length) {
                    var pair = pairs[index];
                    result[pair[0]] = pair[1];
                  }
                  return result;
                }

                /**
                 * Gets the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias first
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the first element of `array`.
                 * @example
                 *
                 * _.head([1, 2, 3]);
                 * // => 1
                 *
                 * _.head([]);
                 * // => undefined
                 */
                function head(array) {
                  return (array && array.length) ? array[0] : undefined$1;
                }

                /**
                 * Gets the index at which the first occurrence of `value` is found in `array`
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. If `fromIndex` is negative, it's used as the
                 * offset from the end of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.indexOf([1, 2, 1, 2], 2);
                 * // => 1
                 *
                 * // Search from the `fromIndex`.
                 * _.indexOf([1, 2, 1, 2], 2, 2);
                 * // => 3
                 */
                function indexOf(array, value, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = fromIndex == null ? 0 : toInteger(fromIndex);
                  if (index < 0) {
                    index = nativeMax(length + index, 0);
                  }
                  return baseIndexOf(array, value, index);
                }

                /**
                 * Gets all but the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.initial([1, 2, 3]);
                 * // => [1, 2]
                 */
                function initial(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseSlice(array, 0, -1) : [];
                }

                /**
                 * Creates an array of unique values that are included in all given arrays
                 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons. The order and references of result values are
                 * determined by the first array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersection([2, 1], [2, 3]);
                 * // => [2]
                 */
                var intersection = baseRest(function(arrays) {
                  var mapped = arrayMap(arrays, castArrayLikeObject);
                  return (mapped.length && mapped[0] === arrays[0])
                    ? baseIntersection(mapped)
                    : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `iteratee`
                 * which is invoked for each element of each `arrays` to generate the criterion
                 * by which they're compared. The order and references of result values are
                 * determined by the first array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [2.1]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }]
                 */
                var intersectionBy = baseRest(function(arrays) {
                  var iteratee = last(arrays),
                      mapped = arrayMap(arrays, castArrayLikeObject);

                  if (iteratee === last(mapped)) {
                    iteratee = undefined$1;
                  } else {
                    mapped.pop();
                  }
                  return (mapped.length && mapped[0] === arrays[0])
                    ? baseIntersection(mapped, getIteratee(iteratee, 2))
                    : [];
                });

                /**
                 * This method is like `_.intersection` except that it accepts `comparator`
                 * which is invoked to compare elements of `arrays`. The order and references
                 * of result values are determined by the first array. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of intersecting values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.intersectionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }]
                 */
                var intersectionWith = baseRest(function(arrays) {
                  var comparator = last(arrays),
                      mapped = arrayMap(arrays, castArrayLikeObject);

                  comparator = typeof comparator == 'function' ? comparator : undefined$1;
                  if (comparator) {
                    mapped.pop();
                  }
                  return (mapped.length && mapped[0] === arrays[0])
                    ? baseIntersection(mapped, undefined$1, comparator)
                    : [];
                });

                /**
                 * Converts all elements in `array` into a string separated by `separator`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to convert.
                 * @param {string} [separator=','] The element separator.
                 * @returns {string} Returns the joined string.
                 * @example
                 *
                 * _.join(['a', 'b', 'c'], '~');
                 * // => 'a~b~c'
                 */
                function join(array, separator) {
                  return array == null ? '' : nativeJoin.call(array, separator);
                }

                /**
                 * Gets the last element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {*} Returns the last element of `array`.
                 * @example
                 *
                 * _.last([1, 2, 3]);
                 * // => 3
                 */
                function last(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? array[length - 1] : undefined$1;
                }

                /**
                 * This method is like `_.indexOf` except that it iterates over elements of
                 * `array` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=array.length-1] The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.lastIndexOf([1, 2, 1, 2], 2);
                 * // => 3
                 *
                 * // Search from the `fromIndex`.
                 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                 * // => 1
                 */
                function lastIndexOf(array, value, fromIndex) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return -1;
                  }
                  var index = length;
                  if (fromIndex !== undefined$1) {
                    index = toInteger(fromIndex);
                    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                  }
                  return value === value
                    ? strictLastIndexOf(array, value, index)
                    : baseFindIndex(array, baseIsNaN, index, true);
                }

                /**
                 * Gets the element at index `n` of `array`. If `n` is negative, the nth
                 * element from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.11.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=0] The index of the element to return.
                 * @returns {*} Returns the nth element of `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 *
                 * _.nth(array, 1);
                 * // => 'b'
                 *
                 * _.nth(array, -2);
                 * // => 'c';
                 */
                function nth(array, n) {
                  return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
                }

                /**
                 * Removes all given values from `array` using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                 * to remove elements from an array by predicate.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...*} [values] The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pull(array, 'a', 'c');
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                var pull = baseRest(pullAll);

                /**
                 * This method is like `_.pull` except that it accepts an array of values to remove.
                 *
                 * **Note:** Unlike `_.difference`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                 *
                 * _.pullAll(array, ['a', 'c']);
                 * console.log(array);
                 * // => ['b', 'b']
                 */
                function pullAll(array, values) {
                  return (array && array.length && values && values.length)
                    ? basePullAll(array, values)
                    : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `iteratee` which is
                 * invoked for each element of `array` and `values` to generate the criterion
                 * by which they're compared. The iteratee is invoked with one argument: (value).
                 *
                 * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                 *
                 * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                 * console.log(array);
                 * // => [{ 'x': 2 }]
                 */
                function pullAllBy(array, values, iteratee) {
                  return (array && array.length && values && values.length)
                    ? basePullAll(array, values, getIteratee(iteratee, 2))
                    : array;
                }

                /**
                 * This method is like `_.pullAll` except that it accepts `comparator` which
                 * is invoked to compare elements of `array` to `values`. The comparator is
                 * invoked with two arguments: (arrVal, othVal).
                 *
                 * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to remove.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                 *
                 * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                 * console.log(array);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                 */
                function pullAllWith(array, values, comparator) {
                  return (array && array.length && values && values.length)
                    ? basePullAll(array, values, undefined$1, comparator)
                    : array;
                }

                /**
                 * Removes elements from `array` corresponding to `indexes` and returns an
                 * array of removed elements.
                 *
                 * **Note:** Unlike `_.at`, this method mutates `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = ['a', 'b', 'c', 'd'];
                 * var pulled = _.pullAt(array, [1, 3]);
                 *
                 * console.log(array);
                 * // => ['a', 'c']
                 *
                 * console.log(pulled);
                 * // => ['b', 'd']
                 */
                var pullAt = flatRest(function(array, indexes) {
                  var length = array == null ? 0 : array.length,
                      result = baseAt(array, indexes);

                  basePullAt(array, arrayMap(indexes, function(index) {
                    return isIndex(index, length) ? +index : index;
                  }).sort(compareAscending));

                  return result;
                });

                /**
                 * Removes all elements from `array` that `predicate` returns truthy for
                 * and returns an array of the removed elements. The predicate is invoked
                 * with three arguments: (value, index, array).
                 *
                 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                 * to pull elements from an array by value.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new array of removed elements.
                 * @example
                 *
                 * var array = [1, 2, 3, 4];
                 * var evens = _.remove(array, function(n) {
                 *   return n % 2 == 0;
                 * });
                 *
                 * console.log(array);
                 * // => [1, 3]
                 *
                 * console.log(evens);
                 * // => [2, 4]
                 */
                function remove(array, predicate) {
                  var result = [];
                  if (!(array && array.length)) {
                    return result;
                  }
                  var index = -1,
                      indexes = [],
                      length = array.length;

                  predicate = getIteratee(predicate, 3);
                  while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                      result.push(value);
                      indexes.push(index);
                    }
                  }
                  basePullAt(array, indexes);
                  return result;
                }

                /**
                 * Reverses `array` so that the first element becomes the last, the second
                 * element becomes the second to last, and so on.
                 *
                 * **Note:** This method mutates `array` and is based on
                 * [`Array#reverse`](https://mdn.io/Array/reverse).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to modify.
                 * @returns {Array} Returns `array`.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _.reverse(array);
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function reverse(array) {
                  return array == null ? array : nativeReverse.call(array);
                }

                /**
                 * Creates a slice of `array` from `start` up to, but not including, `end`.
                 *
                 * **Note:** This method is used instead of
                 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                 * returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to slice.
                 * @param {number} [start=0] The start position.
                 * @param {number} [end=array.length] The end position.
                 * @returns {Array} Returns the slice of `array`.
                 */
                function slice(array, start, end) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                    start = 0;
                    end = length;
                  }
                  else {
                    start = start == null ? 0 : toInteger(start);
                    end = end === undefined$1 ? length : toInteger(end);
                  }
                  return baseSlice(array, start, end);
                }

                /**
                 * Uses a binary search to determine the lowest index at which `value`
                 * should be inserted into `array` in order to maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedIndex([30, 50], 40);
                 * // => 1
                 */
                function sortedIndex(array, value) {
                  return baseSortedIndex(array, value);
                }

                /**
                 * This method is like `_.sortedIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 0
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 0
                 */
                function sortedIndexBy(array, value, iteratee) {
                  return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
                }

                /**
                 * This method is like `_.indexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 1
                 */
                function sortedIndexOf(array, value) {
                  var length = array == null ? 0 : array.length;
                  if (length) {
                    var index = baseSortedIndex(array, value);
                    if (index < length && eq(array[index], value)) {
                      return index;
                    }
                  }
                  return -1;
                }

                /**
                 * This method is like `_.sortedIndex` except that it returns the highest
                 * index at which `value` should be inserted into `array` in order to
                 * maintain its sort order.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                 * // => 4
                 */
                function sortedLastIndex(array, value) {
                  return baseSortedIndex(array, value, true);
                }

                /**
                 * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                 * which is invoked for `value` and each element of `array` to compute their
                 * sort ranking. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The sorted array to inspect.
                 * @param {*} value The value to evaluate.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the index at which `value` should be inserted
                 *  into `array`.
                 * @example
                 *
                 * var objects = [{ 'x': 4 }, { 'x': 5 }];
                 *
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                 * // => 1
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                 * // => 1
                 */
                function sortedLastIndexBy(array, value, iteratee) {
                  return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
                }

                /**
                 * This method is like `_.lastIndexOf` except that it performs a binary
                 * search on a sorted `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 * @example
                 *
                 * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                 * // => 3
                 */
                function sortedLastIndexOf(array, value) {
                  var length = array == null ? 0 : array.length;
                  if (length) {
                    var index = baseSortedIndex(array, value, true) - 1;
                    if (eq(array[index], value)) {
                      return index;
                    }
                  }
                  return -1;
                }

                /**
                 * This method is like `_.uniq` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniq([1, 1, 2]);
                 * // => [1, 2]
                 */
                function sortedUniq(array) {
                  return (array && array.length)
                    ? baseSortedUniq(array)
                    : [];
                }

                /**
                 * This method is like `_.uniqBy` except that it's designed and optimized
                 * for sorted arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                 * // => [1.1, 2.3]
                 */
                function sortedUniqBy(array, iteratee) {
                  return (array && array.length)
                    ? baseSortedUniq(array, getIteratee(iteratee, 2))
                    : [];
                }

                /**
                 * Gets all but the first element of `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.tail([1, 2, 3]);
                 * // => [2, 3]
                 */
                function tail(array) {
                  var length = array == null ? 0 : array.length;
                  return length ? baseSlice(array, 1, length) : [];
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the beginning.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.take([1, 2, 3]);
                 * // => [1]
                 *
                 * _.take([1, 2, 3], 2);
                 * // => [1, 2]
                 *
                 * _.take([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.take([1, 2, 3], 0);
                 * // => []
                 */
                function take(array, n, guard) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  n = (guard || n === undefined$1) ? 1 : toInteger(n);
                  return baseSlice(array, 0, n < 0 ? 0 : n);
                }

                /**
                 * Creates a slice of `array` with `n` elements taken from the end.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {number} [n=1] The number of elements to take.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * _.takeRight([1, 2, 3]);
                 * // => [3]
                 *
                 * _.takeRight([1, 2, 3], 2);
                 * // => [2, 3]
                 *
                 * _.takeRight([1, 2, 3], 5);
                 * // => [1, 2, 3]
                 *
                 * _.takeRight([1, 2, 3], 0);
                 * // => []
                 */
                function takeRight(array, n, guard) {
                  var length = array == null ? 0 : array.length;
                  if (!length) {
                    return [];
                  }
                  n = (guard || n === undefined$1) ? 1 : toInteger(n);
                  n = length - n;
                  return baseSlice(array, n < 0 ? 0 : n, length);
                }

                /**
                 * Creates a slice of `array` with elements taken from the end. Elements are
                 * taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': true },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': false }
                 * ];
                 *
                 * _.takeRightWhile(users, function(o) { return !o.active; });
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                 * // => objects for ['pebbles']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeRightWhile(users, ['active', false]);
                 * // => objects for ['fred', 'pebbles']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeRightWhile(users, 'active');
                 * // => []
                 */
                function takeRightWhile(array, predicate) {
                  return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3), false, true)
                    : [];
                }

                /**
                 * Creates a slice of `array` with elements taken from the beginning. Elements
                 * are taken until `predicate` returns falsey. The predicate is invoked with
                 * three arguments: (value, index, array).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Array
                 * @param {Array} array The array to query.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the slice of `array`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'active': false },
                 *   { 'user': 'fred',    'active': false },
                 *   { 'user': 'pebbles', 'active': true }
                 * ];
                 *
                 * _.takeWhile(users, function(o) { return !o.active; });
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.takeWhile(users, { 'user': 'barney', 'active': false });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.takeWhile(users, ['active', false]);
                 * // => objects for ['barney', 'fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.takeWhile(users, 'active');
                 * // => []
                 */
                function takeWhile(array, predicate) {
                  return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3))
                    : [];
                }

                /**
                 * Creates an array of unique values, in order, from all given arrays using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.union([2], [1, 2]);
                 * // => [2, 1]
                 */
                var union = baseRest(function(arrays) {
                  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                });

                /**
                 * This method is like `_.union` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which uniqueness is computed. Result values are chosen from the first
                 * array in which the value occurs. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                var unionBy = baseRest(function(arrays) {
                  var iteratee = last(arrays);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                  }
                  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
                });

                /**
                 * This method is like `_.union` except that it accepts `comparator` which
                 * is invoked to compare elements of `arrays`. Result values are chosen from
                 * the first array in which the value occurs. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of combined values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.unionWith(objects, others, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var unionWith = baseRest(function(arrays) {
                  var comparator = last(arrays);
                  comparator = typeof comparator == 'function' ? comparator : undefined$1;
                  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
                });

                /**
                 * Creates a duplicate-free version of an array, using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons, in which only the first occurrence of each element
                 * is kept. The order of result values is determined by the order they occur
                 * in the array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniq([2, 1, 2]);
                 * // => [2, 1]
                 */
                function uniq(array) {
                  return (array && array.length) ? baseUniq(array) : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * uniqueness is computed. The order of result values is determined by the
                 * order they occur in the array. The iteratee is invoked with one argument:
                 * (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                 * // => [2.1, 1.2]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 1 }, { 'x': 2 }]
                 */
                function uniqBy(array, iteratee) {
                  return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
                }

                /**
                 * This method is like `_.uniq` except that it accepts `comparator` which
                 * is invoked to compare elements of `array`. The order of result values is
                 * determined by the order they occur in the array.The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new duplicate free array.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.uniqWith(objects, _.isEqual);
                 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                 */
                function uniqWith(array, comparator) {
                  comparator = typeof comparator == 'function' ? comparator : undefined$1;
                  return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
                }

                /**
                 * This method is like `_.zip` except that it accepts an array of grouped
                 * elements and creates an array regrouping the elements to their pre-zip
                 * configuration.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.2.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 *
                 * _.unzip(zipped);
                 * // => [['a', 'b'], [1, 2], [true, false]]
                 */
                function unzip(array) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  var length = 0;
                  array = arrayFilter(array, function(group) {
                    if (isArrayLikeObject(group)) {
                      length = nativeMax(group.length, length);
                      return true;
                    }
                  });
                  return baseTimes(length, function(index) {
                    return arrayMap(array, baseProperty(index));
                  });
                }

                /**
                 * This method is like `_.unzip` except that it accepts `iteratee` to specify
                 * how regrouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {Array} array The array of grouped elements to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  regrouped values.
                 * @returns {Array} Returns the new array of regrouped elements.
                 * @example
                 *
                 * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                 * // => [[1, 10, 100], [2, 20, 200]]
                 *
                 * _.unzipWith(zipped, _.add);
                 * // => [3, 30, 300]
                 */
                function unzipWith(array, iteratee) {
                  if (!(array && array.length)) {
                    return [];
                  }
                  var result = unzip(array);
                  if (iteratee == null) {
                    return result;
                  }
                  return arrayMap(result, function(group) {
                    return apply(iteratee, undefined$1, group);
                  });
                }

                /**
                 * Creates an array excluding all given values using
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * for equality comparisons.
                 *
                 * **Note:** Unlike `_.pull`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {Array} array The array to inspect.
                 * @param {...*} [values] The values to exclude.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.xor
                 * @example
                 *
                 * _.without([2, 1, 2, 3], 1, 2);
                 * // => [3]
                 */
                var without = baseRest(function(array, values) {
                  return isArrayLikeObject(array)
                    ? baseDifference(array, values)
                    : [];
                });

                /**
                 * Creates an array of unique values that is the
                 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                 * of the given arrays. The order of result values is determined by the order
                 * they occur in the arrays.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @returns {Array} Returns the new array of filtered values.
                 * @see _.difference, _.without
                 * @example
                 *
                 * _.xor([2, 1], [2, 3]);
                 * // => [1, 3]
                 */
                var xor = baseRest(function(arrays) {
                  return baseXor(arrayFilter(arrays, isArrayLikeObject));
                });

                /**
                 * This method is like `_.xor` except that it accepts `iteratee` which is
                 * invoked for each element of each `arrays` to generate the criterion by
                 * which by which they're compared. The order of result values is determined
                 * by the order they occur in the arrays. The iteratee is invoked with one
                 * argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                 * // => [1.2, 3.4]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                 * // => [{ 'x': 2 }]
                 */
                var xorBy = baseRest(function(arrays) {
                  var iteratee = last(arrays);
                  if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                  }
                  return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
                });

                /**
                 * This method is like `_.xor` except that it accepts `comparator` which is
                 * invoked to compare elements of `arrays`. The order of result values is
                 * determined by the order they occur in the arrays. The comparator is invoked
                 * with two arguments: (arrVal, othVal).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to inspect.
                 * @param {Function} [comparator] The comparator invoked per element.
                 * @returns {Array} Returns the new array of filtered values.
                 * @example
                 *
                 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                 *
                 * _.xorWith(objects, others, _.isEqual);
                 * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                 */
                var xorWith = baseRest(function(arrays) {
                  var comparator = last(arrays);
                  comparator = typeof comparator == 'function' ? comparator : undefined$1;
                  return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
                });

                /**
                 * Creates an array of grouped elements, the first of which contains the
                 * first elements of the given arrays, the second of which contains the
                 * second elements of the given arrays, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zip(['a', 'b'], [1, 2], [true, false]);
                 * // => [['a', 1, true], ['b', 2, false]]
                 */
                var zip = baseRest(unzip);

                /**
                 * This method is like `_.fromPairs` except that it accepts two arrays,
                 * one of property identifiers and one of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.4.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObject(['a', 'b'], [1, 2]);
                 * // => { 'a': 1, 'b': 2 }
                 */
                function zipObject(props, values) {
                  return baseZipObject(props || [], values || [], assignValue);
                }

                /**
                 * This method is like `_.zipObject` except that it supports property paths.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Array
                 * @param {Array} [props=[]] The property identifiers.
                 * @param {Array} [values=[]] The property values.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                 * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                 */
                function zipObjectDeep(props, values) {
                  return baseZipObject(props || [], values || [], baseSet);
                }

                /**
                 * This method is like `_.zip` except that it accepts `iteratee` to specify
                 * how grouped values should be combined. The iteratee is invoked with the
                 * elements of each group: (...group).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Array
                 * @param {...Array} [arrays] The arrays to process.
                 * @param {Function} [iteratee=_.identity] The function to combine
                 *  grouped values.
                 * @returns {Array} Returns the new array of grouped elements.
                 * @example
                 *
                 * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
                 *   return a + b + c;
                 * });
                 * // => [111, 222]
                 */
                var zipWith = baseRest(function(arrays) {
                  var length = arrays.length,
                      iteratee = length > 1 ? arrays[length - 1] : undefined$1;

                  iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
                  return unzipWith(arrays, iteratee);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                 * chain sequences enabled. The result of such sequences must be unwrapped
                 * with `_#value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Seq
                 * @param {*} value The value to wrap.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36 },
                 *   { 'user': 'fred',    'age': 40 },
                 *   { 'user': 'pebbles', 'age': 1 }
                 * ];
                 *
                 * var youngest = _
                 *   .chain(users)
                 *   .sortBy('age')
                 *   .map(function(o) {
                 *     return o.user + ' is ' + o.age;
                 *   })
                 *   .head()
                 *   .value();
                 * // => 'pebbles is 1'
                 */
                function chain(value) {
                  var result = lodash(value);
                  result.__chain__ = true;
                  return result;
                }

                /**
                 * This method invokes `interceptor` and returns `value`. The interceptor
                 * is invoked with one argument; (value). The purpose of this method is to
                 * "tap into" a method chain sequence in order to modify intermediate results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * _([1, 2, 3])
                 *  .tap(function(array) {
                 *    // Mutate input array.
                 *    array.pop();
                 *  })
                 *  .reverse()
                 *  .value();
                 * // => [2, 1]
                 */
                function tap(value, interceptor) {
                  interceptor(value);
                  return value;
                }

                /**
                 * This method is like `_.tap` except that it returns the result of `interceptor`.
                 * The purpose of this method is to "pass thru" values replacing intermediate
                 * results in a method chain sequence.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Seq
                 * @param {*} value The value to provide to `interceptor`.
                 * @param {Function} interceptor The function to invoke.
                 * @returns {*} Returns the result of `interceptor`.
                 * @example
                 *
                 * _('  abc  ')
                 *  .chain()
                 *  .trim()
                 *  .thru(function(value) {
                 *    return [value];
                 *  })
                 *  .value();
                 * // => ['abc']
                 */
                function thru(value, interceptor) {
                  return interceptor(value);
                }

                /**
                 * This method is the wrapper version of `_.at`.
                 *
                 * @name at
                 * @memberOf _
                 * @since 1.0.0
                 * @category Seq
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _(object).at(['a[0].b.c', 'a[1]']).value();
                 * // => [3, 4]
                 */
                var wrapperAt = flatRest(function(paths) {
                  var length = paths.length,
                      start = length ? paths[0] : 0,
                      value = this.__wrapped__,
                      interceptor = function(object) { return baseAt(object, paths); };

                  if (length > 1 || this.__actions__.length ||
                      !(value instanceof LazyWrapper) || !isIndex(start)) {
                    return this.thru(interceptor);
                  }
                  value = value.slice(start, +start + (length ? 1 : 0));
                  value.__actions__.push({
                    'func': thru,
                    'args': [interceptor],
                    'thisArg': undefined$1
                  });
                  return new LodashWrapper(value, this.__chain__).thru(function(array) {
                    if (length && !array.length) {
                      array.push(undefined$1);
                    }
                    return array;
                  });
                });

                /**
                 * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                 *
                 * @name chain
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 40 }
                 * ];
                 *
                 * // A sequence without explicit chaining.
                 * _(users).head();
                 * // => { 'user': 'barney', 'age': 36 }
                 *
                 * // A sequence with explicit chaining.
                 * _(users)
                 *   .chain()
                 *   .head()
                 *   .pick('user')
                 *   .value();
                 * // => { 'user': 'barney' }
                 */
                function wrapperChain() {
                  return chain(this);
                }

                /**
                 * Executes the chain sequence and returns the wrapped result.
                 *
                 * @name commit
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2];
                 * var wrapped = _(array).push(3);
                 *
                 * console.log(array);
                 * // => [1, 2]
                 *
                 * wrapped = wrapped.commit();
                 * console.log(array);
                 * // => [1, 2, 3]
                 *
                 * wrapped.last();
                 * // => 3
                 *
                 * console.log(array);
                 * // => [1, 2, 3]
                 */
                function wrapperCommit() {
                  return new LodashWrapper(this.value(), this.__chain__);
                }

                /**
                 * Gets the next value on a wrapped object following the
                 * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                 *
                 * @name next
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the next iterator value.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 1 }
                 *
                 * wrapped.next();
                 * // => { 'done': false, 'value': 2 }
                 *
                 * wrapped.next();
                 * // => { 'done': true, 'value': undefined }
                 */
                function wrapperNext() {
                  if (this.__values__ === undefined$1) {
                    this.__values__ = toArray(this.value());
                  }
                  var done = this.__index__ >= this.__values__.length,
                      value = done ? undefined$1 : this.__values__[this.__index__++];

                  return { 'done': done, 'value': value };
                }

                /**
                 * Enables the wrapper to be iterable.
                 *
                 * @name Symbol.iterator
                 * @memberOf _
                 * @since 4.0.0
                 * @category Seq
                 * @returns {Object} Returns the wrapper object.
                 * @example
                 *
                 * var wrapped = _([1, 2]);
                 *
                 * wrapped[Symbol.iterator]() === wrapped;
                 * // => true
                 *
                 * Array.from(wrapped);
                 * // => [1, 2]
                 */
                function wrapperToIterator() {
                  return this;
                }

                /**
                 * Creates a clone of the chain sequence planting `value` as the wrapped value.
                 *
                 * @name plant
                 * @memberOf _
                 * @since 3.2.0
                 * @category Seq
                 * @param {*} value The value to plant.
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var wrapped = _([1, 2]).map(square);
                 * var other = wrapped.plant([3, 4]);
                 *
                 * other.value();
                 * // => [9, 16]
                 *
                 * wrapped.value();
                 * // => [1, 4]
                 */
                function wrapperPlant(value) {
                  var result,
                      parent = this;

                  while (parent instanceof baseLodash) {
                    var clone = wrapperClone(parent);
                    clone.__index__ = 0;
                    clone.__values__ = undefined$1;
                    if (result) {
                      previous.__wrapped__ = clone;
                    } else {
                      result = clone;
                    }
                    var previous = clone;
                    parent = parent.__wrapped__;
                  }
                  previous.__wrapped__ = value;
                  return result;
                }

                /**
                 * This method is the wrapper version of `_.reverse`.
                 *
                 * **Note:** This method mutates the wrapped array.
                 *
                 * @name reverse
                 * @memberOf _
                 * @since 0.1.0
                 * @category Seq
                 * @returns {Object} Returns the new `lodash` wrapper instance.
                 * @example
                 *
                 * var array = [1, 2, 3];
                 *
                 * _(array).reverse().value()
                 * // => [3, 2, 1]
                 *
                 * console.log(array);
                 * // => [3, 2, 1]
                 */
                function wrapperReverse() {
                  var value = this.__wrapped__;
                  if (value instanceof LazyWrapper) {
                    var wrapped = value;
                    if (this.__actions__.length) {
                      wrapped = new LazyWrapper(this);
                    }
                    wrapped = wrapped.reverse();
                    wrapped.__actions__.push({
                      'func': thru,
                      'args': [reverse],
                      'thisArg': undefined$1
                    });
                    return new LodashWrapper(wrapped, this.__chain__);
                  }
                  return this.thru(reverse);
                }

                /**
                 * Executes the chain sequence to resolve the unwrapped value.
                 *
                 * @name value
                 * @memberOf _
                 * @since 0.1.0
                 * @alias toJSON, valueOf
                 * @category Seq
                 * @returns {*} Returns the resolved unwrapped value.
                 * @example
                 *
                 * _([1, 2, 3]).value();
                 * // => [1, 2, 3]
                 */
                function wrapperValue() {
                  return baseWrapperValue(this.__wrapped__, this.__actions__);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the number of times the key was returned by `iteratee`. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.countBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': 1, '6': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.countBy(['one', 'two', 'three'], 'length');
                 * // => { '3': 2, '5': 1 }
                 */
                var countBy = createAggregator(function(result, value, key) {
                  if (hasOwnProperty.call(result, key)) {
                    ++result[key];
                  } else {
                    baseAssignValue(result, key, 1);
                  }
                });

                /**
                 * Checks if `predicate` returns truthy for **all** elements of `collection`.
                 * Iteration is stopped once `predicate` returns falsey. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * **Note:** This method returns `true` for
                 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                 * elements of empty collections.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.every([true, 1, null, 'yes'], Boolean);
                 * // => false
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.every(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.every(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.every(users, 'active');
                 * // => false
                 */
                function every(collection, predicate, guard) {
                  var func = isArray(collection) ? arrayEvery : baseEvery;
                  if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined$1;
                  }
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning an array of all elements
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * **Note:** Unlike `_.remove`, this method returns a new array.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.reject
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * _.filter(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, { 'age': 36, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.filter(users, 'active');
                 * // => objects for ['barney']
                 */
                function filter(collection, predicate) {
                  var func = isArray(collection) ? arrayFilter : baseFilter;
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Iterates over elements of `collection`, returning the first element
                 * `predicate` returns truthy for. The predicate is invoked with three
                 * arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': true },
                 *   { 'user': 'fred',    'age': 40, 'active': false },
                 *   { 'user': 'pebbles', 'age': 1,  'active': true }
                 * ];
                 *
                 * _.find(users, function(o) { return o.age < 40; });
                 * // => object for 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.find(users, { 'age': 1, 'active': true });
                 * // => object for 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.find(users, ['active', false]);
                 * // => object for 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.find(users, 'active');
                 * // => object for 'barney'
                 */
                var find = createFind(findIndex);

                /**
                 * This method is like `_.find` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param {number} [fromIndex=collection.length-1] The index to search from.
                 * @returns {*} Returns the matched element, else `undefined`.
                 * @example
                 *
                 * _.findLast([1, 2, 3, 4], function(n) {
                 *   return n % 2 == 1;
                 * });
                 * // => 3
                 */
                var findLast = createFind(findLastIndex);

                /**
                 * Creates a flattened array of values by running each element in `collection`
                 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                 * with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [n, n];
                 * }
                 *
                 * _.flatMap([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMap(collection, iteratee) {
                  return baseFlatten(map(collection, iteratee), 1);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [[[n, n]]];
                 * }
                 *
                 * _.flatMapDeep([1, 2], duplicate);
                 * // => [1, 1, 2, 2]
                 */
                function flatMapDeep(collection, iteratee) {
                  return baseFlatten(map(collection, iteratee), INFINITY);
                }

                /**
                 * This method is like `_.flatMap` except that it recursively flattens the
                 * mapped results up to `depth` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {number} [depth=1] The maximum recursion depth.
                 * @returns {Array} Returns the new flattened array.
                 * @example
                 *
                 * function duplicate(n) {
                 *   return [[[n, n]]];
                 * }
                 *
                 * _.flatMapDepth([1, 2], duplicate, 2);
                 * // => [[1, 1], [2, 2]]
                 */
                function flatMapDepth(collection, iteratee, depth) {
                  depth = depth === undefined$1 ? 1 : toInteger(depth);
                  return baseFlatten(map(collection, iteratee), depth);
                }

                /**
                 * Iterates over elements of `collection` and invokes `iteratee` for each element.
                 * The iteratee is invoked with three arguments: (value, index|key, collection).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * **Note:** As with other "Collections" methods, objects with a "length"
                 * property are iterated like arrays. To avoid this behavior use `_.forIn`
                 * or `_.forOwn` for object iteration.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @alias each
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEachRight
                 * @example
                 *
                 * _.forEach([1, 2], function(value) {
                 *   console.log(value);
                 * });
                 * // => Logs `1` then `2`.
                 *
                 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forEach(collection, iteratee) {
                  var func = isArray(collection) ? arrayEach : baseEach;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forEach` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @alias eachRight
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array|Object} Returns `collection`.
                 * @see _.forEach
                 * @example
                 *
                 * _.forEachRight([1, 2], function(value) {
                 *   console.log(value);
                 * });
                 * // => Logs `2` then `1`.
                 */
                function forEachRight(collection, iteratee) {
                  var func = isArray(collection) ? arrayEachRight : baseEachRight;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The order of grouped values
                 * is determined by the order they occur in `collection`. The corresponding
                 * value of each key is an array of elements responsible for generating the
                 * key. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                 * // => { '4': [4.2], '6': [6.1, 6.3] }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.groupBy(['one', 'two', 'three'], 'length');
                 * // => { '3': ['one', 'two'], '5': ['three'] }
                 */
                var groupBy = createAggregator(function(result, value, key) {
                  if (hasOwnProperty.call(result, key)) {
                    result[key].push(value);
                  } else {
                    baseAssignValue(result, key, [value]);
                  }
                });

                /**
                 * Checks if `value` is in `collection`. If `collection` is a string, it's
                 * checked for a substring of `value`, otherwise
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * is used for equality comparisons. If `fromIndex` is negative, it's used as
                 * the offset from the end of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} [fromIndex=0] The index to search from.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {boolean} Returns `true` if `value` is found, else `false`.
                 * @example
                 *
                 * _.includes([1, 2, 3], 1);
                 * // => true
                 *
                 * _.includes([1, 2, 3], 1, 2);
                 * // => false
                 *
                 * _.includes({ 'a': 1, 'b': 2 }, 1);
                 * // => true
                 *
                 * _.includes('abcd', 'bc');
                 * // => true
                 */
                function includes(collection, value, fromIndex, guard) {
                  collection = isArrayLike(collection) ? collection : values(collection);
                  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

                  var length = collection.length;
                  if (fromIndex < 0) {
                    fromIndex = nativeMax(length + fromIndex, 0);
                  }
                  return isString(collection)
                    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
                    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
                }

                /**
                 * Invokes the method at `path` of each element in `collection`, returning
                 * an array of the results of each invoked method. Any additional arguments
                 * are provided to each invoked method. If `path` is a function, it's invoked
                 * for, and `this` bound to, each element in `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array|Function|string} path The path of the method to invoke or
                 *  the function invoked per iteration.
                 * @param {...*} [args] The arguments to invoke each method with.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                 * // => [[1, 5, 7], [1, 2, 3]]
                 *
                 * _.invokeMap([123, 456], String.prototype.split, '');
                 * // => [['1', '2', '3'], ['4', '5', '6']]
                 */
                var invokeMap = baseRest(function(collection, path, args) {
                  var index = -1,
                      isFunc = typeof path == 'function',
                      result = isArrayLike(collection) ? Array(collection.length) : [];

                  baseEach(collection, function(value) {
                    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                  });
                  return result;
                });

                /**
                 * Creates an object composed of keys generated from the results of running
                 * each element of `collection` thru `iteratee`. The corresponding value of
                 * each key is the last element responsible for generating the key. The
                 * iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                 * @returns {Object} Returns the composed aggregate object.
                 * @example
                 *
                 * var array = [
                 *   { 'dir': 'left', 'code': 97 },
                 *   { 'dir': 'right', 'code': 100 }
                 * ];
                 *
                 * _.keyBy(array, function(o) {
                 *   return String.fromCharCode(o.code);
                 * });
                 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                 *
                 * _.keyBy(array, 'dir');
                 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                 */
                var keyBy = createAggregator(function(result, value, key) {
                  baseAssignValue(result, key, value);
                });

                /**
                 * Creates an array of values by running each element in `collection` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                 *
                 * The guarded methods are:
                 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * _.map([4, 8], square);
                 * // => [16, 64]
                 *
                 * _.map({ 'a': 4, 'b': 8 }, square);
                 * // => [16, 64] (iteration order is not guaranteed)
                 *
                 * var users = [
                 *   { 'user': 'barney' },
                 *   { 'user': 'fred' }
                 * ];
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, 'user');
                 * // => ['barney', 'fred']
                 */
                function map(collection, iteratee) {
                  var func = isArray(collection) ? arrayMap : baseMap;
                  return func(collection, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.sortBy` except that it allows specifying the sort
                 * orders of the iteratees to sort by. If `orders` is unspecified, all values
                 * are sorted in ascending order. Otherwise, specify an order of "desc" for
                 * descending or "asc" for ascending sort order of corresponding values.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @param {string[]} [orders] The sort orders of `iteratees`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 34 },
                 *   { 'user': 'fred',   'age': 40 },
                 *   { 'user': 'barney', 'age': 36 }
                 * ];
                 *
                 * // Sort by `user` in ascending order and by `age` in descending order.
                 * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                 */
                function orderBy(collection, iteratees, orders, guard) {
                  if (collection == null) {
                    return [];
                  }
                  if (!isArray(iteratees)) {
                    iteratees = iteratees == null ? [] : [iteratees];
                  }
                  orders = guard ? undefined$1 : orders;
                  if (!isArray(orders)) {
                    orders = orders == null ? [] : [orders];
                  }
                  return baseOrderBy(collection, iteratees, orders);
                }

                /**
                 * Creates an array of elements split into two groups, the first of which
                 * contains elements `predicate` returns truthy for, the second of which
                 * contains elements `predicate` returns falsey for. The predicate is
                 * invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of grouped elements.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney',  'age': 36, 'active': false },
                 *   { 'user': 'fred',    'age': 40, 'active': true },
                 *   { 'user': 'pebbles', 'age': 1,  'active': false }
                 * ];
                 *
                 * _.partition(users, function(o) { return o.active; });
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.partition(users, { 'age': 1, 'active': false });
                 * // => objects for [['pebbles'], ['barney', 'fred']]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.partition(users, ['active', false]);
                 * // => objects for [['barney', 'pebbles'], ['fred']]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.partition(users, 'active');
                 * // => objects for [['fred'], ['barney', 'pebbles']]
                 */
                var partition = createAggregator(function(result, value, key) {
                  result[key ? 0 : 1].push(value);
                }, function() { return [[], []]; });

                /**
                 * Reduces `collection` to a value which is the accumulated result of running
                 * each element in `collection` thru `iteratee`, where each successive
                 * invocation is supplied the return value of the previous. If `accumulator`
                 * is not given, the first element of `collection` is used as the initial
                 * value. The iteratee is invoked with four arguments:
                 * (accumulator, value, index|key, collection).
                 *
                 * Many lodash methods are guarded to work as iteratees for methods like
                 * `_.reduce`, `_.reduceRight`, and `_.transform`.
                 *
                 * The guarded methods are:
                 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                 * and `sortBy`
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduceRight
                 * @example
                 *
                 * _.reduce([1, 2], function(sum, n) {
                 *   return sum + n;
                 * }, 0);
                 * // => 3
                 *
                 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                 *   (result[value] || (result[value] = [])).push(key);
                 *   return result;
                 * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                 */
                function reduce(collection, iteratee, accumulator) {
                  var func = isArray(collection) ? arrayReduce : baseReduce,
                      initAccum = arguments.length < 3;

                  return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
                }

                /**
                 * This method is like `_.reduce` except that it iterates over elements of
                 * `collection` from right to left.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @returns {*} Returns the accumulated value.
                 * @see _.reduce
                 * @example
                 *
                 * var array = [[0, 1], [2, 3], [4, 5]];
                 *
                 * _.reduceRight(array, function(flattened, other) {
                 *   return flattened.concat(other);
                 * }, []);
                 * // => [4, 5, 2, 3, 0, 1]
                 */
                function reduceRight(collection, iteratee, accumulator) {
                  var func = isArray(collection) ? arrayReduceRight : baseReduce,
                      initAccum = arguments.length < 3;

                  return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
                }

                /**
                 * The opposite of `_.filter`; this method returns the elements of `collection`
                 * that `predicate` does **not** return truthy for.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 * @see _.filter
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': false },
                 *   { 'user': 'fred',   'age': 40, 'active': true }
                 * ];
                 *
                 * _.reject(users, function(o) { return !o.active; });
                 * // => objects for ['fred']
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.reject(users, { 'age': 40, 'active': true });
                 * // => objects for ['barney']
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.reject(users, ['active', false]);
                 * // => objects for ['fred']
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.reject(users, 'active');
                 * // => objects for ['barney']
                 */
                function reject(collection, predicate) {
                  var func = isArray(collection) ? arrayFilter : baseFilter;
                  return func(collection, negate(getIteratee(predicate, 3)));
                }

                /**
                 * Gets a random element from `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @returns {*} Returns the random element.
                 * @example
                 *
                 * _.sample([1, 2, 3, 4]);
                 * // => 2
                 */
                function sample(collection) {
                  var func = isArray(collection) ? arraySample : baseSample;
                  return func(collection);
                }

                /**
                 * Gets `n` random elements at unique keys from `collection` up to the
                 * size of `collection`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to sample.
                 * @param {number} [n=1] The number of elements to sample.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the random elements.
                 * @example
                 *
                 * _.sampleSize([1, 2, 3], 2);
                 * // => [3, 1]
                 *
                 * _.sampleSize([1, 2, 3], 4);
                 * // => [2, 3, 1]
                 */
                function sampleSize(collection, n, guard) {
                  if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
                    n = 1;
                  } else {
                    n = toInteger(n);
                  }
                  var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                  return func(collection, n);
                }

                /**
                 * Creates an array of shuffled values, using a version of the
                 * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to shuffle.
                 * @returns {Array} Returns the new shuffled array.
                 * @example
                 *
                 * _.shuffle([1, 2, 3, 4]);
                 * // => [4, 1, 3, 2]
                 */
                function shuffle(collection) {
                  var func = isArray(collection) ? arrayShuffle : baseShuffle;
                  return func(collection);
                }

                /**
                 * Gets the size of `collection` by returning its length for array-like
                 * values or the number of own enumerable string keyed properties for objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object|string} collection The collection to inspect.
                 * @returns {number} Returns the collection size.
                 * @example
                 *
                 * _.size([1, 2, 3]);
                 * // => 3
                 *
                 * _.size({ 'a': 1, 'b': 2 });
                 * // => 2
                 *
                 * _.size('pebbles');
                 * // => 7
                 */
                function size(collection) {
                  if (collection == null) {
                    return 0;
                  }
                  if (isArrayLike(collection)) {
                    return isString(collection) ? stringSize(collection) : collection.length;
                  }
                  var tag = getTag(collection);
                  if (tag == mapTag || tag == setTag) {
                    return collection.size;
                  }
                  return baseKeys(collection).length;
                }

                /**
                 * Checks if `predicate` returns truthy for **any** element of `collection`.
                 * Iteration is stopped once `predicate` returns truthy. The predicate is
                 * invoked with three arguments: (value, index|key, collection).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 * @example
                 *
                 * _.some([null, 0, 'yes', false], Boolean);
                 * // => true
                 *
                 * var users = [
                 *   { 'user': 'barney', 'active': true },
                 *   { 'user': 'fred',   'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.some(users, { 'user': 'barney', 'active': false });
                 * // => false
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.some(users, ['active', false]);
                 * // => true
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.some(users, 'active');
                 * // => true
                 */
                function some(collection, predicate, guard) {
                  var func = isArray(collection) ? arraySome : baseSome;
                  if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined$1;
                  }
                  return func(collection, getIteratee(predicate, 3));
                }

                /**
                 * Creates an array of elements, sorted in ascending order by the results of
                 * running each element in a collection thru each iteratee. This method
                 * performs a stable sort, that is, it preserves the original sort order of
                 * equal elements. The iteratees are invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Collection
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to sort by.
                 * @returns {Array} Returns the new sorted array.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'fred',   'age': 48 },
                 *   { 'user': 'barney', 'age': 36 },
                 *   { 'user': 'fred',   'age': 40 },
                 *   { 'user': 'barney', 'age': 34 }
                 * ];
                 *
                 * _.sortBy(users, [function(o) { return o.user; }]);
                 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                 *
                 * _.sortBy(users, ['user', 'age']);
                 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
                 */
                var sortBy = baseRest(function(collection, iteratees) {
                  if (collection == null) {
                    return [];
                  }
                  var length = iteratees.length;
                  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                    iteratees = [];
                  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                    iteratees = [iteratees[0]];
                  }
                  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                });

                /*------------------------------------------------------------------------*/

                /**
                 * Gets the timestamp of the number of milliseconds that have elapsed since
                 * the Unix epoch (1 January 1970 00:00:00 UTC).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Date
                 * @returns {number} Returns the timestamp.
                 * @example
                 *
                 * _.defer(function(stamp) {
                 *   console.log(_.now() - stamp);
                 * }, _.now());
                 * // => Logs the number of milliseconds it took for the deferred invocation.
                 */
                var now = ctxNow || function() {
                  return root.Date.now();
                };

                /*------------------------------------------------------------------------*/

                /**
                 * The opposite of `_.before`; this method creates a function that invokes
                 * `func` once it's called `n` or more times.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {number} n The number of calls before `func` is invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var saves = ['profile', 'settings'];
                 *
                 * var done = _.after(saves.length, function() {
                 *   console.log('done saving!');
                 * });
                 *
                 * _.forEach(saves, function(type) {
                 *   asyncSave({ 'type': type, 'complete': done });
                 * });
                 * // => Logs 'done saving!' after the two async saves have completed.
                 */
                function after(n, func) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  n = toInteger(n);
                  return function() {
                    if (--n < 1) {
                      return func.apply(this, arguments);
                    }
                  };
                }

                /**
                 * Creates a function that invokes `func`, with up to `n` arguments,
                 * ignoring any additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @param {number} [n=func.length] The arity cap.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                 * // => [6, 8, 10]
                 */
                function ary(func, n, guard) {
                  n = guard ? undefined$1 : n;
                  n = (func && n == null) ? func.length : n;
                  return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
                }

                /**
                 * Creates a function that invokes `func`, with the `this` binding and arguments
                 * of the created function, while it's called less than `n` times. Subsequent
                 * calls to the created function return the result of the last `func` invocation.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {number} n The number of calls at which `func` is no longer invoked.
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * jQuery(element).on('click', _.before(5, addContactToList));
                 * // => Allows adding up to 4 contacts to the list.
                 */
                function before(n, func) {
                  var result;
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  n = toInteger(n);
                  return function() {
                    if (--n > 0) {
                      result = func.apply(this, arguments);
                    }
                    if (n <= 1) {
                      func = undefined$1;
                    }
                    return result;
                  };
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of `thisArg`
                 * and `partials` prepended to the arguments it receives.
                 *
                 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                 * property of bound functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to bind.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * function greet(greeting, punctuation) {
                 *   return greeting + ' ' + this.user + punctuation;
                 * }
                 *
                 * var object = { 'user': 'fred' };
                 *
                 * var bound = _.bind(greet, object, 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bind(greet, object, _, '!');
                 * bound('hi');
                 * // => 'hi fred!'
                 */
                var bind = baseRest(function(func, thisArg, partials) {
                  var bitmask = WRAP_BIND_FLAG;
                  if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bind));
                    bitmask |= WRAP_PARTIAL_FLAG;
                  }
                  return createWrap(func, bitmask, thisArg, partials, holders);
                });

                /**
                 * Creates a function that invokes the method at `object[key]` with `partials`
                 * prepended to the arguments it receives.
                 *
                 * This method differs from `_.bind` by allowing bound functions to reference
                 * methods that may be redefined or don't yet exist. See
                 * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                 * for more details.
                 *
                 * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Function
                 * @param {Object} object The object to invoke the method on.
                 * @param {string} key The key of the method.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new bound function.
                 * @example
                 *
                 * var object = {
                 *   'user': 'fred',
                 *   'greet': function(greeting, punctuation) {
                 *     return greeting + ' ' + this.user + punctuation;
                 *   }
                 * };
                 *
                 * var bound = _.bindKey(object, 'greet', 'hi');
                 * bound('!');
                 * // => 'hi fred!'
                 *
                 * object.greet = function(greeting, punctuation) {
                 *   return greeting + 'ya ' + this.user + punctuation;
                 * };
                 *
                 * bound('!');
                 * // => 'hiya fred!'
                 *
                 * // Bound with placeholders.
                 * var bound = _.bindKey(object, 'greet', _, '!');
                 * bound('hi');
                 * // => 'hiya fred!'
                 */
                var bindKey = baseRest(function(object, key, partials) {
                  var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                  if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bindKey));
                    bitmask |= WRAP_PARTIAL_FLAG;
                  }
                  return createWrap(key, bitmask, object, partials, holders);
                });

                /**
                 * Creates a function that accepts arguments of `func` and either invokes
                 * `func` returning its result, if at least `arity` number of arguments have
                 * been provided, or returns a function that accepts the remaining `func`
                 * arguments, and so on. The arity of `func` may be specified if `func.length`
                 * is not sufficient.
                 *
                 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                 * may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
                 *   return [a, b, c];
                 * };
                 *
                 * var curried = _.curry(abc);
                 *
                 * curried(1)(2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2)(3);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(1)(_, 3)(2);
                 * // => [1, 2, 3]
                 */
                function curry(func, arity, guard) {
                  arity = guard ? undefined$1 : arity;
                  var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
                  result.placeholder = curry.placeholder;
                  return result;
                }

                /**
                 * This method is like `_.curry` except that arguments are applied to `func`
                 * in the manner of `_.partialRight` instead of `_.partial`.
                 *
                 * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for provided arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of curried functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to curry.
                 * @param {number} [arity=func.length] The arity of `func`.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the new curried function.
                 * @example
                 *
                 * var abc = function(a, b, c) {
                 *   return [a, b, c];
                 * };
                 *
                 * var curried = _.curryRight(abc);
                 *
                 * curried(3)(2)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(2, 3)(1);
                 * // => [1, 2, 3]
                 *
                 * curried(1, 2, 3);
                 * // => [1, 2, 3]
                 *
                 * // Curried with placeholders.
                 * curried(3)(1, _)(2);
                 * // => [1, 2, 3]
                 */
                function curryRight(func, arity, guard) {
                  arity = guard ? undefined$1 : arity;
                  var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
                  result.placeholder = curryRight.placeholder;
                  return result;
                }

                /**
                 * Creates a debounced function that delays invoking `func` until after `wait`
                 * milliseconds have elapsed since the last time the debounced function was
                 * invoked. The debounced function comes with a `cancel` method to cancel
                 * delayed `func` invocations and a `flush` method to immediately invoke them.
                 * Provide `options` to indicate whether `func` should be invoked on the
                 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                 * with the last arguments provided to the debounced function. Subsequent
                 * calls to the debounced function return the result of the last `func`
                 * invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the debounced function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.debounce` and `_.throttle`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to debounce.
                 * @param {number} [wait=0] The number of milliseconds to delay.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=false]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {number} [options.maxWait]
                 *  The maximum time `func` is allowed to be delayed before it's invoked.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new debounced function.
                 * @example
                 *
                 * // Avoid costly calculations while the window size is in flux.
                 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                 *
                 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                 * jQuery(element).on('click', _.debounce(sendMail, 300, {
                 *   'leading': true,
                 *   'trailing': false
                 * }));
                 *
                 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                 * var source = new EventSource('/stream');
                 * jQuery(source).on('message', debounced);
                 *
                 * // Cancel the trailing debounced invocation.
                 * jQuery(window).on('popstate', debounced.cancel);
                 */
                function debounce(func, wait, options) {
                  var lastArgs,
                      lastThis,
                      maxWait,
                      result,
                      timerId,
                      lastCallTime,
                      lastInvokeTime = 0,
                      leading = false,
                      maxing = false,
                      trailing = true;

                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  wait = toNumber(wait) || 0;
                  if (isObject(options)) {
                    leading = !!options.leading;
                    maxing = 'maxWait' in options;
                    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                  }

                  function invokeFunc(time) {
                    var args = lastArgs,
                        thisArg = lastThis;

                    lastArgs = lastThis = undefined$1;
                    lastInvokeTime = time;
                    result = func.apply(thisArg, args);
                    return result;
                  }

                  function leadingEdge(time) {
                    // Reset any `maxWait` timer.
                    lastInvokeTime = time;
                    // Start the timer for the trailing edge.
                    timerId = setTimeout(timerExpired, wait);
                    // Invoke the leading edge.
                    return leading ? invokeFunc(time) : result;
                  }

                  function remainingWait(time) {
                    var timeSinceLastCall = time - lastCallTime,
                        timeSinceLastInvoke = time - lastInvokeTime,
                        timeWaiting = wait - timeSinceLastCall;

                    return maxing
                      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                      : timeWaiting;
                  }

                  function shouldInvoke(time) {
                    var timeSinceLastCall = time - lastCallTime,
                        timeSinceLastInvoke = time - lastInvokeTime;

                    // Either this is the first call, activity has stopped and we're at the
                    // trailing edge, the system time has gone backwards and we're treating
                    // it as the trailing edge, or we've hit the `maxWait` limit.
                    return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
                      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                  }

                  function timerExpired() {
                    var time = now();
                    if (shouldInvoke(time)) {
                      return trailingEdge(time);
                    }
                    // Restart the timer.
                    timerId = setTimeout(timerExpired, remainingWait(time));
                  }

                  function trailingEdge(time) {
                    timerId = undefined$1;

                    // Only invoke if we have `lastArgs` which means `func` has been
                    // debounced at least once.
                    if (trailing && lastArgs) {
                      return invokeFunc(time);
                    }
                    lastArgs = lastThis = undefined$1;
                    return result;
                  }

                  function cancel() {
                    if (timerId !== undefined$1) {
                      clearTimeout(timerId);
                    }
                    lastInvokeTime = 0;
                    lastArgs = lastCallTime = lastThis = timerId = undefined$1;
                  }

                  function flush() {
                    return timerId === undefined$1 ? result : trailingEdge(now());
                  }

                  function debounced() {
                    var time = now(),
                        isInvoking = shouldInvoke(time);

                    lastArgs = arguments;
                    lastThis = this;
                    lastCallTime = time;

                    if (isInvoking) {
                      if (timerId === undefined$1) {
                        return leadingEdge(lastCallTime);
                      }
                      if (maxing) {
                        // Handle invocations in a tight loop.
                        clearTimeout(timerId);
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                      }
                    }
                    if (timerId === undefined$1) {
                      timerId = setTimeout(timerExpired, wait);
                    }
                    return result;
                  }
                  debounced.cancel = cancel;
                  debounced.flush = flush;
                  return debounced;
                }

                /**
                 * Defers invoking the `func` until the current call stack has cleared. Any
                 * additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to defer.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.defer(function(text) {
                 *   console.log(text);
                 * }, 'deferred');
                 * // => Logs 'deferred' after one millisecond.
                 */
                var defer = baseRest(function(func, args) {
                  return baseDelay(func, 1, args);
                });

                /**
                 * Invokes `func` after `wait` milliseconds. Any additional arguments are
                 * provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to delay.
                 * @param {number} wait The number of milliseconds to delay invocation.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {number} Returns the timer id.
                 * @example
                 *
                 * _.delay(function(text) {
                 *   console.log(text);
                 * }, 1000, 'later');
                 * // => Logs 'later' after one second.
                 */
                var delay = baseRest(function(func, wait, args) {
                  return baseDelay(func, toNumber(wait) || 0, args);
                });

                /**
                 * Creates a function that invokes `func` with arguments reversed.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to flip arguments for.
                 * @returns {Function} Returns the new flipped function.
                 * @example
                 *
                 * var flipped = _.flip(function() {
                 *   return _.toArray(arguments);
                 * });
                 *
                 * flipped('a', 'b', 'c', 'd');
                 * // => ['d', 'c', 'b', 'a']
                 */
                function flip(func) {
                  return createWrap(func, WRAP_FLIP_FLAG);
                }

                /**
                 * Creates a function that memoizes the result of `func`. If `resolver` is
                 * provided, it determines the cache key for storing the result based on the
                 * arguments provided to the memoized function. By default, the first argument
                 * provided to the memoized function is used as the map cache key. The `func`
                 * is invoked with the `this` binding of the memoized function.
                 *
                 * **Note:** The cache is exposed as the `cache` property on the memoized
                 * function. Its creation may be customized by replacing the `_.memoize.Cache`
                 * constructor with one whose instances implement the
                 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to have its output memoized.
                 * @param {Function} [resolver] The function to resolve the cache key.
                 * @returns {Function} Returns the new memoized function.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 * var other = { 'c': 3, 'd': 4 };
                 *
                 * var values = _.memoize(_.values);
                 * values(object);
                 * // => [1, 2]
                 *
                 * values(other);
                 * // => [3, 4]
                 *
                 * object.a = 2;
                 * values(object);
                 * // => [1, 2]
                 *
                 * // Modify the result cache.
                 * values.cache.set(object, ['a', 'b']);
                 * values(object);
                 * // => ['a', 'b']
                 *
                 * // Replace `_.memoize.Cache`.
                 * _.memoize.Cache = WeakMap;
                 */
                function memoize(func, resolver) {
                  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  var memoized = function() {
                    var args = arguments,
                        key = resolver ? resolver.apply(this, args) : args[0],
                        cache = memoized.cache;

                    if (cache.has(key)) {
                      return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                  };
                  memoized.cache = new (memoize.Cache || MapCache);
                  return memoized;
                }

                // Expose `MapCache`.
                memoize.Cache = MapCache;

                /**
                 * Creates a function that negates the result of the predicate `func`. The
                 * `func` predicate is invoked with the `this` binding and arguments of the
                 * created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} predicate The predicate to negate.
                 * @returns {Function} Returns the new negated function.
                 * @example
                 *
                 * function isEven(n) {
                 *   return n % 2 == 0;
                 * }
                 *
                 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                 * // => [1, 3, 5]
                 */
                function negate(predicate) {
                  if (typeof predicate != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  return function() {
                    var args = arguments;
                    switch (args.length) {
                      case 0: return !predicate.call(this);
                      case 1: return !predicate.call(this, args[0]);
                      case 2: return !predicate.call(this, args[0], args[1]);
                      case 3: return !predicate.call(this, args[0], args[1], args[2]);
                    }
                    return !predicate.apply(this, args);
                  };
                }

                /**
                 * Creates a function that is restricted to invoking `func` once. Repeat calls
                 * to the function return the value of the first invocation. The `func` is
                 * invoked with the `this` binding and arguments of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to restrict.
                 * @returns {Function} Returns the new restricted function.
                 * @example
                 *
                 * var initialize = _.once(createApplication);
                 * initialize();
                 * initialize();
                 * // => `createApplication` is invoked once
                 */
                function once(func) {
                  return before(2, func);
                }

                /**
                 * Creates a function that invokes `func` with its arguments transformed.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Function
                 * @param {Function} func The function to wrap.
                 * @param {...(Function|Function[])} [transforms=[_.identity]]
                 *  The argument transforms.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * function doubled(n) {
                 *   return n * 2;
                 * }
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var func = _.overArgs(function(x, y) {
                 *   return [x, y];
                 * }, [square, doubled]);
                 *
                 * func(9, 3);
                 * // => [81, 6]
                 *
                 * func(10, 5);
                 * // => [100, 10]
                 */
                var overArgs = castRest(function(func, transforms) {
                  transforms = (transforms.length == 1 && isArray(transforms[0]))
                    ? arrayMap(transforms[0], baseUnary(getIteratee()))
                    : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                  var funcsLength = transforms.length;
                  return baseRest(function(args) {
                    var index = -1,
                        length = nativeMin(args.length, funcsLength);

                    while (++index < length) {
                      args[index] = transforms[index].call(this, args[index]);
                    }
                    return apply(func, this, args);
                  });
                });

                /**
                 * Creates a function that invokes `func` with `partials` prepended to the
                 * arguments it receives. This method is like `_.bind` except it does **not**
                 * alter the `this` binding.
                 *
                 * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.2.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
                 *   return greeting + ' ' + name;
                 * }
                 *
                 * var sayHelloTo = _.partial(greet, 'hello');
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 *
                 * // Partially applied with placeholders.
                 * var greetFred = _.partial(greet, _, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 */
                var partial = baseRest(function(func, partials) {
                  var holders = replaceHolders(partials, getHolder(partial));
                  return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
                });

                /**
                 * This method is like `_.partial` except that partially applied arguments
                 * are appended to the arguments it receives.
                 *
                 * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                 * builds, may be used as a placeholder for partially applied arguments.
                 *
                 * **Note:** This method doesn't set the "length" property of partially
                 * applied functions.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Function
                 * @param {Function} func The function to partially apply arguments to.
                 * @param {...*} [partials] The arguments to be partially applied.
                 * @returns {Function} Returns the new partially applied function.
                 * @example
                 *
                 * function greet(greeting, name) {
                 *   return greeting + ' ' + name;
                 * }
                 *
                 * var greetFred = _.partialRight(greet, 'fred');
                 * greetFred('hi');
                 * // => 'hi fred'
                 *
                 * // Partially applied with placeholders.
                 * var sayHelloTo = _.partialRight(greet, 'hello', _);
                 * sayHelloTo('fred');
                 * // => 'hello fred'
                 */
                var partialRight = baseRest(function(func, partials) {
                  var holders = replaceHolders(partials, getHolder(partialRight));
                  return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
                });

                /**
                 * Creates a function that invokes `func` with arguments arranged according
                 * to the specified `indexes` where the argument value at the first index is
                 * provided as the first argument, the argument value at the second index is
                 * provided as the second argument, and so on.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Function
                 * @param {Function} func The function to rearrange arguments for.
                 * @param {...(number|number[])} indexes The arranged argument indexes.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var rearged = _.rearg(function(a, b, c) {
                 *   return [a, b, c];
                 * }, [2, 0, 1]);
                 *
                 * rearged('b', 'c', 'a')
                 * // => ['a', 'b', 'c']
                 */
                var rearg = flatRest(function(func, indexes) {
                  return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
                });

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * created function and arguments from `start` and beyond provided as
                 * an array.
                 *
                 * **Note:** This method is based on the
                 * [rest parameter](https://mdn.io/rest_parameters).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to apply a rest parameter to.
                 * @param {number} [start=func.length-1] The start position of the rest parameter.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.rest(function(what, names) {
                 *   return what + ' ' + _.initial(names).join(', ') +
                 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
                 * });
                 *
                 * say('hello', 'fred', 'barney', 'pebbles');
                 * // => 'hello fred, barney, & pebbles'
                 */
                function rest(func, start) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  start = start === undefined$1 ? start : toInteger(start);
                  return baseRest(func, start);
                }

                /**
                 * Creates a function that invokes `func` with the `this` binding of the
                 * create function and an array of arguments much like
                 * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                 *
                 * **Note:** This method is based on the
                 * [spread operator](https://mdn.io/spread_operator).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Function
                 * @param {Function} func The function to spread arguments over.
                 * @param {number} [start=0] The start position of the spread.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var say = _.spread(function(who, what) {
                 *   return who + ' says ' + what;
                 * });
                 *
                 * say(['fred', 'hello']);
                 * // => 'fred says hello'
                 *
                 * var numbers = Promise.all([
                 *   Promise.resolve(40),
                 *   Promise.resolve(36)
                 * ]);
                 *
                 * numbers.then(_.spread(function(x, y) {
                 *   return x + y;
                 * }));
                 * // => a Promise of 76
                 */
                function spread(func, start) {
                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  start = start == null ? 0 : nativeMax(toInteger(start), 0);
                  return baseRest(function(args) {
                    var array = args[start],
                        otherArgs = castSlice(args, 0, start);

                    if (array) {
                      arrayPush(otherArgs, array);
                    }
                    return apply(func, this, otherArgs);
                  });
                }

                /**
                 * Creates a throttled function that only invokes `func` at most once per
                 * every `wait` milliseconds. The throttled function comes with a `cancel`
                 * method to cancel delayed `func` invocations and a `flush` method to
                 * immediately invoke them. Provide `options` to indicate whether `func`
                 * should be invoked on the leading and/or trailing edge of the `wait`
                 * timeout. The `func` is invoked with the last arguments provided to the
                 * throttled function. Subsequent calls to the throttled function return the
                 * result of the last `func` invocation.
                 *
                 * **Note:** If `leading` and `trailing` options are `true`, `func` is
                 * invoked on the trailing edge of the timeout only if the throttled function
                 * is invoked more than once during the `wait` timeout.
                 *
                 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                 *
                 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                 * for details over the differences between `_.throttle` and `_.debounce`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {Function} func The function to throttle.
                 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.leading=true]
                 *  Specify invoking on the leading edge of the timeout.
                 * @param {boolean} [options.trailing=true]
                 *  Specify invoking on the trailing edge of the timeout.
                 * @returns {Function} Returns the new throttled function.
                 * @example
                 *
                 * // Avoid excessively updating the position while scrolling.
                 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                 *
                 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                 * jQuery(element).on('click', throttled);
                 *
                 * // Cancel the trailing throttled invocation.
                 * jQuery(window).on('popstate', throttled.cancel);
                 */
                function throttle(func, wait, options) {
                  var leading = true,
                      trailing = true;

                  if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                  }
                  if (isObject(options)) {
                    leading = 'leading' in options ? !!options.leading : leading;
                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                  }
                  return debounce(func, wait, {
                    'leading': leading,
                    'maxWait': wait,
                    'trailing': trailing
                  });
                }

                /**
                 * Creates a function that accepts up to one argument, ignoring any
                 * additional arguments.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Function
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 * @example
                 *
                 * _.map(['6', '8', '10'], _.unary(parseInt));
                 * // => [6, 8, 10]
                 */
                function unary(func) {
                  return ary(func, 1);
                }

                /**
                 * Creates a function that provides `value` to `wrapper` as its first
                 * argument. Any additional arguments provided to the function are appended
                 * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                 * binding of the created function.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Function
                 * @param {*} value The value to wrap.
                 * @param {Function} [wrapper=identity] The wrapper function.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var p = _.wrap(_.escape, function(func, text) {
                 *   return '<p>' + func(text) + '</p>';
                 * });
                 *
                 * p('fred, barney, & pebbles');
                 * // => '<p>fred, barney, &amp; pebbles</p>'
                 */
                function wrap(value, wrapper) {
                  return partial(castFunction(wrapper), value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Casts `value` as an array if it's not one.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.4.0
                 * @category Lang
                 * @param {*} value The value to inspect.
                 * @returns {Array} Returns the cast array.
                 * @example
                 *
                 * _.castArray(1);
                 * // => [1]
                 *
                 * _.castArray({ 'a': 1 });
                 * // => [{ 'a': 1 }]
                 *
                 * _.castArray('abc');
                 * // => ['abc']
                 *
                 * _.castArray(null);
                 * // => [null]
                 *
                 * _.castArray(undefined);
                 * // => [undefined]
                 *
                 * _.castArray();
                 * // => []
                 *
                 * var array = [1, 2, 3];
                 * console.log(_.castArray(array) === array);
                 * // => true
                 */
                function castArray() {
                  if (!arguments.length) {
                    return [];
                  }
                  var value = arguments[0];
                  return isArray(value) ? value : [value];
                }

                /**
                 * Creates a shallow clone of `value`.
                 *
                 * **Note:** This method is loosely based on the
                 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                 * and supports cloning arrays, array buffers, booleans, date objects, maps,
                 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                 * arrays. The own enumerable properties of `arguments` objects are cloned
                 * as plain objects. An empty object is returned for uncloneable values such
                 * as error objects, functions, DOM nodes, and WeakMaps.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeep
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var shallow = _.clone(objects);
                 * console.log(shallow[0] === objects[0]);
                 * // => true
                 */
                function clone(value) {
                  return baseClone(value, CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.clone` except that it accepts `customizer` which
                 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                 * cloning is handled by the method instead. The `customizer` is invoked with
                 * up to four arguments; (value [, index|key, object, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the cloned value.
                 * @see _.cloneDeepWith
                 * @example
                 *
                 * function customizer(value) {
                 *   if (_.isElement(value)) {
                 *     return value.cloneNode(false);
                 *   }
                 * }
                 *
                 * var el = _.cloneWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 0
                 */
                function cloneWith(value, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined$1;
                  return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                }

                /**
                 * This method is like `_.clone` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.clone
                 * @example
                 *
                 * var objects = [{ 'a': 1 }, { 'b': 2 }];
                 *
                 * var deep = _.cloneDeep(objects);
                 * console.log(deep[0] === objects[0]);
                 * // => false
                 */
                function cloneDeep(value) {
                  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                }

                /**
                 * This method is like `_.cloneWith` except that it recursively clones `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to recursively clone.
                 * @param {Function} [customizer] The function to customize cloning.
                 * @returns {*} Returns the deep cloned value.
                 * @see _.cloneWith
                 * @example
                 *
                 * function customizer(value) {
                 *   if (_.isElement(value)) {
                 *     return value.cloneNode(true);
                 *   }
                 * }
                 *
                 * var el = _.cloneDeepWith(document.body, customizer);
                 *
                 * console.log(el === document.body);
                 * // => false
                 * console.log(el.nodeName);
                 * // => 'BODY'
                 * console.log(el.childNodes.length);
                 * // => 20
                 */
                function cloneDeepWith(value, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined$1;
                  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                }

                /**
                 * Checks if `object` conforms to `source` by invoking the predicate
                 * properties of `source` with the corresponding property values of `object`.
                 *
                 * **Note:** This method is equivalent to `_.conforms` when `source` is
                 * partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                 * // => true
                 *
                 * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                 * // => false
                 */
                function conformsTo(object, source) {
                  return source == null || baseConformsTo(object, source, keys(source));
                }

                /**
                 * Performs a
                 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                 * comparison between two values to determine if they are equivalent.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.eq(object, object);
                 * // => true
                 *
                 * _.eq(object, other);
                 * // => false
                 *
                 * _.eq('a', 'a');
                 * // => true
                 *
                 * _.eq('a', Object('a'));
                 * // => false
                 *
                 * _.eq(NaN, NaN);
                 * // => true
                 */
                function eq(value, other) {
                  return value === other || (value !== value && other !== other);
                }

                /**
                 * Checks if `value` is greater than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than `other`,
                 *  else `false`.
                 * @see _.lt
                 * @example
                 *
                 * _.gt(3, 1);
                 * // => true
                 *
                 * _.gt(3, 3);
                 * // => false
                 *
                 * _.gt(1, 3);
                 * // => false
                 */
                var gt = createRelationalOperation(baseGt);

                /**
                 * Checks if `value` is greater than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is greater than or equal to
                 *  `other`, else `false`.
                 * @see _.lte
                 * @example
                 *
                 * _.gte(3, 1);
                 * // => true
                 *
                 * _.gte(3, 3);
                 * // => true
                 *
                 * _.gte(1, 3);
                 * // => false
                 */
                var gte = createRelationalOperation(function(value, other) {
                  return value >= other;
                });

                /**
                 * Checks if `value` is likely an `arguments` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArguments(function() { return arguments; }());
                 * // => true
                 *
                 * _.isArguments([1, 2, 3]);
                 * // => false
                 */
                var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
                  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                    !propertyIsEnumerable.call(value, 'callee');
                };

                /**
                 * Checks if `value` is classified as an `Array` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                 * @example
                 *
                 * _.isArray([1, 2, 3]);
                 * // => true
                 *
                 * _.isArray(document.body.children);
                 * // => false
                 *
                 * _.isArray('abc');
                 * // => false
                 *
                 * _.isArray(_.noop);
                 * // => false
                 */
                var isArray = Array.isArray;

                /**
                 * Checks if `value` is classified as an `ArrayBuffer` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                 * @example
                 *
                 * _.isArrayBuffer(new ArrayBuffer(2));
                 * // => true
                 *
                 * _.isArrayBuffer(new Array(2));
                 * // => false
                 */
                var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

                /**
                 * Checks if `value` is array-like. A value is considered array-like if it's
                 * not a function and has a `value.length` that's an integer greater than or
                 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                 * @example
                 *
                 * _.isArrayLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLike(document.body.children);
                 * // => true
                 *
                 * _.isArrayLike('abc');
                 * // => true
                 *
                 * _.isArrayLike(_.noop);
                 * // => false
                 */
                function isArrayLike(value) {
                  return value != null && isLength(value.length) && !isFunction(value);
                }

                /**
                 * This method is like `_.isArrayLike` except that it also checks if `value`
                 * is an object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an array-like object,
                 *  else `false`.
                 * @example
                 *
                 * _.isArrayLikeObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isArrayLikeObject(document.body.children);
                 * // => true
                 *
                 * _.isArrayLikeObject('abc');
                 * // => false
                 *
                 * _.isArrayLikeObject(_.noop);
                 * // => false
                 */
                function isArrayLikeObject(value) {
                  return isObjectLike(value) && isArrayLike(value);
                }

                /**
                 * Checks if `value` is classified as a boolean primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                 * @example
                 *
                 * _.isBoolean(false);
                 * // => true
                 *
                 * _.isBoolean(null);
                 * // => false
                 */
                function isBoolean(value) {
                  return value === true || value === false ||
                    (isObjectLike(value) && baseGetTag(value) == boolTag);
                }

                /**
                 * Checks if `value` is a buffer.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                 * @example
                 *
                 * _.isBuffer(new Buffer(2));
                 * // => true
                 *
                 * _.isBuffer(new Uint8Array(2));
                 * // => false
                 */
                var isBuffer = nativeIsBuffer || stubFalse;

                /**
                 * Checks if `value` is classified as a `Date` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                 * @example
                 *
                 * _.isDate(new Date);
                 * // => true
                 *
                 * _.isDate('Mon April 23 2012');
                 * // => false
                 */
                var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                /**
                 * Checks if `value` is likely a DOM element.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                 * @example
                 *
                 * _.isElement(document.body);
                 * // => true
                 *
                 * _.isElement('<body>');
                 * // => false
                 */
                function isElement(value) {
                  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                }

                /**
                 * Checks if `value` is an empty object, collection, map, or set.
                 *
                 * Objects are considered empty if they have no own enumerable string keyed
                 * properties.
                 *
                 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                 * jQuery-like collections are considered empty if they have a `length` of `0`.
                 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                 * @example
                 *
                 * _.isEmpty(null);
                 * // => true
                 *
                 * _.isEmpty(true);
                 * // => true
                 *
                 * _.isEmpty(1);
                 * // => true
                 *
                 * _.isEmpty([1, 2, 3]);
                 * // => false
                 *
                 * _.isEmpty({ 'a': 1 });
                 * // => false
                 */
                function isEmpty(value) {
                  if (value == null) {
                    return true;
                  }
                  if (isArrayLike(value) &&
                      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                    return !value.length;
                  }
                  var tag = getTag(value);
                  if (tag == mapTag || tag == setTag) {
                    return !value.size;
                  }
                  if (isPrototype(value)) {
                    return !baseKeys(value).length;
                  }
                  for (var key in value) {
                    if (hasOwnProperty.call(value, key)) {
                      return false;
                    }
                  }
                  return true;
                }

                /**
                 * Performs a deep comparison between two values to determine if they are
                 * equivalent.
                 *
                 * **Note:** This method supports comparing arrays, array buffers, booleans,
                 * date objects, error objects, maps, numbers, `Object` objects, regexes,
                 * sets, strings, symbols, and typed arrays. `Object` objects are compared
                 * by their own, not inherited, enumerable properties. Functions and DOM
                 * nodes are compared by strict equality, i.e. `===`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 * var other = { 'a': 1 };
                 *
                 * _.isEqual(object, other);
                 * // => true
                 *
                 * object === other;
                 * // => false
                 */
                function isEqual(value, other) {
                  return baseIsEqual(value, other);
                }

                /**
                 * This method is like `_.isEqual` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with up to
                 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
                 *   return /^h(?:i|ello)$/.test(value);
                 * }
                 *
                 * function customizer(objValue, othValue) {
                 *   if (isGreeting(objValue) && isGreeting(othValue)) {
                 *     return true;
                 *   }
                 * }
                 *
                 * var array = ['hello', 'goodbye'];
                 * var other = ['hi', 'goodbye'];
                 *
                 * _.isEqualWith(array, other, customizer);
                 * // => true
                 */
                function isEqualWith(value, other, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined$1;
                  var result = customizer ? customizer(value, other) : undefined$1;
                  return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
                }

                /**
                 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                 * `SyntaxError`, `TypeError`, or `URIError` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                 * @example
                 *
                 * _.isError(new Error);
                 * // => true
                 *
                 * _.isError(Error);
                 * // => false
                 */
                function isError(value) {
                  if (!isObjectLike(value)) {
                    return false;
                  }
                  var tag = baseGetTag(value);
                  return tag == errorTag || tag == domExcTag ||
                    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
                }

                /**
                 * Checks if `value` is a finite primitive number.
                 *
                 * **Note:** This method is based on
                 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                 * @example
                 *
                 * _.isFinite(3);
                 * // => true
                 *
                 * _.isFinite(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isFinite(Infinity);
                 * // => false
                 *
                 * _.isFinite('3');
                 * // => false
                 */
                function isFinite(value) {
                  return typeof value == 'number' && nativeIsFinite(value);
                }

                /**
                 * Checks if `value` is classified as a `Function` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                 * @example
                 *
                 * _.isFunction(_);
                 * // => true
                 *
                 * _.isFunction(/abc/);
                 * // => false
                 */
                function isFunction(value) {
                  if (!isObject(value)) {
                    return false;
                  }
                  // The use of `Object#toString` avoids issues with the `typeof` operator
                  // in Safari 9 which returns 'object' for typed arrays and other constructors.
                  var tag = baseGetTag(value);
                  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                }

                /**
                 * Checks if `value` is an integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                 * @example
                 *
                 * _.isInteger(3);
                 * // => true
                 *
                 * _.isInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isInteger(Infinity);
                 * // => false
                 *
                 * _.isInteger('3');
                 * // => false
                 */
                function isInteger(value) {
                  return typeof value == 'number' && value == toInteger(value);
                }

                /**
                 * Checks if `value` is a valid array-like length.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                 * @example
                 *
                 * _.isLength(3);
                 * // => true
                 *
                 * _.isLength(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isLength(Infinity);
                 * // => false
                 *
                 * _.isLength('3');
                 * // => false
                 */
                function isLength(value) {
                  return typeof value == 'number' &&
                    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                }

                /**
                 * Checks if `value` is the
                 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                 * @example
                 *
                 * _.isObject({});
                 * // => true
                 *
                 * _.isObject([1, 2, 3]);
                 * // => true
                 *
                 * _.isObject(_.noop);
                 * // => true
                 *
                 * _.isObject(null);
                 * // => false
                 */
                function isObject(value) {
                  var type = typeof value;
                  return value != null && (type == 'object' || type == 'function');
                }

                /**
                 * Checks if `value` is object-like. A value is object-like if it's not `null`
                 * and has a `typeof` result of "object".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                 * @example
                 *
                 * _.isObjectLike({});
                 * // => true
                 *
                 * _.isObjectLike([1, 2, 3]);
                 * // => true
                 *
                 * _.isObjectLike(_.noop);
                 * // => false
                 *
                 * _.isObjectLike(null);
                 * // => false
                 */
                function isObjectLike(value) {
                  return value != null && typeof value == 'object';
                }

                /**
                 * Checks if `value` is classified as a `Map` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                 * @example
                 *
                 * _.isMap(new Map);
                 * // => true
                 *
                 * _.isMap(new WeakMap);
                 * // => false
                 */
                var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                /**
                 * Performs a partial deep comparison between `object` and `source` to
                 * determine if `object` contains equivalent property values.
                 *
                 * **Note:** This method is equivalent to `_.matches` when `source` is
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2 };
                 *
                 * _.isMatch(object, { 'b': 2 });
                 * // => true
                 *
                 * _.isMatch(object, { 'b': 1 });
                 * // => false
                 */
                function isMatch(object, source) {
                  return object === source || baseIsMatch(object, source, getMatchData(source));
                }

                /**
                 * This method is like `_.isMatch` except that it accepts `customizer` which
                 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                 * are handled by the method instead. The `customizer` is invoked with five
                 * arguments: (objValue, srcValue, index|key, object, source).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {Object} object The object to inspect.
                 * @param {Object} source The object of property values to match.
                 * @param {Function} [customizer] The function to customize comparisons.
                 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                 * @example
                 *
                 * function isGreeting(value) {
                 *   return /^h(?:i|ello)$/.test(value);
                 * }
                 *
                 * function customizer(objValue, srcValue) {
                 *   if (isGreeting(objValue) && isGreeting(srcValue)) {
                 *     return true;
                 *   }
                 * }
                 *
                 * var object = { 'greeting': 'hello' };
                 * var source = { 'greeting': 'hi' };
                 *
                 * _.isMatchWith(object, source, customizer);
                 * // => true
                 */
                function isMatchWith(object, source, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined$1;
                  return baseIsMatch(object, source, getMatchData(source), customizer);
                }

                /**
                 * Checks if `value` is `NaN`.
                 *
                 * **Note:** This method is based on
                 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                 * `undefined` and other non-number values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                 * @example
                 *
                 * _.isNaN(NaN);
                 * // => true
                 *
                 * _.isNaN(new Number(NaN));
                 * // => true
                 *
                 * isNaN(undefined);
                 * // => true
                 *
                 * _.isNaN(undefined);
                 * // => false
                 */
                function isNaN(value) {
                  // An `NaN` primitive is the only value that is not equal to itself.
                  // Perform the `toStringTag` check first to avoid errors with some
                  // ActiveX objects in IE.
                  return isNumber(value) && value != +value;
                }

                /**
                 * Checks if `value` is a pristine native function.
                 *
                 * **Note:** This method can't reliably detect native functions in the presence
                 * of the core-js package because core-js circumvents this kind of detection.
                 * Despite multiple requests, the core-js maintainer has made it clear: any
                 * attempt to fix the detection will be obstructed. As a result, we're left
                 * with little choice but to throw an error. Unfortunately, this also affects
                 * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                 * which rely on core-js.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a native function,
                 *  else `false`.
                 * @example
                 *
                 * _.isNative(Array.prototype.push);
                 * // => true
                 *
                 * _.isNative(_);
                 * // => false
                 */
                function isNative(value) {
                  if (isMaskable(value)) {
                    throw new Error(CORE_ERROR_TEXT);
                  }
                  return baseIsNative(value);
                }

                /**
                 * Checks if `value` is `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                 * @example
                 *
                 * _.isNull(null);
                 * // => true
                 *
                 * _.isNull(void 0);
                 * // => false
                 */
                function isNull(value) {
                  return value === null;
                }

                /**
                 * Checks if `value` is `null` or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                 * @example
                 *
                 * _.isNil(null);
                 * // => true
                 *
                 * _.isNil(void 0);
                 * // => true
                 *
                 * _.isNil(NaN);
                 * // => false
                 */
                function isNil(value) {
                  return value == null;
                }

                /**
                 * Checks if `value` is classified as a `Number` primitive or object.
                 *
                 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                 * classified as numbers, use the `_.isFinite` method.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                 * @example
                 *
                 * _.isNumber(3);
                 * // => true
                 *
                 * _.isNumber(Number.MIN_VALUE);
                 * // => true
                 *
                 * _.isNumber(Infinity);
                 * // => true
                 *
                 * _.isNumber('3');
                 * // => false
                 */
                function isNumber(value) {
                  return typeof value == 'number' ||
                    (isObjectLike(value) && baseGetTag(value) == numberTag);
                }

                /**
                 * Checks if `value` is a plain object, that is, an object created by the
                 * `Object` constructor or one with a `[[Prototype]]` of `null`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.8.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * _.isPlainObject(new Foo);
                 * // => false
                 *
                 * _.isPlainObject([1, 2, 3]);
                 * // => false
                 *
                 * _.isPlainObject({ 'x': 0, 'y': 0 });
                 * // => true
                 *
                 * _.isPlainObject(Object.create(null));
                 * // => true
                 */
                function isPlainObject(value) {
                  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                  }
                  var proto = getPrototype(value);
                  if (proto === null) {
                    return true;
                  }
                  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                    funcToString.call(Ctor) == objectCtorString;
                }

                /**
                 * Checks if `value` is classified as a `RegExp` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.1.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                 * @example
                 *
                 * _.isRegExp(/abc/);
                 * // => true
                 *
                 * _.isRegExp('/abc/');
                 * // => false
                 */
                var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

                /**
                 * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                 * double precision number which isn't the result of a rounded unsafe integer.
                 *
                 * **Note:** This method is based on
                 * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                 * @example
                 *
                 * _.isSafeInteger(3);
                 * // => true
                 *
                 * _.isSafeInteger(Number.MIN_VALUE);
                 * // => false
                 *
                 * _.isSafeInteger(Infinity);
                 * // => false
                 *
                 * _.isSafeInteger('3');
                 * // => false
                 */
                function isSafeInteger(value) {
                  return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                }

                /**
                 * Checks if `value` is classified as a `Set` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                 * @example
                 *
                 * _.isSet(new Set);
                 * // => true
                 *
                 * _.isSet(new WeakSet);
                 * // => false
                 */
                var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                /**
                 * Checks if `value` is classified as a `String` primitive or object.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                 * @example
                 *
                 * _.isString('abc');
                 * // => true
                 *
                 * _.isString(1);
                 * // => false
                 */
                function isString(value) {
                  return typeof value == 'string' ||
                    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
                }

                /**
                 * Checks if `value` is classified as a `Symbol` primitive or object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                 * @example
                 *
                 * _.isSymbol(Symbol.iterator);
                 * // => true
                 *
                 * _.isSymbol('abc');
                 * // => false
                 */
                function isSymbol(value) {
                  return typeof value == 'symbol' ||
                    (isObjectLike(value) && baseGetTag(value) == symbolTag);
                }

                /**
                 * Checks if `value` is classified as a typed array.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                 * @example
                 *
                 * _.isTypedArray(new Uint8Array);
                 * // => true
                 *
                 * _.isTypedArray([]);
                 * // => false
                 */
                var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                /**
                 * Checks if `value` is `undefined`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                 * @example
                 *
                 * _.isUndefined(void 0);
                 * // => true
                 *
                 * _.isUndefined(null);
                 * // => false
                 */
                function isUndefined(value) {
                  return value === undefined$1;
                }

                /**
                 * Checks if `value` is classified as a `WeakMap` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                 * @example
                 *
                 * _.isWeakMap(new WeakMap);
                 * // => true
                 *
                 * _.isWeakMap(new Map);
                 * // => false
                 */
                function isWeakMap(value) {
                  return isObjectLike(value) && getTag(value) == weakMapTag;
                }

                /**
                 * Checks if `value` is classified as a `WeakSet` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                 * @example
                 *
                 * _.isWeakSet(new WeakSet);
                 * // => true
                 *
                 * _.isWeakSet(new Set);
                 * // => false
                 */
                function isWeakSet(value) {
                  return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                }

                /**
                 * Checks if `value` is less than `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than `other`,
                 *  else `false`.
                 * @see _.gt
                 * @example
                 *
                 * _.lt(1, 3);
                 * // => true
                 *
                 * _.lt(3, 3);
                 * // => false
                 *
                 * _.lt(3, 1);
                 * // => false
                 */
                var lt = createRelationalOperation(baseLt);

                /**
                 * Checks if `value` is less than or equal to `other`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.9.0
                 * @category Lang
                 * @param {*} value The value to compare.
                 * @param {*} other The other value to compare.
                 * @returns {boolean} Returns `true` if `value` is less than or equal to
                 *  `other`, else `false`.
                 * @see _.gte
                 * @example
                 *
                 * _.lte(1, 3);
                 * // => true
                 *
                 * _.lte(3, 3);
                 * // => true
                 *
                 * _.lte(3, 1);
                 * // => false
                 */
                var lte = createRelationalOperation(function(value, other) {
                  return value <= other;
                });

                /**
                 * Converts `value` to an array.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the converted array.
                 * @example
                 *
                 * _.toArray({ 'a': 1, 'b': 2 });
                 * // => [1, 2]
                 *
                 * _.toArray('abc');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toArray(1);
                 * // => []
                 *
                 * _.toArray(null);
                 * // => []
                 */
                function toArray(value) {
                  if (!value) {
                    return [];
                  }
                  if (isArrayLike(value)) {
                    return isString(value) ? stringToArray(value) : copyArray(value);
                  }
                  if (symIterator && value[symIterator]) {
                    return iteratorToArray(value[symIterator]());
                  }
                  var tag = getTag(value),
                      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

                  return func(value);
                }

                /**
                 * Converts `value` to a finite number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.12.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted number.
                 * @example
                 *
                 * _.toFinite(3.2);
                 * // => 3.2
                 *
                 * _.toFinite(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toFinite(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toFinite('3.2');
                 * // => 3.2
                 */
                function toFinite(value) {
                  if (!value) {
                    return value === 0 ? value : 0;
                  }
                  value = toNumber(value);
                  if (value === INFINITY || value === -INFINITY) {
                    var sign = (value < 0 ? -1 : 1);
                    return sign * MAX_INTEGER;
                  }
                  return value === value ? value : 0;
                }

                /**
                 * Converts `value` to an integer.
                 *
                 * **Note:** This method is loosely based on
                 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toInteger(3.2);
                 * // => 3
                 *
                 * _.toInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toInteger(Infinity);
                 * // => 1.7976931348623157e+308
                 *
                 * _.toInteger('3.2');
                 * // => 3
                 */
                function toInteger(value) {
                  var result = toFinite(value),
                      remainder = result % 1;

                  return result === result ? (remainder ? result - remainder : result) : 0;
                }

                /**
                 * Converts `value` to an integer suitable for use as the length of an
                 * array-like object.
                 *
                 * **Note:** This method is based on
                 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toLength(3.2);
                 * // => 3
                 *
                 * _.toLength(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toLength(Infinity);
                 * // => 4294967295
                 *
                 * _.toLength('3.2');
                 * // => 3
                 */
                function toLength(value) {
                  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                }

                /**
                 * Converts `value` to a number.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to process.
                 * @returns {number} Returns the number.
                 * @example
                 *
                 * _.toNumber(3.2);
                 * // => 3.2
                 *
                 * _.toNumber(Number.MIN_VALUE);
                 * // => 5e-324
                 *
                 * _.toNumber(Infinity);
                 * // => Infinity
                 *
                 * _.toNumber('3.2');
                 * // => 3.2
                 */
                function toNumber(value) {
                  if (typeof value == 'number') {
                    return value;
                  }
                  if (isSymbol(value)) {
                    return NAN;
                  }
                  if (isObject(value)) {
                    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                    value = isObject(other) ? (other + '') : other;
                  }
                  if (typeof value != 'string') {
                    return value === 0 ? value : +value;
                  }
                  value = value.replace(reTrim, '');
                  var isBinary = reIsBinary.test(value);
                  return (isBinary || reIsOctal.test(value))
                    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                    : (reIsBadHex.test(value) ? NAN : +value);
                }

                /**
                 * Converts `value` to a plain object flattening inherited enumerable string
                 * keyed properties of `value` to own properties of the plain object.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {Object} Returns the converted plain object.
                 * @example
                 *
                 * function Foo() {
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.assign({ 'a': 1 }, new Foo);
                 * // => { 'a': 1, 'b': 2 }
                 *
                 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                 * // => { 'a': 1, 'b': 2, 'c': 3 }
                 */
                function toPlainObject(value) {
                  return copyObject(value, keysIn(value));
                }

                /**
                 * Converts `value` to a safe integer. A safe integer can be compared and
                 * represented correctly.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.toSafeInteger(3.2);
                 * // => 3
                 *
                 * _.toSafeInteger(Number.MIN_VALUE);
                 * // => 0
                 *
                 * _.toSafeInteger(Infinity);
                 * // => 9007199254740991
                 *
                 * _.toSafeInteger('3.2');
                 * // => 3
                 */
                function toSafeInteger(value) {
                  return value
                    ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                    : (value === 0 ? value : 0);
                }

                /**
                 * Converts `value` to a string. An empty string is returned for `null`
                 * and `undefined` values. The sign of `-0` is preserved.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Lang
                 * @param {*} value The value to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.toString(null);
                 * // => ''
                 *
                 * _.toString(-0);
                 * // => '-0'
                 *
                 * _.toString([1, 2, 3]);
                 * // => '1,2,3'
                 */
                function toString(value) {
                  return value == null ? '' : baseToString(value);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Assigns own enumerable string keyed properties of source objects to the
                 * destination object. Source objects are applied from left to right.
                 * Subsequent sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object` and is loosely based on
                 * [`Object.assign`](https://mdn.io/Object/assign).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assignIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * function Bar() {
                 *   this.c = 3;
                 * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assign({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var assign = createAssigner(function(object, source) {
                  if (isPrototype(source) || isArrayLike(source)) {
                    copyObject(source, keys(source), object);
                    return;
                  }
                  for (var key in source) {
                    if (hasOwnProperty.call(source, key)) {
                      assignValue(object, key, source[key]);
                    }
                  }
                });

                /**
                 * This method is like `_.assign` except that it iterates over own and
                 * inherited source properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extend
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.assign
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 * }
                 *
                 * function Bar() {
                 *   this.c = 3;
                 * }
                 *
                 * Foo.prototype.b = 2;
                 * Bar.prototype.d = 4;
                 *
                 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                 */
                var assignIn = createAssigner(function(object, source) {
                  copyObject(source, keysIn(source), object);
                });

                /**
                 * This method is like `_.assignIn` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias extendWith
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   return _.isUndefined(objValue) ? srcValue : objValue;
                 * }
                 *
                 * var defaults = _.partialRight(_.assignInWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
                  copyObject(source, keysIn(source), object, customizer);
                });

                /**
                 * This method is like `_.assign` except that it accepts `customizer`
                 * which is invoked to produce the assigned values. If `customizer` returns
                 * `undefined`, assignment is handled by the method instead. The `customizer`
                 * is invoked with five arguments: (objValue, srcValue, key, object, source).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @see _.assignInWith
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   return _.isUndefined(objValue) ? srcValue : objValue;
                 * }
                 *
                 * var defaults = _.partialRight(_.assignWith, customizer);
                 *
                 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
                  copyObject(source, keys(source), object, customizer);
                });

                /**
                 * Creates an array of values corresponding to `paths` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Array} Returns the picked values.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                 *
                 * _.at(object, ['a[0].b.c', 'a[1]']);
                 * // => [3, 4]
                 */
                var at = flatRest(baseAt);

                /**
                 * Creates an object that inherits from the `prototype` object. If a
                 * `properties` object is given, its own enumerable string keyed properties
                 * are assigned to the created object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Object
                 * @param {Object} prototype The object to inherit from.
                 * @param {Object} [properties] The properties to assign to the object.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * function Shape() {
                 *   this.x = 0;
                 *   this.y = 0;
                 * }
                 *
                 * function Circle() {
                 *   Shape.call(this);
                 * }
                 *
                 * Circle.prototype = _.create(Shape.prototype, {
                 *   'constructor': Circle
                 * });
                 *
                 * var circle = new Circle;
                 * circle instanceof Circle;
                 * // => true
                 *
                 * circle instanceof Shape;
                 * // => true
                 */
                function create(prototype, properties) {
                  var result = baseCreate(prototype);
                  return properties == null ? result : baseAssign(result, properties);
                }

                /**
                 * Assigns own and inherited enumerable string keyed properties of source
                 * objects to the destination object for all destination properties that
                 * resolve to `undefined`. Source objects are applied from left to right.
                 * Once a property is set, additional values of the same property are ignored.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaultsDeep
                 * @example
                 *
                 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                 * // => { 'a': 1, 'b': 2 }
                 */
                var defaults = baseRest(function(object, sources) {
                  object = Object(object);

                  var index = -1;
                  var length = sources.length;
                  var guard = length > 2 ? sources[2] : undefined$1;

                  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    length = 1;
                  }

                  while (++index < length) {
                    var source = sources[index];
                    var props = keysIn(source);
                    var propsIndex = -1;
                    var propsLength = props.length;

                    while (++propsIndex < propsLength) {
                      var key = props[propsIndex];
                      var value = object[key];

                      if (value === undefined$1 ||
                          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                        object[key] = source[key];
                      }
                    }
                  }

                  return object;
                });

                /**
                 * This method is like `_.defaults` except that it recursively assigns
                 * default properties.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @see _.defaults
                 * @example
                 *
                 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                 * // => { 'a': { 'b': 2, 'c': 3 } }
                 */
                var defaultsDeep = baseRest(function(args) {
                  args.push(undefined$1, customDefaultsMerge);
                  return apply(mergeWith, undefined$1, args);
                });

                /**
                 * This method is like `_.find` except that it returns the key of the first
                 * element `predicate` returns truthy for instead of the element itself.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
                 *   'barney':  { 'age': 36, 'active': true },
                 *   'fred':    { 'age': 40, 'active': false },
                 *   'pebbles': { 'age': 1,  'active': true }
                 * };
                 *
                 * _.findKey(users, function(o) { return o.age < 40; });
                 * // => 'barney' (iteration order is not guaranteed)
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findKey(users, { 'age': 1, 'active': true });
                 * // => 'pebbles'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findKey(users, 'active');
                 * // => 'barney'
                 */
                function findKey(object, predicate) {
                  return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                }

                /**
                 * This method is like `_.findKey` except that it iterates over elements of
                 * a collection in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @param {Function} [predicate=_.identity] The function invoked per iteration.
                 * @returns {string|undefined} Returns the key of the matched element,
                 *  else `undefined`.
                 * @example
                 *
                 * var users = {
                 *   'barney':  { 'age': 36, 'active': true },
                 *   'fred':    { 'age': 40, 'active': false },
                 *   'pebbles': { 'age': 1,  'active': true }
                 * };
                 *
                 * _.findLastKey(users, function(o) { return o.age < 40; });
                 * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.findLastKey(users, { 'age': 36, 'active': true });
                 * // => 'barney'
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.findLastKey(users, ['active', false]);
                 * // => 'fred'
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.findLastKey(users, 'active');
                 * // => 'pebbles'
                 */
                function findLastKey(object, predicate) {
                  return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                }

                /**
                 * Iterates over own and inherited enumerable string keyed properties of an
                 * object and invokes `iteratee` for each property. The iteratee is invoked
                 * with three arguments: (value, key, object). Iteratee functions may exit
                 * iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forInRight
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forIn(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                 */
                function forIn(object, iteratee) {
                  return object == null
                    ? object
                    : baseFor(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * This method is like `_.forIn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forInRight(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                 */
                function forInRight(object, iteratee) {
                  return object == null
                    ? object
                    : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                }

                /**
                 * Iterates over own enumerable string keyed properties of an object and
                 * invokes `iteratee` for each property. The iteratee is invoked with three
                 * arguments: (value, key, object). Iteratee functions may exit iteration
                 * early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwnRight
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwn(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                 */
                function forOwn(object, iteratee) {
                  return object && baseForOwn(object, getIteratee(iteratee, 3));
                }

                /**
                 * This method is like `_.forOwn` except that it iterates over properties of
                 * `object` in the opposite order.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.0.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns `object`.
                 * @see _.forOwn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.forOwnRight(new Foo, function(value, key) {
                 *   console.log(key);
                 * });
                 * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                 */
                function forOwnRight(object, iteratee) {
                  return object && baseForOwnRight(object, getIteratee(iteratee, 3));
                }

                /**
                 * Creates an array of function property names from own enumerable properties
                 * of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functionsIn
                 * @example
                 *
                 * function Foo() {
                 *   this.a = _.constant('a');
                 *   this.b = _.constant('b');
                 * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functions(new Foo);
                 * // => ['a', 'b']
                 */
                function functions(object) {
                  return object == null ? [] : baseFunctions(object, keys(object));
                }

                /**
                 * Creates an array of function property names from own and inherited
                 * enumerable properties of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to inspect.
                 * @returns {Array} Returns the function names.
                 * @see _.functions
                 * @example
                 *
                 * function Foo() {
                 *   this.a = _.constant('a');
                 *   this.b = _.constant('b');
                 * }
                 *
                 * Foo.prototype.c = _.constant('c');
                 *
                 * _.functionsIn(new Foo);
                 * // => ['a', 'b', 'c']
                 */
                function functionsIn(object) {
                  return object == null ? [] : baseFunctions(object, keysIn(object));
                }

                /**
                 * Gets the value at `path` of `object`. If the resolved value is
                 * `undefined`, the `defaultValue` is returned in its place.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.get(object, 'a[0].b.c');
                 * // => 3
                 *
                 * _.get(object, ['a', '0', 'b', 'c']);
                 * // => 3
                 *
                 * _.get(object, 'a.b.c', 'default');
                 * // => 'default'
                 */
                function get(object, path, defaultValue) {
                  var result = object == null ? undefined$1 : baseGet(object, path);
                  return result === undefined$1 ? defaultValue : result;
                }

                /**
                 * Checks if `path` is a direct property of `object`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = { 'a': { 'b': 2 } };
                 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.has(object, 'a');
                 * // => true
                 *
                 * _.has(object, 'a.b');
                 * // => true
                 *
                 * _.has(object, ['a', 'b']);
                 * // => true
                 *
                 * _.has(other, 'a');
                 * // => false
                 */
                function has(object, path) {
                  return object != null && hasPath(object, path, baseHas);
                }

                /**
                 * Checks if `path` is a direct or inherited property of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path to check.
                 * @returns {boolean} Returns `true` if `path` exists, else `false`.
                 * @example
                 *
                 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                 *
                 * _.hasIn(object, 'a');
                 * // => true
                 *
                 * _.hasIn(object, 'a.b');
                 * // => true
                 *
                 * _.hasIn(object, ['a', 'b']);
                 * // => true
                 *
                 * _.hasIn(object, 'b');
                 * // => false
                 */
                function hasIn(object, path) {
                  return object != null && hasPath(object, path, baseHasIn);
                }

                /**
                 * Creates an object composed of the inverted keys and values of `object`.
                 * If `object` contains duplicate values, subsequent values overwrite
                 * property assignments of previous values.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invert(object);
                 * // => { '1': 'c', '2': 'b' }
                 */
                var invert = createInverter(function(result, value, key) {
                  if (value != null &&
                      typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                  }

                  result[value] = key;
                }, constant(identity));

                /**
                 * This method is like `_.invert` except that the inverted object is generated
                 * from the results of running each element of `object` thru `iteratee`. The
                 * corresponding inverted value of each inverted key is an array of keys
                 * responsible for generating the inverted value. The iteratee is invoked
                 * with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.1.0
                 * @category Object
                 * @param {Object} object The object to invert.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {Object} Returns the new inverted object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': 2, 'c': 1 };
                 *
                 * _.invertBy(object);
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 *
                 * _.invertBy(object, function(value) {
                 *   return 'group' + value;
                 * });
                 * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                 */
                var invertBy = createInverter(function(result, value, key) {
                  if (value != null &&
                      typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                  }

                  if (hasOwnProperty.call(result, value)) {
                    result[value].push(key);
                  } else {
                    result[value] = [key];
                  }
                }, getIteratee);

                /**
                 * Invokes the method at `path` of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {*} Returns the result of the invoked method.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                 *
                 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                 * // => [2, 3]
                 */
                var invoke = baseRest(baseInvoke);

                /**
                 * Creates an array of the own enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects. See the
                 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                 * for more details.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keys(new Foo);
                 * // => ['a', 'b'] (iteration order is not guaranteed)
                 *
                 * _.keys('hi');
                 * // => ['0', '1']
                 */
                function keys(object) {
                  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                }

                /**
                 * Creates an array of the own and inherited enumerable property names of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property names.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.keysIn(new Foo);
                 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                 */
                function keysIn(object) {
                  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                }

                /**
                 * The opposite of `_.mapValues`; this method creates an object with the
                 * same values as `object` and keys generated by running each own enumerable
                 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                 * with three arguments: (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.8.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapValues
                 * @example
                 *
                 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
                 *   return key + value;
                 * });
                 * // => { 'a1': 1, 'b2': 2 }
                 */
                function mapKeys(object, iteratee) {
                  var result = {};
                  iteratee = getIteratee(iteratee, 3);

                  baseForOwn(object, function(value, key, object) {
                    baseAssignValue(result, iteratee(value, key, object), value);
                  });
                  return result;
                }

                /**
                 * Creates an object with the same keys as `object` and values generated
                 * by running each own enumerable string keyed property of `object` thru
                 * `iteratee`. The iteratee is invoked with three arguments:
                 * (value, key, object).
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Object} Returns the new mapped object.
                 * @see _.mapKeys
                 * @example
                 *
                 * var users = {
                 *   'fred':    { 'user': 'fred',    'age': 40 },
                 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
                 * };
                 *
                 * _.mapValues(users, function(o) { return o.age; });
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.mapValues(users, 'age');
                 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                 */
                function mapValues(object, iteratee) {
                  var result = {};
                  iteratee = getIteratee(iteratee, 3);

                  baseForOwn(object, function(value, key, object) {
                    baseAssignValue(result, key, iteratee(value, key, object));
                  });
                  return result;
                }

                /**
                 * This method is like `_.assign` except that it recursively merges own and
                 * inherited enumerable string keyed properties of source objects into the
                 * destination object. Source properties that resolve to `undefined` are
                 * skipped if a destination value exists. Array and plain object properties
                 * are merged recursively. Other objects and value types are overridden by
                 * assignment. Source objects are applied from left to right. Subsequent
                 * sources overwrite property assignments of previous sources.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.5.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} [sources] The source objects.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {
                 *   'a': [{ 'b': 2 }, { 'd': 4 }]
                 * };
                 *
                 * var other = {
                 *   'a': [{ 'c': 3 }, { 'e': 5 }]
                 * };
                 *
                 * _.merge(object, other);
                 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                 */
                var merge = createAssigner(function(object, source, srcIndex) {
                  baseMerge(object, source, srcIndex);
                });

                /**
                 * This method is like `_.merge` except that it accepts `customizer` which
                 * is invoked to produce the merged values of the destination and source
                 * properties. If `customizer` returns `undefined`, merging is handled by the
                 * method instead. The `customizer` is invoked with six arguments:
                 * (objValue, srcValue, key, object, source, stack).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The destination object.
                 * @param {...Object} sources The source objects.
                 * @param {Function} customizer The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * function customizer(objValue, srcValue) {
                 *   if (_.isArray(objValue)) {
                 *     return objValue.concat(srcValue);
                 *   }
                 * }
                 *
                 * var object = { 'a': [1], 'b': [2] };
                 * var other = { 'a': [3], 'b': [4] };
                 *
                 * _.mergeWith(object, other, customizer);
                 * // => { 'a': [1, 3], 'b': [2, 4] }
                 */
                var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
                  baseMerge(object, source, srcIndex, customizer);
                });

                /**
                 * The opposite of `_.pick`; this method creates an object composed of the
                 * own and inherited enumerable property paths of `object` that are not omitted.
                 *
                 * **Note:** This method is considerably slower than `_.pick`.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to omit.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omit(object, ['a', 'c']);
                 * // => { 'b': '2' }
                 */
                var omit = flatRest(function(object, paths) {
                  var result = {};
                  if (object == null) {
                    return result;
                  }
                  var isDeep = false;
                  paths = arrayMap(paths, function(path) {
                    path = castPath(path, object);
                    isDeep || (isDeep = path.length > 1);
                    return path;
                  });
                  copyObject(object, getAllKeysIn(object), result);
                  if (isDeep) {
                    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                  }
                  var length = paths.length;
                  while (length--) {
                    baseUnset(result, paths[length]);
                  }
                  return result;
                });

                /**
                 * The opposite of `_.pickBy`; this method creates an object composed of
                 * the own and inherited enumerable string keyed properties of `object` that
                 * `predicate` doesn't return truthy for. The predicate is invoked with two
                 * arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.omitBy(object, _.isNumber);
                 * // => { 'b': '2' }
                 */
                function omitBy(object, predicate) {
                  return pickBy(object, negate(getIteratee(predicate)));
                }

                /**
                 * Creates an object composed of the picked `object` properties.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {...(string|string[])} [paths] The property paths to pick.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pick(object, ['a', 'c']);
                 * // => { 'a': 1, 'c': 3 }
                 */
                var pick = flatRest(function(object, paths) {
                  return object == null ? {} : basePick(object, paths);
                });

                /**
                 * Creates an object composed of the `object` properties `predicate` returns
                 * truthy for. The predicate is invoked with two arguments: (value, key).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The source object.
                 * @param {Function} [predicate=_.identity] The function invoked per property.
                 * @returns {Object} Returns the new object.
                 * @example
                 *
                 * var object = { 'a': 1, 'b': '2', 'c': 3 };
                 *
                 * _.pickBy(object, _.isNumber);
                 * // => { 'a': 1, 'c': 3 }
                 */
                function pickBy(object, predicate) {
                  if (object == null) {
                    return {};
                  }
                  var props = arrayMap(getAllKeysIn(object), function(prop) {
                    return [prop];
                  });
                  predicate = getIteratee(predicate);
                  return basePickBy(object, props, function(value, path) {
                    return predicate(value, path[0]);
                  });
                }

                /**
                 * This method is like `_.get` except that if the resolved value is a
                 * function it's invoked with the `this` binding of its parent object and
                 * its result is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @param {Array|string} path The path of the property to resolve.
                 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                 *
                 * _.result(object, 'a[0].b.c1');
                 * // => 3
                 *
                 * _.result(object, 'a[0].b.c2');
                 * // => 4
                 *
                 * _.result(object, 'a[0].b.c3', 'default');
                 * // => 'default'
                 *
                 * _.result(object, 'a[0].b.c3', _.constant('default'));
                 * // => 'default'
                 */
                function result(object, path, defaultValue) {
                  path = castPath(path, object);

                  var index = -1,
                      length = path.length;

                  // Ensure the loop is entered when path is empty.
                  if (!length) {
                    length = 1;
                    object = undefined$1;
                  }
                  while (++index < length) {
                    var value = object == null ? undefined$1 : object[toKey(path[index])];
                    if (value === undefined$1) {
                      index = length;
                      value = defaultValue;
                    }
                    object = isFunction(value) ? value.call(object) : value;
                  }
                  return object;
                }

                /**
                 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                 * it's created. Arrays are created for missing index properties while objects
                 * are created for all other missing properties. Use `_.setWith` to customize
                 * `path` creation.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.set(object, 'a[0].b.c', 4);
                 * console.log(object.a[0].b.c);
                 * // => 4
                 *
                 * _.set(object, ['x', '0', 'y', 'z'], 5);
                 * console.log(object.x[0].y.z);
                 * // => 5
                 */
                function set(object, path, value) {
                  return object == null ? object : baseSet(object, path, value);
                }

                /**
                 * This method is like `_.set` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {*} value The value to set.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.setWith(object, '[0][1]', 'a', Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function setWith(object, path, value, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined$1;
                  return object == null ? object : baseSet(object, path, value, customizer);
                }

                /**
                 * Creates an array of own enumerable string keyed-value pairs for `object`
                 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                 * entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entries
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairs(new Foo);
                 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                 */
                var toPairs = createToPairs(keys);

                /**
                 * Creates an array of own and inherited enumerable string keyed-value pairs
                 * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                 * or set, its entries are returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @alias entriesIn
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the key-value pairs.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.toPairsIn(new Foo);
                 * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                 */
                var toPairsIn = createToPairs(keysIn);

                /**
                 * An alternative to `_.reduce`; this method transforms `object` to a new
                 * `accumulator` object which is the result of running each of its own
                 * enumerable string keyed properties thru `iteratee`, with each invocation
                 * potentially mutating the `accumulator` object. If `accumulator` is not
                 * provided, a new object with the same `[[Prototype]]` will be used. The
                 * iteratee is invoked with four arguments: (accumulator, value, key, object).
                 * Iteratee functions may exit iteration early by explicitly returning `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.3.0
                 * @category Object
                 * @param {Object} object The object to iterate over.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @param {*} [accumulator] The custom accumulator value.
                 * @returns {*} Returns the accumulated value.
                 * @example
                 *
                 * _.transform([2, 3, 4], function(result, n) {
                 *   result.push(n *= n);
                 *   return n % 2 == 0;
                 * }, []);
                 * // => [4, 9]
                 *
                 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                 *   (result[value] || (result[value] = [])).push(key);
                 * }, {});
                 * // => { '1': ['a', 'c'], '2': ['b'] }
                 */
                function transform(object, iteratee, accumulator) {
                  var isArr = isArray(object),
                      isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                  iteratee = getIteratee(iteratee, 4);
                  if (accumulator == null) {
                    var Ctor = object && object.constructor;
                    if (isArrLike) {
                      accumulator = isArr ? new Ctor : [];
                    }
                    else if (isObject(object)) {
                      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                    }
                    else {
                      accumulator = {};
                    }
                  }
                  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                    return iteratee(accumulator, value, index, object);
                  });
                  return accumulator;
                }

                /**
                 * Removes the property at `path` of `object`.
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to unset.
                 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                 * _.unset(object, 'a[0].b.c');
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 *
                 * _.unset(object, ['a', '0', 'b', 'c']);
                 * // => true
                 *
                 * console.log(object);
                 * // => { 'a': [{ 'b': {} }] };
                 */
                function unset(object, path) {
                  return object == null ? true : baseUnset(object, path);
                }

                /**
                 * This method is like `_.set` except that accepts `updater` to produce the
                 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                 * is invoked with one argument: (value).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                 *
                 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                 * console.log(object.a[0].b.c);
                 * // => 9
                 *
                 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                 * console.log(object.x[0].y.z);
                 * // => 0
                 */
                function update(object, path, updater) {
                  return object == null ? object : baseUpdate(object, path, castFunction(updater));
                }

                /**
                 * This method is like `_.update` except that it accepts `customizer` which is
                 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                 * path creation is handled by the method instead. The `customizer` is invoked
                 * with three arguments: (nsValue, key, nsObject).
                 *
                 * **Note:** This method mutates `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.6.0
                 * @category Object
                 * @param {Object} object The object to modify.
                 * @param {Array|string} path The path of the property to set.
                 * @param {Function} updater The function to produce the updated value.
                 * @param {Function} [customizer] The function to customize assigned values.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var object = {};
                 *
                 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                 * // => { '0': { '1': 'a' } }
                 */
                function updateWith(object, path, updater, customizer) {
                  customizer = typeof customizer == 'function' ? customizer : undefined$1;
                  return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
                }

                /**
                 * Creates an array of the own enumerable string keyed property values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.values(new Foo);
                 * // => [1, 2] (iteration order is not guaranteed)
                 *
                 * _.values('hi');
                 * // => ['h', 'i']
                 */
                function values(object) {
                  return object == null ? [] : baseValues(object, keys(object));
                }

                /**
                 * Creates an array of the own and inherited enumerable string keyed property
                 * values of `object`.
                 *
                 * **Note:** Non-object values are coerced to objects.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Object
                 * @param {Object} object The object to query.
                 * @returns {Array} Returns the array of property values.
                 * @example
                 *
                 * function Foo() {
                 *   this.a = 1;
                 *   this.b = 2;
                 * }
                 *
                 * Foo.prototype.c = 3;
                 *
                 * _.valuesIn(new Foo);
                 * // => [1, 2, 3] (iteration order is not guaranteed)
                 */
                function valuesIn(object) {
                  return object == null ? [] : baseValues(object, keysIn(object));
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Clamps `number` within the inclusive `lower` and `upper` bounds.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Number
                 * @param {number} number The number to clamp.
                 * @param {number} [lower] The lower bound.
                 * @param {number} upper The upper bound.
                 * @returns {number} Returns the clamped number.
                 * @example
                 *
                 * _.clamp(-10, -5, 5);
                 * // => -5
                 *
                 * _.clamp(10, -5, 5);
                 * // => 5
                 */
                function clamp(number, lower, upper) {
                  if (upper === undefined$1) {
                    upper = lower;
                    lower = undefined$1;
                  }
                  if (upper !== undefined$1) {
                    upper = toNumber(upper);
                    upper = upper === upper ? upper : 0;
                  }
                  if (lower !== undefined$1) {
                    lower = toNumber(lower);
                    lower = lower === lower ? lower : 0;
                  }
                  return baseClamp(toNumber(number), lower, upper);
                }

                /**
                 * Checks if `n` is between `start` and up to, but not including, `end`. If
                 * `end` is not specified, it's set to `start` with `start` then set to `0`.
                 * If `start` is greater than `end` the params are swapped to support
                 * negative ranges.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.3.0
                 * @category Number
                 * @param {number} number The number to check.
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                 * @see _.range, _.rangeRight
                 * @example
                 *
                 * _.inRange(3, 2, 4);
                 * // => true
                 *
                 * _.inRange(4, 8);
                 * // => true
                 *
                 * _.inRange(4, 2);
                 * // => false
                 *
                 * _.inRange(2, 2);
                 * // => false
                 *
                 * _.inRange(1.2, 2);
                 * // => true
                 *
                 * _.inRange(5.2, 4);
                 * // => false
                 *
                 * _.inRange(-3, -2, -6);
                 * // => true
                 */
                function inRange(number, start, end) {
                  start = toFinite(start);
                  if (end === undefined$1) {
                    end = start;
                    start = 0;
                  } else {
                    end = toFinite(end);
                  }
                  number = toNumber(number);
                  return baseInRange(number, start, end);
                }

                /**
                 * Produces a random number between the inclusive `lower` and `upper` bounds.
                 * If only one argument is provided a number between `0` and the given number
                 * is returned. If `floating` is `true`, or either `lower` or `upper` are
                 * floats, a floating-point number is returned instead of an integer.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @memberOf _
                 * @since 0.7.0
                 * @category Number
                 * @param {number} [lower=0] The lower bound.
                 * @param {number} [upper=1] The upper bound.
                 * @param {boolean} [floating] Specify returning a floating-point number.
                 * @returns {number} Returns the random number.
                 * @example
                 *
                 * _.random(0, 5);
                 * // => an integer between 0 and 5
                 *
                 * _.random(5);
                 * // => also an integer between 0 and 5
                 *
                 * _.random(5, true);
                 * // => a floating-point number between 0 and 5
                 *
                 * _.random(1.2, 5.2);
                 * // => a floating-point number between 1.2 and 5.2
                 */
                function random(lower, upper, floating) {
                  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                    upper = floating = undefined$1;
                  }
                  if (floating === undefined$1) {
                    if (typeof upper == 'boolean') {
                      floating = upper;
                      upper = undefined$1;
                    }
                    else if (typeof lower == 'boolean') {
                      floating = lower;
                      lower = undefined$1;
                    }
                  }
                  if (lower === undefined$1 && upper === undefined$1) {
                    lower = 0;
                    upper = 1;
                  }
                  else {
                    lower = toFinite(lower);
                    if (upper === undefined$1) {
                      upper = lower;
                      lower = 0;
                    } else {
                      upper = toFinite(upper);
                    }
                  }
                  if (lower > upper) {
                    var temp = lower;
                    lower = upper;
                    upper = temp;
                  }
                  if (floating || lower % 1 || upper % 1) {
                    var rand = nativeRandom();
                    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                  }
                  return baseRandom(lower, upper);
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the camel cased string.
                 * @example
                 *
                 * _.camelCase('Foo Bar');
                 * // => 'fooBar'
                 *
                 * _.camelCase('--foo-bar--');
                 * // => 'fooBar'
                 *
                 * _.camelCase('__FOO_BAR__');
                 * // => 'fooBar'
                 */
                var camelCase = createCompounder(function(result, word, index) {
                  word = word.toLowerCase();
                  return result + (index ? capitalize(word) : word);
                });

                /**
                 * Converts the first character of `string` to upper case and the remaining
                 * to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to capitalize.
                 * @returns {string} Returns the capitalized string.
                 * @example
                 *
                 * _.capitalize('FRED');
                 * // => 'Fred'
                 */
                function capitalize(string) {
                  return upperFirst(toString(string).toLowerCase());
                }

                /**
                 * Deburrs `string` by converting
                 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                 * letters to basic Latin letters and removing
                 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to deburr.
                 * @returns {string} Returns the deburred string.
                 * @example
                 *
                 * _.deburr('déjà vu');
                 * // => 'deja vu'
                 */
                function deburr(string) {
                  string = toString(string);
                  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                }

                /**
                 * Checks if `string` ends with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=string.length] The position to search up to.
                 * @returns {boolean} Returns `true` if `string` ends with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.endsWith('abc', 'c');
                 * // => true
                 *
                 * _.endsWith('abc', 'b');
                 * // => false
                 *
                 * _.endsWith('abc', 'b', 2);
                 * // => true
                 */
                function endsWith(string, target, position) {
                  string = toString(string);
                  target = baseToString(target);

                  var length = string.length;
                  position = position === undefined$1
                    ? length
                    : baseClamp(toInteger(position), 0, length);

                  var end = position;
                  position -= target.length;
                  return position >= 0 && string.slice(position, end) == target;
                }

                /**
                 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                 * corresponding HTML entities.
                 *
                 * **Note:** No other characters are escaped. To escape additional
                 * characters use a third-party library like [_he_](https://mths.be/he).
                 *
                 * Though the ">" character is escaped for symmetry, characters like
                 * ">" and "/" don't need escaping in HTML and have no special meaning
                 * unless they're part of a tag or unquoted attribute value. See
                 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                 * (under "semi-related fun fact") for more details.
                 *
                 * When working with HTML you should always
                 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                 * XSS vectors.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escape('fred, barney, & pebbles');
                 * // => 'fred, barney, &amp; pebbles'
                 */
                function escape(string) {
                  string = toString(string);
                  return (string && reHasUnescapedHtml.test(string))
                    ? string.replace(reUnescapedHtml, escapeHtmlChar)
                    : string;
                }

                /**
                 * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                 * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to escape.
                 * @returns {string} Returns the escaped string.
                 * @example
                 *
                 * _.escapeRegExp('[lodash](https://lodash.com/)');
                 * // => '\[lodash\]\(https://lodash\.com/\)'
                 */
                function escapeRegExp(string) {
                  string = toString(string);
                  return (string && reHasRegExpChar.test(string))
                    ? string.replace(reRegExpChar, '\\$&')
                    : string;
                }

                /**
                 * Converts `string` to
                 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the kebab cased string.
                 * @example
                 *
                 * _.kebabCase('Foo Bar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('fooBar');
                 * // => 'foo-bar'
                 *
                 * _.kebabCase('__FOO_BAR__');
                 * // => 'foo-bar'
                 */
                var kebabCase = createCompounder(function(result, word, index) {
                  return result + (index ? '-' : '') + word.toLowerCase();
                });

                /**
                 * Converts `string`, as space separated words, to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.lowerCase('--Foo-Bar--');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('fooBar');
                 * // => 'foo bar'
                 *
                 * _.lowerCase('__FOO_BAR__');
                 * // => 'foo bar'
                 */
                var lowerCase = createCompounder(function(result, word, index) {
                  return result + (index ? ' ' : '') + word.toLowerCase();
                });

                /**
                 * Converts the first character of `string` to lower case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.lowerFirst('Fred');
                 * // => 'fred'
                 *
                 * _.lowerFirst('FRED');
                 * // => 'fRED'
                 */
                var lowerFirst = createCaseFirst('toLowerCase');

                /**
                 * Pads `string` on the left and right sides if it's shorter than `length`.
                 * Padding characters are truncated if they can't be evenly divided by `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.pad('abc', 8);
                 * // => '  abc   '
                 *
                 * _.pad('abc', 8, '_-');
                 * // => '_-abc_-_'
                 *
                 * _.pad('abc', 3);
                 * // => 'abc'
                 */
                function pad(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  if (!length || strLength >= length) {
                    return string;
                  }
                  var mid = (length - strLength) / 2;
                  return (
                    createPadding(nativeFloor(mid), chars) +
                    string +
                    createPadding(nativeCeil(mid), chars)
                  );
                }

                /**
                 * Pads `string` on the right side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padEnd('abc', 6);
                 * // => 'abc   '
                 *
                 * _.padEnd('abc', 6, '_-');
                 * // => 'abc_-_'
                 *
                 * _.padEnd('abc', 3);
                 * // => 'abc'
                 */
                function padEnd(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  return (length && strLength < length)
                    ? (string + createPadding(length - strLength, chars))
                    : string;
                }

                /**
                 * Pads `string` on the left side if it's shorter than `length`. Padding
                 * characters are truncated if they exceed `length`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to pad.
                 * @param {number} [length=0] The padding length.
                 * @param {string} [chars=' '] The string used as padding.
                 * @returns {string} Returns the padded string.
                 * @example
                 *
                 * _.padStart('abc', 6);
                 * // => '   abc'
                 *
                 * _.padStart('abc', 6, '_-');
                 * // => '_-_abc'
                 *
                 * _.padStart('abc', 3);
                 * // => 'abc'
                 */
                function padStart(string, length, chars) {
                  string = toString(string);
                  length = toInteger(length);

                  var strLength = length ? stringSize(string) : 0;
                  return (length && strLength < length)
                    ? (createPadding(length - strLength, chars) + string)
                    : string;
                }

                /**
                 * Converts `string` to an integer of the specified radix. If `radix` is
                 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                 * hexadecimal, in which case a `radix` of `16` is used.
                 *
                 * **Note:** This method aligns with the
                 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category String
                 * @param {string} string The string to convert.
                 * @param {number} [radix=10] The radix to interpret `value` by.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {number} Returns the converted integer.
                 * @example
                 *
                 * _.parseInt('08');
                 * // => 8
                 *
                 * _.map(['6', '08', '10'], _.parseInt);
                 * // => [6, 8, 10]
                 */
                function parseInt(string, radix, guard) {
                  if (guard || radix == null) {
                    radix = 0;
                  } else if (radix) {
                    radix = +radix;
                  }
                  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
                }

                /**
                 * Repeats the given string `n` times.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to repeat.
                 * @param {number} [n=1] The number of times to repeat the string.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the repeated string.
                 * @example
                 *
                 * _.repeat('*', 3);
                 * // => '***'
                 *
                 * _.repeat('abc', 2);
                 * // => 'abcabc'
                 *
                 * _.repeat('abc', 0);
                 * // => ''
                 */
                function repeat(string, n, guard) {
                  if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
                    n = 1;
                  } else {
                    n = toInteger(n);
                  }
                  return baseRepeat(toString(string), n);
                }

                /**
                 * Replaces matches for `pattern` in `string` with `replacement`.
                 *
                 * **Note:** This method is based on
                 * [`String#replace`](https://mdn.io/String/replace).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to modify.
                 * @param {RegExp|string} pattern The pattern to replace.
                 * @param {Function|string} replacement The match replacement.
                 * @returns {string} Returns the modified string.
                 * @example
                 *
                 * _.replace('Hi Fred', 'Fred', 'Barney');
                 * // => 'Hi Barney'
                 */
                function replace() {
                  var args = arguments,
                      string = toString(args[0]);

                  return args.length < 3 ? string : string.replace(args[1], args[2]);
                }

                /**
                 * Converts `string` to
                 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the snake cased string.
                 * @example
                 *
                 * _.snakeCase('Foo Bar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('fooBar');
                 * // => 'foo_bar'
                 *
                 * _.snakeCase('--FOO-BAR--');
                 * // => 'foo_bar'
                 */
                var snakeCase = createCompounder(function(result, word, index) {
                  return result + (index ? '_' : '') + word.toLowerCase();
                });

                /**
                 * Splits `string` by `separator`.
                 *
                 * **Note:** This method is based on
                 * [`String#split`](https://mdn.io/String/split).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to split.
                 * @param {RegExp|string} separator The separator pattern to split by.
                 * @param {number} [limit] The length to truncate results to.
                 * @returns {Array} Returns the string segments.
                 * @example
                 *
                 * _.split('a-b-c', '-', 2);
                 * // => ['a', 'b']
                 */
                function split(string, separator, limit) {
                  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                    separator = limit = undefined$1;
                  }
                  limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
                  if (!limit) {
                    return [];
                  }
                  string = toString(string);
                  if (string && (
                        typeof separator == 'string' ||
                        (separator != null && !isRegExp(separator))
                      )) {
                    separator = baseToString(separator);
                    if (!separator && hasUnicode(string)) {
                      return castSlice(stringToArray(string), 0, limit);
                    }
                  }
                  return string.split(separator, limit);
                }

                /**
                 * Converts `string` to
                 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                 *
                 * @static
                 * @memberOf _
                 * @since 3.1.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the start cased string.
                 * @example
                 *
                 * _.startCase('--foo-bar--');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('fooBar');
                 * // => 'Foo Bar'
                 *
                 * _.startCase('__FOO_BAR__');
                 * // => 'FOO BAR'
                 */
                var startCase = createCompounder(function(result, word, index) {
                  return result + (index ? ' ' : '') + upperFirst(word);
                });

                /**
                 * Checks if `string` starts with the given target string.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {string} [target] The string to search for.
                 * @param {number} [position=0] The position to search from.
                 * @returns {boolean} Returns `true` if `string` starts with `target`,
                 *  else `false`.
                 * @example
                 *
                 * _.startsWith('abc', 'a');
                 * // => true
                 *
                 * _.startsWith('abc', 'b');
                 * // => false
                 *
                 * _.startsWith('abc', 'b', 1);
                 * // => true
                 */
                function startsWith(string, target, position) {
                  string = toString(string);
                  position = position == null
                    ? 0
                    : baseClamp(toInteger(position), 0, string.length);

                  target = baseToString(target);
                  return string.slice(position, position + target.length) == target;
                }

                /**
                 * Creates a compiled template function that can interpolate data properties
                 * in "interpolate" delimiters, HTML-escape interpolated data properties in
                 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                 * properties may be accessed as free variables in the template. If a setting
                 * object is given, it takes precedence over `_.templateSettings` values.
                 *
                 * **Note:** In the development build `_.template` utilizes
                 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                 * for easier debugging.
                 *
                 * For more information on precompiling templates see
                 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                 *
                 * For more information on Chrome extension sandboxes see
                 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category String
                 * @param {string} [string=''] The template string.
                 * @param {Object} [options={}] The options object.
                 * @param {RegExp} [options.escape=_.templateSettings.escape]
                 *  The HTML "escape" delimiter.
                 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                 *  The "evaluate" delimiter.
                 * @param {Object} [options.imports=_.templateSettings.imports]
                 *  An object to import into the template as free variables.
                 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                 *  The "interpolate" delimiter.
                 * @param {string} [options.sourceURL='lodash.templateSources[n]']
                 *  The sourceURL of the compiled template.
                 * @param {string} [options.variable='obj']
                 *  The data object variable name.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Function} Returns the compiled template function.
                 * @example
                 *
                 * // Use the "interpolate" delimiter to create a compiled template.
                 * var compiled = _.template('hello <%= user %>!');
                 * compiled({ 'user': 'fred' });
                 * // => 'hello fred!'
                 *
                 * // Use the HTML "escape" delimiter to escape data property values.
                 * var compiled = _.template('<b><%- value %></b>');
                 * compiled({ 'value': '<script>' });
                 * // => '<b>&lt;script&gt;</b>'
                 *
                 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the internal `print` function in "evaluate" delimiters.
                 * var compiled = _.template('<% print("hello " + user); %>!');
                 * compiled({ 'user': 'barney' });
                 * // => 'hello barney!'
                 *
                 * // Use the ES template literal delimiter as an "interpolate" delimiter.
                 * // Disable support by replacing the "interpolate" delimiter.
                 * var compiled = _.template('hello ${ user }!');
                 * compiled({ 'user': 'pebbles' });
                 * // => 'hello pebbles!'
                 *
                 * // Use backslashes to treat delimiters as plain text.
                 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                 * compiled({ 'value': 'ignored' });
                 * // => '<%- value %>'
                 *
                 * // Use the `imports` option to import `jQuery` as `jq`.
                 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                 * compiled({ 'users': ['fred', 'barney'] });
                 * // => '<li>fred</li><li>barney</li>'
                 *
                 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                 * compiled(data);
                 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                 *
                 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                 * compiled.source;
                 * // => function(data) {
                 * //   var __t, __p = '';
                 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
                 * //   return __p;
                 * // }
                 *
                 * // Use custom template delimiters.
                 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                 * var compiled = _.template('hello {{ user }}!');
                 * compiled({ 'user': 'mustache' });
                 * // => 'hello mustache!'
                 *
                 * // Use the `source` property to inline compiled templates for meaningful
                 * // line numbers in error messages and stack traces.
                 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                 *   var JST = {\
                 *     "main": ' + _.template(mainText).source + '\
                 *   };\
                 * ');
                 */
                function template(string, options, guard) {
                  // Based on John Resig's `tmpl` implementation
                  // (http://ejohn.org/blog/javascript-micro-templating/)
                  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                  var settings = lodash.templateSettings;

                  if (guard && isIterateeCall(string, options, guard)) {
                    options = undefined$1;
                  }
                  string = toString(string);
                  options = assignInWith({}, options, settings, customDefaultsAssignIn);

                  var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                      importsKeys = keys(imports),
                      importsValues = baseValues(imports, importsKeys);

                  var isEscaping,
                      isEvaluating,
                      index = 0,
                      interpolate = options.interpolate || reNoMatch,
                      source = "__p += '";

                  // Compile the regexp to match each delimiter.
                  var reDelimiters = RegExp(
                    (options.escape || reNoMatch).source + '|' +
                    interpolate.source + '|' +
                    (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                    (options.evaluate || reNoMatch).source + '|$'
                  , 'g');

                  // Use a sourceURL for easier debugging.
                  // The sourceURL gets injected into the source that's eval-ed, so be careful
                  // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
                  // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
                  var sourceURL = '//# sourceURL=' +
                    (hasOwnProperty.call(options, 'sourceURL')
                      ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
                      : ('lodash.templateSources[' + (++templateCounter) + ']')
                    ) + '\n';

                  string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                    interpolateValue || (interpolateValue = esTemplateValue);

                    // Escape characters that can't be included in string literals.
                    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                    // Replace delimiters with snippets.
                    if (escapeValue) {
                      isEscaping = true;
                      source += "' +\n__e(" + escapeValue + ") +\n'";
                    }
                    if (evaluateValue) {
                      isEvaluating = true;
                      source += "';\n" + evaluateValue + ";\n__p += '";
                    }
                    if (interpolateValue) {
                      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                    }
                    index = offset + match.length;

                    // The JS engine embedded in Adobe products needs `match` returned in
                    // order to produce the correct `offset` value.
                    return match;
                  });

                  source += "';\n";

                  // If `variable` is not specified wrap a with-statement around the generated
                  // code to add the data object to the top of the scope chain.
                  // Like with sourceURL, we take care to not check the option's prototype,
                  // as this configuration is a code injection vector.
                  var variable = hasOwnProperty.call(options, 'variable') && options.variable;
                  if (!variable) {
                    source = 'with (obj) {\n' + source + '\n}\n';
                  }
                  // Cleanup code by stripping empty strings.
                  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                    .replace(reEmptyStringMiddle, '$1')
                    .replace(reEmptyStringTrailing, '$1;');

                  // Frame code as the function body.
                  source = 'function(' + (variable || 'obj') + ') {\n' +
                    (variable
                      ? ''
                      : 'obj || (obj = {});\n'
                    ) +
                    "var __t, __p = ''" +
                    (isEscaping
                       ? ', __e = _.escape'
                       : ''
                    ) +
                    (isEvaluating
                      ? ', __j = Array.prototype.join;\n' +
                        "function print() { __p += __j.call(arguments, '') }\n"
                      : ';\n'
                    ) +
                    source +
                    'return __p\n}';

                  var result = attempt(function() {
                    return Function(importsKeys, sourceURL + 'return ' + source)
                      .apply(undefined$1, importsValues);
                  });

                  // Provide the compiled function's source by its `toString` method or
                  // the `source` property as a convenience for inlining compiled templates.
                  result.source = source;
                  if (isError(result)) {
                    throw result;
                  }
                  return result;
                }

                /**
                 * Converts `string`, as a whole, to lower case just like
                 * [String#toLowerCase](https://mdn.io/toLowerCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the lower cased string.
                 * @example
                 *
                 * _.toLower('--Foo-Bar--');
                 * // => '--foo-bar--'
                 *
                 * _.toLower('fooBar');
                 * // => 'foobar'
                 *
                 * _.toLower('__FOO_BAR__');
                 * // => '__foo_bar__'
                 */
                function toLower(value) {
                  return toString(value).toLowerCase();
                }

                /**
                 * Converts `string`, as a whole, to upper case just like
                 * [String#toUpperCase](https://mdn.io/toUpperCase).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.toUpper('--foo-bar--');
                 * // => '--FOO-BAR--'
                 *
                 * _.toUpper('fooBar');
                 * // => 'FOOBAR'
                 *
                 * _.toUpper('__foo_bar__');
                 * // => '__FOO_BAR__'
                 */
                function toUpper(value) {
                  return toString(value).toUpperCase();
                }

                /**
                 * Removes leading and trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trim('  abc  ');
                 * // => 'abc'
                 *
                 * _.trim('-_-abc-_-', '_-');
                 * // => 'abc'
                 *
                 * _.map(['  foo  ', '  bar  '], _.trim);
                 * // => ['foo', 'bar']
                 */
                function trim(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined$1)) {
                    return string.replace(reTrim, '');
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                      chrSymbols = stringToArray(chars),
                      start = charsStartIndex(strSymbols, chrSymbols),
                      end = charsEndIndex(strSymbols, chrSymbols) + 1;

                  return castSlice(strSymbols, start, end).join('');
                }

                /**
                 * Removes trailing whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimEnd('  abc  ');
                 * // => '  abc'
                 *
                 * _.trimEnd('-_-abc-_-', '_-');
                 * // => '-_-abc'
                 */
                function trimEnd(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined$1)) {
                    return string.replace(reTrimEnd, '');
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                  return castSlice(strSymbols, 0, end).join('');
                }

                /**
                 * Removes leading whitespace or specified characters from `string`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to trim.
                 * @param {string} [chars=whitespace] The characters to trim.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {string} Returns the trimmed string.
                 * @example
                 *
                 * _.trimStart('  abc  ');
                 * // => 'abc  '
                 *
                 * _.trimStart('-_-abc-_-', '_-');
                 * // => 'abc-_-'
                 */
                function trimStart(string, chars, guard) {
                  string = toString(string);
                  if (string && (guard || chars === undefined$1)) {
                    return string.replace(reTrimStart, '');
                  }
                  if (!string || !(chars = baseToString(chars))) {
                    return string;
                  }
                  var strSymbols = stringToArray(string),
                      start = charsStartIndex(strSymbols, stringToArray(chars));

                  return castSlice(strSymbols, start).join('');
                }

                /**
                 * Truncates `string` if it's longer than the given maximum string length.
                 * The last characters of the truncated string are replaced with the omission
                 * string which defaults to "...".
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to truncate.
                 * @param {Object} [options={}] The options object.
                 * @param {number} [options.length=30] The maximum string length.
                 * @param {string} [options.omission='...'] The string to indicate text is omitted.
                 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                 * @returns {string} Returns the truncated string.
                 * @example
                 *
                 * _.truncate('hi-diddly-ho there, neighborino');
                 * // => 'hi-diddly-ho there, neighbo...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'length': 24,
                 *   'separator': ' '
                 * });
                 * // => 'hi-diddly-ho there,...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'length': 24,
                 *   'separator': /,? +/
                 * });
                 * // => 'hi-diddly-ho there...'
                 *
                 * _.truncate('hi-diddly-ho there, neighborino', {
                 *   'omission': ' [...]'
                 * });
                 * // => 'hi-diddly-ho there, neig [...]'
                 */
                function truncate(string, options) {
                  var length = DEFAULT_TRUNC_LENGTH,
                      omission = DEFAULT_TRUNC_OMISSION;

                  if (isObject(options)) {
                    var separator = 'separator' in options ? options.separator : separator;
                    length = 'length' in options ? toInteger(options.length) : length;
                    omission = 'omission' in options ? baseToString(options.omission) : omission;
                  }
                  string = toString(string);

                  var strLength = string.length;
                  if (hasUnicode(string)) {
                    var strSymbols = stringToArray(string);
                    strLength = strSymbols.length;
                  }
                  if (length >= strLength) {
                    return string;
                  }
                  var end = length - stringSize(omission);
                  if (end < 1) {
                    return omission;
                  }
                  var result = strSymbols
                    ? castSlice(strSymbols, 0, end).join('')
                    : string.slice(0, end);

                  if (separator === undefined$1) {
                    return result + omission;
                  }
                  if (strSymbols) {
                    end += (result.length - end);
                  }
                  if (isRegExp(separator)) {
                    if (string.slice(end).search(separator)) {
                      var match,
                          substring = result;

                      if (!separator.global) {
                        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                      }
                      separator.lastIndex = 0;
                      while ((match = separator.exec(substring))) {
                        var newEnd = match.index;
                      }
                      result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
                    }
                  } else if (string.indexOf(baseToString(separator), end) != end) {
                    var index = result.lastIndexOf(separator);
                    if (index > -1) {
                      result = result.slice(0, index);
                    }
                  }
                  return result + omission;
                }

                /**
                 * The inverse of `_.escape`; this method converts the HTML entities
                 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                 * their corresponding characters.
                 *
                 * **Note:** No other HTML entities are unescaped. To unescape additional
                 * HTML entities use a third-party library like [_he_](https://mths.be/he).
                 *
                 * @static
                 * @memberOf _
                 * @since 0.6.0
                 * @category String
                 * @param {string} [string=''] The string to unescape.
                 * @returns {string} Returns the unescaped string.
                 * @example
                 *
                 * _.unescape('fred, barney, &amp; pebbles');
                 * // => 'fred, barney, & pebbles'
                 */
                function unescape(string) {
                  string = toString(string);
                  return (string && reHasEscapedHtml.test(string))
                    ? string.replace(reEscapedHtml, unescapeHtmlChar)
                    : string;
                }

                /**
                 * Converts `string`, as space separated words, to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the upper cased string.
                 * @example
                 *
                 * _.upperCase('--foo-bar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('fooBar');
                 * // => 'FOO BAR'
                 *
                 * _.upperCase('__foo_bar__');
                 * // => 'FOO BAR'
                 */
                var upperCase = createCompounder(function(result, word, index) {
                  return result + (index ? ' ' : '') + word.toUpperCase();
                });

                /**
                 * Converts the first character of `string` to upper case.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category String
                 * @param {string} [string=''] The string to convert.
                 * @returns {string} Returns the converted string.
                 * @example
                 *
                 * _.upperFirst('fred');
                 * // => 'Fred'
                 *
                 * _.upperFirst('FRED');
                 * // => 'FRED'
                 */
                var upperFirst = createCaseFirst('toUpperCase');

                /**
                 * Splits `string` into an array of its words.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category String
                 * @param {string} [string=''] The string to inspect.
                 * @param {RegExp|string} [pattern] The pattern to match words.
                 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                 * @returns {Array} Returns the words of `string`.
                 * @example
                 *
                 * _.words('fred, barney, & pebbles');
                 * // => ['fred', 'barney', 'pebbles']
                 *
                 * _.words('fred, barney, & pebbles', /[^, ]+/g);
                 * // => ['fred', 'barney', '&', 'pebbles']
                 */
                function words(string, pattern, guard) {
                  string = toString(string);
                  pattern = guard ? undefined$1 : pattern;

                  if (pattern === undefined$1) {
                    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                  }
                  return string.match(pattern) || [];
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Attempts to invoke `func`, returning either the result or the caught error
                 * object. Any additional arguments are provided to `func` when it's invoked.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Function} func The function to attempt.
                 * @param {...*} [args] The arguments to invoke `func` with.
                 * @returns {*} Returns the `func` result or error object.
                 * @example
                 *
                 * // Avoid throwing errors for invalid selectors.
                 * var elements = _.attempt(function(selector) {
                 *   return document.querySelectorAll(selector);
                 * }, '>_>');
                 *
                 * if (_.isError(elements)) {
                 *   elements = [];
                 * }
                 */
                var attempt = baseRest(function(func, args) {
                  try {
                    return apply(func, undefined$1, args);
                  } catch (e) {
                    return isError(e) ? e : new Error(e);
                  }
                });

                /**
                 * Binds methods of an object to the object itself, overwriting the existing
                 * method.
                 *
                 * **Note:** This method doesn't set the "length" property of bound functions.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Object} object The object to bind and assign the bound methods to.
                 * @param {...(string|string[])} methodNames The object method names to bind.
                 * @returns {Object} Returns `object`.
                 * @example
                 *
                 * var view = {
                 *   'label': 'docs',
                 *   'click': function() {
                 *     console.log('clicked ' + this.label);
                 *   }
                 * };
                 *
                 * _.bindAll(view, ['click']);
                 * jQuery(element).on('click', view.click);
                 * // => Logs 'clicked docs' when clicked.
                 */
                var bindAll = flatRest(function(object, methodNames) {
                  arrayEach(methodNames, function(key) {
                    key = toKey(key);
                    baseAssignValue(object, key, bind(object[key], object));
                  });
                  return object;
                });

                /**
                 * Creates a function that iterates over `pairs` and invokes the corresponding
                 * function of the first predicate to return truthy. The predicate-function
                 * pairs are invoked with the `this` binding and arguments of the created
                 * function.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Array} pairs The predicate-function pairs.
                 * @returns {Function} Returns the new composite function.
                 * @example
                 *
                 * var func = _.cond([
                 *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                 *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                 *   [_.stubTrue,                      _.constant('no match')]
                 * ]);
                 *
                 * func({ 'a': 1, 'b': 2 });
                 * // => 'matches A'
                 *
                 * func({ 'a': 0, 'b': 1 });
                 * // => 'matches B'
                 *
                 * func({ 'a': '1', 'b': '2' });
                 * // => 'no match'
                 */
                function cond(pairs) {
                  var length = pairs == null ? 0 : pairs.length,
                      toIteratee = getIteratee();

                  pairs = !length ? [] : arrayMap(pairs, function(pair) {
                    if (typeof pair[1] != 'function') {
                      throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return [toIteratee(pair[0]), pair[1]];
                  });

                  return baseRest(function(args) {
                    var index = -1;
                    while (++index < length) {
                      var pair = pairs[index];
                      if (apply(pair[0], this, args)) {
                        return apply(pair[1], this, args);
                      }
                    }
                  });
                }

                /**
                 * Creates a function that invokes the predicate properties of `source` with
                 * the corresponding property values of a given object, returning `true` if
                 * all predicates return truthy, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.conformsTo` with
                 * `source` partially applied.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {Object} source The object of property predicates to conform to.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 2, 'b': 1 },
                 *   { 'a': 1, 'b': 2 }
                 * ];
                 *
                 * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                 * // => [{ 'a': 1, 'b': 2 }]
                 */
                function conforms(source) {
                  return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that returns `value`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {*} value The value to return from the new function.
                 * @returns {Function} Returns the new constant function.
                 * @example
                 *
                 * var objects = _.times(2, _.constant({ 'a': 1 }));
                 *
                 * console.log(objects);
                 * // => [{ 'a': 1 }, { 'a': 1 }]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => true
                 */
                function constant(value) {
                  return function() {
                    return value;
                  };
                }

                /**
                 * Checks `value` to determine whether a default value should be returned in
                 * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                 * or `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.14.0
                 * @category Util
                 * @param {*} value The value to check.
                 * @param {*} defaultValue The default value.
                 * @returns {*} Returns the resolved value.
                 * @example
                 *
                 * _.defaultTo(1, 10);
                 * // => 1
                 *
                 * _.defaultTo(undefined, 10);
                 * // => 10
                 */
                function defaultTo(value, defaultValue) {
                  return (value == null || value !== value) ? defaultValue : value;
                }

                /**
                 * Creates a function that returns the result of invoking the given functions
                 * with the `this` binding of the created function, where each successive
                 * invocation is supplied the return value of the previous.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flowRight
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var addSquare = _.flow([_.add, square]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flow = createFlow();

                /**
                 * This method is like `_.flow` except that it creates a function that
                 * invokes the given functions from right to left.
                 *
                 * @static
                 * @since 3.0.0
                 * @memberOf _
                 * @category Util
                 * @param {...(Function|Function[])} [funcs] The functions to invoke.
                 * @returns {Function} Returns the new composite function.
                 * @see _.flow
                 * @example
                 *
                 * function square(n) {
                 *   return n * n;
                 * }
                 *
                 * var addSquare = _.flowRight([square, _.add]);
                 * addSquare(1, 2);
                 * // => 9
                 */
                var flowRight = createFlow(true);

                /**
                 * This method returns the first argument it receives.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {*} value Any value.
                 * @returns {*} Returns `value`.
                 * @example
                 *
                 * var object = { 'a': 1 };
                 *
                 * console.log(_.identity(object) === object);
                 * // => true
                 */
                function identity(value) {
                  return value;
                }

                /**
                 * Creates a function that invokes `func` with the arguments of the created
                 * function. If `func` is a property name, the created function returns the
                 * property value for a given element. If `func` is an array or object, the
                 * created function returns `true` for elements that contain the equivalent
                 * source properties, otherwise it returns `false`.
                 *
                 * @static
                 * @since 4.0.0
                 * @memberOf _
                 * @category Util
                 * @param {*} [func=_.identity] The value to convert to a callback.
                 * @returns {Function} Returns the callback.
                 * @example
                 *
                 * var users = [
                 *   { 'user': 'barney', 'age': 36, 'active': true },
                 *   { 'user': 'fred',   'age': 40, 'active': false }
                 * ];
                 *
                 * // The `_.matches` iteratee shorthand.
                 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                 *
                 * // The `_.matchesProperty` iteratee shorthand.
                 * _.filter(users, _.iteratee(['user', 'fred']));
                 * // => [{ 'user': 'fred', 'age': 40 }]
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.map(users, _.iteratee('user'));
                 * // => ['barney', 'fred']
                 *
                 * // Create custom iteratee shorthands.
                 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
                 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
                 *     return func.test(string);
                 *   };
                 * });
                 *
                 * _.filter(['abc', 'def'], /ef/);
                 * // => ['def']
                 */
                function iteratee(func) {
                  return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that performs a partial deep comparison between a given
                 * object and `source`, returning `true` if the given object has equivalent
                 * property values, else `false`.
                 *
                 * **Note:** The created function is equivalent to `_.isMatch` with `source`
                 * partially applied.
                 *
                 * Partial comparisons will match empty array and empty object `source`
                 * values against any array or object value, respectively. See `_.isEqual`
                 * for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} source The object of property values to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                 */
                function matches(source) {
                  return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that performs a partial deep comparison between the
                 * value at `path` of a given object to `srcValue`, returning `true` if the
                 * object value is equivalent, else `false`.
                 *
                 * **Note:** Partial comparisons will match empty array and empty object
                 * `srcValue` values against any array or object value, respectively. See
                 * `_.isEqual` for a list of supported value comparisons.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.2.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @param {*} srcValue The value to match.
                 * @returns {Function} Returns the new spec function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': 1, 'b': 2, 'c': 3 },
                 *   { 'a': 4, 'b': 5, 'c': 6 }
                 * ];
                 *
                 * _.find(objects, _.matchesProperty('a', 4));
                 * // => { 'a': 4, 'b': 5, 'c': 6 }
                 */
                function matchesProperty(path, srcValue) {
                  return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                }

                /**
                 * Creates a function that invokes the method at `path` of a given object.
                 * Any additional arguments are provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Array|string} path The path of the method to invoke.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': _.constant(2) } },
                 *   { 'a': { 'b': _.constant(1) } }
                 * ];
                 *
                 * _.map(objects, _.method('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(objects, _.method(['a', 'b']));
                 * // => [2, 1]
                 */
                var method = baseRest(function(path, args) {
                  return function(object) {
                    return baseInvoke(object, path, args);
                  };
                });

                /**
                 * The opposite of `_.method`; this method creates a function that invokes
                 * the method at a given path of `object`. Any additional arguments are
                 * provided to the invoked method.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.7.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @param {...*} [args] The arguments to invoke the method with.
                 * @returns {Function} Returns the new invoker function.
                 * @example
                 *
                 * var array = _.times(3, _.constant),
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                 * // => [2, 0]
                 */
                var methodOf = baseRest(function(object, args) {
                  return function(path) {
                    return baseInvoke(object, path, args);
                  };
                });

                /**
                 * Adds all own enumerable string keyed function properties of a source
                 * object to the destination object. If `object` is a function, then methods
                 * are added to its prototype as well.
                 *
                 * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                 * avoid conflicts caused by modifying the original.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {Function|Object} [object=lodash] The destination object.
                 * @param {Object} source The object of functions to add.
                 * @param {Object} [options={}] The options object.
                 * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                 * @returns {Function|Object} Returns `object`.
                 * @example
                 *
                 * function vowels(string) {
                 *   return _.filter(string, function(v) {
                 *     return /[aeiou]/i.test(v);
                 *   });
                 * }
                 *
                 * _.mixin({ 'vowels': vowels });
                 * _.vowels('fred');
                 * // => ['e']
                 *
                 * _('fred').vowels().value();
                 * // => ['e']
                 *
                 * _.mixin({ 'vowels': vowels }, { 'chain': false });
                 * _('fred').vowels();
                 * // => ['e']
                 */
                function mixin(object, source, options) {
                  var props = keys(source),
                      methodNames = baseFunctions(source, props);

                  if (options == null &&
                      !(isObject(source) && (methodNames.length || !props.length))) {
                    options = source;
                    source = object;
                    object = this;
                    methodNames = baseFunctions(source, keys(source));
                  }
                  var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                      isFunc = isFunction(object);

                  arrayEach(methodNames, function(methodName) {
                    var func = source[methodName];
                    object[methodName] = func;
                    if (isFunc) {
                      object.prototype[methodName] = function() {
                        var chainAll = this.__chain__;
                        if (chain || chainAll) {
                          var result = object(this.__wrapped__),
                              actions = result.__actions__ = copyArray(this.__actions__);

                          actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                          result.__chain__ = chainAll;
                          return result;
                        }
                        return func.apply(object, arrayPush([this.value()], arguments));
                      };
                    }
                  });

                  return object;
                }

                /**
                 * Reverts the `_` variable to its previous value and returns a reference to
                 * the `lodash` function.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @returns {Function} Returns the `lodash` function.
                 * @example
                 *
                 * var lodash = _.noConflict();
                 */
                function noConflict() {
                  if (root._ === this) {
                    root._ = oldDash;
                  }
                  return this;
                }

                /**
                 * This method returns `undefined`.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.3.0
                 * @category Util
                 * @example
                 *
                 * _.times(2, _.noop);
                 * // => [undefined, undefined]
                 */
                function noop() {
                  // No operation performed.
                }

                /**
                 * Creates a function that gets the argument at index `n`. If `n` is negative,
                 * the nth argument from the end is returned.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [n=0] The index of the argument to return.
                 * @returns {Function} Returns the new pass-thru function.
                 * @example
                 *
                 * var func = _.nthArg(1);
                 * func('a', 'b', 'c', 'd');
                 * // => 'b'
                 *
                 * var func = _.nthArg(-2);
                 * func('a', 'b', 'c', 'd');
                 * // => 'c'
                 */
                function nthArg(n) {
                  n = toInteger(n);
                  return baseRest(function(args) {
                    return baseNth(args, n);
                  });
                }

                /**
                 * Creates a function that invokes `iteratees` with the arguments it receives
                 * and returns their results.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [iteratees=[_.identity]]
                 *  The iteratees to invoke.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.over([Math.max, Math.min]);
                 *
                 * func(1, 2, 3, 4);
                 * // => [4, 1]
                 */
                var over = createOver(arrayMap);

                /**
                 * Creates a function that checks if **all** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overEvery([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => false
                 *
                 * func(NaN);
                 * // => false
                 */
                var overEvery = createOver(arrayEvery);

                /**
                 * Creates a function that checks if **any** of the `predicates` return
                 * truthy when invoked with the arguments it receives.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {...(Function|Function[])} [predicates=[_.identity]]
                 *  The predicates to check.
                 * @returns {Function} Returns the new function.
                 * @example
                 *
                 * var func = _.overSome([Boolean, isFinite]);
                 *
                 * func('1');
                 * // => true
                 *
                 * func(null);
                 * // => true
                 *
                 * func(NaN);
                 * // => false
                 */
                var overSome = createOver(arraySome);

                /**
                 * Creates a function that returns the value at `path` of a given object.
                 *
                 * @static
                 * @memberOf _
                 * @since 2.4.0
                 * @category Util
                 * @param {Array|string} path The path of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var objects = [
                 *   { 'a': { 'b': 2 } },
                 *   { 'a': { 'b': 1 } }
                 * ];
                 *
                 * _.map(objects, _.property('a.b'));
                 * // => [2, 1]
                 *
                 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                 * // => [1, 2]
                 */
                function property(path) {
                  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                }

                /**
                 * The opposite of `_.property`; this method creates a function that returns
                 * the value at a given path of `object`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.0.0
                 * @category Util
                 * @param {Object} object The object to query.
                 * @returns {Function} Returns the new accessor function.
                 * @example
                 *
                 * var array = [0, 1, 2],
                 *     object = { 'a': array, 'b': array, 'c': array };
                 *
                 * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                 * // => [2, 0]
                 *
                 * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                 * // => [2, 0]
                 */
                function propertyOf(object) {
                  return function(path) {
                    return object == null ? undefined$1 : baseGet(object, path);
                  };
                }

                /**
                 * Creates an array of numbers (positive and/or negative) progressing from
                 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                 * `start` is specified without an `end` or `step`. If `end` is not specified,
                 * it's set to `start` with `start` then set to `0`.
                 *
                 * **Note:** JavaScript follows the IEEE-754 standard for resolving
                 * floating-point values which can produce unexpected results.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.rangeRight
                 * @example
                 *
                 * _.range(4);
                 * // => [0, 1, 2, 3]
                 *
                 * _.range(-4);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 5);
                 * // => [1, 2, 3, 4]
                 *
                 * _.range(0, 20, 5);
                 * // => [0, 5, 10, 15]
                 *
                 * _.range(0, -4, -1);
                 * // => [0, -1, -2, -3]
                 *
                 * _.range(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.range(0);
                 * // => []
                 */
                var range = createRange();

                /**
                 * This method is like `_.range` except that it populates values in
                 * descending order.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {number} [start=0] The start of the range.
                 * @param {number} end The end of the range.
                 * @param {number} [step=1] The value to increment or decrement by.
                 * @returns {Array} Returns the range of numbers.
                 * @see _.inRange, _.range
                 * @example
                 *
                 * _.rangeRight(4);
                 * // => [3, 2, 1, 0]
                 *
                 * _.rangeRight(-4);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 5);
                 * // => [4, 3, 2, 1]
                 *
                 * _.rangeRight(0, 20, 5);
                 * // => [15, 10, 5, 0]
                 *
                 * _.rangeRight(0, -4, -1);
                 * // => [-3, -2, -1, 0]
                 *
                 * _.rangeRight(1, 4, 0);
                 * // => [1, 1, 1]
                 *
                 * _.rangeRight(0);
                 * // => []
                 */
                var rangeRight = createRange(true);

                /**
                 * This method returns a new empty array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Array} Returns the new empty array.
                 * @example
                 *
                 * var arrays = _.times(2, _.stubArray);
                 *
                 * console.log(arrays);
                 * // => [[], []]
                 *
                 * console.log(arrays[0] === arrays[1]);
                 * // => false
                 */
                function stubArray() {
                  return [];
                }

                /**
                 * This method returns `false`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `false`.
                 * @example
                 *
                 * _.times(2, _.stubFalse);
                 * // => [false, false]
                 */
                function stubFalse() {
                  return false;
                }

                /**
                 * This method returns a new empty object.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {Object} Returns the new empty object.
                 * @example
                 *
                 * var objects = _.times(2, _.stubObject);
                 *
                 * console.log(objects);
                 * // => [{}, {}]
                 *
                 * console.log(objects[0] === objects[1]);
                 * // => false
                 */
                function stubObject() {
                  return {};
                }

                /**
                 * This method returns an empty string.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {string} Returns the empty string.
                 * @example
                 *
                 * _.times(2, _.stubString);
                 * // => ['', '']
                 */
                function stubString() {
                  return '';
                }

                /**
                 * This method returns `true`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.13.0
                 * @category Util
                 * @returns {boolean} Returns `true`.
                 * @example
                 *
                 * _.times(2, _.stubTrue);
                 * // => [true, true]
                 */
                function stubTrue() {
                  return true;
                }

                /**
                 * Invokes the iteratee `n` times, returning an array of the results of
                 * each invocation. The iteratee is invoked with one argument; (index).
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 * @example
                 *
                 * _.times(3, String);
                 * // => ['0', '1', '2']
                 *
                 *  _.times(4, _.constant(0));
                 * // => [0, 0, 0, 0]
                 */
                function times(n, iteratee) {
                  n = toInteger(n);
                  if (n < 1 || n > MAX_SAFE_INTEGER) {
                    return [];
                  }
                  var index = MAX_ARRAY_LENGTH,
                      length = nativeMin(n, MAX_ARRAY_LENGTH);

                  iteratee = getIteratee(iteratee);
                  n -= MAX_ARRAY_LENGTH;

                  var result = baseTimes(length, iteratee);
                  while (++index < n) {
                    iteratee(index);
                  }
                  return result;
                }

                /**
                 * Converts `value` to a property path array.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Util
                 * @param {*} value The value to convert.
                 * @returns {Array} Returns the new property path array.
                 * @example
                 *
                 * _.toPath('a.b.c');
                 * // => ['a', 'b', 'c']
                 *
                 * _.toPath('a[0].b.c');
                 * // => ['a', '0', 'b', 'c']
                 */
                function toPath(value) {
                  if (isArray(value)) {
                    return arrayMap(value, toKey);
                  }
                  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
                }

                /**
                 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Util
                 * @param {string} [prefix=''] The value to prefix the ID with.
                 * @returns {string} Returns the unique ID.
                 * @example
                 *
                 * _.uniqueId('contact_');
                 * // => 'contact_104'
                 *
                 * _.uniqueId();
                 * // => '105'
                 */
                function uniqueId(prefix) {
                  var id = ++idCounter;
                  return toString(prefix) + id;
                }

                /*------------------------------------------------------------------------*/

                /**
                 * Adds two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {number} augend The first number in an addition.
                 * @param {number} addend The second number in an addition.
                 * @returns {number} Returns the total.
                 * @example
                 *
                 * _.add(6, 4);
                 * // => 10
                 */
                var add = createMathOperation(function(augend, addend) {
                  return augend + addend;
                }, 0);

                /**
                 * Computes `number` rounded up to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round up.
                 * @param {number} [precision=0] The precision to round up to.
                 * @returns {number} Returns the rounded up number.
                 * @example
                 *
                 * _.ceil(4.006);
                 * // => 5
                 *
                 * _.ceil(6.004, 2);
                 * // => 6.01
                 *
                 * _.ceil(6040, -2);
                 * // => 6100
                 */
                var ceil = createRound('ceil');

                /**
                 * Divide two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} dividend The first number in a division.
                 * @param {number} divisor The second number in a division.
                 * @returns {number} Returns the quotient.
                 * @example
                 *
                 * _.divide(6, 4);
                 * // => 1.5
                 */
                var divide = createMathOperation(function(dividend, divisor) {
                  return dividend / divisor;
                }, 1);

                /**
                 * Computes `number` rounded down to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round down.
                 * @param {number} [precision=0] The precision to round down to.
                 * @returns {number} Returns the rounded down number.
                 * @example
                 *
                 * _.floor(4.006);
                 * // => 4
                 *
                 * _.floor(0.046, 2);
                 * // => 0.04
                 *
                 * _.floor(4060, -2);
                 * // => 4000
                 */
                var floor = createRound('floor');

                /**
                 * Computes the maximum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * _.max([4, 2, 8, 6]);
                 * // => 8
                 *
                 * _.max([]);
                 * // => undefined
                 */
                function max(array) {
                  return (array && array.length)
                    ? baseExtremum(array, identity, baseGt)
                    : undefined$1;
                }

                /**
                 * This method is like `_.max` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the maximum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.maxBy(objects, function(o) { return o.n; });
                 * // => { 'n': 2 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.maxBy(objects, 'n');
                 * // => { 'n': 2 }
                 */
                function maxBy(array, iteratee) {
                  return (array && array.length)
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                    : undefined$1;
                }

                /**
                 * Computes the mean of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * _.mean([4, 2, 8, 6]);
                 * // => 5
                 */
                function mean(array) {
                  return baseMean(array, identity);
                }

                /**
                 * This method is like `_.mean` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be averaged.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the mean.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.meanBy(objects, function(o) { return o.n; });
                 * // => 5
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.meanBy(objects, 'n');
                 * // => 5
                 */
                function meanBy(array, iteratee) {
                  return baseMean(array, getIteratee(iteratee, 2));
                }

                /**
                 * Computes the minimum value of `array`. If `array` is empty or falsey,
                 * `undefined` is returned.
                 *
                 * @static
                 * @since 0.1.0
                 * @memberOf _
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * _.min([4, 2, 8, 6]);
                 * // => 2
                 *
                 * _.min([]);
                 * // => undefined
                 */
                function min(array) {
                  return (array && array.length)
                    ? baseExtremum(array, identity, baseLt)
                    : undefined$1;
                }

                /**
                 * This method is like `_.min` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the criterion by which
                 * the value is ranked. The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {*} Returns the minimum value.
                 * @example
                 *
                 * var objects = [{ 'n': 1 }, { 'n': 2 }];
                 *
                 * _.minBy(objects, function(o) { return o.n; });
                 * // => { 'n': 1 }
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.minBy(objects, 'n');
                 * // => { 'n': 1 }
                 */
                function minBy(array, iteratee) {
                  return (array && array.length)
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                    : undefined$1;
                }

                /**
                 * Multiply two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.7.0
                 * @category Math
                 * @param {number} multiplier The first number in a multiplication.
                 * @param {number} multiplicand The second number in a multiplication.
                 * @returns {number} Returns the product.
                 * @example
                 *
                 * _.multiply(6, 4);
                 * // => 24
                 */
                var multiply = createMathOperation(function(multiplier, multiplicand) {
                  return multiplier * multiplicand;
                }, 1);

                /**
                 * Computes `number` rounded to `precision`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.10.0
                 * @category Math
                 * @param {number} number The number to round.
                 * @param {number} [precision=0] The precision to round to.
                 * @returns {number} Returns the rounded number.
                 * @example
                 *
                 * _.round(4.006);
                 * // => 4
                 *
                 * _.round(4.006, 2);
                 * // => 4.01
                 *
                 * _.round(4060, -2);
                 * // => 4100
                 */
                var round = createRound('round');

                /**
                 * Subtract two numbers.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {number} minuend The first number in a subtraction.
                 * @param {number} subtrahend The second number in a subtraction.
                 * @returns {number} Returns the difference.
                 * @example
                 *
                 * _.subtract(6, 4);
                 * // => 2
                 */
                var subtract = createMathOperation(function(minuend, subtrahend) {
                  return minuend - subtrahend;
                }, 0);

                /**
                 * Computes the sum of the values in `array`.
                 *
                 * @static
                 * @memberOf _
                 * @since 3.4.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * _.sum([4, 2, 8, 6]);
                 * // => 20
                 */
                function sum(array) {
                  return (array && array.length)
                    ? baseSum(array, identity)
                    : 0;
                }

                /**
                 * This method is like `_.sum` except that it accepts `iteratee` which is
                 * invoked for each element in `array` to generate the value to be summed.
                 * The iteratee is invoked with one argument: (value).
                 *
                 * @static
                 * @memberOf _
                 * @since 4.0.0
                 * @category Math
                 * @param {Array} array The array to iterate over.
                 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                 * @returns {number} Returns the sum.
                 * @example
                 *
                 * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                 *
                 * _.sumBy(objects, function(o) { return o.n; });
                 * // => 20
                 *
                 * // The `_.property` iteratee shorthand.
                 * _.sumBy(objects, 'n');
                 * // => 20
                 */
                function sumBy(array, iteratee) {
                  return (array && array.length)
                    ? baseSum(array, getIteratee(iteratee, 2))
                    : 0;
                }

                /*------------------------------------------------------------------------*/

                // Add methods that return wrapped values in chain sequences.
                lodash.after = after;
                lodash.ary = ary;
                lodash.assign = assign;
                lodash.assignIn = assignIn;
                lodash.assignInWith = assignInWith;
                lodash.assignWith = assignWith;
                lodash.at = at;
                lodash.before = before;
                lodash.bind = bind;
                lodash.bindAll = bindAll;
                lodash.bindKey = bindKey;
                lodash.castArray = castArray;
                lodash.chain = chain;
                lodash.chunk = chunk;
                lodash.compact = compact;
                lodash.concat = concat;
                lodash.cond = cond;
                lodash.conforms = conforms;
                lodash.constant = constant;
                lodash.countBy = countBy;
                lodash.create = create;
                lodash.curry = curry;
                lodash.curryRight = curryRight;
                lodash.debounce = debounce;
                lodash.defaults = defaults;
                lodash.defaultsDeep = defaultsDeep;
                lodash.defer = defer;
                lodash.delay = delay;
                lodash.difference = difference;
                lodash.differenceBy = differenceBy;
                lodash.differenceWith = differenceWith;
                lodash.drop = drop;
                lodash.dropRight = dropRight;
                lodash.dropRightWhile = dropRightWhile;
                lodash.dropWhile = dropWhile;
                lodash.fill = fill;
                lodash.filter = filter;
                lodash.flatMap = flatMap;
                lodash.flatMapDeep = flatMapDeep;
                lodash.flatMapDepth = flatMapDepth;
                lodash.flatten = flatten;
                lodash.flattenDeep = flattenDeep;
                lodash.flattenDepth = flattenDepth;
                lodash.flip = flip;
                lodash.flow = flow;
                lodash.flowRight = flowRight;
                lodash.fromPairs = fromPairs;
                lodash.functions = functions;
                lodash.functionsIn = functionsIn;
                lodash.groupBy = groupBy;
                lodash.initial = initial;
                lodash.intersection = intersection;
                lodash.intersectionBy = intersectionBy;
                lodash.intersectionWith = intersectionWith;
                lodash.invert = invert;
                lodash.invertBy = invertBy;
                lodash.invokeMap = invokeMap;
                lodash.iteratee = iteratee;
                lodash.keyBy = keyBy;
                lodash.keys = keys;
                lodash.keysIn = keysIn;
                lodash.map = map;
                lodash.mapKeys = mapKeys;
                lodash.mapValues = mapValues;
                lodash.matches = matches;
                lodash.matchesProperty = matchesProperty;
                lodash.memoize = memoize;
                lodash.merge = merge;
                lodash.mergeWith = mergeWith;
                lodash.method = method;
                lodash.methodOf = methodOf;
                lodash.mixin = mixin;
                lodash.negate = negate;
                lodash.nthArg = nthArg;
                lodash.omit = omit;
                lodash.omitBy = omitBy;
                lodash.once = once;
                lodash.orderBy = orderBy;
                lodash.over = over;
                lodash.overArgs = overArgs;
                lodash.overEvery = overEvery;
                lodash.overSome = overSome;
                lodash.partial = partial;
                lodash.partialRight = partialRight;
                lodash.partition = partition;
                lodash.pick = pick;
                lodash.pickBy = pickBy;
                lodash.property = property;
                lodash.propertyOf = propertyOf;
                lodash.pull = pull;
                lodash.pullAll = pullAll;
                lodash.pullAllBy = pullAllBy;
                lodash.pullAllWith = pullAllWith;
                lodash.pullAt = pullAt;
                lodash.range = range;
                lodash.rangeRight = rangeRight;
                lodash.rearg = rearg;
                lodash.reject = reject;
                lodash.remove = remove;
                lodash.rest = rest;
                lodash.reverse = reverse;
                lodash.sampleSize = sampleSize;
                lodash.set = set;
                lodash.setWith = setWith;
                lodash.shuffle = shuffle;
                lodash.slice = slice;
                lodash.sortBy = sortBy;
                lodash.sortedUniq = sortedUniq;
                lodash.sortedUniqBy = sortedUniqBy;
                lodash.split = split;
                lodash.spread = spread;
                lodash.tail = tail;
                lodash.take = take;
                lodash.takeRight = takeRight;
                lodash.takeRightWhile = takeRightWhile;
                lodash.takeWhile = takeWhile;
                lodash.tap = tap;
                lodash.throttle = throttle;
                lodash.thru = thru;
                lodash.toArray = toArray;
                lodash.toPairs = toPairs;
                lodash.toPairsIn = toPairsIn;
                lodash.toPath = toPath;
                lodash.toPlainObject = toPlainObject;
                lodash.transform = transform;
                lodash.unary = unary;
                lodash.union = union;
                lodash.unionBy = unionBy;
                lodash.unionWith = unionWith;
                lodash.uniq = uniq;
                lodash.uniqBy = uniqBy;
                lodash.uniqWith = uniqWith;
                lodash.unset = unset;
                lodash.unzip = unzip;
                lodash.unzipWith = unzipWith;
                lodash.update = update;
                lodash.updateWith = updateWith;
                lodash.values = values;
                lodash.valuesIn = valuesIn;
                lodash.without = without;
                lodash.words = words;
                lodash.wrap = wrap;
                lodash.xor = xor;
                lodash.xorBy = xorBy;
                lodash.xorWith = xorWith;
                lodash.zip = zip;
                lodash.zipObject = zipObject;
                lodash.zipObjectDeep = zipObjectDeep;
                lodash.zipWith = zipWith;

                // Add aliases.
                lodash.entries = toPairs;
                lodash.entriesIn = toPairsIn;
                lodash.extend = assignIn;
                lodash.extendWith = assignInWith;

                // Add methods to `lodash.prototype`.
                mixin(lodash, lodash);

                /*------------------------------------------------------------------------*/

                // Add methods that return unwrapped values in chain sequences.
                lodash.add = add;
                lodash.attempt = attempt;
                lodash.camelCase = camelCase;
                lodash.capitalize = capitalize;
                lodash.ceil = ceil;
                lodash.clamp = clamp;
                lodash.clone = clone;
                lodash.cloneDeep = cloneDeep;
                lodash.cloneDeepWith = cloneDeepWith;
                lodash.cloneWith = cloneWith;
                lodash.conformsTo = conformsTo;
                lodash.deburr = deburr;
                lodash.defaultTo = defaultTo;
                lodash.divide = divide;
                lodash.endsWith = endsWith;
                lodash.eq = eq;
                lodash.escape = escape;
                lodash.escapeRegExp = escapeRegExp;
                lodash.every = every;
                lodash.find = find;
                lodash.findIndex = findIndex;
                lodash.findKey = findKey;
                lodash.findLast = findLast;
                lodash.findLastIndex = findLastIndex;
                lodash.findLastKey = findLastKey;
                lodash.floor = floor;
                lodash.forEach = forEach;
                lodash.forEachRight = forEachRight;
                lodash.forIn = forIn;
                lodash.forInRight = forInRight;
                lodash.forOwn = forOwn;
                lodash.forOwnRight = forOwnRight;
                lodash.get = get;
                lodash.gt = gt;
                lodash.gte = gte;
                lodash.has = has;
                lodash.hasIn = hasIn;
                lodash.head = head;
                lodash.identity = identity;
                lodash.includes = includes;
                lodash.indexOf = indexOf;
                lodash.inRange = inRange;
                lodash.invoke = invoke;
                lodash.isArguments = isArguments;
                lodash.isArray = isArray;
                lodash.isArrayBuffer = isArrayBuffer;
                lodash.isArrayLike = isArrayLike;
                lodash.isArrayLikeObject = isArrayLikeObject;
                lodash.isBoolean = isBoolean;
                lodash.isBuffer = isBuffer;
                lodash.isDate = isDate;
                lodash.isElement = isElement;
                lodash.isEmpty = isEmpty;
                lodash.isEqual = isEqual;
                lodash.isEqualWith = isEqualWith;
                lodash.isError = isError;
                lodash.isFinite = isFinite;
                lodash.isFunction = isFunction;
                lodash.isInteger = isInteger;
                lodash.isLength = isLength;
                lodash.isMap = isMap;
                lodash.isMatch = isMatch;
                lodash.isMatchWith = isMatchWith;
                lodash.isNaN = isNaN;
                lodash.isNative = isNative;
                lodash.isNil = isNil;
                lodash.isNull = isNull;
                lodash.isNumber = isNumber;
                lodash.isObject = isObject;
                lodash.isObjectLike = isObjectLike;
                lodash.isPlainObject = isPlainObject;
                lodash.isRegExp = isRegExp;
                lodash.isSafeInteger = isSafeInteger;
                lodash.isSet = isSet;
                lodash.isString = isString;
                lodash.isSymbol = isSymbol;
                lodash.isTypedArray = isTypedArray;
                lodash.isUndefined = isUndefined;
                lodash.isWeakMap = isWeakMap;
                lodash.isWeakSet = isWeakSet;
                lodash.join = join;
                lodash.kebabCase = kebabCase;
                lodash.last = last;
                lodash.lastIndexOf = lastIndexOf;
                lodash.lowerCase = lowerCase;
                lodash.lowerFirst = lowerFirst;
                lodash.lt = lt;
                lodash.lte = lte;
                lodash.max = max;
                lodash.maxBy = maxBy;
                lodash.mean = mean;
                lodash.meanBy = meanBy;
                lodash.min = min;
                lodash.minBy = minBy;
                lodash.stubArray = stubArray;
                lodash.stubFalse = stubFalse;
                lodash.stubObject = stubObject;
                lodash.stubString = stubString;
                lodash.stubTrue = stubTrue;
                lodash.multiply = multiply;
                lodash.nth = nth;
                lodash.noConflict = noConflict;
                lodash.noop = noop;
                lodash.now = now;
                lodash.pad = pad;
                lodash.padEnd = padEnd;
                lodash.padStart = padStart;
                lodash.parseInt = parseInt;
                lodash.random = random;
                lodash.reduce = reduce;
                lodash.reduceRight = reduceRight;
                lodash.repeat = repeat;
                lodash.replace = replace;
                lodash.result = result;
                lodash.round = round;
                lodash.runInContext = runInContext;
                lodash.sample = sample;
                lodash.size = size;
                lodash.snakeCase = snakeCase;
                lodash.some = some;
                lodash.sortedIndex = sortedIndex;
                lodash.sortedIndexBy = sortedIndexBy;
                lodash.sortedIndexOf = sortedIndexOf;
                lodash.sortedLastIndex = sortedLastIndex;
                lodash.sortedLastIndexBy = sortedLastIndexBy;
                lodash.sortedLastIndexOf = sortedLastIndexOf;
                lodash.startCase = startCase;
                lodash.startsWith = startsWith;
                lodash.subtract = subtract;
                lodash.sum = sum;
                lodash.sumBy = sumBy;
                lodash.template = template;
                lodash.times = times;
                lodash.toFinite = toFinite;
                lodash.toInteger = toInteger;
                lodash.toLength = toLength;
                lodash.toLower = toLower;
                lodash.toNumber = toNumber;
                lodash.toSafeInteger = toSafeInteger;
                lodash.toString = toString;
                lodash.toUpper = toUpper;
                lodash.trim = trim;
                lodash.trimEnd = trimEnd;
                lodash.trimStart = trimStart;
                lodash.truncate = truncate;
                lodash.unescape = unescape;
                lodash.uniqueId = uniqueId;
                lodash.upperCase = upperCase;
                lodash.upperFirst = upperFirst;

                // Add aliases.
                lodash.each = forEach;
                lodash.eachRight = forEachRight;
                lodash.first = head;

                mixin(lodash, (function() {
                  var source = {};
                  baseForOwn(lodash, function(func, methodName) {
                    if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                      source[methodName] = func;
                    }
                  });
                  return source;
                }()), { 'chain': false });

                /*------------------------------------------------------------------------*/

                /**
                 * The semantic version number.
                 *
                 * @static
                 * @memberOf _
                 * @type {string}
                 */
                lodash.VERSION = VERSION;

                // Assign default placeholders.
                arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
                  lodash[methodName].placeholder = lodash;
                });

                // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                arrayEach(['drop', 'take'], function(methodName, index) {
                  LazyWrapper.prototype[methodName] = function(n) {
                    n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

                    var result = (this.__filtered__ && !index)
                      ? new LazyWrapper(this)
                      : this.clone();

                    if (result.__filtered__) {
                      result.__takeCount__ = nativeMin(n, result.__takeCount__);
                    } else {
                      result.__views__.push({
                        'size': nativeMin(n, MAX_ARRAY_LENGTH),
                        'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                      });
                    }
                    return result;
                  };

                  LazyWrapper.prototype[methodName + 'Right'] = function(n) {
                    return this.reverse()[methodName](n).reverse();
                  };
                });

                // Add `LazyWrapper` methods that accept an `iteratee` value.
                arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
                  var type = index + 1,
                      isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                  LazyWrapper.prototype[methodName] = function(iteratee) {
                    var result = this.clone();
                    result.__iteratees__.push({
                      'iteratee': getIteratee(iteratee, 3),
                      'type': type
                    });
                    result.__filtered__ = result.__filtered__ || isFilter;
                    return result;
                  };
                });

                // Add `LazyWrapper` methods for `_.head` and `_.last`.
                arrayEach(['head', 'last'], function(methodName, index) {
                  var takeName = 'take' + (index ? 'Right' : '');

                  LazyWrapper.prototype[methodName] = function() {
                    return this[takeName](1).value()[0];
                  };
                });

                // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                arrayEach(['initial', 'tail'], function(methodName, index) {
                  var dropName = 'drop' + (index ? '' : 'Right');

                  LazyWrapper.prototype[methodName] = function() {
                    return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                  };
                });

                LazyWrapper.prototype.compact = function() {
                  return this.filter(identity);
                };

                LazyWrapper.prototype.find = function(predicate) {
                  return this.filter(predicate).head();
                };

                LazyWrapper.prototype.findLast = function(predicate) {
                  return this.reverse().find(predicate);
                };

                LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
                  if (typeof path == 'function') {
                    return new LazyWrapper(this);
                  }
                  return this.map(function(value) {
                    return baseInvoke(value, path, args);
                  });
                });

                LazyWrapper.prototype.reject = function(predicate) {
                  return this.filter(negate(getIteratee(predicate)));
                };

                LazyWrapper.prototype.slice = function(start, end) {
                  start = toInteger(start);

                  var result = this;
                  if (result.__filtered__ && (start > 0 || end < 0)) {
                    return new LazyWrapper(result);
                  }
                  if (start < 0) {
                    result = result.takeRight(-start);
                  } else if (start) {
                    result = result.drop(start);
                  }
                  if (end !== undefined$1) {
                    end = toInteger(end);
                    result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                  }
                  return result;
                };

                LazyWrapper.prototype.takeRightWhile = function(predicate) {
                  return this.reverse().takeWhile(predicate).reverse();
                };

                LazyWrapper.prototype.toArray = function() {
                  return this.take(MAX_ARRAY_LENGTH);
                };

                // Add `LazyWrapper` methods to `lodash.prototype`.
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                  var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                      isTaker = /^(?:head|last)$/.test(methodName),
                      lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
                      retUnwrapped = isTaker || /^find/.test(methodName);

                  if (!lodashFunc) {
                    return;
                  }
                  lodash.prototype[methodName] = function() {
                    var value = this.__wrapped__,
                        args = isTaker ? [1] : arguments,
                        isLazy = value instanceof LazyWrapper,
                        iteratee = args[0],
                        useLazy = isLazy || isArray(value);

                    var interceptor = function(value) {
                      var result = lodashFunc.apply(lodash, arrayPush([value], args));
                      return (isTaker && chainAll) ? result[0] : result;
                    };

                    if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                      // Avoid lazy use if the iteratee has a "length" value other than `1`.
                      isLazy = useLazy = false;
                    }
                    var chainAll = this.__chain__,
                        isHybrid = !!this.__actions__.length,
                        isUnwrapped = retUnwrapped && !chainAll,
                        onlyLazy = isLazy && !isHybrid;

                    if (!retUnwrapped && useLazy) {
                      value = onlyLazy ? value : new LazyWrapper(this);
                      var result = func.apply(value, args);
                      result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
                      return new LodashWrapper(result, chainAll);
                    }
                    if (isUnwrapped && onlyLazy) {
                      return func.apply(this, args);
                    }
                    result = this.thru(interceptor);
                    return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                  };
                });

                // Add `Array` methods to `lodash.prototype`.
                arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
                  var func = arrayProto[methodName],
                      chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                      retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                  lodash.prototype[methodName] = function() {
                    var args = arguments;
                    if (retUnwrapped && !this.__chain__) {
                      var value = this.value();
                      return func.apply(isArray(value) ? value : [], args);
                    }
                    return this[chainName](function(value) {
                      return func.apply(isArray(value) ? value : [], args);
                    });
                  };
                });

                // Map minified method names to their real names.
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                  var lodashFunc = lodash[methodName];
                  if (lodashFunc) {
                    var key = lodashFunc.name + '';
                    if (!hasOwnProperty.call(realNames, key)) {
                      realNames[key] = [];
                    }
                    realNames[key].push({ 'name': methodName, 'func': lodashFunc });
                  }
                });

                realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
                  'name': 'wrapper',
                  'func': undefined$1
                }];

                // Add methods to `LazyWrapper`.
                LazyWrapper.prototype.clone = lazyClone;
                LazyWrapper.prototype.reverse = lazyReverse;
                LazyWrapper.prototype.value = lazyValue;

                // Add chain sequence methods to the `lodash` wrapper.
                lodash.prototype.at = wrapperAt;
                lodash.prototype.chain = wrapperChain;
                lodash.prototype.commit = wrapperCommit;
                lodash.prototype.next = wrapperNext;
                lodash.prototype.plant = wrapperPlant;
                lodash.prototype.reverse = wrapperReverse;
                lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

                // Add lazy aliases.
                lodash.prototype.first = lodash.prototype.head;

                if (symIterator) {
                  lodash.prototype[symIterator] = wrapperToIterator;
                }
                return lodash;
              });

              /*--------------------------------------------------------------------------*/

              // Export lodash.
              var _ = runInContext();

              // Some AMD build optimizers, like r.js, check for condition patterns like:
              if (freeModule) {
                // Export for Node.js.
                (freeModule.exports = _)._ = _;
                // Export for CommonJS support.
                freeExports._ = _;
              }
              else {
                // Export to the global object.
                root._ = _;
              }
            }.call(commonjsGlobal));
            });

            var __dirname = '/Users/yawjosephetse/Developer/github/repetere/modelx/node_modules/csvtojson/libs/core';

            var empty = {};

            var empty$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        'default': empty
            });

            var fs = getCjsExportFromNamespace(empty$1);

            var workerMgr_1 = workerMgr;
            var eom = "\x03";
            var eom1 = "\x0e";
            var eom2 = "\x0f";

            function workerMgr() {
              var spawn = fs.spawn;
              var exports = {
                initWorker: initWorker,
                sendWorker: sendWorker,
                setParams: setParams,
                drain: function(){},
                isRunning: isRunning,
                destroyWorker: destroyWorker
              };
              var workers = [];
              var running = 0;
              var waiting = null;
              function initWorker(num, params) {
                workers = [];
                running = 0;
                waiting = null;
                for (var i = 0; i < num; i++) {
                  workers.push(new Worker(params));
                }

              }
              function isRunning() {
                return running > 0;
              }
              function destroyWorker() {
                workers.forEach(function(w) {
                  w.destroy();
                });
              }

              function sendWorker(data, startIdx, transformCb, cbResult) {
                if (workers.length > 0) {
                  var worker = workers.shift();
                  running++;
                  worker.parse(data, startIdx, function(result) {
                    // var arr=JSON.parse(result);
                    // arr.forEach(function(item){
                    //   console.log('idx',item.index)
                    // })
                    workers.push(worker);
                    cbResult(result, startIdx);
                    running--;
                    if (waiting === null && running === 0) {
                      exports.drain();
                    } else if (waiting) {
                      sendWorker.apply(this, waiting);
                      waiting = null;
                    }
                  });
                  nextTick(transformCb);
                } else {
                  waiting = [data, startIdx, transformCb, cbResult];
                }
              }

              function setParams(params) {
                workers.forEach(function(w) {
                  w.setParams(params);
                });
              }
              return exports;
            }

            function Worker(params) {
              var spawn = fs.spawn;
              this.cp = spawn(process.execPath, [__dirname + "/worker.js"], {
                env: {
                  child:true
                },
                stdio:['pipe', 'pipe', 2, 'ipc']
                // stdio:[0,1,2,'ipc']
              });
              this.setParams(params);
              this.cp.on("message", this.onChildMsg.bind(this));
              this.buffer = "";
              var self = this;
              this.cp.stdout.on("data", function(d) {
                var str = d.toString("utf8");
                var all = self.buffer + str;
                var cmdArr = all.split(eom);
                while (cmdArr.length > 1) {
                  self.onChildMsg(cmdArr.shift());
                }
                self.buffer = cmdArr[0];
              });
            }

            Worker.prototype.setParams = function(params) {
              var msg = "0" + JSON.stringify(params);
              this.sendMsg(msg);
            };

            /**
             * msg is like:
             * <cmd><data>
             * cmd is from 0-9
             */
            Worker.prototype.onChildMsg = function(msg) {
              if (msg) {
                var cmd = msg[0];
                var data = msg.substr(1);
                switch (cmd) {
                  case "0": //total line number of current chunk
                    if (this.cbLine) {
                      var sp = data.split("|");
                      var len = parseInt(sp[0]);
                      var partial = sp[1];
                      this.cbLine(len, partial);
                    }
                    break;
                  case "1": // json array of current chunk
                    if (this.cbResult) {
                      var rows = data.split(eom1);
                      rows.pop();
                      var res = [];
                      rows.forEach(function(row) {
                        var sp = row.split(eom2);
                        res.push({
                          index: sp[0],
                          row: sp[1],
                          err: sp[2] ? CSVError_1.fromArray(JSON.parse(sp[2])) : null,
                          json: sp[3]
                        });
                      });
                      this.cbResult(res);
                    }
                    break;
                }
              }
            };

            Worker.prototype.parse = function(data, startIdx, cbResult) {
              this.cbResult = cbResult;
              var msg = "1" + startIdx + "|" + data;
              this.sendMsg(msg);
            };

            Worker.prototype.destroy = function() {
              this.cp.kill();
            };

            Worker.prototype.sendMsg = function(msg) {
              this.cp.stdin.write(msg + eom, "utf8");
              // this.cp.send(msg)
            };

            var Transform$1 = Stream.Transform;


            var eol$1 = os$2.EOL;
            // var Processor = require("./Processor.js");





            var workerMgr$1 = null;


            function Converter(params, options) {
              Transform$1.call(this, options);
              this._options = options || {};
              this.param = defParam(params);
              this.param._options = this._options;
              // this.resultObject = new Result(this);
              // this.pipe(this.resultObject); // it is important to have downstream for a transform otherwise it will stuck
              this.started = false;//indicate if parsing has started.
              this.recordNum = 0;
              this.lineNumber = 0; //file line number
              this._csvLineBuffer = "";
              this.lastIndex = 0; // index in result json array
              //this._pipe(this.lineParser).pipe(this.processor);
              // this.initNoFork();
              if (this.param.forked) {
                this.param.forked = false;
                this.workerNum = 2;
              }
              this.flushCb = null;
              this.processEnd = false;
              this.sequenceBuffer = [];
              this._needJson = null;
              this._needEmitResult = null;
              this._needEmitFinalResult = null;
              this._needEmitHeader = null;
              this._needEmitJson = null;
              this._needPush = null;
              this._needEmitCsv = null;
              this._csvTransf = null;
              this.finalResult = [];
              // this.on("data", function() {});
              this.on("error", emitDone(this));
              this.on("end", emitDone(this));
              this.initWorker();
              nextTick(function () {
                if (this._needEmitFinalResult === null) {
                  this._needEmitFinalResult = this.listeners("end_parsed").length > 0;
                }
                if (this._needEmitResult === null) {
                  this._needEmitResult = this.listeners("record_parsed").length > 0;
                }
                if (this._needEmitJson === null) {
                  this._needEmitJson = this.listeners("json").length > 0;
                }
                if (this._needEmitHeader === null) {
                  this._needEmitHeader = this.listeners("header").length > 0;
                }
                if (this._needEmitCsv === null) {
                  this._needEmitCsv = this.listeners("csv").length > 0;
                }
                if (this._needJson === null) {
                  this._needJson = this._needEmitJson || this._needEmitFinalResult || this._needEmitResult || this.transform || this._options.objectMode;
                }
                if (this._needPush === null) {
                  this._needPush = this.listeners("data").length > 0 || this.listeners("readable").length > 0;
                  // this._needPush=false;
                }
                this.param._needParseJson = this._needJson || this._needPush;
              }.bind(this));

              return this;
            }

            util.inherits(Converter, Transform$1);
            function emitDone(conv) {
              return function (err) {
                if (!conv._hasDone) {
                  conv._hasDone = true;
                  nextTick(function () {
                    conv.emit('done', err);
                  });
                }  }
            }


            function bufFromString(str) {
              var length=Buffer.byteLength(str);
              var buffer = Buffer.allocUnsafe
                ? Buffer.allocUnsafe(length)
                : new Buffer(length);
              buffer.write(str);
              return buffer;
            }

            Converter.prototype._transform = function (data, encoding, cb) {
              data=this.prepareData(data);
              var idx =data.length-1;
              var left=null;
              /**
               * From Keyang:
               * The code below is to check if a single utf8 char (which could be multiple bytes) being split.
               * If the char being split, the buffer from two chunk needs to be concat
               * check how utf8 being encoded to understand the code below. 
               * If anyone has any better way to do this, please let me know.
               */
              if ((data[idx] & 1<<7) !=0){
                while ((data[idx] & 3<<6) === 128){
                  idx--;
                }
                idx--;
              }
              if (idx !=data.length-1){
                left=data.slice(idx+1);
                data=data.slice(0,idx+1);
                var _cb=cb;
                var self=this;
                cb=function(){
                  if (self._csvLineBuffer){
                    self._csvLineBuffer=Buffer.concat([bufFromString(self._csvLineBuffer),left]);
                  }else {
                    self._csvLineBuffer=left;
                  }
                  _cb();
                };
              }
              data = data.toString("utf8");
              if (this.started === false) {
                this.started = true;
                data = stripBom(data);
                if (this.param.toArrayString) {
                  if (this._needPush) {
                    this.push("[" + eol$1, "utf8");
                  }
                }
              }
              var self = this;
              this.preProcessRaw(data, function (d) {
                if (d && d.length > 0) {
                  self.processData(d, cb);
                } else {
                  cb();
                }
              });
            };

            Converter.prototype.prepareData = function (data) {
              if (this._csvLineBuffer && this._csvLineBuffer.length>0){
                if (typeof this._csvLineBuffer === "string"){
                  this._csvLineBuffer=bufFromString(this._csvLineBuffer);
                }
                return Buffer.concat([this._csvLineBuffer,data]);
              }else {
                return data;
              }
              // return this._csvLineBuffer + data;
            };

            Converter.prototype.setPartialData = function (d) {
              this._csvLineBuffer = d;
            };

            Converter.prototype.processData = function (data, cb) {
              var params = this.param;
              if (params.ignoreEmpty && !params._headers) {
                data = data.trimLeft();
              }
              var eol = this.param.eol;
              var fileLines = fileline(data, this.param);
              if (this.param.eol !== eol) {
                this.emit("eol", this.param.eol);
              }
              if (fileLines.lines.length > 0) {
                if (this.preProcessLine && typeof this.preProcessLine === "function") {
                  fileLines.lines = this._preProcessLines(fileLines.lines, this.lastIndex);
                }
                if (!params._headers) { //header is not inited. init header
                  this.processHead(fileLines, cb);
                } else {
                  if (params.workerNum <= 1) {
                    var lines = fileLineToCSVLine(fileLines, params);
                    this.setPartialData(lines.partial);
                    var jsonArr = linesToJson(lines.lines, params, this.recordNum);
                    this.processResult(jsonArr);
                    this.lastIndex += jsonArr.length;
                    this.recordNum += jsonArr.length;
                    cb();
                  } else {
                    this.workerProcess(fileLines, cb);
                  }
                }
              } else {
                this.setPartialData(fileLines.partial);
                cb();
              }
            };

            Converter.prototype._preProcessLines = function (lines, startIdx) {
              var rtn = [];
              for (var i = 0, len = lines.length; i < len; i++) {
                var result = this.preProcessLine(lines[i], startIdx + i + 1);
                if (typeof result === "string") {
                  rtn.push(result);
                } else {
                  rtn.push(lines[i]);
                  this.emit("error", new Error("preProcessLine should return a string but got: " + JSON.stringify(result)));
                }
              }
              return rtn;
            };

            Converter.prototype.initWorker = function () {
              var workerNum = this.param.workerNum - 1;
              if (workerNum > 0) {
                workerMgr$1 = workerMgr_1;
                this.workerMgr = workerMgr$1();
                this.workerMgr.initWorker(workerNum, this.param);
              }
            };

            Converter.prototype.preRawData = function (func) {
              this.preProcessRaw = func;
              return this;
            };

            Converter.prototype.preFileLine = function (func) {
              this.preProcessLine = func;
              return this;
            };

            /**
             * workerpRocess does not support embeded multiple lines.
             */
            Converter.prototype.workerProcess = function (fileLine, cb) {
              var self = this;
              var line = fileLine;
              var eol = this.getEol();
              this.setPartialData(line.partial);
              this.workerMgr.sendWorker(line.lines.join(eol) + eol, this.lastIndex, cb, function (results, lastIndex) {
                var buf;
                var cur = self.sequenceBuffer[0];
                if (cur.idx === lastIndex) {
                  cur.result = results;
                  var records = [];
                  while (self.sequenceBuffer[0] && self.sequenceBuffer[0].result) {
                    buf = self.sequenceBuffer.shift();
                    records = records.concat(buf.result);
                  }
                  self.processResult(records);
                  self.recordNum += records.length;
                } else {
                  for (var i = 0, len = self.sequenceBuffer.length; i < len; i++) {
                    buf = self.sequenceBuffer[i];
                    if (buf.idx === lastIndex) {
                      buf.result = results;
                      break;
                    }
                  }
                }
              });
              this.sequenceBuffer.push({
                idx: this.lastIndex,
                result: null
              });
              this.lastIndex += line.lines.length;
            };

            Converter.prototype.processHead = function (fileLine, cb) {
              var params = this.param;
              if (params._headers) {
                return cb();
              }
              //dirty hack
              params._needFilterRow = false;
              // if header is not inited. init header
              var lines = fileLine.lines;
              var left = "";
              var headerRow = [];
              if (!params.noheader) {
                while (lines.length) {
                  var line = left + lines.shift();
                  var delimiter = params.delimiter;
                  var row = rowSplit(line, params);
                  if (params.delimiter !== delimiter) {
                    this.emit("delimiter", params.delimiter);
                  }
                  if (row.closed) {
                    headerRow = row.cols;
                    left = "";
                    break;
                  } else {
                    left = line + this.getEol();
                  }
                }
              }
              params._needFilterRow = true;
              if (!params.noheader && headerRow.length === 0) { //if one chunk of data does not complete header row.
                this.setPartialData(left);
                return cb();
              }
              if (params.noheader) {
                if (params.headers) {
                  params._headers = params.headers;
                } else {
                  params._headers = [];
                }
              } else {
                if (params.headers) {
                  params._headers = params.headers;
                } else {
                  params._headers = headerRow;
                }
              }
              configIgnoreIncludeColumns(params);
              params._headers = filterRow(params._headers, params);
              if (this._needEmitHeader && this.param._headers) {
                this.emit("header", this.param._headers);
              }
              var delimiter = params.delimiter;
              var lines = fileLineToCSVLine(fileLine, params);
              if (params.delimiter !== delimiter) {
                this.emit("delimiter", params.delimiter);
              }
              this.setPartialData(lines.partial);
              if (this.param.workerNum > 1) {
                this.workerMgr.setParams(params);
              }
              var res = linesToJson(lines.lines, params, 0);
              // Put the header with the first row
              // if(res.length > 0) res[0].header = params._headers;
              this.processResult(res);
              this.lastIndex += res.length;
              this.recordNum += res.length;

              cb();
            };
            function configIgnoreIncludeColumns(params) {
              if (params._postIgnoreColumns) {
                for (var i = 0; i < params.ignoreColumns.length; i++) {
                  var ignoreCol = params.ignoreColumns[i];
                  if (typeof ignoreCol === "string") {
                    var idx = params._headers.indexOf(ignoreCol);
                    if (idx > -1) {
                      params.ignoreColumns[i] = idx;
                    } else {
                      params.ignoreColumns[i] = -1;
                    }
                  }
                }
                params.ignoreColumns.sort(function (a, b) { return b - a; });
              }
              if (params._postIncludeColumns) {
                for (var i = 0; i < params.includeColumns.length; i++) {
                  var includeCol = params.includeColumns[i];
                  if (typeof includeCol === "string") {
                    var idx = params._headers.indexOf(includeCol);
                    if (idx > -1) {
                      params.includeColumns[i] = idx;
                    } else {
                      params.includeColumns[i] = -1;
                    }
                  }
                }
              }
              params.ignoreColumns = lodash.uniq(params.ignoreColumns);
              params.includeColumns = lodash.uniq(params.includeColumns);
            }

            Converter.prototype.processResult = function (result) {
              for (var i = 0, len = result.length; i < len; i++) {
                var r = result[i];
                if (r.err) {
                  this.emit("error", r.err);
                } else {
                  this.emitResult(r);
                }
              }
            };

            Converter.prototype.emitResult = function (r) {
              var index = r.index;
              var header = this.param;
              var row = r.row;
              var result = r.json;
              var resultJson = null;
              var resultStr = null;
              if (typeof result === "string") {
                resultStr = result;
              } else {
                resultJson = result;
              }
              if (resultJson === null && this._needJson) {
                resultJson = JSON.parse(resultStr);
                if (typeof row === "string") {
                  row = JSON.parse(row);
                }
              }
              if (this.transform && typeof this.transform === "function") {
                this.transform(resultJson, row, index);
                resultStr = null;
              }
              if (this._needEmitJson) {
                this.emit("json", resultJson, index);
              }
              if (this._needEmitCsv) {
                if (typeof row === "string") {
                  row = JSON.parse(row);
                }
                this.emit("csv", row, index);
              }
              if (this.param.constructResult && this._needEmitFinalResult) {
                this.finalResult.push(resultJson);
              }
              if (this._needEmitResult) {
                this.emit("record_parsed", resultJson, row, index);
              }
              if (this.param.toArrayString && index > 0 && this._needPush) {
                this.push("," + eol$1);
              }
              if (this._options && this._options.objectMode) {
                this.push(resultJson);
              } else {
                if (this._needPush) {
                  if (resultStr === null) {
                    resultStr = JSON.stringify(resultJson);
                  }
                  this.push(!this.param.toArrayString ? resultStr + eol$1 : resultStr, "utf8");
                }
              }
            };

            Converter.prototype.preProcessRaw = function (data, cb) {
              cb(data);
            };

            // FIXME: lineNumber is not used.
            Converter.prototype.preProcessLine = function (line, lineNumber) {
              return line;
            };

            Converter.prototype._flush = function (cb) {
              var self = this;
              this.flushCb = function () {
                self.emit("end_parsed", self.finalResult);
                if (self.workerMgr) {
                  self.workerMgr.destroyWorker();
                }
                cb();
                if (!self._needPush) {
                  self.emit("end");
                }
              };
              if (this._csvLineBuffer.length > 0) {
                var eol = this.getEol();
                if (this._csvLineBuffer[this._csvLineBuffer.length - 1] !== eol) {
                  this._csvLineBuffer += eol;
                }
                this.processData(this._csvLineBuffer, function () {
                  this.checkAndFlush();
                }.bind(this));
              } else {
                this.checkAndFlush();
              }
              return;
            };

            Converter.prototype.checkAndFlush = function () {
              if (this._csvLineBuffer.length !== 0) {
                this.emit("error", CSVError_1.unclosed_quote(this.recordNum, this._csvLineBuffer), this._csvLineBuffer);
              }
              if (this.param.toArrayString && this._needPush) {
                this.push(eol$1 + "]", "utf8");
              }
              if (this.workerMgr && this.workerMgr.isRunning()) {
                this.workerMgr.drain = function () {
                  this.flushCb();
                }.bind(this);
              } else {
                this.flushCb();
              }
            };

            Converter.prototype.getEol = function (data) {
              if (!this.param.eol && data) {
                for (var i = 0, len = data.length; i < len; i++) {
                  if (data[i] === "\r") {
                    if (data[i + 1] === "\n") {
                      this.param.eol = "\r\n";
                    } else {
                      this.param.eol = "\r";
                    }
                    return this.param.eol;
                  } else if (data[i] === "\n") {
                    this.param.eol = "\n";
                    return this.param.eol;
                  }
                }
                this.param.eol = eol$1;
              }

              return this.param.eol || eol$1;
            };

            Converter.prototype.fromFile = function (filePath, cb, options) {
              var fs$1 = fs;
              var rs = null;
              if (typeof cb ==="object" && typeof options === "undefined"){
                options=cb;
                cb=null;
              }
              this.wrapCallback(cb, function () {
                if (rs && rs.destroy) {
                  rs.destroy();
                }
              });
              fs$1.exists(filePath, function (exist) {
                if (exist) {
                  rs = fs$1.createReadStream(filePath,options);
                  rs.pipe(this);
                } else {
                  this.emit('error', new Error("File does not exist. Check to make sure the file path to your csv is correct."));
                }
              }.bind(this));
              return this;
            };

            Converter.prototype.fromStream = function (readStream, cb) {
              if (cb && typeof cb === "function") {
                this.wrapCallback(cb);
              }
              readStream.pipe(this);
              return this;
            };

            Converter.prototype.transf = function (func) {
              this.transform = func;
              return this;
            };

            Converter.prototype.fromString = function (csvString, cb) {
              if (typeof csvString !== "string") {
                if (cb && typeof cb ==="function"){
                  return cb(new Error("Passed CSV Data is not a string."));
                }
              }
              if (cb && typeof cb === "function") {
                this.wrapCallback(cb, function () {
                });
              }
              nextTick(function () {
                this.end(csvString);
              }.bind(this));
              return this;
            };

            Converter.prototype.wrapCallback = function (cb, clean) {
              if (clean === undefined) {
                clean = function () { };
              }
              if (cb && typeof cb === "function") {
                this.once("end_parsed", function (res) {
                  if (!this.hasError) {
                    cb(null, res);
                  }
                }.bind(this));
              }
              this.once("error", function (err) {
                this.hasError = true;
                if (cb && typeof cb === "function") {
                  cb(err);
                }
                clean();
              }.bind(this));
            };

            var Converter_1 = Converter;

            var core = createCommonjsModule(function (module) {
            module.exports = constructor;
            module.exports.Converter = Converter_1;

            function constructor(param,options) {
              return new module.exports.Converter(param, options);
            }
            });
            var core_1 = core.Converter;

            function startWebServer (args) {
                args = args || {};
                var serverArgs = {
                    port: args.port || '8801',
                    urlpath: args.urlpath || '/parseCSV'
                };
                var server = http.createServer();
                server.on("request", function(req, res){
                    if (req.url === serverArgs.urlpath && req.method === "POST"){
                        req.pipe(new Converter_1({constructResult:false})).pipe(res);
                    } else {
                        res.end("Please post data to: " + serverArgs.urlpath);
                    }
                });

                server.listen(serverArgs.port);
                console.log("CSV Web Server Listen On:" + serverArgs.port);
                console.log("POST to " + serverArgs.urlpath + " with CSV data to get parsed.");
                return server;
            }
            var startWebServer_1 = startWebServer;

            var webServer = {
            	startWebServer: startWebServer_1
            };

            var web = webServer;

            /**
             * Convert input to process stdout
             */

            //implementation

            function _initConverter(){
                var csvConverter = new Converter_1();
                var started = false;
                var writeStream = process.stdout;
                csvConverter.on("record_parsed",function(rowJSON){
                    if (started){
                        writeStream.write(",\n");
                    }
                    writeStream.write(JSON.stringify(rowJSON));  //write parsed JSON object one by one.
                    if (started === false){
                        started = true;
                    }
                });
                writeStream.write("[\n"); //write array symbol

                csvConverter.on("end_parsed",function(){
                    writeStream.write("\n]"); //end array symbol
                });
                csvConverter.on("error",function(err){
                    console.error(err);
                    process.exit(-1);
                });
                return csvConverter;
            }
            function convertFile(fileName){
                var csvConverter=_initConverter();
                csvConverter.from(fileName);
            }

            function convertString(csvString){
                var csvConverter=_initConverter();
                csvConverter.from(csvString);
            }
            //module interfaces
            var convertFile_1 = convertFile;
            var convertString_1 = convertString;

            var main = {
            	convertFile: convertFile_1,
            	convertString: convertString_1
            };

            var cli = main;

            var web$1=web;
            var cli$1=cli;

            var interfaces = {
            	web: web$1,
            	cli: cli$1
            };

            //deprecated but leave it for backward compatibility
            var core$1=core;

            //live apis
            var csv2json=core;
            var interfaces$1 = interfaces;
            csv2json.core = core$1;
            csv2json.interfaces = interfaces$1;

            var csvtojson = csv2json;

            /**
             * Asynchronously loads a CSV from a remote URL and returns an array of objects
             * @example
             * // returns [{header:value,header2:value2}]
             * loadCSVURI('https://raw.githubusercontent.com/repetere/modelscript/master/test/mock/data.csv').then(csvData).catch(console.error)
             * @param {string} filepath - URL to CSV path
             * @param {Object} [options] - options passed to csvtojson
             * @returns {Object[]} returns an array of objects from a csv where each column header is the property name  
             */
            async function loadCSVURI(filepath, options) {
              const reqMethod = (filepath.search(/https/gi) > -1) ? get : get;
              return new Promise((resolve, reject) => {
                const csvData = [];
                const config = Object.assign({ checkType: true, }, options);
                const req = reqMethod(filepath, res => {
                  csvtojson(config).fromStream(res)
                    // .on('data', jsonObj => {
                    //   csvData.push(JSON.parse(jsonObj.toString()));
                    // })
                    .on('json', (jsonObj) => {
                      csvData.push(jsonObj);
                    })
                    .on('error', (err) => {
                      return reject(err);
                    })
                    .on('done', (error) => {
                      if (error) {
                        return reject(error);
                      } else {
                        return resolve(csvData);
                      }
                    });
                });
                req.on('error', reject);
              });
            }


            /**
             * Asynchronously loads a CSV from either a filepath or remote URL and returns an array of objects
             * @example
             * // returns [{header:value,header2:value2}]
             * loadCSV('../mock/invalid-file.csv').then(csvData).catch(console.error)
             * @param {string} filepath - URL to CSV path
             * @param {Object} [options] - options passed to csvtojson
             * @returns {Object[]} returns an array of objects from a csv where each column header is the property name  
             */
            async function loadCSV(filepath, options) {
              if (validUrl.isUri(filepath)) {
                return loadCSVURI(filepath, options);
              } else {
                return new Promise((resolve, reject) => {
                  const csvData = [];
                  const config = Object.assign({ checkType: true, }, options);
                  csvtojson(config).fromFile(filepath)
                    // .on('data', jsonObj => {
                    //   csvData.push(JSON.parse(jsonObj.toString()));
                    // })
                    .on('json', (jsonObj) => {
                      csvData.push(jsonObj);
                    })
                    .on('error', (err) => {
                      return reject(err);
                    })
                    .on('done', (error) => {
                      if (error) {
                        return reject(error);
                      } else {
                        return resolve(csvData);
                      }
                    });
                });
              }
            }

            /**
             * Asynchronously loads a TSV from either a filepath or remote URL and returns an array of objects
             * @example
             * // returns [{header:value,header2:value2}]
             * loadCSV('../mock/invalid-file.tsv').then(csvData).catch(console.error)
             * @param {string} filepath - URL to CSV path
             * @param {Object} [options] - options passed to csvtojson
             * @returns {Object[]} returns an array of objects from a csv where each column header is the property name  
             */
            async function loadTSV(filepath, options) {
              const tsvOptions = Object.assign({
                checkType: true,
              }, options, {
                delimiter: '\t',
              });
              return loadCSV(filepath, tsvOptions);
            }

            var csvUtils = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        loadCSVURI: loadCSVURI,
                        loadCSV: loadCSV,
                        loadTSV: loadTSV
            });

            /* ================================================================
             * probability-distributions by Matt Asher (me[at]mattasher.com)
             * Originally created for StatisticsBlog.com
             *
             * first created at : Sat Oct 10 2015
             *
             * ================================================================
             * Copyright 2015 Matt Asher
             *
             * Licensed under the MIT License
             * You may not use this file except in compliance with the License.
             *
             * ================================================================ */



            // Shortcuts
            var exp = Math.exp;
            var ln = Math.log;
            var PI = Math.PI;
            var pow = Math.pow;

            var probabilityDistributions = {

                /**
                 * This is the core function for generating entropy
                 *
                 * @param len number of bytes of entropy to create
                 * @returns {number} A pseduo random number between 0 and 1
                 *
                 */
                prng: function(len) {
                    if(len === undefined) len=16;

                    var entropy = fs.randomBytes(len);
                    var result = 0;

                    for(var i=0; i<len; i++) {
                        result = result + Number(entropy[i])/Math.pow(256,(i+1));
                    }
                    return result
                },




                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param alpha First shape parameter
                 * @param beta Second shape parameter
                 * @param loc Location or Non-centrality parameter
                 */
                rbeta: function(n, alpha, beta, loc) {
                    // Uses relationship with gamma to calculate

                    // Validations
                    n = this._v(n, "n");
                    alpha = this._v(alpha, "nn", 1);
                    beta = this._v(beta, "nn", 1);
                    loc =  this._v(loc, "r", 0);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var g1 = this.rgamma(1, alpha, 1)[0];
                        var g2 = this.rgamma(1, beta, 1)[0];


                        toReturn[i] = loc + g1/(g1+g2);
                    }
                    return toReturn

                },


                /**
                 *
                 * @param n Number of variates to return.
                 * @param size Number of Bernoulli trials to be summed up. Defaults to 1
                 * @param p Probability of a "success". Defaults to 0.5
                 * @returns {Array} Random variates array
                 */
                rbinom: function(n, size, p) {
                    n = this._v(n, "n");
                    size = this._v(size, "nni", 1);
                    p = this._v(p, "p", 0.5);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var result = 0;
                        for(var j=0; j<size; j++) {
                            if(this.prng() < p) {
                                result++;
                            }
                        }
                        toReturn[i] = result;
                    }
                    return toReturn
                },


                /**
                 *
                 * @param n The number of variates to create
                 * @param loc Location parameter
                 * @param scale Scale parameter
                 * @returns {Array} Random variates array
                 */
                rcauchy: function(n, loc, scale) {
                    n = this._v(n, "n");
                    loc = this._v(loc, "r", 0);
                    scale = this._v(scale, "nn", 1);

                    var toReturn = [];
                    for(var i=0; i<n; i++) {
                        var x = scale * Math.tan(PI * (this.prng()-0.5))+loc;

                        toReturn[i] = x;
                    }

                    return toReturn
                },

                /**
                 *
                 * @param n The number of variates to create
                 * @param df Degrees of freedom for the distribution
                 * @param ncp Non-centrality parameter
                 * @returns {Array} Random variates array
                 */
                rchisq: function(n, df, ncp) {
                    n = this._v(n, "n");
                    df = this._v(df, "nn");
                    ncp = this._v(ncp, "r", 0);

                    var toReturn = [];
                    for(var i=0; i<n; i++) {
                        // Start at ncp
                        var x = ncp;
                        for(var j=0; j<df; j++) {
                            x = x + Math.pow(this.rnorm(1)[0],2);
                        }
                        toReturn[i] = x;
                    }
                    return toReturn
                },

                /**
                 *
                 * @param x Where to sample the density
                 * @param rate The rate parameter. Must be a positive number
                 * @returns {Number} The density given the parameter values
                 */
                dexp: function(x, rate) {
                    x = this._v(x, "r");
                    rate = this._v(rate, "pos", 1);
                    if(x < 0) return 0

                    return rate * exp(-rate * x)
                },

                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param rate The rate parameter. Must be a positive number
                 */
                rexp: function(n, rate) {
                    n = this._v(n, "n");
                    rate = this._v(rate, "pos", 1);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {

                        toReturn[i] =  -ln(this.prng())/rate;
                    }

                    return toReturn
                },

                /**
                 *
                 * @param n The number of variates to create
                 * @param df1 Degrees of freedom for the first parameter
                 * @param df2 Degrees of freedom for the first parameter
                 * @returns {Array} Random variates array
                 */
                rf: function(n, df1, df2) {
                    n = this._v(n, "n");
                    df1 = this._v(df1, "nn");
                    df2 = this._v(df2, "nn");

                    var toReturn = [];
                    for(var i=0; i<n; i++) {
                        var num = this.rchisq(1, df1)[0]/df1;
                        var denom = this.rchisq(1, df2)[0]/df2;

                        toReturn[i] = num/denom;
                    }

                    return toReturn

                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer
                 * @param alpha
                 * @param rate
                 * @returns {Array} Random variates array
                 */
                rgamma: function(n, alpha, rate) {
                    // Adapted from https://github.com/mvarshney/simjs-source/ & scipy
                    n = this._v(n, "n");
                    alpha = this._v(alpha, "nn");
                    rate = this._v(rate, "pos", 1);

                    var LOG4 = ln(4.0);
                    var SG_MAGICCONST = 1.0 + ln(4.5);
                    var beta = 1/rate;

                    var toReturn = [];
                    for(var i = 0; i<n; i++) {

                        /* Based on Python 2.6 source code of random.py.
                         */

                        if (alpha > 1.0) {
                            var ainv = Math.sqrt(2.0 * alpha - 1.0);
                            var bbb = alpha - LOG4;
                            var ccc = alpha + ainv;

                            while (true) {
                                var u1 = this.prng();
                                if ((u1 < 1e-7) || (u > 0.9999999)) {
                                    continue;
                                }
                                var u2 = 1.0 - this.prng();
                                var v = ln(u1 / (1.0 - u1)) / ainv;
                                var x = alpha * exp(v);
                                var z = u1 * u1 * u2;
                                var r = bbb + ccc * v - x;
                                if ((r + SG_MAGICCONST - 4.5 * z >= 0.0) || (r >= ln(z))) {
                                    var result = x * beta;
                                    break;
                                }
                            }
                        } else if (alpha == 1.0) {
                            var u = this.prng();
                            while (u <= 1e-7) {
                                u = this.prng();
                            }
                            var result = - ln(u) * beta;
                        } else {
                            while (true) {
                                var u = this.prng();
                                var b = (Math.E + alpha) / Math.E;
                                var p = b * u;
                                if (p <= 1.0) {
                                    var x = Math.pow(p, 1.0 / alpha);
                                } else {
                                    var x = - ln((b - p) / alpha);
                                }
                                var u1 = this.prng();
                                if (p > 1.0) {
                                    if (u1 <= Math.pow(x, (alpha - 1.0))) {
                                        break;
                                    }
                                } else if (u1 <= exp(-x)) {
                                    break;
                                }
                            }
                            var result =  x * beta;
                        }

                        toReturn[i] = result;
                    }

                    return toReturn;

                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer
                 * @param min Minimum value
                 * @param max Maximum value
                 * @param inclusive By default the minimum and maximum are inclusive. To make exclusive, set to false
                 * @returns {Array}
                 */
                rint: function(n, min, max, inclusive) {
                    n = this._v(n, "n");
                    min = this._v(min, "int");
                    max = this._v(max, "int");
                    if(inclusive === false) {
                        min++;
                        if(min === max) throw new Error("Minimum value cannot be greater than maximum value. For non-inclusive, minimum and maximum must be separated by at least 2.");
                    } else {
                        max++;
                    }

                    if(min > max) throw new Error("Minimum value cannot be greater than maximum value. For non-inclusive, minimum and maximum must be separated by at least 2.");

                    var toReturn = [];

                    var raw = this.runif(n, min, max);

                    for(var i=0; i<n; i++) {
                        toReturn[i] = Math.floor(raw[i]);
                    }

                    return toReturn
                },

                // Syntax as in R library VGAM
                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer
                 * @param loc Mean
                 * @param scale Scale parameter
                 * @returns {Array} Random variates array
                 */
                rlaplace: function(n, loc, scale) {
                    n = this._v(n, "n");
                    loc = this._v(loc, "r", 0);
                    scale = this._v(scale, "nn", 1);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var core = this.sample([-1,1])[0] * ln(this.prng());

                        var x = loc - scale * core;

                        toReturn[i] = x;
                    }

                    return toReturn
                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param meanlog The mean log.
                 * @param sdlog Log SD. Must be greater than 0.
                 * @returns {Array} Random variates array
                 */
                rlnorm: function(n, meanlog, sdlog) {
                    n = this._v(n, "n");
                    meanlog = this._v(meanlog, "r", 0);
                    sdlog = this._v(sdlog, "nn", 1);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var x = this.rnorm(1, meanlog, sdlog)[0];

                        toReturn[i] = exp(x);
                    }

                    return toReturn
                },

                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param size Number of hits required
                 * @param p Hit probability
                 * @param mu Optional way to specify hit probability
                 * @returns {Array} Random variates array
                 */
                rnbinom: function(n, size, p, mu) {
                    n = this._v(n, "n");
                    if(size === undefined) size=1;
                    if(Math.round(size) != size) throw new Error("Size must be a whole number");
                    if(size < 1) throw new Error("Size must be one or greater");
                    if(p !== undefined && mu !== undefined) throw new Error("You must specify probability or mean, not both");
                    if(mu !== undefined) p = size/(size+mu);
                    p = this._v(p, "p");


                    var toReturn = [];

                    for(var i=0; i<n; i++) {

                        // Core distribution
                        var result = 0;
                        var leftToFind = size;
                        while(leftToFind > 0) {
                            result++;
                            if(this.prng() < p) leftToFind--;
                        }

                        toReturn[i] = result - 1;
                    }

                    return toReturn

                },

                /**
                 *
                 * @param x Where to sample the density
                 * @param mean Mean of the distribution
                 * @param sd Standard deviation for the distribution
                 * @returns {Number} The density given the parameter values
                 */
                dnorm: function(x, mean, sd) {
                    x = this._v(x, "r");
                    mean = this._v(mean, "r", 0);
                    sd = this._v(sd, "nn", 1);

                    // Check for degeneracy
                    if(sd === 0) {
                        if(x === mean) return Infinity;
                        return 0
                    }

                    var a = sd*(Math.sqrt(2*PI));
                    var b = -(x-mean)*(x-mean);
                    var c = 2*sd*sd;

                    return (1/a)*exp(b/c)
                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param mean Mean of the distribution
                 * @param sd Standard Deviation of the distribution
                 * @returns {Array} Random variates array
                 */
                rnorm: function(n, mean, sd) {
                    // Adapted from http://blog.yjl.im/2010/09/simulating-normal-random-variable-using.html

                    n = this._v(n, "n");
                    mean = this._v(mean, "r", 0);
                    sd = this._v(sd, "nn", 1);

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var V1, V2, S, X;

                        do {
                            var U1 = this.prng();
                            var U2 = this.prng();
                            V1 = (2 * U1) - 1;
                            V2 = (2 * U2) - 1;
                            S = (V1 * V1) + (V2 * V2);
                        } while (S > 1);

                        X = Math.sqrt(-2 * ln(S) / S) * V1;
                        X = mean + sd * X;
                        toReturn.push(X);
                    }

                    return toReturn
                },


                /**
                 *
                 * @param x Where to sample the density
                 * @param lambda Mean/variance
                 * @returns {Number} The density given the parameter values
                 */
                dpois: function(x, lambda) {
                    x = this._v(x, "nni");
                    lambda = this._v(lambda, "nn");

                    // Check for degeneracy
                    if(lambda === 0) {
                        if(x === 0) return 1;
                        return 0
                    }

                    var a = pow(lambda, x);
                    var b = exp(-lambda);
                    var c = this._factorial(x);

                    return a*b/c
                },


                /**
                 *
                 * @param n The number of random variates to create. Must be a positive integer.
                 * @param lambda Mean/Variance of the distribution
                 * @returns {Array} Random variates array
                 */
                rpois: function(n, lambda) {
                    n = this._v(n, "n");
                    lambda = this._v(lambda, "pos");

                    var toReturn = [];

                    for(var i=0; i<n; i++) {

                        // Adapted from http://wiki.q-researchsoftware.com/wiki/How_to_Generate_Random_Numbers:_Poisson_Distribution
                        if (lambda < 30) {

                            var L = exp(-lambda);
                            var p = 1;
                            var k = 0;
                            do {
                                k++;
                                p *= this.prng();
                            } while (p > L);
                            toReturn.push(k - 1);

                        } else {

                            // Roll our own
                            // Fix total number of samples
                            var samples = 10000;
                            var p = lambda/samples;
                            var k = 0;
                            for(var j=0; j<samples; j++) {
                                if(this.prng() < p) {
                                    k++;
                                }
                            }
                            toReturn[i] = k;
                        }
                    }

                    return toReturn
                },

                /**
                 * Density function for uniform distribution
                 *
                 * @param x Location to get density for
                 * @param min {number} Minimum value
                 * @param max {number} Maximum value
                 * @returns {number} Density of the function given the location and parameters
                 */
                dunif: function(x, min, max) {
                    x = this._v(x, "r");
                    min = this._v(min, "r", 0);
                    max = this._v(max, "r", 1);
                    if(min > max) throw new Error("Minimum value cannot be greater than maximum value");

                    if(x < min || x > max) return 0;
                    if(min === max) return Infinity;


                    return 1/(max-min);
                },


                /**
                 *
                 * @param n  Number of variates to return
                 * @param min Lower bound
                 * @param max Upper bound
                 * @returns {Array} Random variates array
                 */
                runif: function(n, min, max) {
                    n = this._v(n, "n");
                    min = this._v(min, "r", 0);
                    max = this._v(max, "r", 1);
                    if(min > max) throw new Error("Minimum value cannot be greater than maximum value");

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var raw = this.prng();
                        var scaled = min + raw*(max-min);
                        toReturn.push(scaled);
                    }
                    return toReturn
                },

                /**
                 * Generate a random word of specified length using library of characters. Uses English alphabet if no library is specified
                 * @param len Number of letters in this word
                 * @param {string} alphabet to use
                 * @returns {string} String of randomly selected characters from the alphabet
                 */
                rword: function(len, alphabet) {
                    len = this._v(len, "n");
                    alphabet = this._v(alphabet, "str", "abcdefghijklmnopqrstuvwxyz");

                    var lib = alphabet.split("");
                    var arr = this.sample(lib, len, true);

                    return arr.join("");
                },


                /**
                 *
                 * @param collection Array of items to sample from
                 * @param n Number of items to sample. If missing, n will be set to the length of the collection and it will shuffle
                 * @param replace Sample with replacement? False by default
                 * @param ratios Ratios to weight items. Can be any non-negative number. By default all items are given equal weight
                 * @returns {Array} Array of sampled items
                 */
                sample: function(collection, n, replace, ratios) {

                    // Validations
                    collection = this._v(collection, "a");
                    n = this._v(n, "n", collection.length); // If n is undefined, sample the full array
                    if(replace === undefined) replace = false;
                    if(!replace && collection.length < n)
                        throw new Error("You cannot select " + n + " items from an array of length " + collection.length + " without replacement");

                    if(ratios === undefined) {
                        ratios = [];
                        for(var m=0; m<collection.length; m++) { ratios[m] = 1; }
                    }

                    var cumulativeProbs = this._getCumulativeProbs(ratios, collection.length);

                    // Main loop
                    var toReturn = [];

                    for(var i=0; i<n; i++) {

                        var chosen = this._sampleOneIndex(cumulativeProbs);

                        if(replace) {
                            toReturn[i] = collection[chosen];
                        } else {

                            // Remove from collection and ratios
                            toReturn[i] = collection.splice(chosen, 1)[0];
                            ratios.splice(chosen, 1);

                            // Make sure we aren't at the end
                            if(ratios.length) {
                                cumulativeProbs = this._getCumulativeProbs(ratios, collection.length);
                            }
                        }
                    }

                    return toReturn;

                },


                /**
                 *
                 * @param data Array of data to display
                 * @param domID String ID of the DOM element to use for display. This must ALREADY exist on your page
                 * @param options Object see below for details
                 *
                 * IMPORTANT: This is not a "pure" function, it takes a DOM element ID as an argument and modifies (completely overwrites)
                 * that element.
                 *
                 * IMPORTANT 2: options.conditions are eval'd so don't send untrusted code sent to this function!
                 *
                 */
                visualize: function(data, domID, options) {
                    var defaultOptions = {
                        lag: 1000, // Timing multiplier in milliseconds
                        blank: "", // What to show when no number is shown
                        inf: "&infin;", // Symbol to indicate infinity
                        loop: true, // When done, start again at beginning at end of array
                        conditions: "", // This is eval'd and checked against true. Example, "x > 3 && x < 10". Use "x" as the variable.
                        arrivalTimes: false,
                        arrivalSymbol: '<span class="pd-arrival">&#8226;</span>',
                        arrivalFlashTime: 0.25,
                        significantDigits: 0 // 0 will show as many as JS provides, or choose a number to limit
                    };

                    if(typeof options === "undefined") options = {};

                    // Merge defaultOptions with user options favoring user options
                    for (var property in defaultOptions) {
                        if (defaultOptions.hasOwnProperty(property)) {
                            if(typeof options[property] === "undefined") {
                                options[property] = defaultOptions[property];
                            }
                        }
                    }

                    // Elem is a DOM element to output to
                    var elem = document.getElementById(domID);
                    if(!elem) throw new Error("Unable to find DOM element " + domID);

                    var len = data.length, i = 0;

                    var format = function(x) {
                        var x = data[i];

                        // Are we showing only certain things
                        if(options.conditions) {

                            // Check for only allowed characters, this is NOT complete security
                            if(!/^[x\&\|=0-9\<\>\s\-\.]+$/.test(options.conditions)) throw new Error("Bad input sent to options.conditions");

                            if (eval(options.conditions) !== true) {
                                x = options.blank;
                                return x
                            }
                        }

                        if(options.significantDigits) {
                            x = x.toPrecision(options.significantDigits);
                        }

                        if(x === Infinity) {
                            x = options.inf;
                        }
                        return x;
                    };


                    if(options.arrivalTimes) {
                        var blankOut = function() {
                            setTimeout(function() {
                                elem.innerHTML = options.blank;
                            }, options.arrivalFlashTime*options.lag);
                        };

                        var cycle = function() {

                            elem.innerHTML = options.arrivalSymbol;
                            blankOut();
                            if(++i === len) i = 0;

                            if(options.loop || i !== 0) {
                                setTimeout(cycle, data[i]*options.lag);
                            } else {
                                // End on a blank
                                elem.innerHTML = options.blank;
                            }
                        };
                        cycle();

                    } else {
                        var update = function() {
                            // Main vis for non-arrival numbers

                            elem.innerHTML = format(data[i]);
                            if(++i === len) i = 0;

                            if(options.loop || i !== 0) {
                                setTimeout(update, options.lag);
                            } else {
                                // End on a blank
                                setTimeout(function() { elem.innerHTML = options.blank; }, options.lag);

                            }
                        };
                        update();
                    }
                },


                // HELPERS

                /**
                 *
                 * @param ratios Array of non-negative numbers to be turned into CDF
                 * @param len length of the collection
                 * @returns {Array}
                 * @private
                 */
                _getCumulativeProbs: function(ratios, len) {
                    if(len === undefined) throw new Error("An error occurred: len was not sent to _getCumulativeProbs");
                    if(ratios.length !== len) throw new Error("Probabilities for sample must be same length as the array to sample from");

                    var toReturn = [];

                    if(ratios !== undefined) {
                        ratios = this._v(ratios, "a");
                        if(ratios.length !== len) throw new Error("Probabilities array must be the same length as the array you are sampling from");

                        var sum = 0;
                        ratios.map(function(ratio) {
                            ratio = this._v(ratio, "nn"); // Note validating as ANY non-negative number
                            sum+= ratio;
                            toReturn.push(sum);
                        }.bind(this));

                        // Divide by total to normalize
                        for(var k=0; k<toReturn.length; k++) { toReturn[k] = toReturn[k]/sum; }
                        return toReturn
                    }
                },

                _sampleOneIndex: function(cumulativeProbs) {

                    var toTake = this.prng();

                    // Find out where this lands in weights
                    var cur = 0;
                    while(toTake > cumulativeProbs[cur]) cur++;

                    return cur;
                },

                _factorial: function(n) {
                    var toReturn=1;
                    for (var i = 2; i <= n; i++)
                        toReturn = toReturn * i;

                    return toReturn;
                },

                // Return default if undefined, otherwise validate
                // Return a COPY of the validated parameter
                _v: function(param, type, defaultParam) {
                    if(param == null && defaultParam != null)
                        return defaultParam;

                    switch(type) {

                        // Array of 1 item or more
                        case "a":
                            if(!Array.isArray(param) || !param.length) throw new Error("Expected an array of length 1 or greater");
                            return param.slice(0);

                        // Integer
                        case "int":
                            if(param !== Number(param)) throw new Error("A required parameter is missing or not a number");
                            if(param !== Math.round(param)) throw new Error("Parameter must be a whole number");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Natural number
                        case "n":
                            if(param === undefined) throw new Error("You must specify how many values you want");
                            if(param !== Number(param)) throw new Error("The number of values must be numeric");
                            if(param !== Math.round(param)) throw new Error("The number of values must be a whole number");
                            if(param < 1) throw new Error("The number of values must be a whole number of 1 or greater");
                            if(param === Infinity) throw new Error("The number of values cannot be infinite ;-)");
                            return param;

                        // Valid probability
                        case "p":
                            if(Number(param) !== param) throw new Error("Probability value is missing or not a number");
                            if(param > 1) throw new Error("Probability values cannot be greater than 1");
                            if(param < 0) throw new Error("Probability values cannot be less than 0");
                            return param;

                        // Positive numbers
                        case "pos":
                            if(Number(param) !== param) throw new Error("A required parameter is missing or not a number");
                            if(param <= 0) throw new Error("Parameter must be greater than 0");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Look for numbers (reals)
                        case "r":
                            if(Number(param) !== param) throw new Error("A required parameter is missing or not a number");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Non negative real number
                        case "nn":
                            if(param !== Number(param)) throw new Error("A required parameter is missing or not a number");
                            if(param < 0) throw new Error("Parameter cannot be less than 0");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Non negative whole number (integer)
                        case "nni":
                            if(param !== Number(param)) throw new Error("A required parameter is missing or not a number");
                            if(param !== Math.round(param)) throw new Error("Parameter must be a whole number");
                            if(param < 0) throw new Error("Parameter cannot be less than zero");
                            if(param === Infinity) throw new Error("Sent 'infinity' as a parameter");
                            return param;

                        // Non-empty string
                        case "str":
                            if(param !== String(param)) throw new Error("A required parameter is missing or not a string");
                            if(param.length === 0) throw new Error("Parameter must be at least one character long");
                            return param;


                    }
                },




                //    ________   _______  ______ _____  _____ __  __ ______ _   _ _______       _
                //   |  ____\ \ / /  __ \|  ____|  __ \|_   _|  \/  |  ____| \ | |__   __|/\   | |
                //   | |__   \ V /| |__) | |__  | |__) | | | | \  / | |__  |  \| |  | |  /  \  | |
                //   |  __|   > < |  ___/|  __| |  _  /  | | | |\/| |  __| | . ` |  | | / /\ \ | |
                //   | |____ / . \| |    | |____| | \ \ _| |_| |  | | |____| |\  |  | |/ ____ \| |____
                //   |______/_/ \_\_|    |______|_|  \_\_____|_|  |_|______|_| \_|  |_/_/    \_\______|

                /**
                 *
                 * @param n Number of variates to return
                 * @param loc Starting point. Must be a non-negative integer. 0 for degenerate distribution of 0.
                 * @param p Probability of moving towards finish
                 * @param cap Maximum steps before giving up
                 * @param trace Variable to track progress
                 * @returns {Array} Random variates array
                 *
                 * The FML distribution is a is based on the number of steps taken to return to the origin
                 * from a given position, with transition probabilities set at the beginning by picking a
                 * random variate from U(0,1).
                 */
                rfml: function (n, loc, p, cap, trace) {
                    n = this._v(n, "n");
                    loc = this._v(loc, "nni", 1);
                    if(p === undefined) p=this.prng;
                    cap = this._v(cap, "n", 10000);
                    if(trace === undefined) trace={};

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        var x = 0;
                        var s = loc;
                        var currP = p();
                        if(loc === 0) {

                            toReturn[i] = 0;
                        } else {

                            do {

                                var trial = this.prng();
                                if(trial < currP) {
                                    s++;
                                    trace[String(i) + "_" + String(x)] = { problems: s, p: currP, result: 1 };
                                } else {
                                    s--;
                                    trace[String(i) + "_" + String(x)] = { problems: s, p: currP, result: -1 };
                                }
                                x++;
                            } while(s > 0 && x < cap);

                            if(x === cap) x = -1; // Indicate we failed to do it in time.
                            toReturn[i] = x;
                        }
                    }
                    return toReturn
                },

                // http://www.statisticsblog.com/2013/05/uncovering-the-unreliable-friend-distribution-a-case-study-in-the-limits-of-mc-methods/
                /**
                 *
                 * The Unrelaible Friend distribution
                 * @param n
                 * @returns {Array} Random variates array
                 */
                ruf: function(n) {
                    n = this._v(n, "n");

                    var toReturn = [];

                    for(var i=0; i<n; i++) {
                        toReturn[i] = this.rexp(1, this.prng())[0];
                    }

                    return toReturn
                }
            };

            var stemmer_1 = stemmer;

            // Standard suffix manipulations.
            var step2list = {
              ational: 'ate',
              tional: 'tion',
              enci: 'ence',
              anci: 'ance',
              izer: 'ize',
              bli: 'ble',
              alli: 'al',
              entli: 'ent',
              eli: 'e',
              ousli: 'ous',
              ization: 'ize',
              ation: 'ate',
              ator: 'ate',
              alism: 'al',
              iveness: 'ive',
              fulness: 'ful',
              ousness: 'ous',
              aliti: 'al',
              iviti: 'ive',
              biliti: 'ble',
              logi: 'log'
            };

            var step3list = {
              icate: 'ic',
              ative: '',
              alize: 'al',
              iciti: 'ic',
              ical: 'ic',
              ful: '',
              ness: ''
            };

            // Consonant-vowel sequences.
            var consonant = '[^aeiou]';
            var vowel = '[aeiouy]';
            var consonants = '(' + consonant + '[^aeiouy]*)';
            var vowels = '(' + vowel + '[aeiou]*)';

            var gt0 = new RegExp('^' + consonants + '?' + vowels + consonants);
            var eq1 = new RegExp(
              '^' + consonants + '?' + vowels + consonants + vowels + '?$'
            );
            var gt1 = new RegExp('^' + consonants + '?(' + vowels + consonants + '){2,}');
            var vowelInStem = new RegExp('^' + consonants + '?' + vowel);
            var consonantLike = new RegExp('^' + consonants + vowel + '[^aeiouwxy]$');

            // Exception expressions.
            var sfxLl = /ll$/;
            var sfxE = /^(.+?)e$/;
            var sfxY = /^(.+?)y$/;
            var sfxIon = /^(.+?(s|t))(ion)$/;
            var sfxEdOrIng = /^(.+?)(ed|ing)$/;
            var sfxAtOrBlOrIz = /(at|bl|iz)$/;
            var sfxEED = /^(.+?)eed$/;
            var sfxS = /^.+?[^s]s$/;
            var sfxSsesOrIes = /^.+?(ss|i)es$/;
            var sfxMultiConsonantLike = /([^aeiouylsz])\1$/;
            var step2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;
            var step3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;
            var step4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;

            // Stem `value`.
            // eslint-disable-next-line complexity
            function stemmer(value) {
              var firstCharacterWasLowerCaseY;
              var match;

              value = String(value).toLowerCase();

              // Exit early.
              if (value.length < 3) {
                return value
              }

              // Detect initial `y`, make sure it never matches.
              if (
                value.charCodeAt(0) === 121 // Lowercase Y
              ) {
                firstCharacterWasLowerCaseY = true;
                value = 'Y' + value.slice(1);
              }

              // Step 1a.
              if (sfxSsesOrIes.test(value)) {
                // Remove last two characters.
                value = value.slice(0, value.length - 2);
              } else if (sfxS.test(value)) {
                // Remove last character.
                value = value.slice(0, value.length - 1);
              }

              // Step 1b.
              if ((match = sfxEED.exec(value))) {
                if (gt0.test(match[1])) {
                  // Remove last character.
                  value = value.slice(0, value.length - 1);
                }
              } else if ((match = sfxEdOrIng.exec(value)) && vowelInStem.test(match[1])) {
                value = match[1];

                if (sfxAtOrBlOrIz.test(value)) {
                  // Append `e`.
                  value += 'e';
                } else if (sfxMultiConsonantLike.test(value)) {
                  // Remove last character.
                  value = value.slice(0, value.length - 1);
                } else if (consonantLike.test(value)) {
                  // Append `e`.
                  value += 'e';
                }
              }

              // Step 1c.
              if ((match = sfxY.exec(value)) && vowelInStem.test(match[1])) {
                // Remove suffixing `y` and append `i`.
                value = match[1] + 'i';
              }

              // Step 2.
              if ((match = step2.exec(value)) && gt0.test(match[1])) {
                value = match[1] + step2list[match[2]];
              }

              // Step 3.
              if ((match = step3.exec(value)) && gt0.test(match[1])) {
                value = match[1] + step3list[match[2]];
              }

              // Step 4.
              if ((match = step4.exec(value))) {
                if (gt1.test(match[1])) {
                  value = match[1];
                }
              } else if ((match = sfxIon.exec(value)) && gt1.test(match[1])) {
                value = match[1];
              }

              // Step 5.
              if (
                (match = sfxE.exec(value)) &&
                (gt1.test(match[1]) ||
                  (eq1.test(match[1]) && !consonantLike.test(match[1])))
              ) {
                value = match[1];
              }

              if (sfxLl.test(value) && gt1.test(value)) {
                value = value.slice(0, value.length - 1);
              }

              // Turn initial `Y` back to `y`.
              if (firstCharacterWasLowerCaseY) {
                value = 'y' + value.slice(1);
              }

              return value
            }

            const natural = {
              PorterStemmer: {
                tokenizeAndStem: (input = '')=> {
                  return stemmer_1(input).split(' ');
                }
              }
            };

            var array = createCommonjsModule(function (module, exports) {

            function compareNumbers(a, b) {
                return a - b;
            }

            /**
             * Computes the sum of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.sum = function sum(values) {
                var sum = 0;
                for (var i = 0; i < values.length; i++) {
                    sum += values[i];
                }
                return sum;
            };

            /**
             * Computes the maximum of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.max = function max(values) {
                var max = values[0];
                var l = values.length;
                for (var i = 1; i < l; i++) {
                    if (values[i] > max) max = values[i];
                }
                return max;
            };

            /**
             * Computes the minimum of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.min = function min(values) {
                var min = values[0];
                var l = values.length;
                for (var i = 1; i < l; i++) {
                    if (values[i] < min) min = values[i];
                }
                return min;
            };

            /**
             * Computes the min and max of the given values
             * @param {Array} values
             * @returns {{min: number, max: number}}
             */
            exports.minMax = function minMax(values) {
                var min = values[0];
                var max = values[0];
                var l = values.length;
                for (var i = 1; i < l; i++) {
                    if (values[i] < min) min = values[i];
                    if (values[i] > max) max = values[i];
                }
                return {
                    min: min,
                    max: max
                };
            };

            /**
             * Computes the arithmetic mean of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.arithmeticMean = function arithmeticMean(values) {
                var sum = 0;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    sum += values[i];
                }
                return sum / l;
            };

            /**
             * {@link arithmeticMean}
             */
            exports.mean = exports.arithmeticMean;

            /**
             * Computes the geometric mean of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.geometricMean = function geometricMean(values) {
                var mul = 1;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    mul *= values[i];
                }
                return Math.pow(mul, 1 / l);
            };

            /**
             * Computes the mean of the log of the given values
             * If the return value is exponentiated, it gives the same result as the
             * geometric mean.
             * @param {Array} values
             * @returns {number}
             */
            exports.logMean = function logMean(values) {
                var lnsum = 0;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    lnsum += Math.log(values[i]);
                }
                return lnsum / l;
            };

            /**
             * Computes the weighted grand mean for a list of means and sample sizes
             * @param {Array} means - Mean values for each set of samples
             * @param {Array} samples - Number of original values for each set of samples
             * @returns {number}
             */
            exports.grandMean = function grandMean(means, samples) {
                var sum = 0;
                var n = 0;
                var l = means.length;
                for (var i = 0; i < l; i++) {
                    sum += samples[i] * means[i];
                    n += samples[i];
                }
                return sum / n;
            };

            /**
             * Computes the truncated mean of the given values using a given percentage
             * @param {Array} values
             * @param {number} percent - The percentage of values to keep (range: [0,1])
             * @param {boolean} [alreadySorted=false]
             * @returns {number}
             */
            exports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {
                if (alreadySorted === undefined) alreadySorted = false;
                if (!alreadySorted) {
                    values = [].concat(values).sort(compareNumbers);
                }
                var l = values.length;
                var k = Math.floor(l * percent);
                var sum = 0;
                for (var i = k; i < (l - k); i++) {
                    sum += values[i];
                }
                return sum / (l - 2 * k);
            };

            /**
             * Computes the harmonic mean of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.harmonicMean = function harmonicMean(values) {
                var sum = 0;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    if (values[i] === 0) {
                        throw new RangeError('value at index ' + i + 'is zero');
                    }
                    sum += 1 / values[i];
                }
                return l / sum;
            };

            /**
             * Computes the contraharmonic mean of the given values
             * @param {Array} values
             * @returns {number}
             */
            exports.contraHarmonicMean = function contraHarmonicMean(values) {
                var r1 = 0;
                var r2 = 0;
                var l = values.length;
                for (var i = 0; i < l; i++) {
                    r1 += values[i] * values[i];
                    r2 += values[i];
                }
                if (r2 < 0) {
                    throw new RangeError('sum of values is negative');
                }
                return r1 / r2;
            };

            /**
             * Computes the median of the given values
             * @param {Array} values
             * @param {boolean} [alreadySorted=false]
             * @returns {number}
             */
            exports.median = function median(values, alreadySorted) {
                if (alreadySorted === undefined) alreadySorted = false;
                if (!alreadySorted) {
                    values = [].concat(values).sort(compareNumbers);
                }
                var l = values.length;
                var half = Math.floor(l / 2);
                if (l % 2 === 0) {
                    return (values[half - 1] + values[half]) * 0.5;
                } else {
                    return values[half];
                }
            };

            /**
             * Computes the variance of the given values
             * @param {Array} values
             * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.
             * @returns {number}
             */
            exports.variance = function variance(values, unbiased) {
                if (unbiased === undefined) unbiased = true;
                var theMean = exports.mean(values);
                var theVariance = 0;
                var l = values.length;

                for (var i = 0; i < l; i++) {
                    var x = values[i] - theMean;
                    theVariance += x * x;
                }

                if (unbiased) {
                    return theVariance / (l - 1);
                } else {
                    return theVariance / l;
                }
            };

            /**
             * Computes the standard deviation of the given values
             * @param {Array} values
             * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.
             * @returns {number}
             */
            exports.standardDeviation = function standardDeviation(values, unbiased) {
                return Math.sqrt(exports.variance(values, unbiased));
            };

            exports.standardError = function standardError(values) {
                return exports.standardDeviation(values) / Math.sqrt(values.length);
            };

            /**
             * IEEE Transactions on biomedical engineering, vol. 52, no. 1, january 2005, p. 76-
             * Calculate the standard deviation via the Median of the absolute deviation
             *  The formula for the standard deviation only holds for Gaussian random variables.
             * @returns {{mean: number, stdev: number}}
             */
            exports.robustMeanAndStdev = function robustMeanAndStdev(y) {
                var mean = 0, stdev = 0;
                var length = y.length, i = 0;
                for (i = 0; i < length; i++) {
                    mean += y[i];
                }
                mean /= length;
                var averageDeviations = new Array(length);
                for (i = 0; i < length; i++)
                    averageDeviations[i] = Math.abs(y[i] - mean);
                averageDeviations.sort(compareNumbers);
                if (length % 2 === 1) {
                    stdev = averageDeviations[(length - 1) / 2] / 0.6745;
                } else {
                    stdev = 0.5 * (averageDeviations[length / 2] + averageDeviations[length / 2 - 1]) / 0.6745;
                }

                return {
                    mean: mean,
                    stdev: stdev
                };
            };

            exports.quartiles = function quartiles(values, alreadySorted) {
                if (typeof (alreadySorted) === 'undefined') alreadySorted = false;
                if (!alreadySorted) {
                    values = [].concat(values).sort(compareNumbers);
                }

                var quart = values.length / 4;
                var q1 = values[Math.ceil(quart) - 1];
                var q2 = exports.median(values, true);
                var q3 = values[Math.ceil(quart * 3) - 1];

                return {q1: q1, q2: q2, q3: q3};
            };

            exports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {
                return Math.sqrt(exports.pooledVariance(samples, unbiased));
            };

            exports.pooledVariance = function pooledVariance(samples, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var sum = 0;
                var length = 0, l = samples.length;
                for (var i = 0; i < l; i++) {
                    var values = samples[i];
                    var vari = exports.variance(values);

                    sum += (values.length - 1) * vari;

                    if (unbiased)
                        length += values.length - 1;
                    else
                        length += values.length;
                }
                return sum / length;
            };

            exports.mode = function mode(values) {
                var l = values.length,
                    itemCount = new Array(l),
                    i;
                for (i = 0; i < l; i++) {
                    itemCount[i] = 0;
                }
                var itemArray = new Array(l);
                var count = 0;

                for (i = 0; i < l; i++) {
                    var index = itemArray.indexOf(values[i]);
                    if (index >= 0)
                        itemCount[index]++;
                    else {
                        itemArray[count] = values[i];
                        itemCount[count] = 1;
                        count++;
                    }
                }

                var maxValue = 0, maxIndex = 0;
                for (i = 0; i < count; i++) {
                    if (itemCount[i] > maxValue) {
                        maxValue = itemCount[i];
                        maxIndex = i;
                    }
                }

                return itemArray[maxIndex];
            };

            exports.covariance = function covariance(vector1, vector2, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var mean1 = exports.mean(vector1);
                var mean2 = exports.mean(vector2);

                if (vector1.length !== vector2.length)
                    throw 'Vectors do not have the same dimensions';

                var cov = 0, l = vector1.length;
                for (var i = 0; i < l; i++) {
                    var x = vector1[i] - mean1;
                    var y = vector2[i] - mean2;
                    cov += x * y;
                }

                if (unbiased)
                    return cov / (l - 1);
                else
                    return cov / l;
            };

            exports.skewness = function skewness(values, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var theMean = exports.mean(values);

                var s2 = 0, s3 = 0, l = values.length;
                for (var i = 0; i < l; i++) {
                    var dev = values[i] - theMean;
                    s2 += dev * dev;
                    s3 += dev * dev * dev;
                }
                var m2 = s2 / l;
                var m3 = s3 / l;

                var g = m3 / (Math.pow(m2, 3 / 2.0));
                if (unbiased) {
                    var a = Math.sqrt(l * (l - 1));
                    var b = l - 2;
                    return (a / b) * g;
                } else {
                    return g;
                }
            };

            exports.kurtosis = function kurtosis(values, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var theMean = exports.mean(values);
                var n = values.length, s2 = 0, s4 = 0;

                for (var i = 0; i < n; i++) {
                    var dev = values[i] - theMean;
                    s2 += dev * dev;
                    s4 += dev * dev * dev * dev;
                }
                var m2 = s2 / n;
                var m4 = s4 / n;

                if (unbiased) {
                    var v = s2 / (n - 1);
                    var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
                    var b = s4 / (v * v);
                    var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));

                    return a * b - 3 * c;
                } else {
                    return m4 / (m2 * m2) - 3;
                }
            };

            exports.entropy = function entropy(values, eps) {
                if (typeof (eps) === 'undefined') eps = 0;
                var sum = 0, l = values.length;
                for (var i = 0; i < l; i++)
                    sum += values[i] * Math.log(values[i] + eps);
                return -sum;
            };

            exports.weightedMean = function weightedMean(values, weights) {
                var sum = 0, l = values.length;
                for (var i = 0; i < l; i++)
                    sum += values[i] * weights[i];
                return sum;
            };

            exports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {
                return Math.sqrt(exports.weightedVariance(values, weights));
            };

            exports.weightedVariance = function weightedVariance(values, weights) {
                var theMean = exports.weightedMean(values, weights);
                var vari = 0, l = values.length;
                var a = 0, b = 0;

                for (var i = 0; i < l; i++) {
                    var z = values[i] - theMean;
                    var w = weights[i];

                    vari += w * (z * z);
                    b += w;
                    a += w * w;
                }

                return vari * (b / (b * b - a));
            };

            exports.center = function center(values, inPlace) {
                if (typeof (inPlace) === 'undefined') inPlace = false;

                var result = values;
                if (!inPlace)
                    result = [].concat(values);

                var theMean = exports.mean(result), l = result.length;
                for (var i = 0; i < l; i++)
                    result[i] -= theMean;
            };

            exports.standardize = function standardize(values, standardDev, inPlace) {
                if (typeof (standardDev) === 'undefined') standardDev = exports.standardDeviation(values);
                if (typeof (inPlace) === 'undefined') inPlace = false;
                var l = values.length;
                var result = inPlace ? values : new Array(l);
                for (var i = 0; i < l; i++)
                    result[i] = values[i] / standardDev;
                return result;
            };

            exports.cumulativeSum = function cumulativeSum(array) {
                var l = array.length;
                var result = new Array(l);
                result[0] = array[0];
                for (var i = 1; i < l; i++)
                    result[i] = result[i - 1] + array[i];
                return result;
            };
            });
            var array_1 = array.sum;
            var array_2 = array.max;
            var array_3 = array.min;
            var array_4 = array.minMax;
            var array_5 = array.arithmeticMean;
            var array_6 = array.mean;
            var array_7 = array.geometricMean;
            var array_8 = array.logMean;
            var array_9 = array.grandMean;
            var array_10 = array.truncatedMean;
            var array_11 = array.harmonicMean;
            var array_12 = array.contraHarmonicMean;
            var array_13 = array.median;
            var array_14 = array.variance;
            var array_15 = array.standardDeviation;
            var array_16 = array.standardError;
            var array_17 = array.robustMeanAndStdev;
            var array_18 = array.quartiles;
            var array_19 = array.pooledStandardDeviation;
            var array_20 = array.pooledVariance;
            var array_21 = array.mode;
            var array_22 = array.covariance;
            var array_23 = array.skewness;
            var array_24 = array.kurtosis;
            var array_25 = array.entropy;
            var array_26 = array.weightedMean;
            var array_27 = array.weightedStandardDeviation;
            var array_28 = array.weightedVariance;
            var array_29 = array.center;
            var array_30 = array.standardize;
            var array_31 = array.cumulativeSum;

            var matrix = createCommonjsModule(function (module, exports) {



            function compareNumbers(a, b) {
                return a - b;
            }

            exports.max = function max(matrix) {
                var max = -Infinity;
                for (var i = 0; i < matrix.length; i++) {
                    for (var j = 0; j < matrix[i].length; j++) {
                        if (matrix[i][j] > max) max = matrix[i][j];
                    }
                }
                return max;
            };

            exports.min = function min(matrix) {
                var min = Infinity;
                for (var i = 0; i < matrix.length; i++) {
                    for (var j = 0; j < matrix[i].length; j++) {
                        if (matrix[i][j] < min) min = matrix[i][j];
                    }
                }
                return min;
            };

            exports.minMax = function minMax(matrix) {
                var min = Infinity;
                var max = -Infinity;
                for (var i = 0; i < matrix.length; i++) {
                    for (var j = 0; j < matrix[i].length; j++) {
                        if (matrix[i][j] < min) min = matrix[i][j];
                        if (matrix[i][j] > max) max = matrix[i][j];
                    }
                }
                return {
                    min:min,
                    max:max
                };
            };

            exports.entropy = function entropy(matrix, eps) {
                if (typeof (eps) === 'undefined') {
                    eps = 0;
                }
                var sum = 0,
                    l1 = matrix.length,
                    l2 = matrix[0].length;
                for (var i = 0; i < l1; i++) {
                    for (var j = 0; j < l2; j++) {
                        sum += matrix[i][j] * Math.log(matrix[i][j] + eps);
                    }
                }
                return -sum;
            };

            exports.mean = function mean(matrix, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                var rows = matrix.length,
                    cols = matrix[0].length,
                    theMean, N, i, j;

                if (dimension === -1) {
                    theMean = [0];
                    N = rows * cols;
                    for (i = 0; i < rows; i++) {
                        for (j = 0; j < cols; j++) {
                            theMean[0] += matrix[i][j];
                        }
                    }
                    theMean[0] /= N;
                } else if (dimension === 0) {
                    theMean = new Array(cols);
                    N = rows;
                    for (j = 0; j < cols; j++) {
                        theMean[j] = 0;
                        for (i = 0; i < rows; i++) {
                            theMean[j] += matrix[i][j];
                        }
                        theMean[j] /= N;
                    }
                } else if (dimension === 1) {
                    theMean = new Array(rows);
                    N = cols;
                    for (j = 0; j < rows; j++) {
                        theMean[j] = 0;
                        for (i = 0; i < cols; i++) {
                            theMean[j] += matrix[j][i];
                        }
                        theMean[j] /= N;
                    }
                } else {
                    throw new Error('Invalid dimension');
                }
                return theMean;
            };

            exports.sum = function sum(matrix, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                var rows = matrix.length,
                    cols = matrix[0].length,
                    theSum, i, j;

                if (dimension === -1) {
                    theSum = [0];
                    for (i = 0; i < rows; i++) {
                        for (j = 0; j < cols; j++) {
                            theSum[0] += matrix[i][j];
                        }
                    }
                } else if (dimension === 0) {
                    theSum = new Array(cols);
                    for (j = 0; j < cols; j++) {
                        theSum[j] = 0;
                        for (i = 0; i < rows; i++) {
                            theSum[j] += matrix[i][j];
                        }
                    }
                } else if (dimension === 1) {
                    theSum = new Array(rows);
                    for (j = 0; j < rows; j++) {
                        theSum[j] = 0;
                        for (i = 0; i < cols; i++) {
                            theSum[j] += matrix[j][i];
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }
                return theSum;
            };

            exports.product = function product(matrix, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                var rows = matrix.length,
                    cols = matrix[0].length,
                    theProduct, i, j;

                if (dimension === -1) {
                    theProduct = [1];
                    for (i = 0; i < rows; i++) {
                        for (j = 0; j < cols; j++) {
                            theProduct[0] *= matrix[i][j];
                        }
                    }
                } else if (dimension === 0) {
                    theProduct = new Array(cols);
                    for (j = 0; j < cols; j++) {
                        theProduct[j] = 1;
                        for (i = 0; i < rows; i++) {
                            theProduct[j] *= matrix[i][j];
                        }
                    }
                } else if (dimension === 1) {
                    theProduct = new Array(rows);
                    for (j = 0; j < rows; j++) {
                        theProduct[j] = 1;
                        for (i = 0; i < cols; i++) {
                            theProduct[j] *= matrix[j][i];
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }
                return theProduct;
            };

            exports.standardDeviation = function standardDeviation(matrix, means, unbiased) {
                var vari = exports.variance(matrix, means, unbiased), l = vari.length;
                for (var i = 0; i < l; i++) {
                    vari[i] = Math.sqrt(vari[i]);
                }
                return vari;
            };

            exports.variance = function variance(matrix, means, unbiased) {
                if (typeof (unbiased) === 'undefined') {
                    unbiased = true;
                }
                means = means || exports.mean(matrix);
                var rows = matrix.length;
                if (rows === 0) return [];
                var cols = matrix[0].length;
                var vari = new Array(cols);

                for (var j = 0; j < cols; j++) {
                    var sum1 = 0, sum2 = 0, x = 0;
                    for (var i = 0; i < rows; i++) {
                        x = matrix[i][j] - means[j];
                        sum1 += x;
                        sum2 += x * x;
                    }
                    if (unbiased) {
                        vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);
                    } else {
                        vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;
                    }
                }
                return vari;
            };

            exports.median = function median(matrix) {
                var rows = matrix.length, cols = matrix[0].length;
                var medians = new Array(cols);

                for (var i = 0; i < cols; i++) {
                    var data = new Array(rows);
                    for (var j = 0; j < rows; j++) {
                        data[j] = matrix[j][i];
                    }
                    data.sort(compareNumbers);
                    var N = data.length;
                    if (N % 2 === 0) {
                        medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;
                    } else {
                        medians[i] = data[Math.floor(N / 2)];
                    }
                }
                return medians;
            };

            exports.mode = function mode(matrix) {
                var rows = matrix.length,
                    cols = matrix[0].length,
                    modes = new Array(cols),
                    i, j;
                for (i = 0; i < cols; i++) {
                    var itemCount = new Array(rows);
                    for (var k = 0; k < rows; k++) {
                        itemCount[k] = 0;
                    }
                    var itemArray = new Array(rows);
                    var count = 0;

                    for (j = 0; j < rows; j++) {
                        var index = itemArray.indexOf(matrix[j][i]);
                        if (index >= 0) {
                            itemCount[index]++;
                        } else {
                            itemArray[count] = matrix[j][i];
                            itemCount[count] = 1;
                            count++;
                        }
                    }

                    var maxValue = 0, maxIndex = 0;
                    for (j = 0; j < count; j++) {
                        if (itemCount[j] > maxValue) {
                            maxValue = itemCount[j];
                            maxIndex = j;
                        }
                    }

                    modes[i] = itemArray[maxIndex];
                }
                return modes;
            };

            exports.skewness = function skewness(matrix, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var means = exports.mean(matrix);
                var n = matrix.length, l = means.length;
                var skew = new Array(l);

                for (var j = 0; j < l; j++) {
                    var s2 = 0, s3 = 0;
                    for (var i = 0; i < n; i++) {
                        var dev = matrix[i][j] - means[j];
                        s2 += dev * dev;
                        s3 += dev * dev * dev;
                    }

                    var m2 = s2 / n;
                    var m3 = s3 / n;
                    var g = m3 / Math.pow(m2, 3 / 2);

                    if (unbiased) {
                        var a = Math.sqrt(n * (n - 1));
                        var b = n - 2;
                        skew[j] = (a / b) * g;
                    } else {
                        skew[j] = g;
                    }
                }
                return skew;
            };

            exports.kurtosis = function kurtosis(matrix, unbiased) {
                if (typeof (unbiased) === 'undefined') unbiased = true;
                var means = exports.mean(matrix);
                var n = matrix.length, m = matrix[0].length;
                var kurt = new Array(m);

                for (var j = 0; j < m; j++) {
                    var s2 = 0, s4 = 0;
                    for (var i = 0; i < n; i++) {
                        var dev = matrix[i][j] - means[j];
                        s2 += dev * dev;
                        s4 += dev * dev * dev * dev;
                    }
                    var m2 = s2 / n;
                    var m4 = s4 / n;

                    if (unbiased) {
                        var v = s2 / (n - 1);
                        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));
                        var b = s4 / (v * v);
                        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));
                        kurt[j] = a * b - 3 * c;
                    } else {
                        kurt[j] = m4 / (m2 * m2) - 3;
                    }
                }
                return kurt;
            };

            exports.standardError = function standardError(matrix) {
                var samples = matrix.length;
                var standardDeviations = exports.standardDeviation(matrix);
                var l = standardDeviations.length;
                var standardErrors = new Array(l);
                var sqrtN = Math.sqrt(samples);

                for (var i = 0; i < l; i++) {
                    standardErrors[i] = standardDeviations[i] / sqrtN;
                }
                return standardErrors;
            };

            exports.covariance = function covariance(matrix, dimension) {
                return exports.scatter(matrix, undefined, dimension);
            };

            exports.scatter = function scatter(matrix, divisor, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                if (typeof (divisor) === 'undefined') {
                    if (dimension === 0) {
                        divisor = matrix.length - 1;
                    } else if (dimension === 1) {
                        divisor = matrix[0].length - 1;
                    }
                }
                var means = exports.mean(matrix, dimension);
                var rows = matrix.length;
                if (rows === 0) {
                    return [[]];
                }
                var cols = matrix[0].length,
                    cov, i, j, s, k;

                if (dimension === 0) {
                    cov = new Array(cols);
                    for (i = 0; i < cols; i++) {
                        cov[i] = new Array(cols);
                    }
                    for (i = 0; i < cols; i++) {
                        for (j = i; j < cols; j++) {
                            s = 0;
                            for (k = 0; k < rows; k++) {
                                s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);
                            }
                            s /= divisor;
                            cov[i][j] = s;
                            cov[j][i] = s;
                        }
                    }
                } else if (dimension === 1) {
                    cov = new Array(rows);
                    for (i = 0; i < rows; i++) {
                        cov[i] = new Array(rows);
                    }
                    for (i = 0; i < rows; i++) {
                        for (j = i; j < rows; j++) {
                            s = 0;
                            for (k = 0; k < cols; k++) {
                                s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);
                            }
                            s /= divisor;
                            cov[i][j] = s;
                            cov[j][i] = s;
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }

                return cov;
            };

            exports.correlation = function correlation(matrix) {
                var means = exports.mean(matrix),
                    standardDeviations = exports.standardDeviation(matrix, true, means),
                    scores = exports.zScores(matrix, means, standardDeviations),
                    rows = matrix.length,
                    cols = matrix[0].length,
                    i, j;

                var cor = new Array(cols);
                for (i = 0; i < cols; i++) {
                    cor[i] = new Array(cols);
                }
                for (i = 0; i < cols; i++) {
                    for (j = i; j < cols; j++) {
                        var c = 0;
                        for (var k = 0, l = scores.length; k < l; k++) {
                            c += scores[k][j] * scores[k][i];
                        }
                        c /= rows - 1;
                        cor[i][j] = c;
                        cor[j][i] = c;
                    }
                }
                return cor;
            };

            exports.zScores = function zScores(matrix, means, standardDeviations) {
                means = means || exports.mean(matrix);
                if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix, true, means);
                return exports.standardize(exports.center(matrix, means, false), standardDeviations, true);
            };

            exports.center = function center(matrix, means, inPlace) {
                means = means || exports.mean(matrix);
                var result = matrix,
                    l = matrix.length,
                    i, j, jj;

                if (!inPlace) {
                    result = new Array(l);
                    for (i = 0; i < l; i++) {
                        result[i] = new Array(matrix[i].length);
                    }
                }

                for (i = 0; i < l; i++) {
                    var row = result[i];
                    for (j = 0, jj = row.length; j < jj; j++) {
                        row[j] = matrix[i][j] - means[j];
                    }
                }
                return result;
            };

            exports.standardize = function standardize(matrix, standardDeviations, inPlace) {
                if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix);
                var result = matrix,
                    l = matrix.length,
                    i, j, jj;

                if (!inPlace) {
                    result = new Array(l);
                    for (i = 0; i < l; i++) {
                        result[i] = new Array(matrix[i].length);
                    }
                }

                for (i = 0; i < l; i++) {
                    var resultRow = result[i];
                    var sourceRow = matrix[i];
                    for (j = 0, jj = resultRow.length; j < jj; j++) {
                        if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {
                            resultRow[j] = sourceRow[j] / standardDeviations[j];
                        }
                    }
                }
                return result;
            };

            exports.weightedVariance = function weightedVariance(matrix, weights) {
                var means = exports.mean(matrix);
                var rows = matrix.length;
                if (rows === 0) return [];
                var cols = matrix[0].length;
                var vari = new Array(cols);

                for (var j = 0; j < cols; j++) {
                    var sum = 0;
                    var a = 0, b = 0;

                    for (var i = 0; i < rows; i++) {
                        var z = matrix[i][j] - means[j];
                        var w = weights[i];

                        sum += w * (z * z);
                        b += w;
                        a += w * w;
                    }

                    vari[j] = sum * (b / (b * b - a));
                }

                return vari;
            };

            exports.weightedMean = function weightedMean(matrix, weights, dimension) {
                if (typeof (dimension) === 'undefined') {
                    dimension = 0;
                }
                var rows = matrix.length;
                if (rows === 0) return [];
                var cols = matrix[0].length,
                    means, i, ii, j, w, row;

                if (dimension === 0) {
                    means = new Array(cols);
                    for (i = 0; i < cols; i++) {
                        means[i] = 0;
                    }
                    for (i = 0; i < rows; i++) {
                        row = matrix[i];
                        w = weights[i];
                        for (j = 0; j < cols; j++) {
                            means[j] += row[j] * w;
                        }
                    }
                } else if (dimension === 1) {
                    means = new Array(rows);
                    for (i = 0; i < rows; i++) {
                        means[i] = 0;
                    }
                    for (j = 0; j < rows; j++) {
                        row = matrix[j];
                        w = weights[j];
                        for (i = 0; i < cols; i++) {
                            means[j] += row[i] * w;
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }

                var weightSum = array.sum(weights);
                if (weightSum !== 0) {
                    for (i = 0, ii = means.length; i < ii; i++) {
                        means[i] /= weightSum;
                    }
                }
                return means;
            };

            exports.weightedCovariance = function weightedCovariance(matrix, weights, means, dimension) {
                dimension = dimension || 0;
                means = means || exports.weightedMean(matrix, weights, dimension);
                var s1 = 0, s2 = 0;
                for (var i = 0, ii = weights.length; i < ii; i++) {
                    s1 += weights[i];
                    s2 += weights[i] * weights[i];
                }
                var factor = s1 / (s1 * s1 - s2);
                return exports.weightedScatter(matrix, weights, means, factor, dimension);
            };

            exports.weightedScatter = function weightedScatter(matrix, weights, means, factor, dimension) {
                dimension = dimension || 0;
                means = means || exports.weightedMean(matrix, weights, dimension);
                if (typeof (factor) === 'undefined') {
                    factor = 1;
                }
                var rows = matrix.length;
                if (rows === 0) {
                    return [[]];
                }
                var cols = matrix[0].length,
                    cov, i, j, k, s;

                if (dimension === 0) {
                    cov = new Array(cols);
                    for (i = 0; i < cols; i++) {
                        cov[i] = new Array(cols);
                    }
                    for (i = 0; i < cols; i++) {
                        for (j = i; j < cols; j++) {
                            s = 0;
                            for (k = 0; k < rows; k++) {
                                s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);
                            }
                            cov[i][j] = s * factor;
                            cov[j][i] = s * factor;
                        }
                    }
                } else if (dimension === 1) {
                    cov = new Array(rows);
                    for (i = 0; i < rows; i++) {
                        cov[i] = new Array(rows);
                    }
                    for (i = 0; i < rows; i++) {
                        for (j = i; j < rows; j++) {
                            s = 0;
                            for (k = 0; k < cols; k++) {
                                s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);
                            }
                            cov[i][j] = s * factor;
                            cov[j][i] = s * factor;
                        }
                    }
                } else {
                    throw new Error('Invalid dimension');
                }

                return cov;
            };
            });
            var matrix_1 = matrix.max;
            var matrix_2 = matrix.min;
            var matrix_3 = matrix.minMax;
            var matrix_4 = matrix.entropy;
            var matrix_5 = matrix.mean;
            var matrix_6 = matrix.sum;
            var matrix_7 = matrix.product;
            var matrix_8 = matrix.standardDeviation;
            var matrix_9 = matrix.variance;
            var matrix_10 = matrix.median;
            var matrix_11 = matrix.mode;
            var matrix_12 = matrix.skewness;
            var matrix_13 = matrix.kurtosis;
            var matrix_14 = matrix.standardError;
            var matrix_15 = matrix.covariance;
            var matrix_16 = matrix.scatter;
            var matrix_17 = matrix.correlation;
            var matrix_18 = matrix.zScores;
            var matrix_19 = matrix.center;
            var matrix_20 = matrix.standardize;
            var matrix_21 = matrix.weightedVariance;
            var matrix_22 = matrix.weightedMean;
            var matrix_23 = matrix.weightedCovariance;
            var matrix_24 = matrix.weightedScatter;

            var array$1 = array;

            /**
             * lodash (Custom Build) <https://lodash.com/>
             * Build: `lodash modularize exports="npm" -o ./`
             * Copyright jQuery Foundation and other contributors <https://jquery.org/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */

            /** Used as references for various `Number` constants. */
            var INFINITY$2 = 1 / 0,
                MAX_SAFE_INTEGER$1 = 9007199254740991,
                MAX_INTEGER = 1.7976931348623157e+308,
                NAN = 0 / 0;

            /** `Object#toString` result references. */
            var funcTag$1 = '[object Function]',
                genTag$1 = '[object GeneratorFunction]',
                symbolTag$1 = '[object Symbol]';

            /** Used to match leading and trailing whitespace. */
            var reTrim = /^\s+|\s+$/g;

            /** Used to detect bad signed hexadecimal string values. */
            var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

            /** Used to detect binary string values. */
            var reIsBinary = /^0b[01]+$/i;

            /** Used to detect octal string values. */
            var reIsOctal = /^0o[0-7]+$/i;

            /** Used to detect unsigned integer values. */
            var reIsUint$1 = /^(?:0|[1-9]\d*)$/;

            /** Built-in method references without a dependency on `root`. */
            var freeParseInt = parseInt;

            /** Used for built-in method references. */
            var objectProto$6 = Object.prototype;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var objectToString$2 = objectProto$6.toString;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil,
                nativeMax = Math.max;

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
              var index = -1,
                  length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                  result = Array(length);

              while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
              }
              return result;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
              return function(start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                  end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite(end);
                }
                step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                return baseRange(start, end, step, fromRight);
              };
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex$1(value, length) {
              length = length == null ? MAX_SAFE_INTEGER$1 : length;
              return !!length &&
                (typeof value == 'number' || reIsUint$1.test(value)) &&
                (value > -1 && value % 1 == 0 && value < length);
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
              if (!isObject$2(object)) {
                return false;
              }
              var type = typeof index;
              if (type == 'number'
                    ? (isArrayLike(object) && isIndex$1(index, object.length))
                    : (type == 'string' && index in object)
                  ) {
                return eq$1(object[index], value);
              }
              return false;
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq$1(value, other) {
              return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
              return value != null && isLength(value.length) && !isFunction$3(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction$3(value) {
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 8-9 which returns 'object' for typed array and other constructors.
              var tag = isObject$2(value) ? objectToString$2.call(value) : '';
              return tag == funcTag$1 || tag == genTag$1;
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
              return typeof value == 'number' &&
                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject$2(value) {
              var type = typeof value;
              return !!value && (type == 'object' || type == 'function');
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike$1(value) {
              return !!value && typeof value == 'object';
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol$2(value) {
              return typeof value == 'symbol' ||
                (isObjectLike$1(value) && objectToString$2.call(value) == symbolTag$1);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber(value);
              if (value === INFINITY$2 || value === -INFINITY$2) {
                var sign = (value < 0 ? -1 : 1);
                return sign * MAX_INTEGER;
              }
              return value === value ? value : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
              if (typeof value == 'number') {
                return value;
              }
              if (isSymbol$2(value)) {
                return NAN;
              }
              if (isObject$2(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject$2(other) ? (other + '') : other;
              }
              if (typeof value != 'string') {
                return value === 0 ? value : +value;
              }
              value = value.replace(reTrim, '');
              var isBinary = reIsBinary.test(value);
              return (isBinary || reIsOctal.test(value))
                ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                : (reIsBadHex.test(value) ? NAN : +value);
            }

            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();

            var lodash_range = range;

            /**
             * lodash (Custom Build) <https://lodash.com/>
             * Build: `lodash modularize exports="npm" -o ./`
             * Copyright jQuery Foundation and other contributors <https://jquery.org/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */

            /** Used as references for various `Number` constants. */
            var INFINITY$3 = 1 / 0,
                MAX_SAFE_INTEGER$2 = 9007199254740991,
                MAX_INTEGER$1 = 1.7976931348623157e+308,
                NAN$1 = 0 / 0;

            /** `Object#toString` result references. */
            var funcTag$2 = '[object Function]',
                genTag$2 = '[object GeneratorFunction]',
                symbolTag$2 = '[object Symbol]';

            /** Used to match leading and trailing whitespace. */
            var reTrim$1 = /^\s+|\s+$/g;

            /** Used to detect bad signed hexadecimal string values. */
            var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;

            /** Used to detect binary string values. */
            var reIsBinary$1 = /^0b[01]+$/i;

            /** Used to detect octal string values. */
            var reIsOctal$1 = /^0o[0-7]+$/i;

            /** Used to detect unsigned integer values. */
            var reIsUint$2 = /^(?:0|[1-9]\d*)$/;

            /** Built-in method references without a dependency on `root`. */
            var freeParseInt$1 = parseInt;

            /** Used for built-in method references. */
            var objectProto$7 = Object.prototype;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var objectToString$3 = objectProto$7.toString;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil$1 = Math.ceil,
                nativeMax$1 = Math.max;

            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange$1(start, end, step, fromRight) {
              var index = -1,
                  length = nativeMax$1(nativeCeil$1((end - start) / (step || 1)), 0),
                  result = Array(length);

              while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
              }
              return result;
            }

            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange$1(fromRight) {
              return function(start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall$1(start, end, step)) {
                  end = step = undefined;
                }
                // Ensure the sign of `-0` is preserved.
                start = toFinite$1(start);
                if (end === undefined) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite$1(end);
                }
                step = step === undefined ? (start < end ? 1 : -1) : toFinite$1(step);
                return baseRange$1(start, end, step, fromRight);
              };
            }

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex$2(value, length) {
              length = length == null ? MAX_SAFE_INTEGER$2 : length;
              return !!length &&
                (typeof value == 'number' || reIsUint$2.test(value)) &&
                (value > -1 && value % 1 == 0 && value < length);
            }

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall$1(value, index, object) {
              if (!isObject$3(object)) {
                return false;
              }
              var type = typeof index;
              if (type == 'number'
                    ? (isArrayLike$1(object) && isIndex$2(index, object.length))
                    : (type == 'string' && index in object)
                  ) {
                return eq$2(object[index], value);
              }
              return false;
            }

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq$2(value, other) {
              return value === other || (value !== value && other !== other);
            }

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike$1(value) {
              return value != null && isLength$1(value.length) && !isFunction$4(value);
            }

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction$4(value) {
              // The use of `Object#toString` avoids issues with the `typeof` operator
              // in Safari 8-9 which returns 'object' for typed array and other constructors.
              var tag = isObject$3(value) ? objectToString$3.call(value) : '';
              return tag == funcTag$2 || tag == genTag$2;
            }

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength$1(value) {
              return typeof value == 'number' &&
                value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
            }

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject$3(value) {
              var type = typeof value;
              return !!value && (type == 'object' || type == 'function');
            }

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike$2(value) {
              return !!value && typeof value == 'object';
            }

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol$3(value) {
              return typeof value == 'symbol' ||
                (isObjectLike$2(value) && objectToString$3.call(value) == symbolTag$2);
            }

            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite$1(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber$1(value);
              if (value === INFINITY$3 || value === -INFINITY$3) {
                var sign = (value < 0 ? -1 : 1);
                return sign * MAX_INTEGER$1;
              }
              return value === value ? value : 0;
            }

            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber$1(value) {
              if (typeof value == 'number') {
                return value;
              }
              if (isSymbol$3(value)) {
                return NAN$1;
              }
              if (isObject$3(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject$3(other) ? (other + '') : other;
              }
              if (typeof value != 'string') {
                return value === 0 ? value : +value;
              }
              value = value.replace(reTrim$1, '');
              var isBinary = reIsBinary$1.test(value);
              return (isBinary || reIsOctal$1.test(value))
                ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
                : (reIsBadHex$1.test(value) ? NAN$1 : +value);
            }

            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange$1(true);

            var lodash_rangeright = rangeRight;

            const avg = array$1.mean;
            const mean = avg;
            const sum = array$1.sum;
            const scale = (a, d) => a.map(x => (x - avg(a)) / d);
            const max = (a) => a.concat([]).sort((x, y) => x < y)[0];
            const min = a => a.concat([]).sort((x, y) => x > y)[0];
            const sd = array$1.standardDeviation; //(a, av) => Math.sqrt(avg(a.map(x => (x - av) * x)));


            /**
             * Returns an array of the squared different of two arrays
             * @memberOf util
             * @param {Number[]} left 
             * @param {Number[]} right 
             * @returns {Number[]} Squared difference of left minus right array
             */
            function squaredDifference(left, right) {
              return left.reduce((result, val, index, arr) => { 
                result.push(Math.pow((right[index]-val), 2));
                return result;
              }, []);
            }

            /**
             * The standard error of the estimate is a measure of the accuracy of predictions made with a regression line. Compares the estimate to the actual value
             * @memberOf util
             * @see {@link http://onlinestatbook.com/2/regression/accuracy.html}
             * @example
              const actuals = [ 2, 4, 5, 4, 5, ];
              const estimates = [ 2.8, 3.4, 4, 4.6, 5.2, ];
              const SE = ms.util.standardError(actuals, estimates);
              SE.toFixed(2) // => 0.89
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} Standard Error of the Estimate
             */
            function standardError(actuals=[], estimates=[]) {
              if (actuals.length !== estimates.length) throw new RangeError('arrays must have the same length');
              const squaredDiff = squaredDifference(actuals, estimates);
              return Math.sqrt((sum(squaredDiff)) / (actuals.length - 2));
            }

            /**
             * Calculates the z score of each value in the sample, relative to the sample mean and standard deviation.
             * @memberOf util
             * @see {@link https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.mstats.zscore.html}
             * @param {Number[]} observations - An array like object containing the sample data.
             * @returns {Number[]} The z-scores, standardized by mean and standard deviation of input array 
             */
            function standardScore(observations = []) {
              const mean = avg(observations);
              const stdDev = sd(observations);
              return observations.map(x => ((x - mean) / stdDev));
            }

            /**
             * In statistics, the coefficient of determination, denoted R2 or r2 and pronounced "R squared", is the proportion of the variance in the dependent variable that is predictable from the independent variable(s). Compares distance of estimated values to the mean.
             * {\bar {y}}={\frac {1}{n}}\sum _{i=1}^{n}y_{i}
             * @example
            const actuals = [ 2, 4, 5, 4, 5, ];
            const estimates = [ 2.8, 3.4, 4, 4.6, 5.2, ];
            const r2 = ms.util.coefficientOfDetermination(actuals, estimates); 
            r2.toFixed(1) // => 0.6
             * @memberOf util
             * @see {@link https://en.wikipedia.org/wiki/Coefficient_of_determination} {@link http://statisticsbyjim.com/regression/standard-error-regression-vs-r-squared/}
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} r^2
             */
            function coefficientOfDetermination(actuals = [], estimates = []) {
              if (actuals.length !== estimates.length) throw new RangeError('arrays must have the same length');
              const actualsMean = mean(actuals);

              const totalVariation = sum(actuals.reduce((result, val, index) => {
                result.push(Math.pow((actuals[index]-actualsMean), 2));
                return result;
              }, []));
              const unexplainedVariation = sum(actuals.reduce((result, val, index) => {
                result.push(Math.pow((actuals[ index ] - estimates[ index ]), 2));
                return result;
              }, []));
              const rSquared = ((totalVariation - unexplainedVariation) / totalVariation);

              return rSquared;
              /*
              @see  {@link https://math.tutorvista.com/statistics/coefficient-of-determination.html}
              Some Properties of Coefficient of Determination are as follow:
              It helps to provide the proportion of the variance of one variable which is predictable from the other variable.
              It is a way of measurement which allows determining how clear it can be in making predictions from a certain data provided.
              It can be taken as a ratio of the explained variation to the total variation.
              It denotes the strength of the linear association between the variables.
              The square of the coefficient of determination will always b e between 0 and1, which is 0 ≤
              ≤
              r2 ≤
              ≤
              1. Here r2 will always be a positive value.
              As r2 gets close to 1, the Y data values get close to the regression line.
              As r2 gets close to 0, the Y data values get further from the regression line.
              It helps to provide the proportion of the variance of one variable which is predictable from the other variable.
              It is a way of measurement which allows determining how clear it can be in making predictions from a certain data provided.
              It can be taken as a ratio of the explained variation to the total variation.
              It denotes the strength of the linear association between the variables.
              */  
            }

            /**
             * You can use the adjusted coefficient of determination to determine how well a multiple regression equation “fits” the sample data. The adjusted coefficient of determination is closely related to the coefficient of determination (also known as R2) that you use to test the results of a simple regression equation.
             * @example
            const adjr2 = ms.util.adjustedCoefficentOfDetermination({
              rSquared: 0.944346527,
              sampleSize: 8,
              independentVariables: 2,
            }); 
            r2.toFixed(3) // => 0.922
             * @memberOf util
             * @see {@link http://www.dummies.com/education/math/business-statistics/how-to-calculate-the-adjusted-coefficient-of-determination/}
             * @param {Object} [options={}] 
             * @param {Number[]} [options.actuals] - numerical samples 
             * @param {Number[]} [options.estimates] - estimate values 
             * @param {Number} [options.rSquared] - coefficent of determination 
             * @param {Number} [options.sampleSize] - the sample size 
             * @param {Number} options.independentVariables - the number of independent variables in the regression equation
             * @returns {Number} adjusted r^2 for multiple linear regression
             */
            function adjustedCoefficentOfDetermination(options

            ) {
              const { actuals, estimates, rSquared, independentVariables, sampleSize, } = options;
              const r2 = rSquared || coefficientOfDetermination(actuals, estimates);
              const n = sampleSize || actuals.length;
              const k = independentVariables;

              return (1 - (1 - r2) * ((n - 1) / (n - (k + 1))));
            }

            /**
             * The coefficent of Correlation is given by R decides how well the given data fits a line or a curve.
             * @example
            const actuals = [ 39, 42, 67, 76, ];
            const estimates = [ 44, 40, 60, 84, ];
            const R = ms.util.coefficientOfCorrelation(actuals, estimates); 
            R.toFixed(4) // => 0.9408
             * @memberOf util
             * @see {@link https://calculator.tutorvista.com/r-squared-calculator.html}
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} R
             */
            function coefficientOfCorrelation(actuals = [], estimates = []) {
              if (actuals.length !== estimates.length) throw new RangeError('arrays must have the same length');
              const sumX = sum(actuals);
              const sumY = sum(estimates);
              const sumProdXY = actuals.reduce((result, val, index) => { 
                result = result + (actuals[ index ] * estimates[ index ]);
                return result;
              }, 0);
              const sumXSquared = actuals.reduce((result, val) => { 
                result = result + (val * val);
                return result;
              }, 0);
              const sumYSquared = estimates.reduce((result, val) => { 
                result = result + (val * val);
                return result;
              }, 0);
              const N = actuals.length;
              const R = (
                (N * sumProdXY - sumX * sumY) /
                Math.sqrt(
                  (N * sumXSquared - Math.pow(sumX, 2)) * (N * sumYSquared - Math.pow(sumY, 2))
                )
              );
              return R;
            }

            /**
             * The coefficent of determination is given by r^2 decides how well the given data fits a line or a curve.
             * 
             * @param {Number[]} [actuals=[]] 
             * @param {Number[]}  [estimates=[]]  
             * @returns {Number} r^2
             */
            function rSquared(actuals = [], estimates=[]) {
              return Math.pow(coefficientOfCorrelation(actuals, estimates), 2);
            }
            /**
             * returns an array of vectors as an array of arrays
             * @example
            const vectors = [ [1,2,3], [1,2,3], [3,3,4], [3,3,3] ];
            const arrays = pivotVector(vectors); // => [ [1,2,3,3], [2,2,3,3], [3,3,4,3] ];
             * @memberOf util
             * @param {Array[]} vectors 
             * @returns {Array[]}
             */
            function pivotVector(vectors = []) {
              return vectors.reduce((result, val, index/*, arr*/) => {
                val.forEach((vecVal, i) => {
                  (index === 0)
                    ? (result.push([vecVal, ]))
                    : (result[ i ].push(vecVal));
                });
                return result;
              }, []);
            } 

            /**
             * returns a matrix of values by combining arrays into a matrix
             * @memberOf util
             * @example 
              const arrays = [
                [ 1, 1, 3, 3 ],
                [ 2, 2, 3, 3 ],
                [ 3, 3, 4, 3 ],
              ];
              pivotArrays(arrays); //=>
              // [
              //   [1, 2, 3,],
              //   [1, 2, 3,],
              //   [3, 3, 4,],
              //   [3, 3, 3,],
              // ];
              * @param {Array} [vectors=[]] - array of arguments for columnArray to merge columns into a matrix
              * @returns {Array} a matrix of column values 
              */
            function pivotArrays(arrays = []) {
              return (arrays.length)
                ? arrays[ 0 ].map((vectorItem, index) => {
                  const returnArray = [];
                  arrays.forEach((v, i) => {
                    returnArray.push(arrays[ i ][ index ]);
                  });
                  return returnArray;
                })
                : arrays;
            }
            ////Vector, Matrix,

            /**
              * Standardize features by removing the mean and scaling to unit variance

              Centering and scaling happen independently on each feature by computing the relevant statistics on the samples in the training set. Mean and standard deviation are then stored to be used on later data using the transform method.

              Standardization of a dataset is a common requirement for many machine learning estimators: they might behave badly if the individual feature do not more or less look like standard normally distributed data (e.g. Gaussian with 0 mean and unit variance)
              * @memberOf util
              * @param {number[]} z - array of integers or floats
              * @returns {number[]}
              */
            const StandardScaler = (z) => scale(z, sd(z));















            /** This function returns two functions that can standard scale new inputs and reverse scale new outputs
             * @param {Number[]} values - array of numbers
             * @returns {Object} - {scale[ Function ], descale[ Function ]}
            */
            function StandardScalerTransforms(vector = [], nan_value = -1, return_nan = false, inputComponents = {}) {
              const average = typeof inputComponents.average !=='undefined' 
                ? inputComponents.average
                : avg(vector);
              const standard_dev = typeof inputComponents.standard_dev !=='undefined' 
                ? inputComponents.standard_dev
                : sd(vector);
              const maximum = typeof inputComponents.maximum !=='undefined' 
                ? inputComponents.maximum
                : max(vector);
              const minimum = typeof inputComponents.minimum !=='undefined' 
                ? inputComponents.minimum
                : min(vector);
              const scale = (z) => {
                const scaledValue = (z - average) / standard_dev;
                if (isNaN(scaledValue) && return_nan) return scaledValue;
                else if (isNaN(scaledValue) && return_nan === false) return (isNaN(standard_dev)) ? z : standard_dev;
                else return scaledValue;
              }; // equivalent to MinMaxScaler(z)
              const descale = (scaledZ) => {
                const descaledValue = (scaledZ * standard_dev) + average;
                if (isNaN(descaledValue) && return_nan) return descaledValue;
                else if (isNaN(descaledValue) && return_nan === false) return (isNaN(standard_dev)) ? scaledZ : standard_dev;
                else return descaledValue;
              };
              const values = vector.map(scale)
                .map(val => {
                  if (isNaN(val)) return nan_value;
                  else return val;
                });
              return {
                components: {
                  average,
                  standard_dev,
                  maximum,
                  minimum,
                },
                scale,
                descale,
                values,
              };
            }

            /**
             * Transforms features by scaling each feature to a given range.
              This estimator scales and translates each feature individually such that it is in the given range on the training set, i.e. between zero and one.
              * @memberOf util
              * @param {number[]} z - array of integers or floats
              * @returns {number[]}
              */
            const MinMaxScaler= (z) => scale(z, (max(z) - min(z)));

            /** This function returns two functions that can mix max scale new inputs and reverse scale new outputs
             * @param {Number[]} values - array of numbers
             * @returns {Object} - {scale[ Function ], descale[ Function ]}
            */
            function MinMaxScalerTransforms(vector = [], nan_value = -1, return_nan=false, inputComponents = {}) {
              const average = typeof inputComponents.average !=='undefined' 
                ? inputComponents.average
                : avg(vector);
              const standard_dev = typeof inputComponents.standard_dev !=='undefined' 
                ? inputComponents.standard_dev
                : sd(vector);
              const maximum = typeof inputComponents.maximum !=='undefined' 
                ? inputComponents.maximum
                : max(vector);
              //@ts-ignore
              const minimum = typeof inputComponents.minimum !=='undefined' 
              //@ts-ignore
                ? inputComponents.minimum
                : min(vector);
              const scale = (z) => {
                const scaledValue = (z - average) / (maximum - minimum);
                if (isNaN(scaledValue) && return_nan) return scaledValue;
                else if (isNaN(scaledValue) && return_nan === false) return (isNaN(standard_dev)) ? z : standard_dev;
                else return scaledValue;
              }; // equivalent to MinMaxScaler(z)
              const descale = (scaledZ) => {
                const descaledValue = (scaledZ * (maximum - minimum)) + average;
                if (isNaN(descaledValue) && return_nan) return descaledValue;
                else if (isNaN(descaledValue) && return_nan === false) return (isNaN(standard_dev)) ? scaledZ : standard_dev;
                else return descaledValue;
              };
              const values = vector.map(scale)
                .map(val => {
                  if (isNaN(val)) return nan_value;
                  else return val;
                });
              return {
                components: {
                  average,
                  standard_dev,
                  maximum,
                  minimum,
                },
                scale,
                descale,
                values,
              };
            }

            /**
              * Converts z-score into the probability
              * @memberOf util
              * @see {@link https://stackoverflow.com/questions/36575743/how-do-i-convert-probability-into-z-score}
              * @param {number} z - Number of standard deviations from the mean.
              * @returns {number} p  - p-value
              */
            function approximateZPercentile(z, alpha=true) {
              // If z is greater than 6.5 standard deviations from the mean
              // the number of significant digits will be outside of a reasonable 
              // range.
              if (z < -6.5)
                return 0.0;

              if (z > 6.5)
                return 1.0;

              let factK    = 1;
              let sum      = 0;
              let term     = 1;
              let k        = 0;
              let loopStop = Math.exp(-23);
               
              while (Math.abs(term) > loopStop) {
                term = 0.3989422804 * Math.pow(-1, k) * Math.pow(z, k) / (2 * k + 1) /
                        Math.pow(2, k) * Math.pow(z, k + 1) / factK;
                sum += term;
                k++;
                factK *= k;
              }

              sum += 0.5;

              return (alpha) ? 1 - sum : sum;
            }

            /**
             * returns a safe column name / url slug from a string
             * @param {String} name 
             * @returns {String}
             */
            function getSafePropertyName(name) {
              return name.replace(/[^\w\s]/gi, '_');
            }

            /**
             * The errors (residuals) from acutals and estimates
             * @memberOf util
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const errors = ms.util.forecastErrors(actuals, estimates); // => [ 4, -5, 2, -3 ]
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number[]} errors (residuals)
             */
            function forecastErrors(actuals, estimates) {
              if (actuals.length !== estimates.length) throw new Error(`Actuals length (${actuals.length}) must equal Estimates length (${estimates.length})`);
              return actuals.map((act, i) => act - estimates[ i ]);
            }

            /**
             * The bias of forecast accuracy
             * @memberOf util
             * @see {@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const MFE = ms.util.meanForecastError(actuals, estimates); // =>  -0.5
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MFE (bias)
             */
            function meanForecastError(actuals, estimates) { 
              const errors = forecastErrors(actuals, estimates);
              return avg(errors);
            }

            /**
             * Mean Absolute Deviation (MAD) indicates the absolute size of the errors
             * @memberOf util
             * @see {@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const MAD = ms.util.meanAbsoluteDeviation(actuals, estimates); // =>  3.5
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MAD
             */
            function meanAbsoluteDeviation(actuals, estimates) { 
              const errors = forecastErrors(actuals, estimates).map(e=>Math.abs(e));
              return avg(errors);
            }

            /**
             * Tracking Signal - Used to pinpoint forecasting models that need adjustment
             * @memberOf util
             * @see {@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const trackingSignal = ms.util.trackingSignal(actuals, estimates); 
              trackingSignal.toFixed(2) // =>  -0.57
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} trackingSignal
             */
            function trackingSignal(actuals, estimates) {
              const runningSumOfForecastErrors = sum(forecastErrors(actuals, estimates));
              const MAD = meanAbsoluteDeviation(actuals, estimates);
              return runningSumOfForecastErrors / MAD;
            }

            /**
             * The standard error of the estimate is a measure of the accuracy of predictions made with a regression line. Compares the estimate to the actual value
             * @memberOf util
             * @see {@link http://onlinestatbook.com/2/regression/accuracy.html}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];   
              const MSE = ms.util.meanSquaredError(actuals, estimates); // => 13.5
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MSE
             */
            function meanSquaredError(actuals, estimates) {
              const squaredErrors = forecastErrors(actuals, estimates).map(e=>e*e);
              return avg(squaredErrors);
            }

            /**
             * MAD over Mean Ratio - The MAD/Mean ratio is an alternative to the MAPE that is better suited to intermittent and low-volume data. As stated previously, percentage errors cannot be calculated when the actual equals zero and can take on extreme values when dealing with low-volume data. These issues become magnified when you start to average MAPEs over multiple time series. The MAD/Mean ratio tries to overcome this problem by dividing the MAD by the Mean—essentially rescaling the error to make it comparable across time series of varying scales
             * @memberOf util
             * @see {@link https://www.forecastpro.com/Trends/forecasting101August2011.html}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const MMR = ms.util.MADMeanRatio(actuals, estimates);
              MAPE.toFixed(2) // => 0.08
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MMR
             */
            function MADMeanRatio(actuals, estimates) {
              const MAD = meanAbsoluteDeviation(actuals, estimates);
              const mean = avg(actuals);
              return MAD / mean;
            }

            /**
             * MAPE (Mean Absolute Percent Error) measures the size of the error in percentage terms
             * @memberOf util
             * @see {@link https://www.forecastpro.com/Trends/forecasting101August2011.html}
             * @example
              const actuals = [ 45, 38, 43, 39 ];
              const estimates = [ 41, 43, 41, 42 ];
              const MAPE = ms.util.meanAbsolutePercentageError(actuals, estimates);
              MAPE.toFixed(2) // => 0.86
             * @param {Number[]} actuals - numerical samples 
             * @param {Number[]} estimates - estimates values
             * @returns {Number} MAPE
             */
            function meanAbsolutePercentageError(actuals, estimates) {
              const errors = forecastErrors(actuals, estimates).map(e=>Math.abs(e));
              const absErrorPercent = errors.map((e, i) => e / actuals[ i ]);
              return avg(absErrorPercent);
            }

            /**
             * @namespace
             */
            const util$1 = {
              range: lodash_range,
              rangeRight: lodash_rangeright,
              scale,
              avg,
              mean: avg,
              sum,
              max,
              min,
              sd,
              StandardScaler,
              StandardScalerTransforms,
              MinMaxScaler,
              MinMaxScalerTransforms,
              LogScaler: (z) => z.map(Math.log),
              ExpScaler: (z) => z.map(Math.exp),
              squaredDifference,
              standardError,
              coefficientOfDetermination,
              coefficientOfCorrelation,
              r: coefficientOfCorrelation,
              rSquared,
              adjustedCoefficentOfDetermination,
              rBarSquared: adjustedCoefficentOfDetermination,
              adjustedRSquared: adjustedCoefficentOfDetermination,
              pivotVector,
              pivotArrays,
              standardScore,
              zScore: standardScore,
              approximateZPercentile,
              // approximatePercentileZ,
              getSafePropertyName,
              forecastErrors,
              meanForecastError,
              MFE: meanForecastError,
              meanAbsoluteDeviation,
              MAD: meanAbsoluteDeviation,
              trackingSignal,
              TS: trackingSignal,
              meanSquaredError,
              MSE: meanSquaredError,
              MADMeanRatio,
              MMR: MADMeanRatio,
              meanAbsolutePercentageError,
              MAPE: meanAbsolutePercentageError,
            };

            // import { ml, } from './ml';

            const transformConfigMap = {
              scale: 'scaleOptions',
              descale: 'descaleOptions',
              label: 'labelOptions',
              labelEncoder: 'labelOptions',
              labeldecode: 'labelOptions',
              labelDecode: 'labelOptions',
              labelDecoder: 'labelOptions',
              onehot: 'oneHotOptions',
              oneHot: 'oneHotOptions',
              oneHotEncode: 'oneHotOptions',
              oneHotEncoder: 'oneHotOptions',
              reducer: 'reducerOptions',
              reduce: 'reducerOptions',
              merge: 'mergeData',
            };










































            /**
             * class for manipulating an array of objects, typically from CSV data
             * @class DataSet
             * @memberOf preprocessing
             */
            class DataSet  {
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              

              /**
               * Allows for fit transform short hand notation
               * @example
            DataSet.getTransforms({
              Age: ['scale',],
              Rating: ['label',],  }); //=> [
            //   {
            //    name: 'Age', options: { strategy: 'scale', }, },
            //   },
            //   { 
            //    name: 'Rating', options: { strategy: 'label', }, 
            //   },
            // ];
               * @param {Object} transforms 
               * @returns {Array<Object>} returns fit columns, columns property
               */
              static getTransforms(transforms = {}) {
                return Object.keys(transforms).reduce((result, columnName) => {
                  const transformColumnObject = transforms[ columnName ];
                  const transformObject = {
                    name: columnName,
                    options: {
                      strategy: (Array.isArray(transformColumnObject))
                        ? transformColumnObject[ 0 ]
                        : transformColumnObject,
                    },
                  };
                  if (Array.isArray(transformColumnObject) && transformColumnObject.length > 1) {
                    //@ts-ignore
                    transformObject.options[ transformConfigMap[ transformColumnObject[ 0 ] ] ] = transformColumnObject[ 1 ];
                  }
                  result.push(transformObject);
                  return result;
                }, []);
              }
              /**
               * returns an array of objects by applying labels to matrix of columns
               * @example
            const data = [{ Age: '44', Salary: '44' },
            { Age: '27', Salary: '27' }]
            const AgeDataSet = new MS.DataSet(data);
            const dependentVariables = [ [ 'Age', ], [ 'Salary', ], ];
            const AgeSalMatrix = AgeDataSet.columnMatrix(dependentVariables); // =>
            //  [ [ '44', '72000' ],
            //  [ '27', '48000' ] ];
            MS.DataSet.reverseColumnMatrix({vectors:AgeSalMatrix,labels:dependentVariables}); // => [{ Age: '44', Salary: '44' },
            { Age: '27', Salary: '27' }]
               * 
               * @param {*} options 
               * @param {Array[]} options.vectors - array of vectors
               * @param {String[]} options.labels - array of labels
               * @returns {Object[]} an array of objects with properties derived from options.labels
               */
              static reverseColumnMatrix(options = {}) {
                const { vectors=[], labels=[], } = options;
                const features = (Array.isArray(labels) && Array.isArray(labels[ 0 ]))
                  ? labels
                  : labels.map(label => [label, ]);
                return vectors.reduce((result, val) => {
                  result.push(val.reduce((prop, value, index) => {
                    prop[ features[ index ][ 0 ] ] = val[ index ];
                    return prop;
                  }, {}));
                  return result;
                }, []);
              }
              static reverseColumnVector(options = {}) {
                const { vector=[], labels=[], } = options;
                const features = (Array.isArray(labels) && Array.isArray(labels[ 0 ]))
                  ? labels
                  : labels.map(label => [label, ]);
                return vector.reduce((result, val) => {
                  result.push(
                    { [ features[ 0 ][ 0 ] ]: val, }
                  );
                  return result;
                }, []);
              }
              /**
               * Returns an object into an one hot encoded object
               * @example
            const labels = ['apple', 'orange', 'banana',];
            const prefix = 'fruit_';
            const name = 'fruit';
            const options = { labels, prefix, name, };
            const data = {
              fruit: 'apple',
            };
            EncodedCSVDataSet.encodeObject(data, options); // => { fruit_apple: 1, fruit_orange: 0, fruit_banana: 0, }
               * @param {Object} data - object to encode 
               * @param {{labels:Array<String>,prefix:String,name:String}} options - encoded object options
               * @returns {Object} one hot encoded object
               */
              static encodeObject(data, options) {
                const { labels, prefix, name, } = options;
                const encodedData = labels.reduce((encodedObj, label) => {
                  const oneHotLabelArrayName = `${prefix}${label}`;
                  encodedObj[ oneHotLabelArrayName ] = (label && data[ name ] && data[ name ].toString() === label.toString()) ? 1 : 0;
                  return encodedObj;
                }, {});
                return encodedData;
              }
              /**
             * returns a new object of one hot encoded values
             * @example
             * // [ 'Brazil','Mexico','Ghana','Mexico','Ghana','Brazil','Mexico','Brazil','Ghana', 'Brazil' ]
            const originalCountry = dataset.columnArray('Country'); 

            // { originalCountry:
            //    { Country_Brazil: [ 1, 0, 0, 0, 0, 1, 0, 1, 0, 1 ],
            //      Country_Mexico: [ 0, 1, 0, 1, 0, 0, 1, 0, 0, 0 ],
            //      Country_Ghana: [ 0, 0, 1, 0, 1, 0, 0, 0, 1, 0 ] },
            //     }
            const oneHotCountryColumn = dataset.oneHotEncoder('Country'); 
              * @param {string} name - csv column header, or JSON object property name 
              * @param options 
              * @see {@link http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html}
              * @return {Object}
              */
              static oneHotEncoder( name, options) {
                const config = Object.assign({
                  merge: true,
                }, options);
                const labelData = config.data || this.columnArray(name, config.columnArrayOptions);
                const labels = Array.from(new Set(labelData).values());
                const prefix = config.prefix || `${name}_`;
                const encodedData = labelData.reduce(
                  (result, val, index, arr) => {
                    labels.forEach(encodedLabel => {
                      const oneHotLabelArrayName = `${prefix}${encodedLabel}`;
                      const oneHotVal = (val === encodedLabel) ? 1 : 0;
                      if (Array.isArray(result[ oneHotLabelArrayName ])) {
                        result[ oneHotLabelArrayName ].push(oneHotVal);
                      } else {
                        result[ oneHotLabelArrayName ] = [oneHotVal, ];
                      }
                    });
                    return result;
                  }, {});
                if (this.encoders.has(name) && config.merge) {
                  this.encoders.get(name).labels = Array.from(new Set(labels.concat(this.encoders.get(name).labels)));
                  // this.encoders.get(name);
                } else {
                  this.encoders.set(name, {
                    name,
                    labels,
                    prefix,
                  });
                }
                return encodedData;
              }
              /**
               * Return one hot encoded data
               * @example
            const csvData = [{
                'Country': 'Brazil',
                'Age': '44',
                'Salary': '72000',
                'Purchased': 'N',
              },
              {
                'Country': 'Mexico',
                'Age': '27',
                'Salary': '48000',
                'Purchased': 'Yes',
              },
              ...
            ];
            const EncodedCSVDataSet = new ms.preprocessing.DataSet(csvData);
            EncodedCSVDataSet.fitColumns({
              columns: [
                {
                  name: 'Country',
                  options: { strategy: 'onehot', },
                },
              ],
            });

            EncodedCSVDataSet.oneHotDecoder('Country);// =>
            // [ { Country: 'Brazil' },
            //  { Country: 'Mexico' },
            //  { Country: 'Ghana' },
            //  { Country: 'Mexico' },
            //   ...]
               * @param {string} name - column name 
               * @param options 
               * @returns {Array<Object>} returns an array of objects from an one hot encoded column
               */
              static oneHotDecoder(name, options) {
                const config = Object.assign({
                  // handle_unknown: 'error'
                }, options);
                const encoderMap = config.encoders || this.encoders;
                const prefix = config.prefix || encoderMap.get(name).prefix;
                const labels = config.labels || encoderMap.get(name).labels;
                const encodedData = config.data || this.oneHotColumnArray(name, config.oneHotColumnArrayOptions);
                // console.log({ encodedData, encoderMap, prefix });
                return encodedData.reduce((result, val) => {
                  const columnNames = Object.keys(val).filter(prop => val[ prop ] === 1 && (labels.indexOf(prop.replace(prefix, '')) !== -1 || labels.map((label) => String(label)).indexOf(prop.replace(prefix, '')) !== -1));
                  const columnName = columnNames[ 0 ] || '';
                  // console.log({ columnName, columnNames, labels, val},Object.keys(val));
                  const datum = {
                    [ name ]: columnName.replace(prefix, ''),
                  };
                  result.push(datum);
                  return result;
                }, []);
              }
              static oneHotColumnArray(name, oneHotColumnArrayOptions) {
                throw new Error("Method not implemented.");
              }
              /**
               * returns a list of objects with only selected columns as properties
             * @example
            const data = [{ Age: '44', Salary: '44' , Height: '34' },
            { Age: '27', Salary: '44' , Height: '50'  }]
            const AgeDataSet = new MS.DataSet(data);
            const cols = [ 'Age', 'Salary' ];
            const selectedCols = CSVDataSet.selectColumns(cols); // => [{ Age: '44', Salary: '44' },
            { Age: '27', Salary: '27' }]
               * 
               * @param {String[]} names - array of selected columns
               * @param {*} options 
               * @returns {Object[]} an array of objects with properties derived from names
               */
              static selectColumns(names, options = {}) {
                const config = Object.assign({}, options);
                const data = config.data || this.data;
                return data.reduce((result, val) => {
                  const selectedData = {};
                  names.forEach((name) => {
                    selectedData[ name ] = val[ name ];
                  });
                  result.push(selectedData);
                  return result;
                }, []);
              }
              /**
               * returns a new array of a selected column from an array of objects, can filter, scale and replace values
               * @example 
               * //column Array returns column of data by name
            // [ '44','27','30','38','40','35','','48','50', '37' ]
            const OringalAgeColumn = dataset.columnArray('Age'); 
              * @param {string} name - csv column header, or JSON object property name 
              * @param options 
              * @param {function} [options.prefilter=(arr[val])=>true] - prefilter values to return
              * @param {function} [options.filter=(arr[val])=>true] - filter values to return
              * @param {function} [options.replace.test=undefined] - test function for replacing values (arr[val])
              * @param {(string|number|function)} [options.replace.value=undefined] - value to replace (arr[val]) if replace test is true, if a function (result,val,index,arr,name)=>your custom value
              * @param {number} [options.parseIntBase=10] - radix value for parseInt
              * @param {boolean} [options.parseFloat=false] - convert values to floats 
              * @param {boolean} [options.parseInt=false] - converts values to ints 
              * @param {boolean} [options.scale=false] - standard or minmax feature scale values 
              * @returns {array}
              */
              static columnArray(name, options = {}) {
                const config = Object.assign({
                  prefilter: () => true,
                  filter: () => true,
                  replace: {
                    test: undefined,
                    value: undefined,
                  },
                  parseInt: false,
                  parseIntBase: 10,
                  parseFloat: (options.scale) ? true : false,
                  scale: false,
                }, options);
                const data = config.data || this.data;
                const modifiedColumn = data
                  .filter(config.prefilter)
                  .reduce((result, val, index, arr) => {
                    let objVal = val[ name ];
                    let returnVal = (typeof config.replace.test === 'function') ?
                      config.replace.test(objVal) ?
                        typeof config.replace.value === 'function' ?
                          config.replace.value(result, val, index, arr, name) :
                          config.replace.value :
                        objVal :
                      objVal;
                    if (config.filter(returnVal)) {
                      if (config.parseInt) result.push(parseInt(returnVal, config.parseIntBase));
                      else if (config.parseFloat) result.push(parseFloat(returnVal));
                      else result.push(returnVal);
                    }
                    return result;
                  }, []);
                if (typeof config.scale === 'function') {
                  return modifiedColumn.map(config.scale);
                } else if (config.scale) {
                  switch (config.scale) {
                  case 'standard':
                    return util$1.StandardScaler(modifiedColumn);
                  case 'log':
                    return util$1.LogScaler(modifiedColumn);
                  case 'exp':
                    return util$1.ExpScaler(modifiedColumn);
                  case 'normalize':
                  default:
                    return util$1.MinMaxScaler(modifiedColumn);
                  }
                } else {
                  return modifiedColumn;
                }
              }
              
              /**
               * returns a matrix of values by combining column arrays into a matrix
               * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);
            csvObj.columnMatrix([['col1',{parseInt:true}],['col2']]); // =>
            //[ 
            //  [1,5], 
            //  [2,6], 
            //]
              * @param {Array} [vectors=[]] - array of arguments for columnArray to merge columns into a matrix
              * @param {Array} [data=[]] - array of data to convert to matrix
              * @returns {Array} a matrix of column values 
              */
              static columnMatrix(vectors = [], data = []) {
                const options = (data.length) ? { data, } : {};
                const columnVectors = (Array.isArray(vectors) && Array.isArray(vectors[ 0 ]))
                  ? vectors
                  : vectors.map(vector => [vector, options, ]);
                const vectorArrays = columnVectors
                  //@ts-ignore
                  .map((vec) => DataSet.columnArray.call(this, ...vec));
                    
                return util$1.pivotArrays(vectorArrays);
              }
              /**
               * returns a JavaScript Object from a Map (supports nested Map Objects)
               * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);
            csvObj.columnMatrix([['col1',{parseInt:true}],['col2']]); // =>
            //[ 
            //  [1,5], 
            //  [2,6], 
            //]
              * @param {Map} mapObj - Map to convert into JavaScript Object
              * @returns {Object} JavaScript Object converted from a Map
              */
              static mapToObject(mapObj = new Map()){
                return Array.from(mapObj.keys())
                  .reduce((result, val) => {
                    const mapVal = mapObj.get(val);
                    if (mapVal instanceof Map) {
                      result[ val ] = DataSet.mapToObject(mapVal);
                    } else if (typeof mapVal === 'function') {
                      result[ val ] = `[Function ${mapVal.name}]`;
                    } else {
                      result[ val ] = JSON.parse(JSON.stringify(mapVal));
                    }
                    return result;
                  }, {});
              }
              /**
               * returns 0 or 1 depending on the input value
               * @example DataSet.getBinaryValue('true') // => 1
            DataSet.getBinaryValue('false') // => 0
            DataSet.getBinaryValue('No') // => 0
            DataSet.getBinaryValue(false) // => 0
              * @param {String|Number} [value=''] - value to convert to a 1 or a 0
              * @returns {Number} 0 or 1 depending on truthiness of value
              */
              static getBinaryValue(value='') {
                if (!value) return 0;
                switch (value) {
                case false:
                case 'N':
                case 'n':
                case 'NO':
                case 'No':
                case 'no':
                case 'False':
                case 'F':
                case 'f':
                  return 0;
                default:
                  return 1;
                }
              }
              /**
               * creates a new raw data instance for preprocessing data for machine learning
               * @example
               * const dataset = new ms.DataSet(csvData);
               * @param {Object[]} dataset
               * @returns {this} 
               */
              constructor(data = [], options = {}) {
                this.config = Object.assign({
                  debug: true,
                }, options);
                this.data = [...data, ];
                this.labels = new Map();
                this.encoders = new Map();
                this.scalers = new Map();
                this.selectColumns = DataSet.selectColumns;
                this.columnArray = DataSet.columnArray;
                this.encodeObject = DataSet.encodeObject;
                this.oneHotEncoder = DataSet.oneHotEncoder;
                this.oneHotDecoder = DataSet.oneHotDecoder;
                this.columnMatrix = DataSet.columnMatrix;
                this.reverseColumnMatrix = DataSet.reverseColumnMatrix;
                this.reverseColumnVector = DataSet.reverseColumnVector;
                this.getTransforms = DataSet.getTransforms;
                if (this.config.labels || this.config.encoders || this.config.scalers) {
                  this.importFeatures({
                    labels: this.config.labels,
                    encoders: this.config.encoders,
                    scalers: this.config.scalers,
                  });
                }
                return this;
              }
              /**
               * returns Object of all encoders and scalers 
               * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:false,col2:6}]);
            DataSet.fitColumns({col1:['label',{binary:true}]}); 
            Dataset.data // => [{col1:true,col2:5},{col1:false,col2:6}]
            Dataset.exportFeatures() //=> { labels: { col1: { "0": false, "1": true, "N": 0, "Yes": 1, "No": 0, "f": 0, "false": 1, } } }
              * @param {Function} [filter=()=>true] - filter function
              * @returns {{labels:Map,encoders:Map,scalers:map}} JavaScript Object of transforms encoders and scalers(labels, encoders, scalers) 
              */
              exportFeatures(options = {}) {
                const config = Object.assign({
                }, options);
                return {
                  encoders: DataSet.mapToObject(this.encoders),
                  labels: DataSet.mapToObject(this.labels),
                  scalers: DataSet.mapToObject(this.scalers),
                };
              }
              /**
               * set encoders, labels and scalers 
               * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:false,col2:6}]);
            DataSet.fitColumns({col1:['label',{binary:true}]}); 
            Dataset.data // => [{col1:true,col2:5},{col1:false,col2:6}]
            Dataset.exportFeatures() //=> { labels: { col1: { "0": false, "1": true, "N": 0, "Yes": 1, "No": 0, "f": 0, "false": 1, } } }
              * @param {{labels:Map,encoders:Map,scalers:map}} [features={}] - JavaScript Object of transforms encoders and scalers(labels, encoders, scalers) 
              */
              importFeatures(features = {}) {
                Object.keys(features.encoders || {}).forEach(encoderName => { 
                  const encoder = features.encoders[ encoderName ];
                  this.encoders.set(encoderName, encoder);
                });
                Object.keys(features.labels || {}).forEach(labelName => {
                  const labelData = features.labels[labelName];
                  const labels = Object.keys(labelData)
                    .map(labelProp => [labelProp, labelData[ labelProp ], ]);
                  if (typeof labelData[ '0' ] !== 'undefined' && typeof labelData[ '1' ] !== 'undefined') {
                    labels.push(...[
                      [ 0, false, ],
                      [ false, 0, ],
                      [ null, 0, ],
                      [ 'no', 0, ],
                      [ 'No', 0, ],
                      [ 'NO', 0, ],
                      [ 'F', 0, ],
                      [ 'f', 0, ],
                      [ 'null', 0, ],
                      [ '', 0, ],
                      [ undefined, 0, ],
                      [ 'undefined', 0, ],
                      [ 1, true, ],
                      [ true, 1, ],
                    ]);
                  }
                  this.labels.set(labelName, new Map(labels));
                });
                Object.keys(features.scalers || {}).forEach(scalerName => {
                  let transforms;
                  const scalerData = features.scalers[ scalerName ];
                  const { config, } = scalerData;
                  switch (config.strategy) {
                  case 'standard':
                    transforms = util$1.StandardScalerTransforms(...[undefined, config.nan_value, config.return_nan, scalerData.components,]);
                    scalerData.scale = transforms.scale;  
                    scalerData.descale = transforms.descale;  
                    break;
                  case 'normalize':
                  case 'minmax':
                    transforms = util$1.MinMaxScalerTransforms(...[undefined, config.nan_value, config.return_nan, scalerData.components,]);
                    scalerData.scale = transforms.scale;  
                    scalerData.descale = transforms.descale;   
                    break;
                  case 'log':
                  default:
                    scalerData.scale = Math.log;  
                    scalerData.descale = Math.exp;  
                    break;
                  }
                  this.scalers.set(scalerName, scalerData);
                });
              }
              /**
               * returns filtered rows of data 
               * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);
            csvObj.filterColumn((row)=>row.col1>=2); // =>
            //[ 
            //  [2,6], 
            //]
              * @param {Function} [filter=()=>true] - filter function
              * @returns {Array} filtered array of data 
              */
              filterColumn(filter = () => true) {
                return this.data.filter(filter);
              }
              /**
               * Returns a new array of scaled values which can be reverse (descaled). The scaling transformations are stored on the DataSet
               * @example
            //dataset.columnArray('Age') => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]
            dataset.columnScale('Age',{strategy:'log'}) // => [ 3.784189633918261,
              3.295836866004329, 3.4011973816621555, 3.6375861597263857, 3.6888794541139363, 3.5553480614894135, 3.657847344866208, 3.8712010109078907, 3.912023005428146, 3.6109179126442243 ]
            dataset.scalers.get('Age').scale(45) // => 3.8066624897703196
            dataset.scalers.get('Age').descale(3.8066624897703196) // => 45
            //this supports, log/exponent, minmax/normalization and standardscaling
               * @param {string} name - name - csv column header, or JSON object property name 
               * @param {string} [options.strategy="log"] - strategy for scaling values 
               * @returns {number[]} returns an array of scaled values
               */
              columnScale(name, options = {}) {
                const input = (typeof options === 'string')
                  ? { strategy: options, }
                  : options;
                const config = Object.assign({
                  strategy: 'log',
                  forced_coercion: false,
                }, input);
                let scaleData = config.data || this.columnArray(name, config.columnArrayOptions);
                let scaledData;
                let transforms;
                  
                scaleData = scaleData.filter((datum) => typeof datum !== 'undefined')
                  .map((datum, i) => {
                    if (typeof datum !== 'number') {
                      if (this.config.debug && config.forced_coercion===false) {
                        console.error(TypeError(`Each value must be a number, error at index [${name}][${i}]: <${typeof datum}>${datum}`));
                      }
                      const num = Number(datum);
                      if (isNaN(num) && config.forced_coercion) {
                        return 0;
                      } else if (isNaN(num)) {
                        throw TypeError(`Only numerical values in (${name}) can be scaled i: ${i} datum: ${datum}`);
                      }
                      return num;
                    } else return datum;
                  });
                switch (config.strategy) {
                case 'standard':
                  transforms = util$1.StandardScalerTransforms(...[scaleData, config.nan_value, config.return_nan,]);
                  this.scalers.set(name, {
                    name,
                    scale: transforms.scale,
                    descale: transforms.descale,
                    components: transforms.components,
                  });
                  scaledData = transforms.values;
                  break;
                case 'normalize':
                case 'minmax':
                  transforms = util$1.MinMaxScalerTransforms(...[scaleData, config.nan_value, config.return_nan,]);     
                  this.scalers.set(name, {
                    name,
                    scale: transforms.scale,
                    descale: transforms.descale,
                    components: transforms.components,
                  });
                  scaledData = transforms.values;
                  break;
                case 'log':
                default:
                  this.scalers.set(name, {
                    name,
                    scale: Math.log,
                    descale: Math.exp,
                    components: {
                      average : util$1.avg(scaleData),
                      standard_dev : util$1.sd(scaleData),
                      maximum : util$1.max(scaleData),
                      minimum : util$1.min(scaleData),
                    },
                  });
                  scaledData = util$1.LogScaler(scaleData);
                  break;
                }
                this.scalers.get(name).config = config;
                return scaledData;
              }
              /**
               * Returns a new array of descaled values
               * @example
            //dataset.columnArray('Age') => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]
            const scaledData = [ 3.784189633918261,
              3.295836866004329, 3.4011973816621555, 3.6375861597263857, 3.6888794541139363, 3.5553480614894135, 3.657847344866208, 3.8712010109078907, 3.912023005428146, 3.6109179126442243 ]
            dataset.columnDescale('Age') // => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]
               * @param {string} name - name - csv column header, or JSON object property name 
               * @param {string} [options.strategy="log"] - strategy for scaling values 
               * @returns {number[]} returns an array of scaled values
               */
              columnDescale(name, options) {
                const config = Object.assign({ }, options);
                const scaledData = config.data || this.columnArray(name, config.columnArrayOptions);
                const descaleFunction = this.scalers.get(name).descale;
                return scaledData.map(descaleFunction);
              }
              /**
               * returns a new array and label encodes a selected column
               * @example
               * const oneHotCountryColumn = dataset.oneHotEncoder('Country'); 

            // [ 'N', 'Yes', 'No', 'f', 'Yes', 'Yes', 'false', 'Yes', 'No', 'Yes' ] 
            const originalPurchasedColumn = dataset.labelEncoder('Purchased');
            // [ 0, 1, 0, 0, 1, 1, 1, 1, 0, 1 ]
            const encodedBinaryPurchasedColumn = dataset.labelEncoder('Purchased',{ binary:true });
            // [ 0, 1, 2, 3, 1, 1, 4, 1, 2, 1 ]
            const encodedPurchasedColumn = dataset.labelEncoder('Purchased'); 
              * @param {string} name - csv column header, or JSON object property name 
              * @param options
              * @param {boolean} [options.binary=false] - only replace with (0,1) with binary values 
              * @param {function} options.sortFunction - custom label encoding value sort function
              * @see {@link http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html} 
              * @returns {array}
              */
              labelEncoder(name, options) {
                const config = Object.assign({
                  binary: false,
                  merge: true,
                }, options);
                const labelData = config.data || this.columnArray(name, config.columnArrayOptions);
                let labelDataUniqueValues = Array.from(new Set(labelData).values()).sort(config.sortFunction);
                const labels = new Map(
                  labelDataUniqueValues
                    .reduce((result, val, i) => {
                      if (config.binary) {
                        if (i === 0) {
                          result.push(...[
                            [0, false,],
                            ['0', false,],
                            [1, true,],
                            ['1', true,],
                          ]);
                        }
                        result.push([val, DataSet.getBinaryValue(val),]);
                      } else {
                        result.push([val, i,]);
                        result.push([i, val,]);
                      }
                      return result;
                    }, [])
                );
                if (this.labels.has(name) && config.merge) {
                  this.labels.set(name, new Map([...this.labels.get(name), ...labels,]));
                } else this.labels.set(name, labels);
                const labeledData = (config.binary) ?
                  labelData.map(DataSet.getBinaryValue) :
                  labelData.map((label) => labels.get(label));
                return labeledData;
              }
              /**
                 * returns a new array and decodes an encoded column back to the original array values
                 * @param {string} name - csv column header, or JSON object property name 
                 * @param options
                 * @returns {array}
                 */
              labelDecode(name, options= {}) {
                const config = Object.assign({}, options);
                const labelData = config.data || this.columnArray(name, config.columnArrayOptions);
                return labelData.map((val) => this.labels.get(name).get(val));
              }
              /**
               * Return one hot encoded data
               * @example
            const csvData = [{
                'Country': 'Brazil',
                'Age': '44',
                'Salary': '72000',
                'Purchased': 'N',
              },
              {
                'Country': 'Mexico',
                'Age': '27',
                'Salary': '48000',
                'Purchased': 'Yes',
              },
              ...
            ];
            const EncodedCSVDataSet = new ms.preprocessing.DataSet(csvData);
            EncodedCSVDataSet.fitColumns({
              columns: [
                {
                  name: 'Country',
                  options: { strategy: 'onehot', },
                },
              ],
            });

            EncodedCSVDataSet.oneHotColumnArray('Country);// =>
            // [ { Country_Brazil: 1, Country_Mexico: 0, Country_Ghana: 0 },
            //   { Country_Brazil: 0, Country_Mexico: 1, Country_Ghana: 0 },
            //   { Country_Brazil: 0, Country_Mexico: 0, Country_Ghana: 1 },
            //   ...]
               * @param {string} name - column name 
               * @param options 
               * @returns {Array<Object>} returns an array of objects from an one hot encoded column
               */
              oneHotColumnArray(name, options) {
                const config = Object.assign({
                  // handle_unknown: 'error'
                }, options);
                const labels = config.labels || this.encoders.get(name).labels;
                const prefix = config.prefix || this.encoders.get(name).prefix;
                return this.selectColumns(labels.map((label) => `${prefix}${label}`));
              }
              /**
             * it returns a new column that reduces a column into a new column object, this is used in data prep to create new calculated columns for aggregrate statistics
             * @example 
            const reducer = (result, value, index, arr) => {
            result.push(value * 2);
            return result;
            };
            CSVDataSet.columnReducer('DoubleAge', {
            columnName: 'Age',
            reducer,
            }); //=> { DoubleAge: [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ] }
              * @param {String} name - name of new Column 
              * @param {Object} options 
              * @param {String} options.columnName - name property for columnArray selection 
              * @param {Object} options.columnOptions - options property for columnArray  
              * @param {Function} options.reducer - reducer function to reduce into new array, it should push values into the resulting array  
              * @returns {Object} a new object that has reduced array as the value
              */
              columnReducer(name, options) {
                const newColumn = {
                  [ name ]: this.columnArray(options.columnName, options.columnOptions).reduce(options.reducer, []),
                };
                return newColumn;
              }
              /**
               * it returns a new column that is merged onto the data set
               * @example 
            CSVDataSet.columnMerge('DoubleAge', [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ]); //=> { DoubleAge: [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ] }
                * @param {String} name - name of new Column 
                * @param {Array} data - new dataset data  
                * @returns {Object} 
                */
              columnMerge(name, data=[]) {
                if (this.data.length !== data.length) throw new RangeError(`Merged data column must have the same length(${data.length}) as the DataSet's length (${this.data.length})`);
                return {
                  [name]: data,
                };
              }
              /**
               * Inverses transform on an object
               * @example
            DataSet.data; //[{
            //   Age: 0.6387122698222066,
            //   Salary: 72000,
            //   Purchased: 0,
            //   Country_Brazil: 1,
            //   Country_Mexico: 0,
            //   Country_Ghana: 0,
            // }, ...] 
            DataSet.inverseTransformObject(DataSet.data[0]); // => {
            //  Country: 'Brazil', 
            //  Age: 44, 
            //  Salary: 72000, 
            //  Purchased: 'N', 
            // };
               * @param data 
               * @param options 
               * @returns {Object} returns object with inverse transformed data
               */
              inverseTransformObject(data, options) {
                const config = Object.assign({
                  removeValues: false,
                }, options);
                const removedColumns = [];
                let transformedObject = Object.assign({}, data);
                const columnNames = Object.keys(this.data[ 0 ]);
                const scaledData = columnNames.reduce((scaleObject, columnName) => {
                  if (this.scalers.has(columnName)){
                    scaleObject[ columnName ] = this.scalers.get(columnName).descale(data[ columnName ]);
                  }
                  return scaleObject;
                }, {});
                const labeledData = columnNames.reduce((labelObject, columnName) => {
                  if (this.labels.has(columnName)){
                    labelObject[ columnName ] = this.labels.get(columnName).get(data[ columnName ]);
                  }
                  return labelObject;
                }, {});
                const encodedData = columnNames.reduce((encodedObject, columnName) => {
                  if (this.encoders.has(columnName)) {
                    const encoded = this.oneHotDecoder(columnName, {
                      data: [data,],
                    });
                    // console.log({encoded})
                    encodedObject = Object.assign({}, encodedObject, encoded[ 0 ]);
                    if (config.removeValues) {
                      removedColumns.push(...this.encoders.get(columnName).labels.map((label)=>`${this.encoders.get(columnName).prefix}${label}`));
                    }
                  }
                  return encodedObject;
                }, {});
                transformedObject = Object.assign(transformedObject, scaledData, labeledData, encodedData);
                if (config.removeValues && removedColumns.length) {
                  transformedObject = Object.keys(transformedObject).reduce((removedObject, propertyName) => {
                    if (removedColumns.indexOf(propertyName) === -1) {
                      removedObject[ propertyName ] = transformedObject[ propertyName ];
                    }
                    return removedObject;
                  }, {});
                }
                return transformedObject;
              }
              /**
               * transforms an object and replaces values that have been scaled or encoded
               * @example
            DataSet.transformObject({
              'Country': 'Brazil',
              'Age': '44',
              'Salary': '72000',
              'Purchased': 'N',
            }); // =>
            // { 
            //  Country: 'Brazil',
            //  Age: 3.784189633918261,
            //  Salary: '72000',
            //  Purchased: 'N',
            //  Country_Brazil: 1,
            //  Country_Mexico: 0,
            //  Country_Ghana: 0
            // }
               * @param data 
               * @param options 
               * @returns {Object} 
               */
              transformObject(data, options) {
                const config = Object.assign({
                  removeValues: false,
                  checkColumnLength: true,
                }, options);
                const removedColumns = [];
                // if (Array.isArray(data)) return data.map(datum => this.transformObject);
                const encodedColumns = new Array().concat(...Array.from(this.encoders.keys())
                  .map(encodedColumn => this.encoders.get(encodedColumn).labels
                    .map((label)=>`${this.encoders.get(encodedColumn).prefix}${label}`)
                  )
                );
                const currentColumns = (this.data.length)
                  ? Object.keys(this.data[ 0 ])
                  : Object.keys(data);
                const objectColumns = Object.keys(data).concat(encodedColumns);
                // console.log({ encodedColumns,currentColumns,objectColumns });
                const differentKeys = objectColumns.reduce((diffKeys, val) => {
                  if (currentColumns.indexOf(val) === -1 && encodedColumns.indexOf(val) === -1) diffKeys.push(val);
                  return diffKeys;
                }, []);
                let transformedObject = Object.assign({}, data);
                if (config.checkColumnLength && currentColumns.length !== objectColumns.length && currentColumns.length+encodedColumns.length !== objectColumns.length ) {
                  throw new RangeError(`Object must have the same number of keys (${objectColumns.length}) as data in your dataset(${currentColumns.length})`);
                } else if (config.checkColumnLength && differentKeys.length) {
                  throw new ReferenceError(`Object must have identical keys as data in your DataSet. Invalid keys: ${differentKeys.join(',')}`);
                } else {
                  const scaledData = objectColumns.reduce((scaleObject, columnName) => {
                    if (this.scalers.has(columnName)){
                      scaleObject[ columnName ] = this.scalers.get(columnName).scale(data[ columnName ]);
                    }
                    return scaleObject;
                  }, {});
                  const labeledData = objectColumns.reduce((labelObject, columnName) => {
                    if (this.labels.has(columnName)){
                      labelObject[ columnName ] = this.labels.get(columnName).get(data[ columnName ]);
                    }
                    return labelObject;
                  }, {});
                  const encodedData = objectColumns.reduce((encodedObject, columnName) => {
                    if (this.encoders.has(columnName)) {
                      encodedObject = Object.assign({}, encodedObject, this.encodeObject(data, this.encoders.get(columnName)));
                      if (config.removeValues) {
                        removedColumns.push(columnName);
                      }
                    }
                    return encodedObject;
                  }, {});
                  transformedObject = Object.assign(transformedObject, scaledData, labeledData, encodedData);
                  if (config.removeValues && removedColumns.length) {
                    transformedObject = Object.keys(transformedObject).reduce((removedObject, propertyName) => {
                      if (removedColumns.indexOf(propertyName) === -1) removedObject[ propertyName ] = transformedObject[ propertyName ];
                      return removedObject;
                    }, {});
                  }
                }
                return transformedObject;
              } 
              /**
               * returns a new array of a selected column from an array of objects and replaces empty values, encodes values and scales values
               * @example
               * //column Replace returns new Array with replaced missing data
            //[ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]
            const ReplacedAgeMeanColumn = dataset.columnReplace('Age',{strategy:'mean'});
              * @param {string} name - csv column header, or JSON object property name 
              * @param options 
              * @param {boolean} [options.empty=true] - replace empty values 
              * @param {boolean} [options.strategy="mean"] - strategy for replacing value, any array stat method from ml.js (mean, standardDeviation, median) or (label,labelEncoder,onehot,oneHotEncoder)
              * @returns {array|Object[]}
              */
              columnReplace(name, options = {}) {
                const config = Object.assign({
                  strategy: 'mean',
                  empty: true,
                  arrayOptions: {
                    parseFloat: true,
                    filter: (val) => val,
                  },
                  labelOptions: {},
                }, options);
                let replaceVal;// { [x: string]: any;[x: number]: any; } | undefined;
                let replace = {
                  test: (val) => !val,
                  value: replaceVal,
                };
                switch (config.strategy) {
                case 'scale':
                  replaceVal = this.columnScale(name, config.scaleOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  break;
                case 'descale':
                  replaceVal = this.columnDescale(name, config.descaleOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  break;
                case 'label':
                case 'labelEncoder':
                  replaceVal = this.labelEncoder(name, config.labelOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  break;
                case 'labeldecode':
                case 'labelDecode':
                case 'labelDecoder':
                  replaceVal = this.labelDecode(name, config.labelOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  break;
                case 'onehot':
                case 'oneHot':
                case 'oneHotEncode':
                case 'oneHotEncoder':
                  replaceVal = this.oneHotEncoder(name, config.oneHotOptions);
                  replace = {
                    test: val => true,
                    value: (result, val, index, arr) => replaceVal[index],
                  };
                  return replaceVal;
                  // break;
                case 'reducer':
                case 'reduce':
                  replaceVal = this.columnReducer(name, config.reducerOptions); 
                  return replaceVal;  
                case 'merge':
                  replaceVal = this.columnMerge(name, config.mergeData); 
                  return replaceVal; 
                case 'parseNumber':
                  replaceVal = this.columnArray(name).map((num) => Number(num)); 
                  return replaceVal; 
                default:
                  replaceVal = array$1[config.strategy](this.columnArray(name, config.arrayOptions));
                  replace.value = replaceVal;
                  break;
                }
                return this.columnArray(name,
                  Object.assign({}, {
                    replace,
                    scale: options.scale,
                  }, options.columnOptions));
              }
              /**
                 * mutates data property of DataSet by replacing multiple columns in a single command
                 * @example
                 * //fit Columns, mutates dataset
            dataset.fitColumns({
              columns:[{name:'Age',options:{ strategy:'mean'} }]
            });
            // dataset
            // class DataSet
            //   data:[
            //     {
            //       'Country': 'Brazil',
            //       'Age': '38.77777777777778',
            //       'Salary': '72000',
            //       'Purchased': 'N',
            //     }
            //     ...
            //   ]
              * @param {Boolean} options.returnData - return updated DataSet data property 
              * @param {Object[]} options.columns - {name:'columnName',options:{strategy:'mean',labelOoptions:{}},}
              * @returns {Object[]}
              */
              fitColumns(options = {}, mockDataOptions = {}) {
                const config = Object.assign({
                  returnData:true,
                  columns: [],
                }, options);
                if ( !options.columns || Array.isArray(options.columns) ===false) {
                  config.columns = (options.columns)
                    ? DataSet.getTransforms(options.columns)
                    : DataSet.getTransforms(options);
                }
                const fittedColumns = config.columns
                  .reduce((result, val, index, arr) => {
                    let replacedColumn = this.columnReplace(val.name, val.options);
                    if (Array.isArray(replacedColumn)) {
                      replacedColumn = replacedColumn.map(columnVal => ({
                        [val.name]: columnVal,
                      }));
                      result[val.name] = replacedColumn;
                    } else {
                      Object.keys(replacedColumn).forEach(repColName => {
                        result[repColName] = replacedColumn[repColName].map((columnVal) => ({
                          [repColName]: columnVal,
                        }));
                      });
                    }
                    return result;
                  }, {});
                if (Object.keys(fittedColumns) && Object.keys(fittedColumns).length) {
                  const columnNames = Object.keys(fittedColumns);
                  const fittedData = fittedColumns[columnNames[0]]
                    .reduce((result, val, index, arr) => {
                      const returnObj = {};
                      columnNames.forEach(colName => {
                        returnObj[colName] = fittedColumns[colName][index][colName];
                      });
                      result.push(returnObj);
                      return result;
                    }, []);
                  this.data = this.data.map((val, index) => Object.assign({}, val, fittedData[index]));
                }
                return config.returnData ? this.data : this;
              }
              /**
               * Mutate dataset data by inversing all transforms
               * @example
            DataSet.data;
            // [{ 
            //  Country: 'Brazil',
            //  Age: 3.784189633918261,
            //  Salary: '72000',
            //  Purchased: 'N',
            //  Country_Brazil: 1,
            //  Country_Mexico: 0,
            //  Country_Ghana: 0
            // },
            // ...
            // ]
            DataSet.fitInverseTransforms(); // =>
            // [{
            //   'Country': 'Brazil',
            //   'Age': '44',
            //   'Salary': '72000',
            //   'Purchased': 'N',
            // },
            // ...
            // ]
               * @param options 
               */
              fitInverseTransforms(options = {}) {
                const config = Object.assign({
                  returnData: true,
                }, options);
                this.data = this.data.map(val => {
                  return (options.removeValues)
                    ? this.inverseTransformObject(val, options)
                    : Object.assign({}, val, this.inverseTransformObject(val, options));
                });
                return config.returnData ? this.data : this;
              }
              /**
               * Mutate dataset data with all transforms
               * @param options
               * @example
            DataSet.data;
            // [{
            //   'Country': 'Brazil',
            //   'Age': '44',
            //   'Salary': '72000',
            //   'Purchased': 'N',
            // },
            // ...
            // ]
            DataSet.fitTransforms(); // =>
            // [{ 
            //  Country: 'Brazil',
            //  Age: 3.784189633918261,
            //  Salary: '72000',
            //  Purchased: 'N',
            //  Country_Brazil: 1,
            //  Country_Mexico: 0,
            //  Country_Ghana: 0
            // },
            // ...
            // ] 
               */
              fitTransforms(options = {}) {
                const config = Object.assign({
                  returnData: true,
                }, options);
                this.data = this.data.map(val => {
                  return (options.removeValues)
                    ? this.transformObject(val, options)
                    : Object.assign({}, val, this.transformObject(val, options));
                });
                return config.returnData ? this.data : this;
              }
            }

            // import { ml, } from './ml';




            // console.log({ natural });
            // export const nat = natural;
            /**
             * class creating sparse matrices from a corpus
             * @class ColumnVectorizer
             * @memberOf nlp
             */
            class ColumnVectorizer {
              
              
              
              
              
              
              
              
              
              
              /**
               * creates a new instance for classifying text data for machine learning
               * @example
               * const dataset = new ms.nlp.ColumnVectorizer(csvData);
               * @param {Object} [options={}]
               * @prop {Object[]} this.data - Array of strings
               * @prop {Set} this.tokens - Unique collection of all tokenized strings
               * @prop {Object[]} this.vectors - Array of tokenized words with value of count of appreance in string
               * @prop {Object} this.wordMap - Object of all unique words, with value of 0
               * @prop {Object} this.wordCountMap - Object of all unique words, with value as total count of appearances
               * @prop {number} this.maxFeatures - max number of features
               * @prop {String[]} this.sortedWordCount - list of words as tokens sorted by total appearances
               * @prop {String[]} this.limitedFeatures - subset list of maxFeatures words as tokens sorted by total appearances
               * @prop {Array[]} this.matrix - words in sparse matrix
               * @prop {Function} this.replacer - clean string function
               * @returns {this} 
               */
              constructor(options = {}) {
                // if (typeof window !== 'undefined' && (typeof window.natural === 'undefined' ||  typeof natural==='undefined')) {
                //   throw new Error('NLP requires natural');
                // }
                try {
                  if (typeof nlp.PorterStemmer === 'undefined') {
                    Object.assign(nlp, natural);
                  }
                } catch (E) {
                  console.error({E});
                }
                this.data = options.data || [];
                this.tokens = new Set();
                this.vectors = [];
                this.wordMap = {};
                this.wordCountMap = {};
                this.maxFeatures = options.maxFeatures;
                this.sortedWordCount = [];
                this.limitedFeatures = [];
                this.matrix = [];
                this.replacer = (value='') => {
                  const cleanedValue = value
                    .toLowerCase()
                    .replace(/[^a-zA-Z]/gi, ' ');
                  return nlp.PorterStemmer
                    .tokenizeAndStem(cleanedValue)
                    .join(' ');
                };
                return this;
              }
              /** 
               * Returns a distinct array of all tokens
               * @return {String[]} returns a distinct array of all tokens
              */
              get_tokens() {
                return Array.from(this.tokens);
              }
              /** 
               * Returns array of arrays of strings for dependent features from sparse matrix word map
               * @return {String[]} returns array of dependent features for DataSet column matrics
              */
              get_vector_array() {
                return this.get_tokens().map(tok => [
                  tok,
                ]);
              }
              /**
               * Fits and transforms data by creating column vectors (a sparse matrix where each row has every word in the corpus as a column and the count of appearances in the corpus)
               * @param {Object} options 
               * @param {Object[]} options.data - array of corpus data 
               */
              fit_transform(options = {}) {
                const data = options.data || this.data;
                data.forEach((datum) => {
                  const datums = {};
                  this.replacer(datum)
                    .split(' ')
                    .forEach(tok => {
                      const token = tok.toLowerCase();
                      datums[ token ] = (datums[ token ])
                        ? datums[ token ] + 1
                        : 1;
                      this.wordCountMap[token] = (this.wordCountMap[token])
                        ? this.wordCountMap[token] + 1
                        : 1;
                      this.tokens.add(token);
                    });
                  this.vectors.push(datums);
                });
                this.wordMap = Array.from(this.tokens).reduce((result, value) => { 
                  result[ value ] = 0;
                  return result;
                }, {});
                this.sortedWordCount = Object.keys(this.wordCountMap)
                  .sort((a, b) => this.wordCountMap[ b ] - this.wordCountMap[ a ]);
                this.vectors = this.vectors.map(vector => Object.assign({}, this.wordMap, vector));

                const vectorData = new DataSet(this.vectors);
                this.limitedFeatures = this.get_limited_features(options) ;
                this.matrix = vectorData.columnMatrix(this.limitedFeatures);
                return this.matrix;
              }
              /**
               * Returns limited sets of dependent features or all dependent features sorted by word count
               * @param {*} options 
               * @param {number} options.maxFeatures - max number of features 
               */
              get_limited_features(options = {}) {
                const maxFeatures = options.maxFeatures || this.maxFeatures || this.tokens.size;
             
                return this.sortedWordCount
                  .slice(0, maxFeatures)
                  .map(feature => [ feature, ]);
              }
              /**
               * returns word map with counts
               * @example 
            ColumnVectorizer.evaluateString('I would rate everything Great, views Great, food Great') => { realli: 0,
                 good: 0,
                 definit: 0,
                 recommend: 0,
                 wait: 0,
                 staff: 0,
                 rude: 0,
                 great: 3,
                 view: 1,
                 food: 1,
                 not: 0,
                 cold: 0,
                 took: 0,
                 forev: 0,
                 seat: 0,
                 time: 0,
                 prompt: 0,
                 attent: 0,
                 bland: 0,
                 flavor: 0,
                 kind: 0 }
               * @param {String} testString 
               * @return {Object} object of corpus words with accounts
               */
              evaluateString(testString = '') {
                const evalString = this.replacer(testString);
                const evalStringWordMap = evalString.split(' ').reduce((result, value) => { 
                  if (this.tokens.has(value)) {
                    result[ value ] = (result[ value ]!==undefined)
                      ? result[ value ] + 1
                      : 1;
                  }
                  return result;
                }, {});
                return {
                  ...this.wordMap,
                  ...evalStringWordMap,
                };
                // return Object.assign({}, this.wordMap, evalStringWordMap);
              }
              /**
               * returns new matrix of words with counts in columns
               * @example 
            ColumnVectorizer.evaluate('I would rate everything Great, views Great, food Great') => [ [ 0, 1, 3, 0, 0, 0, 0, 0, 1 ] ]
               * @param {String} testString 
               * @return {number[][]} sparse matrix row for new classification predictions
               */
              evaluate(testString='', options) {
                const stringObj = this.evaluateString(testString);
                const limitedFeatures = this.get_limited_features(options);
                const vectorData = new DataSet([
                  stringObj,
                ]);
                return vectorData.columnMatrix(limitedFeatures);
              }
            }

            // import { default as natural, } from 'natural';

            /**
             * @namespace
             * @see {@link https://github.com/NaturalNode/natural} 
             */
            const nlp = Object.assign({
              ColumnVectorizer,
            },
              // natural
            );

            const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;
            const LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;
            const UINT32_MAX = -1 >>> 0;
            const UINT32_SIZE = UINT32_MAX + 1;
            const INT32_SIZE = UINT32_SIZE / 2;
            const INT32_MAX = INT32_SIZE - 1;
            const UINT21_SIZE = 1 << 21;
            const UINT21_MAX = UINT21_SIZE - 1;

            /**
             * Returns a value within [-0x80000000, 0x7fffffff]
             */
            function int32(engine) {
                return engine.next() | 0;
            }

            function add(distribution, addend) {
                if (addend === 0) {
                    return distribution;
                }
                else {
                    return engine => distribution(engine) + addend;
                }
            }

            /**
             * Returns a value within [-0x20000000000000, 0x1fffffffffffff]
             */
            function int53(engine) {
                const high = engine.next() | 0;
                const low = engine.next() >>> 0;
                return ((high & UINT21_MAX) * UINT32_SIZE +
                    low +
                    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));
            }

            /**
             * Returns a value within [-0x20000000000000, 0x20000000000000]
             */
            function int53Full(engine) {
                while (true) {
                    const high = engine.next() | 0;
                    if (high & 0x400000) {
                        if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {
                            return SMALLEST_UNSAFE_INTEGER;
                        }
                    }
                    else {
                        const low = engine.next() >>> 0;
                        return ((high & UINT21_MAX) * UINT32_SIZE +
                            low +
                            (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));
                    }
                }
            }

            /**
             * Returns a value within [0, 0xffffffff]
             */
            function uint32(engine) {
                return engine.next() >>> 0;
            }

            /**
             * Returns a value within [0, 0x1fffffffffffff]
             */
            function uint53(engine) {
                const high = engine.next() & UINT21_MAX;
                const low = engine.next() >>> 0;
                return high * UINT32_SIZE + low;
            }

            /**
             * Returns a value within [0, 0x20000000000000]
             */
            function uint53Full(engine) {
                while (true) {
                    const high = engine.next() | 0;
                    if (high & UINT21_SIZE) {
                        if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {
                            return SMALLEST_UNSAFE_INTEGER;
                        }
                    }
                    else {
                        const low = engine.next() >>> 0;
                        return (high & UINT21_MAX) * UINT32_SIZE + low;
                    }
                }
            }

            function isPowerOfTwoMinusOne(value) {
                return ((value + 1) & value) === 0;
            }
            function bitmask(masking) {
                return (engine) => engine.next() & masking;
            }
            function downscaleToLoopCheckedRange(range) {
                const extendedRange = range + 1;
                const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);
                return engine => {
                    let value = 0;
                    do {
                        value = engine.next() >>> 0;
                    } while (value >= maximum);
                    return value % extendedRange;
                };
            }
            function downscaleToRange(range) {
                if (isPowerOfTwoMinusOne(range)) {
                    return bitmask(range);
                }
                else {
                    return downscaleToLoopCheckedRange(range);
                }
            }
            function isEvenlyDivisibleByMaxInt32(value) {
                return (value | 0) === 0;
            }
            function upscaleWithHighMasking(masking) {
                return engine => {
                    const high = engine.next() & masking;
                    const low = engine.next() >>> 0;
                    return high * UINT32_SIZE + low;
                };
            }
            function upscaleToLoopCheckedRange(extendedRange) {
                const maximum = extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);
                return engine => {
                    let ret = 0;
                    do {
                        const high = engine.next() & UINT21_MAX;
                        const low = engine.next() >>> 0;
                        ret = high * UINT32_SIZE + low;
                    } while (ret >= maximum);
                    return ret % extendedRange;
                };
            }
            function upscaleWithinU53(range) {
                const extendedRange = range + 1;
                if (isEvenlyDivisibleByMaxInt32(extendedRange)) {
                    const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;
                    if (isPowerOfTwoMinusOne(highRange)) {
                        return upscaleWithHighMasking(highRange);
                    }
                }
                return upscaleToLoopCheckedRange(extendedRange);
            }
            function upscaleWithinI53AndLoopCheck(min, max) {
                return engine => {
                    let ret = 0;
                    do {
                        const high = engine.next() | 0;
                        const low = engine.next() >>> 0;
                        ret =
                            (high & UINT21_MAX) * UINT32_SIZE +
                                low +
                                (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);
                    } while (ret < min || ret > max);
                    return ret;
                };
            }
            /**
             * Returns a Distribution to return a value within [min, max]
             * @param min The minimum integer value, inclusive. No less than -0x20000000000000.
             * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.
             */
            function integer(min, max) {
                min = Math.floor(min);
                max = Math.floor(max);
                if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {
                    throw new RangeError(`Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`);
                }
                else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {
                    throw new RangeError(`Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`);
                }
                const range = max - min;
                if (range <= 0 || !isFinite(range)) {
                    return () => min;
                }
                else if (range === UINT32_MAX) {
                    if (min === 0) {
                        return uint32;
                    }
                    else {
                        return add(int32, min + INT32_SIZE);
                    }
                }
                else if (range < UINT32_MAX) {
                    return add(downscaleToRange(range), min);
                }
                else if (range === LARGEST_SAFE_INTEGER) {
                    return add(uint53, min);
                }
                else if (range < LARGEST_SAFE_INTEGER) {
                    return add(upscaleWithinU53(range), min);
                }
                else if (max - 1 - min === LARGEST_SAFE_INTEGER) {
                    return add(uint53Full, min);
                }
                else if (min === -SMALLEST_UNSAFE_INTEGER &&
                    max === SMALLEST_UNSAFE_INTEGER) {
                    return int53Full;
                }
                else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {
                    return int53;
                }
                else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {
                    return add(int53, 1);
                }
                else if (max === SMALLEST_UNSAFE_INTEGER) {
                    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);
                }
                else {
                    return upscaleWithinI53AndLoopCheck(min, max);
                }
            }

            // tslint:disable:unified-signatures
            // has 2**x chars, for faster uniform distribution
            const DEFAULT_STRING_POOL = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-";
            function string(pool = DEFAULT_STRING_POOL) {
                const poolLength = pool.length;
                if (!poolLength) {
                    throw new Error("Expected pool not to be an empty string");
                }
                const distribution = integer(0, poolLength - 1);
                return (engine, length) => {
                    let result = "";
                    for (let i = 0; i < length; ++i) {
                        const j = distribution(engine);
                        result += pool.charAt(j);
                    }
                    return result;
                };
            }

            const LOWER_HEX_POOL = "0123456789abcdef";
            const lowerHex = string(LOWER_HEX_POOL);
            const upperHex = string(LOWER_HEX_POOL.toUpperCase());

            const stringRepeat = (() => {
                try {
                    if ("x".repeat(3) === "xxx") {
                        return (pattern, count) => pattern.repeat(count);
                    }
                }
                catch (_) {
                    // nothing to do here
                }
                return (pattern, count) => {
                    let result = "";
                    while (count > 0) {
                        if (count & 1) {
                            result += pattern;
                        }
                        count >>= 1;
                        pattern += pattern;
                    }
                    return result;
                };
            })();

            /**
             * An int32-producing Engine that uses `Math.random()`
             */
            const nativeMath = {
                next() {
                    return (Math.random() * UINT32_SIZE) | 0;
                }
            };

            /**
             * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array
             */
            const I32Array = (() => {
                try {
                    const buffer = new ArrayBuffer(4);
                    const view = new Int32Array(buffer);
                    view[0] = INT32_SIZE;
                    if (view[0] === -INT32_SIZE) {
                        return Int32Array;
                    }
                }
                catch (_) {
                    // nothing to do here
                }
                return Array;
            })();

            /**
             * Returns an array of random int32 values, based on current time
             * and a random number engine
             *
             * @param engine an Engine to pull random values from, default `nativeMath`
             * @param length the length of the Array, minimum 1, default 16
             */
            function createEntropy(engine = nativeMath, length = 16) {
                const array = [];
                array.push(new Date().getTime() | 0);
                for (let i = 1; i < length; ++i) {
                    array[i] = engine.next() | 0;
                }
                return array;
            }

            /**
             * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
             */
            const imul = (() => {
                try {
                    if (Math.imul(UINT32_MAX, 5) === -5) {
                        return Math.imul;
                    }
                }
                catch (_) {
                    // nothing to do here
                }
                const UINT16_MAX = 0xffff;
                return (a, b) => {
                    const ah = (a >>> 16) & UINT16_MAX;
                    const al = a & UINT16_MAX;
                    const bh = (b >>> 16) & UINT16_MAX;
                    const bl = b & UINT16_MAX;
                    // the shift by 0 fixes the sign on the high part
                    // the final |0 converts the unsigned value into a signed value
                    return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;
                };
            })();

            const ARRAY_SIZE = 624;
            const ARRAY_MAX = ARRAY_SIZE - 1;
            const M = 397;
            const ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;
            const A = 0x9908b0df;
            /**
             * An Engine that is a pseudorandom number generator using the Mersenne
             * Twister algorithm based on the prime 2**19937 − 1
             *
             * See http://en.wikipedia.org/wiki/Mersenne_twister
             */
            class MersenneTwister19937 {
                /**
                 * MersenneTwister19937 should not be instantiated directly.
                 * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.
                 */
                constructor() {
                    this.data = new I32Array(ARRAY_SIZE);
                    this.index = 0; // integer within [0, 624]
                    this.uses = 0;
                }
                /**
                 * Returns a MersenneTwister19937 seeded with an initial int32 value
                 * @param initial the initial seed value
                 */
                static seed(initial) {
                    return new MersenneTwister19937().seed(initial);
                }
                /**
                 * Returns a MersenneTwister19937 seeded with zero or more int32 values
                 * @param source A series of int32 values
                 */
                static seedWithArray(source) {
                    return new MersenneTwister19937().seedWithArray(source);
                }
                /**
                 * Returns a MersenneTwister19937 seeded with the current time and
                 * a series of natively-generated random values
                 */
                static autoSeed() {
                    return MersenneTwister19937.seedWithArray(createEntropy());
                }
                /**
                 * Returns the next int32 value of the sequence
                 */
                next() {
                    if ((this.index | 0) >= ARRAY_SIZE) {
                        refreshData(this.data);
                        this.index = 0;
                    }
                    const value = this.data[this.index];
                    this.index = (this.index + 1) | 0;
                    this.uses += 1;
                    return temper(value) | 0;
                }
                /**
                 * Returns the number of times that the Engine has been used.
                 *
                 * This can be provided to an unused MersenneTwister19937 with the same
                 * seed, bringing it to the exact point that was left off.
                 */
                getUseCount() {
                    return this.uses;
                }
                /**
                 * Discards one or more items from the engine
                 * @param count The count of items to discard
                 */
                discard(count) {
                    if (count <= 0) {
                        return this;
                    }
                    this.uses += count;
                    if ((this.index | 0) >= ARRAY_SIZE) {
                        refreshData(this.data);
                        this.index = 0;
                    }
                    while (count + this.index > ARRAY_SIZE) {
                        count -= ARRAY_SIZE - this.index;
                        refreshData(this.data);
                        this.index = 0;
                    }
                    this.index = (this.index + count) | 0;
                    return this;
                }
                seed(initial) {
                    let previous = 0;
                    this.data[0] = previous = initial | 0;
                    for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {
                        this.data[i] = previous =
                            (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;
                    }
                    this.index = ARRAY_SIZE;
                    this.uses = 0;
                    return this;
                }
                seedWithArray(source) {
                    this.seed(0x012bd6aa);
                    seedWithArray(this.data, source);
                    return this;
                }
            }
            function refreshData(data) {
                let k = 0;
                let tmp = 0;
                for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {
                    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);
                    data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);
                }
                for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {
                    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);
                    data[k] =
                        data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);
                }
                tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);
                data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);
            }
            function temper(value) {
                value ^= value >>> 11;
                value ^= (value << 7) & 0x9d2c5680;
                value ^= (value << 15) & 0xefc60000;
                return value ^ (value >>> 18);
            }
            function seedWithArray(data, source) {
                let i = 1;
                let j = 0;
                const sourceLength = source.length;
                let k = Math.max(sourceLength, ARRAY_SIZE) | 0;
                let previous = data[0] | 0;
                for (; (k | 0) > 0; --k) {
                    data[i] = previous =
                        ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +
                            (source[j] | 0) +
                            (j | 0)) |
                            0;
                    i = (i + 1) | 0;
                    ++j;
                    if ((i | 0) > ARRAY_MAX) {
                        data[0] = data[ARRAY_MAX];
                        i = 1;
                    }
                    if (j >= sourceLength) {
                        j = 0;
                    }
                }
                for (k = ARRAY_MAX; (k | 0) > 0; --k) {
                    data[i] = previous =
                        ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;
                    i = (i + 1) | 0;
                    if ((i | 0) > ARRAY_MAX) {
                        data[0] = data[ARRAY_MAX];
                        i = 1;
                    }
                }
                data[0] = INT32_SIZE;
            }

            const toString$2 = Object.prototype.toString;

            function isAnyArray(object) {
              return toString$2.call(object).endsWith('Array]');
            }

            var src = isAnyArray;

            /**
             * Computes the maximum of the given values
             * @param {Array<number>} input
             * @return {number}
             */

            function max$1(input) {
              if (!src(input)) {
                throw new TypeError('input must be an array');
              }

              if (input.length === 0) {
                throw new TypeError('input must not be empty');
              }

              var maxValue = input[0];

              for (var i = 1; i < input.length; i++) {
                if (input[i] > maxValue) maxValue = input[i];
              }

              return maxValue;
            }

            /**
             * Computes the minimum of the given values
             * @param {Array<number>} input
             * @return {number}
             */

            function min$1(input) {
              if (!src(input)) {
                throw new TypeError('input must be an array');
              }

              if (input.length === 0) {
                throw new TypeError('input must not be empty');
              }

              var minValue = input[0];

              for (var i = 1; i < input.length; i++) {
                if (input[i] < minValue) minValue = input[i];
              }

              return minValue;
            }

            /**
             *
             * @param {Array} input
             * @param {object} [options={}]
             * @param {Array} [options.output=[]] specify the output array, can be the input array for in place modification
             */

            function rescale(input) {
              var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

              if (!src(input)) {
                throw new TypeError('input must be an array');
              } else if (input.length === 0) {
                throw new TypeError('input must not be empty');
              }

              var output;

              if (options.output !== undefined) {
                if (!src(options.output)) {
                  throw new TypeError('output option must be an array if specified');
                }

                output = options.output;
              } else {
                output = new Array(input.length);
              }

              var currentMin = min$1(input);
              var currentMax = max$1(input);

              if (currentMin === currentMax) {
                throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');
              }

              var _options$min = options.min,
                  minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,
                  _options$max = options.max,
                  maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;

              if (minValue >= maxValue) {
                throw new RangeError('min option must be smaller than max option');
              }

              var factor = (maxValue - minValue) / (currentMax - currentMin);

              for (var i = 0; i < input.length; i++) {
                output[i] = (input[i] - currentMin) * factor + minValue;
              }

              return output;
            }

            /**
             * @private
             * Check that a row index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkRowIndex(matrix, index, outer) {
              let max = outer ? matrix.rows : matrix.rows - 1;
              if (index < 0 || index > max) {
                throw new RangeError('Row index out of range');
              }
            }

            /**
             * @private
             * Check that a column index is not out of bounds
             * @param {Matrix} matrix
             * @param {number} index
             * @param {boolean} [outer]
             */
            function checkColumnIndex(matrix, index, outer) {
              let max = outer ? matrix.columns : matrix.columns - 1;
              if (index < 0 || index > max) {
                throw new RangeError('Column index out of range');
              }
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkRowVector(matrix, vector) {
              if (vector.to1DArray) {
                vector = vector.to1DArray();
              }
              if (vector.length !== matrix.columns) {
                throw new RangeError(
                  'vector size must be the same as the number of columns',
                );
              }
              return vector;
            }

            /**
             * @private
             * Check that the provided vector is an array with the right length
             * @param {Matrix} matrix
             * @param {Array|Matrix} vector
             * @return {Array}
             * @throws {RangeError}
             */
            function checkColumnVector(matrix, vector) {
              if (vector.to1DArray) {
                vector = vector.to1DArray();
              }
              if (vector.length !== matrix.rows) {
                throw new RangeError('vector size must be the same as the number of rows');
              }
              return vector;
            }

            function checkIndices(matrix, rowIndices, columnIndices) {
              return {
                row: checkRowIndices(matrix, rowIndices),
                column: checkColumnIndices(matrix, columnIndices),
              };
            }

            function checkRowIndices(matrix, rowIndices) {
              if (typeof rowIndices !== 'object') {
                throw new TypeError('unexpected type for row indices');
              }

              let rowOut = rowIndices.some((r) => {
                return r < 0 || r >= matrix.rows;
              });

              if (rowOut) {
                throw new RangeError('row indices are out of range');
              }

              if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);

              return rowIndices;
            }

            function checkColumnIndices(matrix, columnIndices) {
              if (typeof columnIndices !== 'object') {
                throw new TypeError('unexpected type for column indices');
              }

              let columnOut = columnIndices.some((c) => {
                return c < 0 || c >= matrix.columns;
              });

              if (columnOut) {
                throw new RangeError('column indices are out of range');
              }
              if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);

              return columnIndices;
            }

            function checkRange(matrix, startRow, endRow, startColumn, endColumn) {
              if (arguments.length !== 5) {
                throw new RangeError('expected 4 arguments');
              }
              checkNumber('startRow', startRow);
              checkNumber('endRow', endRow);
              checkNumber('startColumn', startColumn);
              checkNumber('endColumn', endColumn);
              if (
                startRow > endRow ||
                startColumn > endColumn ||
                startRow < 0 ||
                startRow >= matrix.rows ||
                endRow < 0 ||
                endRow >= matrix.rows ||
                startColumn < 0 ||
                startColumn >= matrix.columns ||
                endColumn < 0 ||
                endColumn >= matrix.columns
              ) {
                throw new RangeError('Submatrix indices are out of range');
              }
            }

            function newArray(length, value = 0) {
              let array = [];
              for (let i = 0; i < length; i++) {
                array.push(value);
              }
              return array;
            }

            function checkNumber(name, value) {
              if (typeof value !== 'number') {
                throw new TypeError(`${name} must be a number`);
              }
            }

            function sumByRow(matrix) {
              let sum = newArray(matrix.rows);
              for (let i = 0; i < matrix.rows; ++i) {
                for (let j = 0; j < matrix.columns; ++j) {
                  sum[i] += matrix.get(i, j);
                }
              }
              return sum;
            }

            function sumByColumn(matrix) {
              let sum = newArray(matrix.columns);
              for (let i = 0; i < matrix.rows; ++i) {
                for (let j = 0; j < matrix.columns; ++j) {
                  sum[j] += matrix.get(i, j);
                }
              }
              return sum;
            }

            function sumAll(matrix) {
              let v = 0;
              for (let i = 0; i < matrix.rows; i++) {
                for (let j = 0; j < matrix.columns; j++) {
                  v += matrix.get(i, j);
                }
              }
              return v;
            }

            function productByRow(matrix) {
              let sum = newArray(matrix.rows, 1);
              for (let i = 0; i < matrix.rows; ++i) {
                for (let j = 0; j < matrix.columns; ++j) {
                  sum[i] *= matrix.get(i, j);
                }
              }
              return sum;
            }

            function productByColumn(matrix) {
              let sum = newArray(matrix.columns, 1);
              for (let i = 0; i < matrix.rows; ++i) {
                for (let j = 0; j < matrix.columns; ++j) {
                  sum[j] *= matrix.get(i, j);
                }
              }
              return sum;
            }

            function productAll(matrix) {
              let v = 1;
              for (let i = 0; i < matrix.rows; i++) {
                for (let j = 0; j < matrix.columns; j++) {
                  v *= matrix.get(i, j);
                }
              }
              return v;
            }

            function varianceByRow(matrix, unbiased, mean) {
              const rows = matrix.rows;
              const cols = matrix.columns;
              const variance = [];

              for (let i = 0; i < rows; i++) {
                let sum1 = 0;
                let sum2 = 0;
                let x = 0;
                for (let j = 0; j < cols; j++) {
                  x = matrix.get(i, j) - mean[i];
                  sum1 += x;
                  sum2 += x * x;
                }
                if (unbiased) {
                  variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));
                } else {
                  variance.push((sum2 - (sum1 * sum1) / cols) / cols);
                }
              }
              return variance;
            }

            function varianceByColumn(matrix, unbiased, mean) {
              const rows = matrix.rows;
              const cols = matrix.columns;
              const variance = [];

              for (let j = 0; j < cols; j++) {
                let sum1 = 0;
                let sum2 = 0;
                let x = 0;
                for (let i = 0; i < rows; i++) {
                  x = matrix.get(i, j) - mean[j];
                  sum1 += x;
                  sum2 += x * x;
                }
                if (unbiased) {
                  variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));
                } else {
                  variance.push((sum2 - (sum1 * sum1) / rows) / rows);
                }
              }
              return variance;
            }

            function varianceAll(matrix, unbiased, mean) {
              const rows = matrix.rows;
              const cols = matrix.columns;
              const size = rows * cols;

              let sum1 = 0;
              let sum2 = 0;
              let x = 0;
              for (let i = 0; i < rows; i++) {
                for (let j = 0; j < cols; j++) {
                  x = matrix.get(i, j) - mean;
                  sum1 += x;
                  sum2 += x * x;
                }
              }
              if (unbiased) {
                return (sum2 - (sum1 * sum1) / size) / (size - 1);
              } else {
                return (sum2 - (sum1 * sum1) / size) / size;
              }
            }

            function centerByRow(matrix, mean) {
              for (let i = 0; i < matrix.rows; i++) {
                for (let j = 0; j < matrix.columns; j++) {
                  matrix.set(i, j, matrix.get(i, j) - mean[i]);
                }
              }
            }

            function centerByColumn(matrix, mean) {
              for (let i = 0; i < matrix.rows; i++) {
                for (let j = 0; j < matrix.columns; j++) {
                  matrix.set(i, j, matrix.get(i, j) - mean[j]);
                }
              }
            }

            function centerAll(matrix, mean) {
              for (let i = 0; i < matrix.rows; i++) {
                for (let j = 0; j < matrix.columns; j++) {
                  matrix.set(i, j, matrix.get(i, j) - mean);
                }
              }
            }

            function getScaleByRow(matrix) {
              const scale = [];
              for (let i = 0; i < matrix.rows; i++) {
                let sum = 0;
                for (let j = 0; j < matrix.columns; j++) {
                  sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);
                }
                scale.push(Math.sqrt(sum));
              }
              return scale;
            }

            function scaleByRow(matrix, scale) {
              for (let i = 0; i < matrix.rows; i++) {
                for (let j = 0; j < matrix.columns; j++) {
                  matrix.set(i, j, matrix.get(i, j) / scale[i]);
                }
              }
            }

            function getScaleByColumn(matrix) {
              const scale = [];
              for (let j = 0; j < matrix.columns; j++) {
                let sum = 0;
                for (let i = 0; i < matrix.rows; i++) {
                  sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);
                }
                scale.push(Math.sqrt(sum));
              }
              return scale;
            }

            function scaleByColumn(matrix, scale) {
              for (let i = 0; i < matrix.rows; i++) {
                for (let j = 0; j < matrix.columns; j++) {
                  matrix.set(i, j, matrix.get(i, j) / scale[j]);
                }
              }
            }

            function getScaleAll(matrix) {
              const divider = matrix.size - 1;
              let sum = 0;
              for (let j = 0; j < matrix.columns; j++) {
                for (let i = 0; i < matrix.rows; i++) {
                  sum += Math.pow(matrix.get(i, j), 2) / divider;
                }
              }
              return Math.sqrt(sum);
            }

            function scaleAll(matrix, scale) {
              for (let i = 0; i < matrix.rows; i++) {
                for (let j = 0; j < matrix.columns; j++) {
                  matrix.set(i, j, matrix.get(i, j) / scale);
                }
              }
            }

            function inspectMatrix() {
              const indent = ' '.repeat(2);
              const indentData = ' '.repeat(4);
              return `${this.constructor.name} {
${indent}[
${indentData}${inspectData(this, indentData)}
${indent}]
${indent}rows: ${this.rows}
${indent}columns: ${this.columns}
}`;
            }

            const maxRows = 15;
            const maxColumns = 10;
            const maxNumSize = 8;

            function inspectData(matrix, indent) {
              const { rows, columns } = matrix;
              const maxI = Math.min(rows, maxRows);
              const maxJ = Math.min(columns, maxColumns);
              const result = [];
              for (let i = 0; i < maxI; i++) {
                let line = [];
                for (let j = 0; j < maxJ; j++) {
                  line.push(formatNumber(matrix.get(i, j)));
                }
                result.push(`${line.join(' ')}`);
              }
              if (maxJ !== columns) {
                result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;
              }
              if (maxI !== rows) {
                result.push(`... ${rows - maxRows} more rows`);
              }
              return result.join(`\n${indent}`);
            }

            function formatNumber(num) {
              const numStr = String(num);
              if (numStr.length <= maxNumSize) {
                return numStr.padEnd(maxNumSize, ' ');
              }
              const precise = num.toPrecision(maxNumSize - 2);
              if (precise.length <= maxNumSize) {
                return precise;
              }
              const exponential = num.toExponential(maxNumSize - 2);
              const eIndex = exponential.indexOf('e');
              const e = exponential.substring(eIndex);
              return exponential.substring(0, maxNumSize - e.length) + e;
            }

            function installMathOperations(AbstractMatrix, Matrix) {
              AbstractMatrix.prototype.add = function add(value) {
                if (typeof value === 'number') return this.addS(value);
                return this.addM(value);
              };

              AbstractMatrix.prototype.addS = function addS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) + value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.addM = function addM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) + matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.add = function add(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.add(value);
              };

              AbstractMatrix.prototype.sub = function sub(value) {
                if (typeof value === 'number') return this.subS(value);
                return this.subM(value);
              };

              AbstractMatrix.prototype.subS = function subS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) - value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.subM = function subM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) - matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.sub = function sub(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.sub(value);
              };
              AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;
              AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;
              AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;
              AbstractMatrix.subtract = AbstractMatrix.sub;

              AbstractMatrix.prototype.mul = function mul(value) {
                if (typeof value === 'number') return this.mulS(value);
                return this.mulM(value);
              };

              AbstractMatrix.prototype.mulS = function mulS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) * value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.mulM = function mulM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) * matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.mul = function mul(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.mul(value);
              };
              AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;
              AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;
              AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;
              AbstractMatrix.multiply = AbstractMatrix.mul;

              AbstractMatrix.prototype.div = function div(value) {
                if (typeof value === 'number') return this.divS(value);
                return this.divM(value);
              };

              AbstractMatrix.prototype.divS = function divS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) / value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.divM = function divM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) / matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.div = function div(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.div(value);
              };
              AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;
              AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;
              AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;
              AbstractMatrix.divide = AbstractMatrix.div;

              AbstractMatrix.prototype.mod = function mod(value) {
                if (typeof value === 'number') return this.modS(value);
                return this.modM(value);
              };

              AbstractMatrix.prototype.modS = function modS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) % value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.modM = function modM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) % matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.mod = function mod(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.mod(value);
              };
              AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;
              AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;
              AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;
              AbstractMatrix.modulus = AbstractMatrix.mod;

              AbstractMatrix.prototype.and = function and(value) {
                if (typeof value === 'number') return this.andS(value);
                return this.andM(value);
              };

              AbstractMatrix.prototype.andS = function andS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) & value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.andM = function andM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) & matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.and = function and(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.and(value);
              };

              AbstractMatrix.prototype.or = function or(value) {
                if (typeof value === 'number') return this.orS(value);
                return this.orM(value);
              };

              AbstractMatrix.prototype.orS = function orS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) | value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.orM = function orM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) | matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.or = function or(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.or(value);
              };

              AbstractMatrix.prototype.xor = function xor(value) {
                if (typeof value === 'number') return this.xorS(value);
                return this.xorM(value);
              };

              AbstractMatrix.prototype.xorS = function xorS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) ^ value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.xorM = function xorM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) ^ matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.xor = function xor(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.xor(value);
              };

              AbstractMatrix.prototype.leftShift = function leftShift(value) {
                if (typeof value === 'number') return this.leftShiftS(value);
                return this.leftShiftM(value);
              };

              AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) << value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) << matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.leftShift = function leftShift(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.leftShift(value);
              };

              AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {
                if (typeof value === 'number') return this.signPropagatingRightShiftS(value);
                return this.signPropagatingRightShiftM(value);
              };

              AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) >> value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) >> matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.signPropagatingRightShift(value);
              };

              AbstractMatrix.prototype.rightShift = function rightShift(value) {
                if (typeof value === 'number') return this.rightShiftS(value);
                return this.rightShiftM(value);
              };

              AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) >>> value);
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) >>> matrix.get(i, j));
                  }
                }
                return this;
              };

              AbstractMatrix.rightShift = function rightShift(matrix, value) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.rightShift(value);
              };
              AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;
              AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;
              AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;
              AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;

              AbstractMatrix.prototype.not = function not() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, ~(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.not = function not(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.not();
              };

              AbstractMatrix.prototype.abs = function abs() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.abs(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.abs = function abs(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.abs();
              };

              AbstractMatrix.prototype.acos = function acos() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.acos(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.acos = function acos(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.acos();
              };

              AbstractMatrix.prototype.acosh = function acosh() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.acosh(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.acosh = function acosh(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.acosh();
              };

              AbstractMatrix.prototype.asin = function asin() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.asin(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.asin = function asin(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.asin();
              };

              AbstractMatrix.prototype.asinh = function asinh() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.asinh(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.asinh = function asinh(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.asinh();
              };

              AbstractMatrix.prototype.atan = function atan() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.atan(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.atan = function atan(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.atan();
              };

              AbstractMatrix.prototype.atanh = function atanh() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.atanh(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.atanh = function atanh(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.atanh();
              };

              AbstractMatrix.prototype.cbrt = function cbrt() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.cbrt(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.cbrt = function cbrt(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.cbrt();
              };

              AbstractMatrix.prototype.ceil = function ceil() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.ceil(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.ceil = function ceil(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.ceil();
              };

              AbstractMatrix.prototype.clz32 = function clz32() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.clz32(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.clz32 = function clz32(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.clz32();
              };

              AbstractMatrix.prototype.cos = function cos() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.cos(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.cos = function cos(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.cos();
              };

              AbstractMatrix.prototype.cosh = function cosh() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.cosh(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.cosh = function cosh(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.cosh();
              };

              AbstractMatrix.prototype.exp = function exp() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.exp(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.exp = function exp(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.exp();
              };

              AbstractMatrix.prototype.expm1 = function expm1() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.expm1(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.expm1 = function expm1(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.expm1();
              };

              AbstractMatrix.prototype.floor = function floor() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.floor(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.floor = function floor(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.floor();
              };

              AbstractMatrix.prototype.fround = function fround() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.fround(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.fround = function fround(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.fround();
              };

              AbstractMatrix.prototype.log = function log() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.log(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.log = function log(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.log();
              };

              AbstractMatrix.prototype.log1p = function log1p() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.log1p(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.log1p = function log1p(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.log1p();
              };

              AbstractMatrix.prototype.log10 = function log10() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.log10(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.log10 = function log10(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.log10();
              };

              AbstractMatrix.prototype.log2 = function log2() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.log2(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.log2 = function log2(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.log2();
              };

              AbstractMatrix.prototype.round = function round() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.round(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.round = function round(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.round();
              };

              AbstractMatrix.prototype.sign = function sign() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.sign(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.sign = function sign(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.sign();
              };

              AbstractMatrix.prototype.sin = function sin() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.sin(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.sin = function sin(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.sin();
              };

              AbstractMatrix.prototype.sinh = function sinh() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.sinh(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.sinh = function sinh(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.sinh();
              };

              AbstractMatrix.prototype.sqrt = function sqrt() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.sqrt(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.sqrt = function sqrt(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.sqrt();
              };

              AbstractMatrix.prototype.tan = function tan() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.tan(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.tan = function tan(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.tan();
              };

              AbstractMatrix.prototype.tanh = function tanh() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.tanh(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.tanh = function tanh(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.tanh();
              };

              AbstractMatrix.prototype.trunc = function trunc() {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.trunc(this.get(i, j)));
                  }
                }
                return this;
              };

              AbstractMatrix.trunc = function trunc(matrix) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.trunc();
              };

              AbstractMatrix.pow = function pow(matrix, arg0) {
                const newMatrix = new Matrix(matrix);
                return newMatrix.pow(arg0);
              };

              AbstractMatrix.prototype.pow = function pow(value) {
                if (typeof value === 'number') return this.powS(value);
                return this.powM(value);
              };

              AbstractMatrix.prototype.powS = function powS(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.pow(this.get(i, j), value));
                  }
                }
                return this;
              };

              AbstractMatrix.prototype.powM = function powM(matrix) {
                matrix = Matrix.checkMatrix(matrix);
                if (this.rows !== matrix.rows ||
                  this.columns !== matrix.columns) {
                  throw new RangeError('Matrices dimensions must be equal');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));
                  }
                }
                return this;
              };
            }

            class AbstractMatrix {
              static from1DArray(newRows, newColumns, newData) {
                let length = newRows * newColumns;
                if (length !== newData.length) {
                  throw new RangeError('data length does not match given dimensions');
                }
                let newMatrix = new Matrix(newRows, newColumns);
                for (let row = 0; row < newRows; row++) {
                  for (let column = 0; column < newColumns; column++) {
                    newMatrix.set(row, column, newData[row * newColumns + column]);
                  }
                }
                return newMatrix;
              }

              static rowVector(newData) {
                let vector = new Matrix(1, newData.length);
                for (let i = 0; i < newData.length; i++) {
                  vector.set(0, i, newData[i]);
                }
                return vector;
              }

              static columnVector(newData) {
                let vector = new Matrix(newData.length, 1);
                for (let i = 0; i < newData.length; i++) {
                  vector.set(i, 0, newData[i]);
                }
                return vector;
              }

              static zeros(rows, columns) {
                return new Matrix(rows, columns);
              }

              static ones(rows, columns) {
                return new Matrix(rows, columns).fill(1);
              }

              static rand(rows, columns, options = {}) {
                if (typeof options !== 'object') {
                  throw new TypeError('options must be an object');
                }
                const { random = Math.random } = options;
                let matrix = new Matrix(rows, columns);
                for (let i = 0; i < rows; i++) {
                  for (let j = 0; j < columns; j++) {
                    matrix.set(i, j, random());
                  }
                }
                return matrix;
              }

              static randInt(rows, columns, options = {}) {
                if (typeof options !== 'object') {
                  throw new TypeError('options must be an object');
                }
                const { min = 0, max = 1000, random = Math.random } = options;
                if (!Number.isInteger(min)) throw new TypeError('min must be an integer');
                if (!Number.isInteger(max)) throw new TypeError('max must be an integer');
                if (min >= max) throw new RangeError('min must be smaller than max');
                let interval = max - min;
                let matrix = new Matrix(rows, columns);
                for (let i = 0; i < rows; i++) {
                  for (let j = 0; j < columns; j++) {
                    let value = min + Math.round(random() * interval);
                    matrix.set(i, j, value);
                  }
                }
                return matrix;
              }

              static eye(rows, columns, value) {
                if (columns === undefined) columns = rows;
                if (value === undefined) value = 1;
                let min = Math.min(rows, columns);
                let matrix = this.zeros(rows, columns);
                for (let i = 0; i < min; i++) {
                  matrix.set(i, i, value);
                }
                return matrix;
              }

              static diag(data, rows, columns) {
                let l = data.length;
                if (rows === undefined) rows = l;
                if (columns === undefined) columns = rows;
                let min = Math.min(l, rows, columns);
                let matrix = this.zeros(rows, columns);
                for (let i = 0; i < min; i++) {
                  matrix.set(i, i, data[i]);
                }
                return matrix;
              }

              static min(matrix1, matrix2) {
                matrix1 = this.checkMatrix(matrix1);
                matrix2 = this.checkMatrix(matrix2);
                let rows = matrix1.rows;
                let columns = matrix1.columns;
                let result = new Matrix(rows, columns);
                for (let i = 0; i < rows; i++) {
                  for (let j = 0; j < columns; j++) {
                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));
                  }
                }
                return result;
              }

              static max(matrix1, matrix2) {
                matrix1 = this.checkMatrix(matrix1);
                matrix2 = this.checkMatrix(matrix2);
                let rows = matrix1.rows;
                let columns = matrix1.columns;
                let result = new this(rows, columns);
                for (let i = 0; i < rows; i++) {
                  for (let j = 0; j < columns; j++) {
                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));
                  }
                }
                return result;
              }

              static checkMatrix(value) {
                return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);
              }

              static isMatrix(value) {
                return value != null && value.klass === 'Matrix';
              }

              get size() {
                return this.rows * this.columns;
              }

              apply(callback) {
                if (typeof callback !== 'function') {
                  throw new TypeError('callback must be a function');
                }
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    callback.call(this, i, j);
                  }
                }
                return this;
              }

              to1DArray() {
                let array = [];
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    array.push(this.get(i, j));
                  }
                }
                return array;
              }

              to2DArray() {
                let copy = [];
                for (let i = 0; i < this.rows; i++) {
                  copy.push([]);
                  for (let j = 0; j < this.columns; j++) {
                    copy[i].push(this.get(i, j));
                  }
                }
                return copy;
              }

              toJSON() {
                return this.to2DArray();
              }

              isRowVector() {
                return this.rows === 1;
              }

              isColumnVector() {
                return this.columns === 1;
              }

              isVector() {
                return this.rows === 1 || this.columns === 1;
              }

              isSquare() {
                return this.rows === this.columns;
              }

              isSymmetric() {
                if (this.isSquare()) {
                  for (let i = 0; i < this.rows; i++) {
                    for (let j = 0; j <= i; j++) {
                      if (this.get(i, j) !== this.get(j, i)) {
                        return false;
                      }
                    }
                  }
                  return true;
                }
                return false;
              }

              isEchelonForm() {
                let i = 0;
                let j = 0;
                let previousColumn = -1;
                let isEchelonForm = true;
                let checked = false;
                while (i < this.rows && isEchelonForm) {
                  j = 0;
                  checked = false;
                  while (j < this.columns && checked === false) {
                    if (this.get(i, j) === 0) {
                      j++;
                    } else if (this.get(i, j) === 1 && j > previousColumn) {
                      checked = true;
                      previousColumn = j;
                    } else {
                      isEchelonForm = false;
                      checked = true;
                    }
                  }
                  i++;
                }
                return isEchelonForm;
              }

              isReducedEchelonForm() {
                let i = 0;
                let j = 0;
                let previousColumn = -1;
                let isReducedEchelonForm = true;
                let checked = false;
                while (i < this.rows && isReducedEchelonForm) {
                  j = 0;
                  checked = false;
                  while (j < this.columns && checked === false) {
                    if (this.get(i, j) === 0) {
                      j++;
                    } else if (this.get(i, j) === 1 && j > previousColumn) {
                      checked = true;
                      previousColumn = j;
                    } else {
                      isReducedEchelonForm = false;
                      checked = true;
                    }
                  }
                  for (let k = j + 1; k < this.rows; k++) {
                    if (this.get(i, k) !== 0) {
                      isReducedEchelonForm = false;
                    }
                  }
                  i++;
                }
                return isReducedEchelonForm;
              }

              echelonForm() {
                let result = this.clone();
                let h = 0;
                let k = 0;
                while (h < result.rows && k < result.columns) {
                  let iMax = h;
                  for (let i = h; i < result.rows; i++) {
                    if (result.get(i, k) > result.get(iMax, k)) {
                      iMax = i;
                    }
                  }
                  if (result.get(iMax, k) === 0) {
                    k++;
                  } else {
                    result.swapRows(h, iMax);
                    let tmp = result.get(h, k);
                    for (let j = k; j < result.columns; j++) {
                      result.set(h, j, result.get(h, j) / tmp);
                    }
                    for (let i = h + 1; i < result.rows; i++) {
                      let factor = result.get(i, k) / result.get(h, k);
                      result.set(i, k, 0);
                      for (let j = k + 1; j < result.columns; j++) {
                        result.set(i, j, result.get(i, j) - result.get(h, j) * factor);
                      }
                    }
                    h++;
                    k++;
                  }
                }
                return result;
              }

              reducedEchelonForm() {
                let result = this.echelonForm();
                let m = result.columns;
                let n = result.rows;
                let h = n - 1;
                while (h >= 0) {
                  if (result.maxRow(h) === 0) {
                    h--;
                  } else {
                    let p = 0;
                    let pivot = false;
                    while (p < n && pivot === false) {
                      if (result.get(h, p) === 1) {
                        pivot = true;
                      } else {
                        p++;
                      }
                    }
                    for (let i = 0; i < h; i++) {
                      let factor = result.get(i, p);
                      for (let j = p; j < m; j++) {
                        let tmp = result.get(i, j) - factor * result.get(h, j);
                        result.set(i, j, tmp);
                      }
                    }
                    h--;
                  }
                }
                return result;
              }

              set() {
                throw new Error('set method is unimplemented');
              }

              get() {
                throw new Error('get method is unimplemented');
              }

              repeat(options = {}) {
                if (typeof options !== 'object') {
                  throw new TypeError('options must be an object');
                }
                const { rows = 1, columns = 1 } = options;
                if (!Number.isInteger(rows) || rows <= 0) {
                  throw new TypeError('rows must be a positive integer');
                }
                if (!Number.isInteger(columns) || columns <= 0) {
                  throw new TypeError('columns must be a positive integer');
                }
                let matrix = new Matrix(this.rows * rows, this.columns * columns);
                for (let i = 0; i < rows; i++) {
                  for (let j = 0; j < columns; j++) {
                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);
                  }
                }
                return matrix;
              }

              fill(value) {
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, value);
                  }
                }
                return this;
              }

              neg() {
                return this.mulS(-1);
              }

              getRow(index) {
                checkRowIndex(this, index);
                let row = [];
                for (let i = 0; i < this.columns; i++) {
                  row.push(this.get(index, i));
                }
                return row;
              }

              getRowVector(index) {
                return Matrix.rowVector(this.getRow(index));
              }

              setRow(index, array) {
                checkRowIndex(this, index);
                array = checkRowVector(this, array);
                for (let i = 0; i < this.columns; i++) {
                  this.set(index, i, array[i]);
                }
                return this;
              }

              swapRows(row1, row2) {
                checkRowIndex(this, row1);
                checkRowIndex(this, row2);
                for (let i = 0; i < this.columns; i++) {
                  let temp = this.get(row1, i);
                  this.set(row1, i, this.get(row2, i));
                  this.set(row2, i, temp);
                }
                return this;
              }

              getColumn(index) {
                checkColumnIndex(this, index);
                let column = [];
                for (let i = 0; i < this.rows; i++) {
                  column.push(this.get(i, index));
                }
                return column;
              }

              getColumnVector(index) {
                return Matrix.columnVector(this.getColumn(index));
              }

              setColumn(index, array) {
                checkColumnIndex(this, index);
                array = checkColumnVector(this, array);
                for (let i = 0; i < this.rows; i++) {
                  this.set(i, index, array[i]);
                }
                return this;
              }

              swapColumns(column1, column2) {
                checkColumnIndex(this, column1);
                checkColumnIndex(this, column2);
                for (let i = 0; i < this.rows; i++) {
                  let temp = this.get(i, column1);
                  this.set(i, column1, this.get(i, column2));
                  this.set(i, column2, temp);
                }
                return this;
              }

              addRowVector(vector) {
                vector = checkRowVector(this, vector);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) + vector[j]);
                  }
                }
                return this;
              }

              subRowVector(vector) {
                vector = checkRowVector(this, vector);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) - vector[j]);
                  }
                }
                return this;
              }

              mulRowVector(vector) {
                vector = checkRowVector(this, vector);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) * vector[j]);
                  }
                }
                return this;
              }

              divRowVector(vector) {
                vector = checkRowVector(this, vector);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) / vector[j]);
                  }
                }
                return this;
              }

              addColumnVector(vector) {
                vector = checkColumnVector(this, vector);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) + vector[i]);
                  }
                }
                return this;
              }

              subColumnVector(vector) {
                vector = checkColumnVector(this, vector);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) - vector[i]);
                  }
                }
                return this;
              }

              mulColumnVector(vector) {
                vector = checkColumnVector(this, vector);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) * vector[i]);
                  }
                }
                return this;
              }

              divColumnVector(vector) {
                vector = checkColumnVector(this, vector);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    this.set(i, j, this.get(i, j) / vector[i]);
                  }
                }
                return this;
              }

              mulRow(index, value) {
                checkRowIndex(this, index);
                for (let i = 0; i < this.columns; i++) {
                  this.set(index, i, this.get(index, i) * value);
                }
                return this;
              }

              mulColumn(index, value) {
                checkColumnIndex(this, index);
                for (let i = 0; i < this.rows; i++) {
                  this.set(i, index, this.get(i, index) * value);
                }
                return this;
              }

              max() {
                let v = this.get(0, 0);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    if (this.get(i, j) > v) {
                      v = this.get(i, j);
                    }
                  }
                }
                return v;
              }

              maxIndex() {
                let v = this.get(0, 0);
                let idx = [0, 0];
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    if (this.get(i, j) > v) {
                      v = this.get(i, j);
                      idx[0] = i;
                      idx[1] = j;
                    }
                  }
                }
                return idx;
              }

              min() {
                let v = this.get(0, 0);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    if (this.get(i, j) < v) {
                      v = this.get(i, j);
                    }
                  }
                }
                return v;
              }

              minIndex() {
                let v = this.get(0, 0);
                let idx = [0, 0];
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    if (this.get(i, j) < v) {
                      v = this.get(i, j);
                      idx[0] = i;
                      idx[1] = j;
                    }
                  }
                }
                return idx;
              }

              maxRow(row) {
                checkRowIndex(this, row);
                let v = this.get(row, 0);
                for (let i = 1; i < this.columns; i++) {
                  if (this.get(row, i) > v) {
                    v = this.get(row, i);
                  }
                }
                return v;
              }

              maxRowIndex(row) {
                checkRowIndex(this, row);
                let v = this.get(row, 0);
                let idx = [row, 0];
                for (let i = 1; i < this.columns; i++) {
                  if (this.get(row, i) > v) {
                    v = this.get(row, i);
                    idx[1] = i;
                  }
                }
                return idx;
              }

              minRow(row) {
                checkRowIndex(this, row);
                let v = this.get(row, 0);
                for (let i = 1; i < this.columns; i++) {
                  if (this.get(row, i) < v) {
                    v = this.get(row, i);
                  }
                }
                return v;
              }

              minRowIndex(row) {
                checkRowIndex(this, row);
                let v = this.get(row, 0);
                let idx = [row, 0];
                for (let i = 1; i < this.columns; i++) {
                  if (this.get(row, i) < v) {
                    v = this.get(row, i);
                    idx[1] = i;
                  }
                }
                return idx;
              }

              maxColumn(column) {
                checkColumnIndex(this, column);
                let v = this.get(0, column);
                for (let i = 1; i < this.rows; i++) {
                  if (this.get(i, column) > v) {
                    v = this.get(i, column);
                  }
                }
                return v;
              }

              maxColumnIndex(column) {
                checkColumnIndex(this, column);
                let v = this.get(0, column);
                let idx = [0, column];
                for (let i = 1; i < this.rows; i++) {
                  if (this.get(i, column) > v) {
                    v = this.get(i, column);
                    idx[0] = i;
                  }
                }
                return idx;
              }

              minColumn(column) {
                checkColumnIndex(this, column);
                let v = this.get(0, column);
                for (let i = 1; i < this.rows; i++) {
                  if (this.get(i, column) < v) {
                    v = this.get(i, column);
                  }
                }
                return v;
              }

              minColumnIndex(column) {
                checkColumnIndex(this, column);
                let v = this.get(0, column);
                let idx = [0, column];
                for (let i = 1; i < this.rows; i++) {
                  if (this.get(i, column) < v) {
                    v = this.get(i, column);
                    idx[0] = i;
                  }
                }
                return idx;
              }

              diag() {
                let min = Math.min(this.rows, this.columns);
                let diag = [];
                for (let i = 0; i < min; i++) {
                  diag.push(this.get(i, i));
                }
                return diag;
              }

              norm(type = 'frobenius') {
                let result = 0;
                if (type === 'max') {
                  return this.max();
                } else if (type === 'frobenius') {
                  for (let i = 0; i < this.rows; i++) {
                    for (let j = 0; j < this.columns; j++) {
                      result = result + this.get(i, j) * this.get(i, j);
                    }
                  }
                  return Math.sqrt(result);
                } else {
                  throw new RangeError(`unknown norm type: ${type}`);
                }
              }

              cumulativeSum() {
                let sum = 0;
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    sum += this.get(i, j);
                    this.set(i, j, sum);
                  }
                }
                return this;
              }

              dot(vector2) {
                if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();
                let vector1 = this.to1DArray();
                if (vector1.length !== vector2.length) {
                  throw new RangeError('vectors do not have the same size');
                }
                let dot = 0;
                for (let i = 0; i < vector1.length; i++) {
                  dot += vector1[i] * vector2[i];
                }
                return dot;
              }

              mmul(other) {
                other = Matrix.checkMatrix(other);

                let m = this.rows;
                let n = this.columns;
                let p = other.columns;

                let result = new Matrix(m, p);

                let Bcolj = new Float64Array(n);
                for (let j = 0; j < p; j++) {
                  for (let k = 0; k < n; k++) {
                    Bcolj[k] = other.get(k, j);
                  }

                  for (let i = 0; i < m; i++) {
                    let s = 0;
                    for (let k = 0; k < n; k++) {
                      s += this.get(i, k) * Bcolj[k];
                    }

                    result.set(i, j, s);
                  }
                }
                return result;
              }

              strassen2x2(other) {
                other = Matrix.checkMatrix(other);
                let result = new Matrix(2, 2);
                const a11 = this.get(0, 0);
                const b11 = other.get(0, 0);
                const a12 = this.get(0, 1);
                const b12 = other.get(0, 1);
                const a21 = this.get(1, 0);
                const b21 = other.get(1, 0);
                const a22 = this.get(1, 1);
                const b22 = other.get(1, 1);

                // Compute intermediate values.
                const m1 = (a11 + a22) * (b11 + b22);
                const m2 = (a21 + a22) * b11;
                const m3 = a11 * (b12 - b22);
                const m4 = a22 * (b21 - b11);
                const m5 = (a11 + a12) * b22;
                const m6 = (a21 - a11) * (b11 + b12);
                const m7 = (a12 - a22) * (b21 + b22);

                // Combine intermediate values into the output.
                const c00 = m1 + m4 - m5 + m7;
                const c01 = m3 + m5;
                const c10 = m2 + m4;
                const c11 = m1 - m2 + m3 + m6;

                result.set(0, 0, c00);
                result.set(0, 1, c01);
                result.set(1, 0, c10);
                result.set(1, 1, c11);
                return result;
              }

              strassen3x3(other) {
                other = Matrix.checkMatrix(other);
                let result = new Matrix(3, 3);

                const a00 = this.get(0, 0);
                const a01 = this.get(0, 1);
                const a02 = this.get(0, 2);
                const a10 = this.get(1, 0);
                const a11 = this.get(1, 1);
                const a12 = this.get(1, 2);
                const a20 = this.get(2, 0);
                const a21 = this.get(2, 1);
                const a22 = this.get(2, 2);

                const b00 = other.get(0, 0);
                const b01 = other.get(0, 1);
                const b02 = other.get(0, 2);
                const b10 = other.get(1, 0);
                const b11 = other.get(1, 1);
                const b12 = other.get(1, 2);
                const b20 = other.get(2, 0);
                const b21 = other.get(2, 1);
                const b22 = other.get(2, 2);

                const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;
                const m2 = (a00 - a10) * (-b01 + b11);
                const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);
                const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);
                const m5 = (a10 + a11) * (-b00 + b01);
                const m6 = a00 * b00;
                const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);
                const m8 = (-a00 + a20) * (b02 - b12);
                const m9 = (a20 + a21) * (-b00 + b02);
                const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;
                const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);
                const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);
                const m13 = (a02 - a22) * (b11 - b21);
                const m14 = a02 * b20;
                const m15 = (a21 + a22) * (-b20 + b21);
                const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);
                const m17 = (a02 - a12) * (b12 - b22);
                const m18 = (a11 + a12) * (-b20 + b22);
                const m19 = a01 * b10;
                const m20 = a12 * b21;
                const m21 = a10 * b02;
                const m22 = a20 * b01;
                const m23 = a22 * b22;

                const c00 = m6 + m14 + m19;
                const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;
                const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;
                const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;
                const c11 = m2 + m4 + m5 + m6 + m20;
                const c12 = m14 + m16 + m17 + m18 + m21;
                const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;
                const c21 = m12 + m13 + m14 + m15 + m22;
                const c22 = m6 + m7 + m8 + m9 + m23;

                result.set(0, 0, c00);
                result.set(0, 1, c01);
                result.set(0, 2, c02);
                result.set(1, 0, c10);
                result.set(1, 1, c11);
                result.set(1, 2, c12);
                result.set(2, 0, c20);
                result.set(2, 1, c21);
                result.set(2, 2, c22);
                return result;
              }

              mmulStrassen(y) {
                y = Matrix.checkMatrix(y);
                let x = this.clone();
                let r1 = x.rows;
                let c1 = x.columns;
                let r2 = y.rows;
                let c2 = y.columns;
                if (c1 !== r2) {
                  // eslint-disable-next-line no-console
                  console.warn(
                    `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,
                  );
                }

                // Put a matrix into the top left of a matrix of zeros.
                // `rows` and `cols` are the dimensions of the output matrix.
                function embed(mat, rows, cols) {
                  let r = mat.rows;
                  let c = mat.columns;
                  if (r === rows && c === cols) {
                    return mat;
                  } else {
                    let resultat = AbstractMatrix.zeros(rows, cols);
                    resultat = resultat.setSubMatrix(mat, 0, 0);
                    return resultat;
                  }
                }

                // Make sure both matrices are the same size.
                // This is exclusively for simplicity:
                // this algorithm can be implemented with matrices of different sizes.

                let r = Math.max(r1, r2);
                let c = Math.max(c1, c2);
                x = embed(x, r, c);
                y = embed(y, r, c);

                // Our recursive multiplication function.
                function blockMult(a, b, rows, cols) {
                  // For small matrices, resort to naive multiplication.
                  if (rows <= 512 || cols <= 512) {
                    return a.mmul(b); // a is equivalent to this
                  }

                  // Apply dynamic padding.
                  if (rows % 2 === 1 && cols % 2 === 1) {
                    a = embed(a, rows + 1, cols + 1);
                    b = embed(b, rows + 1, cols + 1);
                  } else if (rows % 2 === 1) {
                    a = embed(a, rows + 1, cols);
                    b = embed(b, rows + 1, cols);
                  } else if (cols % 2 === 1) {
                    a = embed(a, rows, cols + 1);
                    b = embed(b, rows, cols + 1);
                  }

                  let halfRows = parseInt(a.rows / 2, 10);
                  let halfCols = parseInt(a.columns / 2, 10);
                  // Subdivide input matrices.
                  let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);
                  let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);

                  let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);
                  let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);

                  let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);
                  let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);

                  let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);
                  let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);

                  // Compute intermediate values.
                  let m1 = blockMult(
                    AbstractMatrix.add(a11, a22),
                    AbstractMatrix.add(b11, b22),
                    halfRows,
                    halfCols,
                  );
                  let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);
                  let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);
                  let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);
                  let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);
                  let m6 = blockMult(
                    AbstractMatrix.sub(a21, a11),
                    AbstractMatrix.add(b11, b12),
                    halfRows,
                    halfCols,
                  );
                  let m7 = blockMult(
                    AbstractMatrix.sub(a12, a22),
                    AbstractMatrix.add(b21, b22),
                    halfRows,
                    halfCols,
                  );

                  // Combine intermediate values into the output.
                  let c11 = AbstractMatrix.add(m1, m4);
                  c11.sub(m5);
                  c11.add(m7);
                  let c12 = AbstractMatrix.add(m3, m5);
                  let c21 = AbstractMatrix.add(m2, m4);
                  let c22 = AbstractMatrix.sub(m1, m2);
                  c22.add(m3);
                  c22.add(m6);

                  // Crop output to the desired size (undo dynamic padding).
                  let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);
                  resultat = resultat.setSubMatrix(c11, 0, 0);
                  resultat = resultat.setSubMatrix(c12, c11.rows, 0);
                  resultat = resultat.setSubMatrix(c21, 0, c11.columns);
                  resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);
                  return resultat.subMatrix(0, rows - 1, 0, cols - 1);
                }
                return blockMult(x, y, r, c);
              }

              scaleRows(options = {}) {
                if (typeof options !== 'object') {
                  throw new TypeError('options must be an object');
                }
                const { min = 0, max = 1 } = options;
                if (!Number.isFinite(min)) throw new TypeError('min must be a number');
                if (!Number.isFinite(max)) throw new TypeError('max must be a number');
                if (min >= max) throw new RangeError('min must be smaller than max');
                let newMatrix = new Matrix(this.rows, this.columns);
                for (let i = 0; i < this.rows; i++) {
                  const row = this.getRow(i);
                  rescale(row, { min, max, output: row });
                  newMatrix.setRow(i, row);
                }
                return newMatrix;
              }

              scaleColumns(options = {}) {
                if (typeof options !== 'object') {
                  throw new TypeError('options must be an object');
                }
                const { min = 0, max = 1 } = options;
                if (!Number.isFinite(min)) throw new TypeError('min must be a number');
                if (!Number.isFinite(max)) throw new TypeError('max must be a number');
                if (min >= max) throw new RangeError('min must be smaller than max');
                let newMatrix = new Matrix(this.rows, this.columns);
                for (let i = 0; i < this.columns; i++) {
                  const column = this.getColumn(i);
                  rescale(column, {
                    min: min,
                    max: max,
                    output: column,
                  });
                  newMatrix.setColumn(i, column);
                }
                return newMatrix;
              }

              flipRows() {
                const middle = Math.ceil(this.columns / 2);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < middle; j++) {
                    let first = this.get(i, j);
                    let last = this.get(i, this.columns - 1 - j);
                    this.set(i, j, last);
                    this.set(i, this.columns - 1 - j, first);
                  }
                }
                return this;
              }

              flipColumns() {
                const middle = Math.ceil(this.rows / 2);
                for (let j = 0; j < this.columns; j++) {
                  for (let i = 0; i < middle; i++) {
                    let first = this.get(i, j);
                    let last = this.get(this.rows - 1 - i, j);
                    this.set(i, j, last);
                    this.set(this.rows - 1 - i, j, first);
                  }
                }
                return this;
              }

              kroneckerProduct(other) {
                other = Matrix.checkMatrix(other);

                let m = this.rows;
                let n = this.columns;
                let p = other.rows;
                let q = other.columns;

                let result = new Matrix(m * p, n * q);
                for (let i = 0; i < m; i++) {
                  for (let j = 0; j < n; j++) {
                    for (let k = 0; k < p; k++) {
                      for (let l = 0; l < q; l++) {
                        result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));
                      }
                    }
                  }
                }
                return result;
              }

              transpose() {
                let result = new Matrix(this.columns, this.rows);
                for (let i = 0; i < this.rows; i++) {
                  for (let j = 0; j < this.columns; j++) {
                    result.set(j, i, this.get(i, j));
                  }
                }
                return result;
              }

              sortRows(compareFunction = compareNumbers) {
                for (let i = 0; i < this.rows; i++) {
                  this.setRow(i, this.getRow(i).sort(compareFunction));
                }
                return this;
              }

              sortColumns(compareFunction = compareNumbers) {
                for (let i = 0; i < this.columns; i++) {
                  this.setColumn(i, this.getColumn(i).sort(compareFunction));
                }
                return this;
              }

              subMatrix(startRow, endRow, startColumn, endColumn) {
                checkRange(this, startRow, endRow, startColumn, endColumn);
                let newMatrix = new Matrix(
                  endRow - startRow + 1,
                  endColumn - startColumn + 1,
                );
                for (let i = startRow; i <= endRow; i++) {
                  for (let j = startColumn; j <= endColumn; j++) {
                    newMatrix.set(i - startRow, j - startColumn, this.get(i, j));
                  }
                }
                return newMatrix;
              }

              subMatrixRow(indices, startColumn, endColumn) {
                if (startColumn === undefined) startColumn = 0;
                if (endColumn === undefined) endColumn = this.columns - 1;
                if (
                  startColumn > endColumn ||
                  startColumn < 0 ||
                  startColumn >= this.columns ||
                  endColumn < 0 ||
                  endColumn >= this.columns
                ) {
                  throw new RangeError('Argument out of range');
                }

                let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);
                for (let i = 0; i < indices.length; i++) {
                  for (let j = startColumn; j <= endColumn; j++) {
                    if (indices[i] < 0 || indices[i] >= this.rows) {
                      throw new RangeError(`Row index out of range: ${indices[i]}`);
                    }
                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));
                  }
                }
                return newMatrix;
              }

              subMatrixColumn(indices, startRow, endRow) {
                if (startRow === undefined) startRow = 0;
                if (endRow === undefined) endRow = this.rows - 1;
                if (
                  startRow > endRow ||
                  startRow < 0 ||
                  startRow >= this.rows ||
                  endRow < 0 ||
                  endRow >= this.rows
                ) {
                  throw new RangeError('Argument out of range');
                }

                let newMatrix = new Matrix(endRow - startRow + 1, indices.length);
                for (let i = 0; i < indices.length; i++) {
                  for (let j = startRow; j <= endRow; j++) {
                    if (indices[i] < 0 || indices[i] >= this.columns) {
                      throw new RangeError(`Column index out of range: ${indices[i]}`);
                    }
                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));
                  }
                }
                return newMatrix;
              }

              setSubMatrix(matrix, startRow, startColumn) {
                matrix = Matrix.checkMatrix(matrix);
                let endRow = startRow + matrix.rows - 1;
                let endColumn = startColumn + matrix.columns - 1;
                checkRange(this, startRow, endRow, startColumn, endColumn);
                for (let i = 0; i < matrix.rows; i++) {
                  for (let j = 0; j < matrix.columns; j++) {
                    this.set(startRow + i, startColumn + j, matrix.get(i, j));
                  }
                }
                return this;
              }

              selection(rowIndices, columnIndices) {
                let indices = checkIndices(this, rowIndices, columnIndices);
                let newMatrix = new Matrix(rowIndices.length, columnIndices.length);
                for (let i = 0; i < indices.row.length; i++) {
                  let rowIndex = indices.row[i];
                  for (let j = 0; j < indices.column.length; j++) {
                    let columnIndex = indices.column[j];
                    newMatrix.set(i, j, this.get(rowIndex, columnIndex));
                  }
                }
                return newMatrix;
              }

              trace() {
                let min = Math.min(this.rows, this.columns);
                let trace = 0;
                for (let i = 0; i < min; i++) {
                  trace += this.get(i, i);
                }
                return trace;
              }

              clone() {
                let newMatrix = new Matrix(this.rows, this.columns);
                for (let row = 0; row < this.rows; row++) {
                  for (let column = 0; column < this.columns; column++) {
                    newMatrix.set(row, column, this.get(row, column));
                  }
                }
                return newMatrix;
              }

              sum(by) {
                switch (by) {
                  case 'row':
                    return sumByRow(this);
                  case 'column':
                    return sumByColumn(this);
                  case undefined:
                    return sumAll(this);
                  default:
                    throw new Error(`invalid option: ${by}`);
                }
              }

              product(by) {
                switch (by) {
                  case 'row':
                    return productByRow(this);
                  case 'column':
                    return productByColumn(this);
                  case undefined:
                    return productAll(this);
                  default:
                    throw new Error(`invalid option: ${by}`);
                }
              }

              mean(by) {
                const sum = this.sum(by);
                switch (by) {
                  case 'row': {
                    for (let i = 0; i < this.rows; i++) {
                      sum[i] /= this.columns;
                    }
                    return sum;
                  }
                  case 'column': {
                    for (let i = 0; i < this.columns; i++) {
                      sum[i] /= this.rows;
                    }
                    return sum;
                  }
                  case undefined:
                    return sum / this.size;
                  default:
                    throw new Error(`invalid option: ${by}`);
                }
              }

              variance(by, options = {}) {
                if (typeof by === 'object') {
                  options = by;
                  by = undefined;
                }
                if (typeof options !== 'object') {
                  throw new TypeError('options must be an object');
                }
                const { unbiased = true, mean = this.mean(by) } = options;
                if (typeof unbiased !== 'boolean') {
                  throw new TypeError('unbiased must be a boolean');
                }
                switch (by) {
                  case 'row': {
                    if (!Array.isArray(mean)) {
                      throw new TypeError('mean must be an array');
                    }
                    return varianceByRow(this, unbiased, mean);
                  }
                  case 'column': {
                    if (!Array.isArray(mean)) {
                      throw new TypeError('mean must be an array');
                    }
                    return varianceByColumn(this, unbiased, mean);
                  }
                  case undefined: {
                    if (typeof mean !== 'number') {
                      throw new TypeError('mean must be a number');
                    }
                    return varianceAll(this, unbiased, mean);
                  }
                  default:
                    throw new Error(`invalid option: ${by}`);
                }
              }

              standardDeviation(by, options) {
                if (typeof by === 'object') {
                  options = by;
                  by = undefined;
                }
                const variance = this.variance(by, options);
                if (by === undefined) {
                  return Math.sqrt(variance);
                } else {
                  for (let i = 0; i < variance.length; i++) {
                    variance[i] = Math.sqrt(variance[i]);
                  }
                  return variance;
                }
              }

              center(by, options = {}) {
                if (typeof by === 'object') {
                  options = by;
                  by = undefined;
                }
                if (typeof options !== 'object') {
                  throw new TypeError('options must be an object');
                }
                const { center = this.mean(by) } = options;
                switch (by) {
                  case 'row': {
                    if (!Array.isArray(center)) {
                      throw new TypeError('center must be an array');
                    }
                    centerByRow(this, center);
                    return this;
                  }
                  case 'column': {
                    if (!Array.isArray(center)) {
                      throw new TypeError('center must be an array');
                    }
                    centerByColumn(this, center);
                    return this;
                  }
                  case undefined: {
                    if (typeof center !== 'number') {
                      throw new TypeError('center must be a number');
                    }
                    centerAll(this, center);
                    return this;
                  }
                  default:
                    throw new Error(`invalid option: ${by}`);
                }
              }

              scale(by, options = {}) {
                if (typeof by === 'object') {
                  options = by;
                  by = undefined;
                }
                if (typeof options !== 'object') {
                  throw new TypeError('options must be an object');
                }
                let scale = options.scale;
                switch (by) {
                  case 'row': {
                    if (scale === undefined) {
                      scale = getScaleByRow(this);
                    } else if (!Array.isArray(scale)) {
                      throw new TypeError('scale must be an array');
                    }
                    scaleByRow(this, scale);
                    return this;
                  }
                  case 'column': {
                    if (scale === undefined) {
                      scale = getScaleByColumn(this);
                    } else if (!Array.isArray(scale)) {
                      throw new TypeError('scale must be an array');
                    }
                    scaleByColumn(this, scale);
                    return this;
                  }
                  case undefined: {
                    if (scale === undefined) {
                      scale = getScaleAll(this);
                    } else if (typeof scale !== 'number') {
                      throw new TypeError('scale must be a number');
                    }
                    scaleAll(this, scale);
                    return this;
                  }
                  default:
                    throw new Error(`invalid option: ${by}`);
                }
              }
            }

            AbstractMatrix.prototype.klass = 'Matrix';
            if (typeof Symbol !== 'undefined') {
              AbstractMatrix.prototype[
                Symbol.for('nodejs.util.inspect.custom')
              ] = inspectMatrix;
            }

            function compareNumbers(a, b) {
              return a - b;
            }

            // Synonyms
            AbstractMatrix.random = AbstractMatrix.rand;
            AbstractMatrix.randomInt = AbstractMatrix.randInt;
            AbstractMatrix.diagonal = AbstractMatrix.diag;
            AbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;
            AbstractMatrix.identity = AbstractMatrix.eye;
            AbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;
            AbstractMatrix.prototype.tensorProduct =
              AbstractMatrix.prototype.kroneckerProduct;

            class Matrix extends AbstractMatrix {
              constructor(nRows, nColumns) {
                super();
                if (Matrix.isMatrix(nRows)) {
                  return nRows.clone();
                } else if (Number.isInteger(nRows) && nRows > 0) {
                  // Create an empty matrix
                  this.data = [];
                  if (Number.isInteger(nColumns) && nColumns > 0) {
                    for (let i = 0; i < nRows; i++) {
                      this.data.push(new Float64Array(nColumns));
                    }
                  } else {
                    throw new TypeError('nColumns must be a positive integer');
                  }
                } else if (Array.isArray(nRows)) {
                  // Copy the values from the 2D array
                  const arrayData = nRows;
                  nRows = arrayData.length;
                  nColumns = arrayData[0].length;
                  if (typeof nColumns !== 'number' || nColumns === 0) {
                    throw new TypeError(
                      'Data must be a 2D array with at least one element',
                    );
                  }
                  this.data = [];
                  for (let i = 0; i < nRows; i++) {
                    if (arrayData[i].length !== nColumns) {
                      throw new RangeError('Inconsistent array dimensions');
                    }
                    this.data.push(Float64Array.from(arrayData[i]));
                  }
                } else {
                  throw new TypeError(
                    'First argument must be a positive number or an array',
                  );
                }
                this.rows = nRows;
                this.columns = nColumns;
                return this;
              }

              set(rowIndex, columnIndex, value) {
                this.data[rowIndex][columnIndex] = value;
                return this;
              }

              get(rowIndex, columnIndex) {
                return this.data[rowIndex][columnIndex];
              }

              removeRow(index) {
                checkRowIndex(this, index);
                if (this.rows === 1) {
                  throw new RangeError('A matrix cannot have less than one row');
                }
                this.data.splice(index, 1);
                this.rows -= 1;
                return this;
              }

              addRow(index, array) {
                if (array === undefined) {
                  array = index;
                  index = this.rows;
                }
                checkRowIndex(this, index, true);
                array = Float64Array.from(checkRowVector(this, array));
                this.data.splice(index, 0, array);
                this.rows += 1;
                return this;
              }

              removeColumn(index) {
                checkColumnIndex(this, index);
                if (this.columns === 1) {
                  throw new RangeError('A matrix cannot have less than one column');
                }
                for (let i = 0; i < this.rows; i++) {
                  const newRow = new Float64Array(this.columns - 1);
                  for (let j = 0; j < index; j++) {
                    newRow[j] = this.data[i][j];
                  }
                  for (let j = index + 1; j < this.columns; j++) {
                    newRow[j - 1] = this.data[i][j];
                  }
                  this.data[i] = newRow;
                }
                this.columns -= 1;
                return this;
              }

              addColumn(index, array) {
                if (typeof array === 'undefined') {
                  array = index;
                  index = this.columns;
                }
                checkColumnIndex(this, index, true);
                array = checkColumnVector(this, array);
                for (let i = 0; i < this.rows; i++) {
                  const newRow = new Float64Array(this.columns + 1);
                  let j = 0;
                  for (; j < index; j++) {
                    newRow[j] = this.data[i][j];
                  }
                  newRow[j++] = array[i];
                  for (; j < this.columns + 1; j++) {
                    newRow[j] = this.data[i][j - 1];
                  }
                  this.data[i] = newRow;
                }
                this.columns += 1;
                return this;
              }
            }

            installMathOperations(AbstractMatrix, Matrix);

            /**
             *  Constructs a confusion matrix
             * @class ConfusionMatrix
             * @example
             * const CM = new ConfusionMatrix([[13, 2], [10, 5]], ['cat', 'dog'])
             * @param {Array<Array<number>>} matrix - The confusion matrix, a 2D Array. Rows represent the actual label and columns
             *     the predicted label.
             * @param {Array<any>} labels - Labels of the confusion matrix, a 1D Array
             */
            class ConfusionMatrix {
              constructor(matrix, labels) {
                if (matrix.length !== matrix[0].length) {
                  throw new Error('Confusion matrix must be square');
                }
                if (labels.length !== matrix.length) {
                  throw new Error(
                    'Confusion matrix and labels should have the same length',
                  );
                }
                this.labels = labels;
                this.matrix = matrix;
              }

              /**
               * Construct confusion matrix from the predicted and actual labels (classes). Be sure to provide the arguments in
               * the correct order!
               * @param {Array<any>} actual  - The predicted labels of the classification
               * @param {Array<any>} predicted     - The actual labels of the classification. Has to be of same length as
               *     predicted.
               * @param {object} [options] - Additional options
               * @param {Array<any>} [options.labels] - The list of labels that should be used. If not provided the distinct set
               *     of labels present in predicted and actual is used. Labels are compared using the strict equality operator
               *     '==='
               * @return {ConfusionMatrix} - Confusion matrix
               */
              static fromLabels(actual, predicted, options = {}) {
                if (predicted.length !== actual.length) {
                  throw new Error('predicted and actual must have the same length');
                }
                let distinctLabels;
                if (options.labels) {
                  distinctLabels = new Set(options.labels);
                } else {
                  distinctLabels = new Set([...actual, ...predicted]);
                }
                distinctLabels = Array.from(distinctLabels);
                if (options.sort) {
                  distinctLabels.sort(options.sort);
                }

                // Create confusion matrix and fill with 0's
                const matrix = Array.from({ length: distinctLabels.length });
                for (let i = 0; i < matrix.length; i++) {
                  matrix[i] = new Array(matrix.length);
                  matrix[i].fill(0);
                }

                for (let i = 0; i < predicted.length; i++) {
                  const actualIdx = distinctLabels.indexOf(actual[i]);
                  const predictedIdx = distinctLabels.indexOf(predicted[i]);
                  if (actualIdx >= 0 && predictedIdx >= 0) {
                    matrix[actualIdx][predictedIdx]++;
                  }
                }

                return new ConfusionMatrix(matrix, distinctLabels);
              }

              /**
               * Get the confusion matrix
               * @return {Array<Array<number> >}
               */
              getMatrix() {
                return this.matrix;
              }

              getLabels() {
                return this.labels;
              }

              /**
               * Get the total number of samples
               * @return {number}
               */
              getTotalCount() {
                let predicted = 0;
                for (let i = 0; i < this.matrix.length; i++) {
                  for (let j = 0; j < this.matrix.length; j++) {
                    predicted += this.matrix[i][j];
                  }
                }
                return predicted;
              }

              /**
               * Get the total number of true predictions
               * @return {number}
               */
              getTrueCount() {
                let count = 0;
                for (let i = 0; i < this.matrix.length; i++) {
                  count += this.matrix[i][i];
                }
                return count;
              }

              /**
               * Get the total number of false predictions.
               * @return {number}
               */
              getFalseCount() {
                return this.getTotalCount() - this.getTrueCount();
              }

              /**
               * Get the number of true positive predictions.
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getTruePositiveCount(label) {
                const index = this.getIndex(label);
                return this.matrix[index][index];
              }

              /**
               * Get the number of true negative predictions
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getTrueNegativeCount(label) {
                const index = this.getIndex(label);
                let count = 0;
                for (let i = 0; i < this.matrix.length; i++) {
                  for (let j = 0; j < this.matrix.length; j++) {
                    if (i !== index && j !== index) {
                      count += this.matrix[i][j];
                    }
                  }
                }
                return count;
              }

              /**
               * Get the number of false positive predictions.
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getFalsePositiveCount(label) {
                const index = this.getIndex(label);
                let count = 0;
                for (let i = 0; i < this.matrix.length; i++) {
                  if (i !== index) {
                    count += this.matrix[i][index];
                  }
                }
                return count;
              }

              /**
               * Get the number of false negative predictions.
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getFalseNegativeCount(label) {
                const index = this.getIndex(label);
                let count = 0;
                for (let i = 0; i < this.matrix.length; i++) {
                  if (i !== index) {
                    count += this.matrix[index][i];
                  }
                }
                return count;
              }

              /**
               * Get the number of real positive samples.
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getPositiveCount(label) {
                return this.getTruePositiveCount(label) + this.getFalseNegativeCount(label);
              }

              /**
               * Get the number of real negative samples.
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getNegativeCount(label) {
                return this.getTrueNegativeCount(label) + this.getFalsePositiveCount(label);
              }

              /**
               * Get the index in the confusion matrix that corresponds to the given label
               * @param {any} label - The label to search for
               * @throws if the label is not found
               * @return {number}
               */
              getIndex(label) {
                const index = this.labels.indexOf(label);
                if (index === -1) throw new Error('The label does not exist');
                return index;
              }

              /**
               * Get the true positive rate a.k.a. sensitivity. Computes the ratio between the number of true positive predictions and the total number of positive samples.
               * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}
               * @param {any} label - The label that should be considered "positive"
               * @return {number} - The true positive rate [0-1]
               */
              getTruePositiveRate(label) {
                return this.getTruePositiveCount(label) / this.getPositiveCount(label);
              }

              /**
               * Get the true negative rate a.k.a. specificity. Computes the ration between the number of true negative predictions and the total number of negative samples.
               * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getTrueNegativeRate(label) {
                return this.getTrueNegativeCount(label) / this.getNegativeCount(label);
              }

              /**
               * Get the positive predictive value a.k.a. precision. Computes TP / (TP + FP)
               * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getPositivePredictiveValue(label) {
                const TP = this.getTruePositiveCount(label);
                return TP / (TP + this.getFalsePositiveCount(label));
              }

              /**
               * Negative predictive value
               * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getNegativePredictiveValue(label) {
                const TN = this.getTrueNegativeCount(label);
                return TN / (TN + this.getFalseNegativeCount(label));
              }

              /**
               * False negative rate a.k.a. miss rate.
               * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getFalseNegativeRate(label) {
                return 1 - this.getTruePositiveRate(label);
              }

              /**
               * False positive rate a.k.a. fall-out rate.
               * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getFalsePositiveRate(label) {
                return 1 - this.getTrueNegativeRate(label);
              }

              /**
               * False discovery rate (FDR)
               * {@link https://en.wikipedia.org/wiki/False_discovery_rate}
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getFalseDiscoveryRate(label) {
                const FP = this.getFalsePositiveCount(label);
                return FP / (FP + this.getTruePositiveCount(label));
              }

              /**
               * False omission rate (FOR)
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getFalseOmissionRate(label) {
                const FN = this.getFalseNegativeCount(label);
                return FN / (FN + this.getTruePositiveCount(label));
              }

              /**
               * F1 score
               * {@link https://en.wikipedia.org/wiki/F1_score}
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getF1Score(label) {
                const TP = this.getTruePositiveCount(label);
                return (
                  (2 * TP) /
                  (2 * TP +
                    this.getFalsePositiveCount(label) +
                    this.getFalseNegativeCount(label))
                );
              }

              /**
               * Matthews correlation coefficient (MCC)
               * {@link https://en.wikipedia.org/wiki/Matthews_correlation_coefficient}
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getMatthewsCorrelationCoefficient(label) {
                const TP = this.getTruePositiveCount(label);
                const TN = this.getTrueNegativeCount(label);
                const FP = this.getFalsePositiveCount(label);
                const FN = this.getFalseNegativeCount(label);
                return (
                  (TP * TN - FP * FN) /
                  Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN))
                );
              }

              /**
               * Informedness
               * {@link https://en.wikipedia.org/wiki/Youden%27s_J_statistic}
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getInformedness(label) {
                return (
                  this.getTruePositiveRate(label) + this.getTrueNegativeRate(label) - 1
                );
              }

              /**
               * Markedness
               * @param {any} label - The label that should be considered "positive"
               * @return {number}
               */
              getMarkedness(label) {
                return (
                  this.getPositivePredictiveValue(label) +
                  this.getNegativePredictiveValue(label) -
                  1
                );
              }

              /**
               * Get the confusion table.
               * @param {any} label - The label that should be considered "positive"
               * @return {Array<Array<number> >} - The 2x2 confusion table. [[TP, FN], [FP, TN]]
               */
              getConfusionTable(label) {
                return [
                  [this.getTruePositiveCount(label), this.getFalseNegativeCount(label)],
                  [this.getFalsePositiveCount(label), this.getTrueNegativeCount(label)],
                ];
              }

              /**
               * Get total accuracy.
               * @return {number} - The ratio between the number of true predictions and total number of classifications ([0-1])
               */
              getAccuracy() {
                let correct = 0;
                let incorrect = 0;
                for (let i = 0; i < this.matrix.length; i++) {
                  for (let j = 0; j < this.matrix.length; j++) {
                    if (i === j) correct += this.matrix[i][j];
                    else incorrect += this.matrix[i][j];
                  }
                }
                return correct / (correct + incorrect);
              }

              /**
               * Returns the element in the confusion matrix that corresponds to the given actual and predicted labels.
               * @param {any} actual - The true label
               * @param {any} predicted - The predicted label
               * @return {number} - The element in the confusion matrix
               */
              getCount(actual, predicted) {
                const actualIndex = this.getIndex(actual);
                const predictedIndex = this.getIndex(predicted);
                return this.matrix[actualIndex][predictedIndex];
              }

              /**
               * Compute the general prediction accuracy
               * @deprecated Use getAccuracy
               * @return {number} - The prediction accuracy ([0-1]
               */
              get accuracy() {
                return this.getAccuracy();
              }

              /**
               * Compute the number of predicted observations
               * @deprecated Use getTotalCount
               * @return {number}
               */
              get total() {
                return this.getTotalCount();
              }
            }

            /** This class performs grid search - an exhaustive search through all parameter combinations.
             * It can then call custom result evaluation and display heat-map in console.
             */
            class GridSearch {

                /** Constructor for this object. Options must
                 * provide run callback and parameters object with each property listing its possible values.
                 * Run callback must return prediction metrics object.
                 */
                constructor(options) {
                    this._run_callback = options.run_callback;
                    this._params = [];
                    this._shades = [];
                    this._combinations = [];
                    this._results = [];
                    this._prepare(options.params);
                }

                /** Save this class to file */
                save(fname) {
                    let memento = {
                        results: this._results,
                        params: this._params,
                        combinations: this._combinations
                    };
                    fs.writeFileSync(fname, JSON.stringify(memento), { encoding: "utf8" });
                }

                /** Load this class from file */
                load(fname) {
                    let s = fs.readFileSync(fname, "utf8");
                    let memento = JSON.parse(s);
                    this._results = memento.results;
                    this._params = memento.params;
                    this._combinations = memento.combinations;
                }

                /** Shallow clones provided object. */
                clone(obj) {
                    return Object.assign({}, obj);
                }

                /** Prepares all combinations of input parameters */
                _prepare(params_orig) {
                    let pars = [];
                    for (let par in params_orig) {
                        if (params_orig.hasOwnProperty(par)) {
                            pars.push({ name: par, values: params_orig[par] });
                        }
                    }

                    this._combinations = [{}];
                    for (let i = 0; i < pars.length; i++) {
                        let collected_new = [];
                        for (let obj of this._combinations) {
                            for (let j = 0; j < pars[i].values.length; j++) {
                                let obj2 = this.clone(obj);
                                obj2[pars[i].name] = pars[i].values[j];
                                collected_new.push(obj2);
                            }
                        }
                        this._combinations = collected_new;
                    }
                    this._params = pars;
                }

                /** Creates all combinations of parameters and runs the callback for each one. */
                run() {
                    for (let par of this._combinations) {
                        this._results.push({
                            params: par,
                            results: this._run_callback(par)
                        });
                    }
                }

                /** Utility method that creates default value table. */
                _createDefaultTable(r, c, d) {
                    let res_table = [];
                    for (let i = 0; i < r; i++) {
                        let tmp = [];
                        for (let j = 0; j < c; j++) {
                            tmp.push(d);
                        }
                        res_table.push(tmp);
                    }
                    return res_table;
                }

                /** Utility method that will find the index inside the array of filter object.
                 * Filter means simply an object that contains some properties that target object must match.
                 */
                _findMatchForParam(filter_arr, obj) {
                    for (let i = 0; i < filter_arr.length; i++) {
                        let match = true;
                        for (let p in filter_arr[i]) {
                            if (filter_arr[i].hasOwnProperty(p)) {
                                match = match && obj[p] == filter_arr[i][p];
                            }
                        }
                        if (match) {
                            return i;
                        }
                    }
                    return -1;
                }

                /** Returns the table of best results.
                 * User specifies which parameter should be used
                 * for rows and which for columns. He also needs to
                 * provide callback that evaluates the results.
                 */
                getTableOfResults(colPars, rowPars, evalCallback) {
                    let combinations_rows = [{}];
                    let combinations_cols = [{}];
                    let pars_rows = this._params.filter(x => rowPars.indexOf(x.name) >= 0);
                    let pars_cols = this._params.filter(x => colPars.indexOf(x.name) >= 0);

                    for (let i = 0; i < pars_rows.length; i++) {
                        let collected_new = [];
                        for (let obj of combinations_rows) {
                            for (let j = 0; j < pars_rows[i].values.length; j++) {
                                let obj2 = this.clone(obj);
                                obj2[pars_rows[i].name] = pars_rows[i].values[j];
                                collected_new.push(obj2);
                            }
                        }
                        combinations_rows = collected_new;
                    }
                    for (let i = 0; i < pars_cols.length; i++) {
                        let collected_new = [];
                        for (let obj of combinations_cols) {
                            for (let j = 0; j < pars_cols[i].values.length; j++) {
                                let obj2 = this.clone(obj);
                                obj2[pars_cols[i].name] = pars_cols[i].values[j];
                                collected_new.push(obj2);
                            }
                        }
                        combinations_cols = collected_new;
                    }

                    let res_table = this._createDefaultTable(combinations_rows.length, combinations_cols.length, -1);

                    for (let res of this._results) {
                        let r = this._findMatchForParam(combinations_rows, res.params);
                        let c = this._findMatchForParam(combinations_cols, res.params);
                        if (r < 0 || c < 0) {
                            continue; // should not happen, really
                        }
                        let val = evalCallback(res);
                        if (res_table[r][c] < val) {
                            res_table[r][c] = val;
                        }
                    }
                    return {
                        rows: combinations_rows,
                        cols: combinations_cols,
                        results: res_table
                    };
                }

                /** Utility method for creating text display of parameter/filter object */
                _createTitle(obj) {
                    let res = "";
                    for (let p in obj) {
                        if (obj.hasOwnProperty(p)) {
                            res += `${p}=${obj[p]},`;
                        }
                    }
                    return res.substr(0, res.length - 1);
                }

                /** Utility function for padding given string to specified length */
                _padToWidth(s, width, c) {
                    c = c || " ";
                    while (s.length < width) { s += c; }
                    return s;
                }

                /** This method prepares output colors given max range */
                _prepareColorShades(min, max) {
                    let step = (max - min) / 5;
                    this._shades = [];
                    for (let i = 0; i < 5; i++) {
                        this._shades.push(max - i * step);
                    }
                }

                /** Outputs numeric values while producing mathing color for the value */
                _outputValue(val, width) {
                    let s = this._padToWidth("" + val, width);
                    return s;
                }

                /** Display table in friendly way */
                displayTableOfResults(colPars, rowPars, evalCallback) {
                    let tab = this.getTableOfResults(colPars, rowPars, evalCallback);
                    let col_titles = tab.cols.map(x => this._createTitle(x));
                    let row_titles = tab.rows.map(x => this._createTitle(x));
                    let col_widths = col_titles.map(x => Math.max(x.length + 4, 8));

                    let first_col_width = 0;
                    row_titles.forEach(x => { first_col_width = Math.max(first_col_width, x.length + 4); });

                    // calculate color ranges
                    let rmin = null, rmax = null;
                    tab.results.forEach(x => {
                        x.forEach(y => {
                            if (rmin === null || rmin > y) {
                                rmin = y;
                            }
                            if (rmax === null || rmax < y) {
                                rmax = y;
                            }
                        });
                    });
                    this._prepareColorShades(rmin, rmax);

                    // ok, start with display
                    let row = "", row2 = "";

                    row += "| " + this._padToWidth("", first_col_width);
                    row2 += "|-" + this._padToWidth("", first_col_width, "-");
                    for (let i = 0; i < col_titles.length; i++) {
                        row += "| " + this._padToWidth(col_titles[i], col_widths[i]);
                        row2 += "|-" + this._padToWidth("", col_widths[i], "-");
                    }
                    console.log(row);
                    console.log(row2);

                    for (let j = 0; j < row_titles.length; j++) {
                        row = "| ";
                        row += this._padToWidth(row_titles[j], first_col_width);
                        for (let i = 0; i < col_titles.length; i++) {
                            row += "| " + this._outputValue(tab.results[j][i], col_widths[i]);
                        }
                        console.log(row);
                    }
                }
            }

            var GridSearch_1 = GridSearch;

            var grid_search = {
            	GridSearch: GridSearch_1
            };

            const { GridSearch: GridSearch$1, } = grid_search;












            /**
             * Split arrays into random train and test subsets
             * @memberOf cross_validation
             * @example
             * const testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];
            // { train: [ 50, 20, 34, 33, 10, 23, 90, 42 ], test: [ 25, 19 ] }
            const trainTestSplit = ms.cross_validation.train_test_split(testArray,{ test_size:0.2, random_state: 0, });
             * @param {array} dataset - array of data to split
             * @param {object} options
             * @param {number} [options.test_size=0.2] - represent the proportion of the dataset to include in the test split, can be overwritten by the train_size 
             * @param {number} [options.train_size=0.8] - represent the proportion of the dataset to include in the train split 
             * @param {number} [options.random_state=0] - the seed used by the random number generator
             * @param {boolean} [options.return_array=false] - will return an object {train,test} of the split dataset by default or [train,test] if returned as an array
             * @returns {(Object|array)} returns training and test arrays either as an object or arrays
             */
            function train_test_split(dataset = [], options = {
              test_size: 0.2,
              train_size: 0.8,
              random_state: 0,
              return_array: false,
              parse_int_train_size: true,
            }) {
              const engine = MersenneTwister19937.seed(options.random_state || 0);
              const training_set = [];
              const parse_int_train_size = (typeof options.parse_int_train_size === 'boolean') ? options.parse_int_train_size : true;
              const train_size_length = (options.train_size)
                ? options.train_size * dataset.length
                : (1 - (options.test_size || 0.2)) * dataset.length;
              const train_size = parse_int_train_size
                ? parseInt(train_size_length.toString(), 10)
                : train_size_length;
              const dataset_copy = new Array().concat(dataset);

              while (training_set.length < train_size) {
                const index = integer(0, (dataset_copy.length - 1))(engine);
                // console.log({ index });
                training_set.push(dataset_copy.splice(index, 1)[0]);
              }
              return (options.return_array) ? [training_set, dataset_copy,] : {
                train: training_set,
                test: dataset_copy,
              };
            }

            /**
             * Provides train/test indices to split data in train/test sets. Split dataset into k consecutive folds.
            Each fold is then used once as a validation while the k - 1 remaining folds form the training set.
             * @memberOf cross_validation
             * @example
             * const testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];
            // [ [ 50, 20, 34, 33, 10 ], [ 23, 90, 42, 19, 25 ] ] 
            const crossValidationArrayKFolds = ms.cross_validation.cross_validation_split(testArray, { folds: 2, random_state: 0, });
             * @param {array} dataset - array of data to split
             * @param {object} options
             * @param {number} [options.folds=3] - Number of folds 
             * @param {number} [options.random_state=0] - the seed used by the random number generator
             * @returns {array} returns  dataset split into k consecutive folds
             */
            function cross_validation_split(dataset = [], options = {
              folds: 3,
              random_state: 0,
            }) { //kfolds
              const engine = MersenneTwister19937.seed(options.random_state || 0);
              const folds = options.folds || 3;
              const dataset_split = [];
              const dataset_copy = [].concat(dataset);
              const foldLength = dataset.length / (folds || 3);
              // const foldsize = parseInt(foldLength.toString(), 10);
              // const foldsizeRounded = Math.floor(foldLength);
              const foldsize = Math.floor(foldLength);

              // console.log({ foldsize, foldsizeRounded, foldLength });
              for (let i in lodash_range(folds)) {
                const fold = [];
                while (fold.length < foldsize) {
                  const index = integer(0, (dataset_copy.length - 1))(engine);
                  fold.push(dataset_copy.splice(index, 1)[0]);
                }
                dataset_split.push(fold);
              }

              return dataset_split;
            }

            /**
             * Used to test variance and bias of a prediction
             * @memberOf cross_validation
             * @param {object} options
             * @param {function} options.classifier - instance of classification model used for training, or function to train a model. e.g. new DecisionTreeClassifier({ gainFunction: 'gini', }) or ml.KNN
             * @param {function} options.regression - instance of regression model used for training, or function to train a model. e.g. new RandomForestRegression({ nEstimators: 300, }) or ml.MultivariateLinearRegression
             * @return {number[]} Array of accucracy calculations 
             */
            function cross_validate_score(options = {}) {
              const config =  {
                // classifier,
                // regression,
                // dataset,
                // testingset,
                dependentFeatures: [['X', ], ],
                independentFeatures: [['Y', ], ],
                // random_state,
                folds: 10,
                accuracy: 'standardError',
                use_train_x_matrix: true,
                use_train_y_matrix: false,
                use_train_y_vector: false,
                use_estimates_y_vector: false,
                ...options
              };
              const classifier = config.classifier;
              const regression = config.regression;
              const folds = cross_validation_split(config.dataset, {
                folds: config.folds,
                random_state: config.random_state,
              });
              const testingDataSet = new DataSet(config.testingset);
              const y_test_matrix = testingDataSet.columnMatrix(config.independentFeatures);
              const x_test_matrix = testingDataSet.columnMatrix(config.dependentFeatures);
              const actuals = util$1.pivotVector(y_test_matrix)[ 0 ];
              // console.log({ actuals });
              const prediction_accuracies = folds.map(fold => { 
                const trainingDataSet = new DataSet(fold);
                const x_train = trainingDataSet.columnMatrix(config.dependentFeatures);
                const y_train = trainingDataSet.columnMatrix(config.independentFeatures);
                const x_train_matrix = (config.use_train_x_matrix)
                  ? new Matrix(x_train)
                  : x_train;
                const y_train_matrix = (config.use_train_y_matrix)
                  ? new Matrix(y_train)
                  : (config.use_train_y_vector)
                    ? util$1.pivotVector(y_train)[0]
                    : y_train;
                if (regression) {
                  let regressor;
                  let pred_y_test;
                  if (typeof regression.train === 'function') {
                    regressor = regression.train(x_train_matrix, y_train_matrix, config.modelOptions);
                    pred_y_test = regression.predict(x_test_matrix);
                  } else {
                    regressor = new regression(x_train_matrix, y_train_matrix, config.modelOptions);
                    pred_y_test = regressor.predict(x_test_matrix);
                  }
                  // console.log({ x_test_matrix });
                  // console.log({ pred_y_test });
                  const estimates = pred_y_test;//util.pivotVector(pred_y_test)[0];
                  // console.log({ estimates, actuals });
                  return (config.accuracy === 'standardError')
                    ? util$1.standardError(actuals, estimates)
                    : util$1.rSquared(actuals, estimates);
                } else {
                  let classification;
                  let estimates;
                  if (typeof classifier.train === 'function') {
                    classifier.train(x_train_matrix, y_train_matrix, config.modelOptions);
                    estimates = classifier.predict(x_test_matrix);
                  } else {
                    classification = new classifier(x_train_matrix, y_train_matrix, config.modelOptions);
                    estimates = classification.predict(x_test_matrix);
                  }
                  // classification.train(x_train_matrix, y_train_matrix);
                  // classifier.train(x_train_matrix, y_train_matrix);
                  const compareEstimates = (config.use_estimates_y_vector)
                    ? util$1.pivotVector(estimates)[ 0 ]
                    : estimates;
                  const CM = ConfusionMatrix.fromLabels(actuals, compareEstimates);
                  return CM.getAccuracy();
                }
              });
              return prediction_accuracies;
            }

            /**
             * Used to test variance and bias of a prediction with parameter tuning
             * @memberOf cross_validation
             * @param {object} options
             * @param {function} options.classifier - instance of classification model used for training, or function to train a model. e.g. new DecisionTreeClassifier({ gainFunction: 'gini', }) or ml.KNN
             * @param {function} options.regression - instance of regression model used for training, or function to train a model. e.g. new RandomForestRegression({ nEstimators: 300, }) or ml.MultivariateLinearRegression
             * @return {number[]} Array of accucracy calculations 
             */
            function grid_search$1(options = {}) {
              const config = {
                return_parameters: false,
                compare_score:'mean',
                sortAccuracyScore:'desc',
                parameters: {},
                ...options
              };
              const regressor = config.regression;
              const classification = config.classifier;
              const sortAccuracyScore = (!options.sortAccuracyScore && config.regression)
                ? 'asc'
                : config.sortAccuracyScore;
              
              // const scoreSorter = ;
              const gs = new GridSearch$1({
                params: config.parameters,
                run_callback: (params) => {
                  if (config.regression) {
                    config.regression = new regressor(params);
                  } else {
                    config.classifier = new classification(params);
                  }
                  const score = cross_validate_score(config);
                  return (config.compare_score)
                    //@ts-ignore
                    ? util$1[config.compare_score](score)
                    : score;
                },
              });
              gs.run();
              const accuracySorter = (sortAccuracyScore === 'desc')
                ? (a, b) => b.results - a.results
                : (a, b) => a.results - b.results;
              const results = gs._results.sort(accuracySorter);
              // GridSearch;
              return config.return_parameters
                ? results
                : results[ 0 ];
            }

            /**
             * @see {@link https://machinelearningmastery.com/implement-resampling-methods-scratch-python/}
             */
            const cross_validation = {
              train_test_split,
              cross_validation_split,
              kfolds: cross_validation_split,
              cross_validate_score,
              grid_search: grid_search$1,
              GridSearch: GridSearch$1,
            };

            var fpnode = createCommonjsModule(function (module, exports) {
            Object.defineProperty(exports, "__esModule", { value: true });
            var FPNode = /** @class */ (function () {
                /**
                 * FPNode composes an FPTree and represents a given item a item-prefix subtree.
                 * It keeps track of its parent if it has any, and lists his children FPNodes.
                 *
                 * @param  {T}         item   The item it represents.
                 * @param  {FPNode<T>} parent His parent, if it has any.
                 */
                function FPNode(item, parent) {
                    if (item === void 0) { item = null; }
                    if (parent === void 0) { parent = null; }
                    this.item = item;
                    this.parent = parent;
                    /**
                     * Support of the FPNode. (a.k.a. "count" as defined by Han).
                     */
                    this.support = 1;
                    /**
                     * nextSameItemNode (a.k.a. "Node-link" as defined by Han):
                     * Links to the next node in the FP-tree carrying the same
                     * item, or null if there is none.
                     */
                    this.nextSameItemNode = null;
                    /**
                     * PUBLIC READONLY. Children of the FPNode in an array. Empty array if there is none.
                     */
                    this._children = [];
                }
                Object.defineProperty(FPNode.prototype, "children", {
                    get: function () {
                        return this._children;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Adds a given item to its current children FPNodes.
                 * If no child yet represents the given item, it creates a new node.
                 *
                 * @param  {T}         item       The item to add as a children.
                 * @param  {FPNode<T>} onNewChild Callback function to call if a child is actually created for the first time. It helps keeping track of Node-Links
                 * @return {[type]}               The FPNode representing the given item.
                 */
                FPNode.prototype.upsertChild = function (item, onNewChild, support) {
                    if (support === void 0) { support = 1; }
                    var child = this.getChild(item);
                    // If no child exists, creating a new node.
                    if (!child) {
                        child = new FPNode(item, this);
                        child.support = support;
                        this._children.push(child);
                        // Calls callback function if any.
                        if (onNewChild)
                            onNewChild(child);
                    }
                    // Else, increment the support of the child.
                    else
                        child.support += support;
                    return child;
                };
                /**
                 * Returns the child FPNode representing a given item, if any. Returns undefined if it does not exist.
                 *
                 * @param  {T}         item The item.
                 * @return {FPNode<T>}      The FPNode you expect, or undefined.
                 */
                FPNode.prototype.getChild = function (item) {
                    return this._children.find(function (child) { return child.item == item; });
                };
                return FPNode;
            }());
            exports.FPNode = FPNode;
            });

            unwrapExports(fpnode);
            var fpnode_1 = fpnode.FPNode;

            var fptree = createCommonjsModule(function (module, exports) {
            Object.defineProperty(exports, "__esModule", { value: true });

            var FPTree = /** @class */ (function () {
                /**
                 * FPTree is a frequent-pattern tree implementation. It consists in a compact
                 * data structure that stores quantitative information about frequent patterns in
                 * a set of transactions.
                 *
                 * @param  {ItemsCount} supports     The support count of each unique items to be inserted the FPTree.
                 * @param  {number}     support      The minimum support of each frequent itemset we want to mine.
                 */
                function FPTree(supports, _support) {
                    this.supports = supports;
                    this._support = _support;
                    /**
                     * Whether or not the tree has been built
                     */
                    this._isInit = false;
                    /**
                     * Root node of the FPTree
                     */
                    this.root = new fpnode.FPNode();
                    /**
                     * All first nodes (of different items) inserted in the FPTree (Heads of node-links).
                     */
                    this._firstInserted = {};
                    /**
                     * All last nodes (of different items) inserted in the FPTree (Foots of node-links).
                     */
                    this._lastInserted = {};
                }
                Object.defineProperty(FPTree.prototype, "headers", {
                    get: function () {
                        return this._headers;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Builds the tree from a set of transactions.
                 *
                 * @param  {T[][]}      transactions The unsorted transactions.
                 * @return {FPTree<T>}               Method chaining.
                 */
                FPTree.prototype.fromTransactions = function (transactions) {
                    var _this = this;
                    if (this._isInit)
                        throw new Error('Error building the FPTree');
                    // Sorting the items of each transaction by their support, descendingly.
                    // Items not meeting the minimum support are pruned.
                    transactions.forEach(function (transaction) {
                        var items = transaction
                            // Pruning.
                            .filter(function (item) { return _this.supports[JSON.stringify(item)] >= _this._support; })
                            // Sorting.
                            .sort(function (a, b) {
                            var res = _this.supports[JSON.stringify(b)] - _this.supports[JSON.stringify(a)];
                            if (res == 0)
                                return JSON.stringify(b).localeCompare(JSON.stringify(a));
                            return res;
                        });
                        // Pushing formatted transaction to the tree.
                        _this._addItems(items);
                    });
                    // Generating headers.
                    this._headers = this._getHeaderList();
                    this._isInit = true;
                    return this;
                };
                /**
                 * Builds the tree from a set of prefix paths.
                 *
                 * @param  {IPrefixPath<T>[]} prefixPaths The prefix paths.
                 * @return {FPTree<T>}                    Method chaining.
                 */
                FPTree.prototype.fromPrefixPaths = function (prefixPaths) {
                    var _this = this;
                    if (this._isInit)
                        throw new Error('Error building the FPTree');
                    // Sorting the items of each transaction by their support, descendingly.
                    // Items not meeting the minimum support are pruned.
                    prefixPaths.forEach(function (prefixPath) {
                        var items = prefixPath.path
                            // Pruning.
                            .filter(function (item) { return _this.supports[JSON.stringify(item)] >= _this._support; })
                            // Sorting.
                            .sort(function (a, b) {
                            var res = _this.supports[JSON.stringify(b)] - _this.supports[JSON.stringify(a)];
                            if (res == 0)
                                return JSON.stringify(b).localeCompare(JSON.stringify(a));
                            return res;
                        });
                        // Pushing each prefix path to the tree.
                        _this._addItems(items, prefixPath.support);
                    });
                    // Generating headers.
                    this._headers = this._getHeaderList();
                    this._isInit = true;
                    return this;
                };
                /**
                 * Returns a new conditional FPTree from a given item.
                 * If item is not included in the current tree, or if the resulting tree is empty, returns null.
                 *
                 * @param  {T}         item The conditional item.
                 * @return {FPTree<T>}      The result you expect.
                 */
                FPTree.prototype.getConditionalFPTree = function (item) {
                    var start = this._firstInserted[JSON.stringify(item)];
                    // Trivial pre-condition.
                    if (!start)
                        return null;
                    var s = this.supports[JSON.stringify(item)];
                    // In order to make the conditional FPTree of the given item, we need both the prefix
                    // paths of the item, as well as the support of each item which composes this sub-tree.
                    var conditionalTreeSupports = {};
                    // Getting all prefixPaths of the given item. On pushing a new item to a prefix path, a callback
                    // function is called, allowing us to update the item support.
                    var prefixPaths = this._getPrefixPaths(start, s, function (i, count) {
                        conditionalTreeSupports[JSON.stringify(i)] = (conditionalTreeSupports[JSON.stringify(i)] || 0) + count;
                    });
                    // FP-Tree is built from the conditional tree supports and the processed prefix paths.
                    var ret = new FPTree(conditionalTreeSupports, this._support).fromPrefixPaths(prefixPaths);
                    // If tree is not empty, return the tree.
                    if (ret.root.children.length)
                        return ret;
                    // Else return null.
                    return null;
                };
                /**
                 * Returns all the prefix paths of a given item in the tree.
                 * Returns an empty array if item cannot be found in the current tree.
                 *
                 * @param  {T}              item The item you want the prefix paths.
                 * @return {IPrefixPath<T>}      The result you expect.
                 */
                FPTree.prototype.getPrefixPaths = function (item) {
                    if (!this._isInit)
                        throw new Error('Error building the FPTree');
                    var start = this._firstInserted[JSON.stringify(item)];
                    if (!start)
                        return [];
                    return this._getPrefixPaths(start, start.support);
                };
                /**
                 * Return the prefix path of a given node.
                 * Callback functions allows to keep track of items added to the prefix path.
                 *
                 * @param  {FPNode<T>} node             The node you want the prefix path.
                 * @param  {Function}  onPushingNewItem Callback function to keep track of items added to the prefix path.
                 * @return {[type]}                     The result you expect.
                 */
                FPTree.prototype.getPrefixPath = function (node, onPushingNewItem) {
                    if (!this._isInit)
                        throw new Error('Error building the FPTree');
                    var path = this._getPrefixPath(node, node.support, onPushingNewItem);
                    if (path.length === 0)
                        return;
                    return {
                        support: node.support,
                        path: path
                    };
                };
                /**
                 * Returns whether or not this FPTree is single pathed.
                 *
                 * @return {boolean} The result you expect.
                 */
                FPTree.prototype.isSinglePath = function () {
                    if (!this._isInit)
                        throw new Error('Error building the FPTree');
                    if (!this.getSinglePath())
                        return false;
                    return true;
                };
                /**
                 * Returns the single path of the tree, if it is one. Else, it returns null.
                 *
                 * @return {FPNode<T>[]} The result you expect.
                 */
                FPTree.prototype.getSinglePath = function () {
                    if (!this._isInit)
                        throw new Error('Error building the FPTree');
                    return this._getSinglePath(this.root);
                };
                /**
                 * Inserts a sorted transaction to the FPTree.
                 *
                 * @param {T[]} items The set of sorted items you want to add (Either a transaction of a prefix part).
                 * @param {number} prefixSupport Optional: The base support to associate with the set of items.
                 */
                FPTree.prototype._addItems = function (items, prefixSupport) {
                    var _this = this;
                    if (prefixSupport === void 0) { prefixSupport = 1; }
                    // For each transaction, we start up from the root element.
                    var current = this.root;
                    // Keep in mind items are sorted by their support descendingly.
                    items.forEach(function (item) {
                        // If current item is a child of current node, updating its support and returning the child.
                        // Else creating a new item element and returing this new element.
                        current = current.upsertChild(item, function (child) {
                            var itemKey = JSON.stringify(item);
                            // Keeping track of first and last inserted elements of this type on Node creation.
                            _this._updateLastInserted(itemKey, child);
                            _this._updateFirstInserted(itemKey, child);
                        }, prefixSupport);
                    });
                };
                /**
                 * RECURSIVE CALL - Returns the prefix path of each node of the same type until there is no node-link anymore.
                 *
                 * @param  {FPNode<T>} node             The node of which you want the prefix path.
                 * @param  {number}    count            The support of the stating node (which is node).
                 * @param  {Function}  onPushingNewItem Callback function to keep track of items added to the prefix path.
                 * @return {IPrefixPath<T>[]}           The result you expect.
                 */
                FPTree.prototype._getPrefixPaths = function (node, count, onPushingNewItem, prefixPaths) {
                    if (prefixPaths === void 0) { prefixPaths = []; }
                    var prefixPath = this.getPrefixPath(node, onPushingNewItem);
                    if (prefixPath)
                        prefixPaths.push(prefixPath);
                    if (!node.nextSameItemNode)
                        return prefixPaths;
                    return this._getPrefixPaths(node.nextSameItemNode, count, onPushingNewItem, prefixPaths);
                };
                /**
                 * RECURSIVE CALL - Returns the prefix path (as a set of items) of the tree from a given node.
                 *
                 * @param  {FPNode<T>}   node               The node to start the prefix.
                 * @param  {number}      count              The support of the stating node (which is node).
                 * @param  {Function}    onPushingNewItem   Callback function to keep track of items added to the prefix path.
                 * @return {T[]}                            The result you expect.
                 */
                FPTree.prototype._getPrefixPath = function (node, count, onPushingNewItem) {
                    if (node.parent && node.parent.parent) {
                        if (onPushingNewItem)
                            onPushingNewItem(node.parent.item, count);
                        return [node.parent.item].concat(this._getPrefixPath(node.parent, count, onPushingNewItem));
                    }
                    return [];
                };
                /**
                 * RECURSIVE CALL - Returns the single path of the tree, if it is one. Else, it returns null.
                 *
                 * @param  {FPNode<T>}   node          The node to test for single path.
                 * @param  {FPNode<T>[]} currentPath   The current saved path.
                 * @return {FPNode<T>[]}               The path to return.
                 */
                FPTree.prototype._getSinglePath = function (node, currentPath) {
                    if (currentPath === void 0) { currentPath = []; }
                    // If current node is a tree leaf, that's a win.
                    if (node.children.length == 0)
                        return currentPath;
                    // If it has more than child, tree has more than one single path.
                    if (node.children.length > 1)
                        return null;
                    // Else test next child for single path.
                    currentPath.push(node.children[0]);
                    return this._getSinglePath(node.children[0], currentPath);
                };
                /**
                 * Keep track of the each last inserted item of different types.
                 *
                 * @param {string}    key   The key as stringified item.
                 * @param {FPNode<T>} child The child FPNode it represtents.
                 */
                FPTree.prototype._updateLastInserted = function (key, child) {
                    var last = this._lastInserted[key];
                    if (last)
                        last.nextSameItemNode = child;
                    this._lastInserted[key] = child;
                };
                /**
                 * Keep track of the first item of different type we inserted in the FPTree.
                 *
                 * @param {string}    key   The key as stringified item.
                 * @param {FPNode<T>} child The child FPNode it represtents.
                 */
                FPTree.prototype._updateFirstInserted = function (key, child) {
                    var first = this._firstInserted[key];
                    if (!first)
                        this._firstInserted[key] = child;
                };
                /**
                 * Returns the tree's headers as a list, sorted ASCENDINGLY by their support.
                 *
                 * @param  {ItemsCount} supports The support count of each items.
                 * @return {T[]}                 [description]
                 */
                FPTree.prototype._getHeaderList = function () {
                    var _this = this;
                    return Object.keys(this._firstInserted)
                        .sort(function (a, b) { return _this.supports[a] - _this.supports[b]; })
                        .map(function (key) { return JSON.parse(key); });
                };
                return FPTree;
            }());
            exports.FPTree = FPTree;
            });

            unwrapExports(fptree);
            var fptree_1 = fptree.FPTree;

            var events_1 = getCjsExportFromNamespace(events);

            var fpgrowth = createCommonjsModule(function (module, exports) {
            var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
                var extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
                return function (d, b) {
                    extendStatics(d, b);
                    function __() { this.constructor = d; }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            Object.defineProperty(exports, "__esModule", { value: true });


            var FPGrowth = /** @class */ (function (_super) {
                __extends(FPGrowth, _super);
                /**
                 * FPGrowth is an algorithm for frequent item set mining and association rule
                 * earning over transactional databases.
                 * It was proposed by Han et al. (2000). FPGrowth is a very fast and memory efficient algorithm. It uses a special internal structure called an FP-Tree.
                 *
                 * @param  {number} _support 0 < _support < 1. Minimum support of itemsets to mine.
                 */
                function FPGrowth(_support /*, private _confidence: number*/) {
                    var _this = _super.call(this) || this;
                    _this._support = _support;
                    /**
                     * Output of the algorithm: The mined frequent itemsets.
                     */
                    _this._itemsets = [];
                    return _this;
                }
                /**
                 * Executes the FPGrowth Algorithm.
                 * You can keep track of frequent itemsets as they are mined by listening to the 'data' event on the FPGrowth object.
                 * All mined itemsets, as well as basic execution stats, are returned at the end of the execution through a callback function or a Promise.
                 *
                 * @param  {T[][]}              transactions The transactions from which you want to mine itemsets.
                 * @param  {IAprioriResults<T>} cb           Callback function returning the results.
                 * @return {Promise<IAprioriResults<T>>}     Promise returning the results.
                 */
                FPGrowth.prototype.exec = function (transactions, cb) {
                    var _this = this;
                    this._transactions = transactions;
                    // Relative support.
                    this._support = Math.ceil(this._support * transactions.length);
                    // First scan to determine the occurence of each unique item.
                    var supports = this._getDistinctItemsCount(this._transactions);
                    return new Promise(function (resolve, reject) {
                        // Building the FP-Tree...
                        var tree = new fptree.FPTree(supports, _this._support).fromTransactions(_this._transactions);
                        // Running the algorithm on the main tree.
                        // All the frequent itemsets are returned at the end of the execution.
                        var result = _this._fpGrowth(tree, _this._transactions.length);
                        if (cb)
                            cb(result);
                        resolve(result);
                    });
                };
                /**
                 * RECURSIVE CALL - Returns mined itemset from each conditional sub-FPTree of the given FPtree.
                 *
                 * @param  {FPTree<T>}  tree          The FPTree you want to mine.
                 * @param  {number}     prefixSupport The support of the FPTree's current prefix.
                 * @param  {T[]}        prefix        The current prefix associated with the FPTree.
                 * @return {Itemset<T>}               The mined itemsets.
                 */
                FPGrowth.prototype._fpGrowth = function (tree, prefixSupport, prefix) {
                    // Test whether or not the FP-Tree is single path.
                    // If it is, we can short-cut the mining process pretty efficiently.
                    // TODO: let singlePath: FPNode<T>[] = tree.getSinglePath();
                    // TODO: if(singlePath) return this._handleSinglePath(singlePath, prefix);
                    var _this = this;
                    if (prefix === void 0) { prefix = []; }
                    // For each header, ordered ascendingly by their support, determining the prefix paths.
                    // These prefix paths represent new transactions to mine in a new FPTree.
                    // If no prefix path can be mined, the algorithm stops.
                    return tree.headers.reduce(function (itemsets, item) {
                        var support = Math.min(tree.supports[JSON.stringify(item)], prefixSupport);
                        // Array copy.
                        var currentPrefix = prefix.slice(0);
                        currentPrefix.push(item);
                        // Prefix is a mined itemset.
                        itemsets.push(_this._getFrequentItemset(currentPrefix, support));
                        // Method below generates the prefix paths of the current item, as well as the support of
                        // each item composing the prefix paths, and returns a new conditional FPTree if one can be created.
                        var childTree = tree.getConditionalFPTree(item);
                        // If a conditional tree can be mined... mine it recursively.
                        if (childTree)
                            return itemsets.concat(_this._fpGrowth(childTree, support, currentPrefix));
                        return itemsets;
                    }, []);
                };
                /**
                 * Handles the mining of frequent itemsets over a single path tree.
                 *
                 * @param  {FPNode<T>[]} singlePath The given single path.
                 * @param  {T[]}         prefix     The prefix associated with the path.
                 * @return {Itemset<T>}             The mined itemsets.
                 */
                FPGrowth.prototype._handleSinglePath = function (singlePath, prefix) {
                    // TODO
                    return [];
                };
                /**
                 * Returns and emit through an event a formatted mined frequent itemset.
                 *
                 * @param  {T[]}        itemset The items of the frequent itemset.
                 * @param  {number}     support The support of the itemset.
                 * @return {Itemset<T>}         The formatted itemset.
                 */
                FPGrowth.prototype._getFrequentItemset = function (itemset, support) {
                    var ret = {
                        items: itemset,
                        support: support
                    };
                    this.emit('data', ret);
                    return ret;
                };
                /**
                 * Returns the occurence of single items in a given set of transactions.
                 *
                 * @param  {T[][]}      transactions The set of transaction.
                 * @return {ItemsCount}              Count of items (stringified items as keys).
                 */
                FPGrowth.prototype._getDistinctItemsCount = function (transactions) {
                    return transactions.reduce(function (count, arr) {
                        return arr.reduce(function (count, item) {
                            count[JSON.stringify(item)] = (count[JSON.stringify(item)] || 0) + 1;
                            return count;
                        }, count);
                    }, {});
                };
                return FPGrowth;
            }(events_1.EventEmitter));
            exports.FPGrowth = FPGrowth;
            });

            var fpgrowth$1 = unwrapExports(fpgrowth);
            var fpgrowth_1 = fpgrowth.FPGrowth;

            var fpg = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        'default': fpgrowth$1,
                        __moduleExports: fpgrowth,
                        FPGrowth: fpgrowth_1
            });

            const { FPGrowth, } = fpg;
            // import { default as ObjectValues, } from 'object.values';
            // if (!Object.values) {
            //   ObjectValues.shim();
            // }

            /**
             * Formats an array of transactions into a sparse matrix like format for Apriori/Eclat
             * @see {@link https://github.com/alexisfacques/Node-FPGrowth}
             * @param {Array} data - CSV data of transactions 
             * @param {Object} options 
             * @param {Boolean} [options.exludeEmptyTranscations=true] - exclude empty rows of transactions 
             * @returns {Object} {values - unique list of all values, valuesMap - map of values and labels, transactions - formatted sparse array}
             */
            function getTransactions(data, options) {
              const config = Object.assign({}, {
                exludeEmptyTranscations: true,
              }, options);
              const values = new Set();
              const valuesMap = new Map();
              const transactions = data
                .map((csvRow) => {
                  [
                    ...Object.values(csvRow),
                  ].forEach(csvVal => {
                    values.add(csvVal);
                  });
                  values.forEach(val => {
                    if (!valuesMap.get(val)) {
                      const index = (valuesMap.size < 0)
                        ? 0
                        : Math.round(valuesMap.size / 2);
                      valuesMap.set(val, index.toString());
                      valuesMap.set(index.toString(), val);
                    }
                  });
                  return Object.values(csvRow)
                    .map(csvCell =>
                      valuesMap.get(csvCell))
                    .filter(val => val !== undefined);
                });
              return {
                values,
                valuesMap,
                transactions: (config.exludeEmptyTranscations)
                  ? transactions.filter((csvRow) => csvRow.length)
                  : transactions,
              };
            }

            /**
             * returns association rule learning results
             * @see {@link https://github.com/alexisfacques/Node-FPGrowth}
             * @param {Array} transactions - sparse matrix of transactions 
             * @param {Object} options 
             * @param {Number} [options.support=0.4] - support level
             * @param {Number} [options.minLength=2] - minimum assocation array size
             * @param {Boolean} [options.summary=true] - return summarized results
             * @param {Map} [options.valuesMap=new Map()] - map of values and labels (used for summary results)
             * @returns {Object} Returns the result from Node-FPGrowth or a summary of support and strong associations
             */
            function assocationRuleLearning(transactions =[], options) {
              return new Promise((resolve, reject) => {
                try {
                  const config = Object.assign({}, {
                    support: 0.4,
                    minLength: 2,
                    summary: true,
                    valuesMap: new Map(),
                  }, options);
                  const fpgrowth = new FPGrowth(config.support);
                  fpgrowth.exec(transactions)
                    .then((results) => {
                      const itemsets = (results.itemsets) ? results.itemsets : results;
                      // console.log('itemsets', itemsets)
                      if (config.summary) {
                        resolve(itemsets
                          .map((itemset) => ({
                            items_labels: itemset.items.map((item) => config.valuesMap.get(item)),
                            items: itemset.items,
                            support: itemset.support,
                            support_percent: itemset.support / transactions.length,
                          }))
                          .filter((itemset) => itemset.items.length > 1)
                          .sort((a, b) => b.support - a.support));
                      } else {
                        resolve(results);
                      }
                    })
                    .catch(reject);
                } catch (e) {
                  reject(e);
                }
              });
            }

            const calc = {
              getTransactions,
              assocationRuleLearning,
            };

            const csv = csvUtils;

            var ModelXData = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        csv: csv,
                        PD: probabilityDistributions,
                        nlp: nlp,
                        util: util$1,
                        cross_validation: cross_validation,
                        DataSet: DataSet,
                        calc: calc
            });

            /**
             * @license
             * Copyright 2020 Google LLC. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             * =============================================================================
             */
            var t=function(e,n){return (t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e;}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);})(e,n)};function e(e,n){function r(){this.constructor=e;}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r);}function n(t,e,n,r){return new(n||(n=Promise))((function(o,a){function i(t){try{u(r.next(t));}catch(t){a(t);}}function s(t){try{u(r.throw(t));}catch(t){a(t);}}function u(t){t.done?o(t.value):new n((function(e){e(t.value);})).then(i,s);}u((r=r.apply(t,e||[])).next());}))}function r(t,e){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i);}catch(t){a=[6,t],r=0;}finally{n=o=0;}if(5&a[0])throw a[1];return {value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}var o=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags();}return t.prototype.setPlatform=function(t,e){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+e+"."),this.platformName=t,this.platform=e;},t.prototype.registerFlag=function(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn("Setting feature override from URL "+t+": "+r+"."),this.set(t,r);}},t.prototype.get=function(t){return t in this.flags?this.flags[t]:(this.flags[t]=this.evaluateFlag(t),this.flags[t])},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e){if(null==this.flagRegistry[t])throw new Error("Cannot set flag "+t+" as it has not been registered.");this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e);},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '"+t+"': no evaluation function found.");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t);},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags();},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var e,n,r=(e=this.global.location.search,n={},e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return a(n,e[0],e[1]),e.join("=")})),n);if("tfjsflags"in r)r.tfjsflags.split(",").forEach((function(e){var n=e.split(":"),r=n[0],o=n[1];t.urlFlags[r]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return "true"===e;if(""+ +e===e)return +e;throw new Error("Could not parse value flag value "+e+" for flag "+t+".")}(r,o);}));}},t}();function a(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"");}function i(){return s}var s=null;var u=new Map,c=new Map;function l(t,e){var n=m(t,e);return u.get(n)}function h(t){return c.get(t)}function f(t){for(var e=u.entries(),n=[];;){var r=e.next(),o=r.done,a=r.value;if(o)break;var i=a[0],s=a[1];i.split("_")[0]===t&&n.push(s);}return n}function d(t){var e=t.kernelName,n=t.backendName,r=m(e,n);if(u.has(r))throw new Error("The kernel '"+e+"' for backend '"+n+"' is already registered");u.set(r,t);}function p(t){var e=t.kernelName;c.has(e)&&console.warn("Overriding the gradient for '"+e+"'"),c.set(e,t);}function v$1(t,e){var n=m(t,e);if(!u.has(n))throw new Error("The kernel '"+t+"' for backend '"+e+"' is not registered");u.delete(n);}function g(t){if(!c.has(t))throw new Error("The gradient '"+t+"' for backend is not registered");c.delete(t);}function m(t,e){return e+"_"+t}function y(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n;}function x(t,e,n){return Math.max(t,Math.min(e,n))}function b(t){return t%2==0?t:t+1}function w(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function C(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function E(t,e,n){void 0===n&&(n=""),C(S(t,e),(function(){return n+" Shapes "+t+" and "+e+" must match"}));}function R(t){C(null!=t,(function(){return "The input to the tensor constructor must be a non-null value."}));}function I(t,e,n){if(void 0===e&&(e=[]),void 0===n&&(n=!1),null==e&&(e=[]),Array.isArray(t)||V(t)&&!n)for(var r=0;r<t.length;++r)I(t[r],e,n);else e.push(t);return e}function k(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function S(t,e){if(t===e)return !0;if(null==t||null==e)return !1;if(t.length!==e.length)return !1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return !1;return !0}function A$1(t){return t%1==0}function T(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return -1;var e=Math.exp(2*t);return (e-1)/(e+1)}function D(t){var e=Math.ceil(Math.sqrt(t));return [e,Math.ceil(t/e)]}function N(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function F(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise((function(r,o){var a=0,i=function(){if(t())r();else {a++;var s=e(a);null!=n&&a>=n?o():setTimeout(i,s);}};i();}))}function _(t,e){for(var n=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)n*=t[o];else if(-1===t[o]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+o);r=o;}else if(t[o]<0)throw Error("Shapes can not be < 0. Found "+t[o]+" at dim "+o);if(-1===r){if(e>0&&e!==n)throw Error("Size("+e+") must match the product of shape "+t);return t}if(0===n)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(e%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+e+" / "+n);var a=t.slice();return a[r]=e/n,a}function O(t,e){var n=e.length;return C((t=null==t?e.map((function(t,e){return e})):[].concat(t)).every((function(t){return t>=-n&&t<n})),(function(){return "All values in axis param must be in range [-"+n+", "+n+") but got axis "+t})),C(t.every((function(t){return A$1(t)})),(function(){return "All values in axis param must be integers but got axis "+t})),t.map((function(t){return t<0?n+t:t}))}function M$1(t,e){for(var n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||o?null:O(e,t).sort(),i=0,s=0;s<t.length;++s){if(null!=a){if(a[i]===s&&1!==t[s])throw new Error("Can't squeeze axis "+s+" since its dim '"+t[s]+"' is not 1");(null==a[i]||a[i]>s)&&1===t[s]&&(n.push(t[s]),r.push(s)),a[i]<=s&&i++;}1!==t[s]&&(n.push(t[s]),r.push(s));}return {newShape:n,keptDims:r}}function B(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else {if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e);}return n}function P(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else {if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e);}return n}function L(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+e+" being uploaded contains "+r+".")}}function W(t){return "bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function U(t,e){return "complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function V(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function z(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function G(t){if(null==t)return 0;var e=0;return t.forEach((function(t){return e+=t.length})),e}function H(t){return "string"==typeof t||t instanceof String}function q(t){return "boolean"==typeof t}function K(t){return "number"==typeof t}function j(t){return Array.isArray(t)?j(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":K(t)?"float32":H(t)?"string":q(t)?"bool":"float32"}function X(t){return !!(t&&t.constructor&&t.call&&t.apply)}function Y(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function $(t){var e=t.length;if(e<2)return [];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Q(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=I(t)),n&&L(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error("Unknown data type "+e)}function J(t,e){if(0===t.length)return e[0];var n=t.reduce((function(t,e){return t*e}));if(0===n)return [];if(n!==e.length)throw new Error("["+t+"] does not match the input size.");return function t(e,n,r){var o=new Array;if(1===n.length)for(var a=n[0],i=0;i<a;i++)o[i]=r[e+i];else {a=n[0];var s=n.slice(1),u=s.reduce((function(t,e){return t*e}));for(i=0;i<a;i++)o[i]=t(e+i*u,s,r);}return o}(0,t,e)}function Z(t,e){for(var n=tt(t,e),r=0;r<n.length;r++)n[r]=1;return n}function tt(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function et(){return i().platform.now()}function nt(t){t.forEach((function(e){C(Number.isInteger(e)&&e>=0,(function(){return "Tensor must have a shape comprised of positive integers but got shape ["+t+"]."}));}));}function rt(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",i().platform.encode(t,e)}function ot(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",i().platform.decode(t,e)}function at(t,e,n){if(0===e)return 0;if(1===e)return t[0];for(var r=t[t.length-1],o=0;o<t.length-1;++o)r+=n[o]*t[o];return r}function it(t,e,n){if(0===e)return [];if(1===e)return [t];for(var r=new Array(e),o=0;o<r.length-1;++o)r[o]=Math.floor(t/n[o]),t-=r[o]*n[o];return r[r.length-1]=t,r}var st=Object.freeze({shuffle:y,clamp:x,nearestLargerEven:b,sum:w,randUniform:function(t,e){var n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(e[r]);n+=o*o;}return n},assert:C,assertShapesMatch:E,assertNonNull:R,flatten:I,sizeFromShape:k,isScalarShape:function(t){return 0===t.length},arraysEqual:S,isInt:A$1,tanh:T,sizeToSquarishShape:D,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return y(e),e},rightPad:N,repeatedTry:F,inferFromImplicitShape:_,parseAxisParam:O,squeezeShape:M$1,getTypedArrayFromDType:B,getArrayFromDType:P,checkConversionForErrors:L,isValidDtype:W,hasEncodingLoss:U,isTypedArray:V,bytesPerElement:z,bytesFromStringArray:G,isString:H,isBoolean:q,isNumber:K,inferDtype:j,isFunction:X,nearestDivisor:Y,computeStrides:$,toTypedArray:Q,toNestedArray:J,makeOnesTypedArray:Z,makeZerosTypedArray:tt,now:et,assertNonNegativeIntegerDimensions:nt,fetch:function(t,e){return i().platform.fetch(t,e)},encodeString:rt,decodeString:ot,locToIndex:at,indexToLoc:it}),ut=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ct);}return t.prototype.profileKernel=function(t,e,n){var r,o=this,a=this.backendTimer.time((function(){r=n();}));return r.forEach((function(n){n.data().then((function(r){!function(t,e,n){if("float32"!==e)return !1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn("Found "+o+" in the result of '"+n+"'"),!0}}(r,n.dtype,t),a.then((function(a){var i="";null!=a.getExtraProfileInfo&&(i=a.getExtraProfileInfo()),o.logger.logKernelProfile(t,n,r,a.kernelMs,e,i);}));}));})),r},t}();var ct=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,o,a){var i="number"==typeof r?N(r+"ms",9):r.error,s=N(t,25),u=e.rank,c=e.size,l=N(e.shape.toString(),14),h="";for(var f in o){var d=o[f].shape||e.shape,p=d.length;h+=f+": "+p+"D "+(p>0?d:"")+" ";}console.log("%c"+s+"\t%c"+i+"\t%c"+u+"D "+l+"\t%c"+c+"\t%c"+h+"\t%c"+a,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue");},t}();var lt=20,ht=3,ft=7;function dt(t,e,n,r){var o=$(e),a=function(t,e,n,r){var o=k(e),a=r[r.length-1],i=new Array(a).fill(0),s=e.length,u="complex64"===n?gt(t):t;if(s>1)for(var c=0;c<o/a;c++)for(var l=c*a,h=0;h<a;h++)i[h]=Math.max(i[h],pt(u[l+h],0,n).length);return i}(t,e,n,o),i=e.length,s=function t(e,n,r,o,a,i){void 0===i&&(i=!0);var s="complex64"===r?2:1,u=n[0],c=n.length;if(0===c){return "complex64"===r?[pt(gt(e)[0],0,r)]:"bool"===r?[vt(e[0])]:[e[0].toString()]}if(1===c){if(u>lt){var l=ht*s,h=Array.from(e.slice(0,l)),f=Array.from(e.slice((u-ht)*s,u*s));return "complex64"===r&&(h=gt(h),f=gt(f)),["["+h.map((function(t,e){return pt(t,a[e],r)})).join(", ")+", ..., "+f.map((function(t,e){return pt(t,a[u-ht+e],r)})).join(", ")+"]"]}return ["["+("complex64"===r?gt(e):Array.from(e)).map((function(t,e){return pt(t,a[e],r)})).join(", ")+"]"]}var d=n.slice(1),p=o.slice(1),v=o[0]*s,g=[];if(u>lt){for(var m=0;m<ht;m++){var y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,!1));}g.push("...");for(m=u-ht;m<u;m++){y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,m===u-1));}}else for(m=0;m<u;m++){var x;y=(x=m*v)+v;g.push.apply(g,t(e.slice(x,y),d,r,p,a,m===u-1));}var b=2===c?",":"";g[0]="["+g[0]+b;for(m=1;m<g.length-1;m++)g[m]=" "+g[m]+b;var w=",\n";for(m=2;m<c;m++)w+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(i?"":w),g}(t,e,n,o,a),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+i),u.push("  shape: ["+e+"]"),u.push("  values:")),u.push(s.map((function(t){return "    "+t})).join("\n")),u.join("\n")}function pt(t,e,n){return N(Array.isArray(t)?parseFloat(t[0].toFixed(ft))+" + "+parseFloat(t[1].toFixed(ft))+"j":H(t)?"'"+t+"'":"bool"===n?vt(t):parseFloat(t.toFixed(ft)).toString(),e)}function vt(t){return 0===t?"false":"true"}function gt(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var mt=function(){function t(t,e,n){var r=this;if(this.dtype=e,this.shape=t.slice(),this.size=k(t),null!=n){var o=n.length;C(o===this.size,(function(){return "Length of values '"+o+"' does not match the size inferred by the shape '"+r.size+"'."}));}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||P(e,this.size),this.strides=$(t);}return t.prototype.set=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),C(n.length===this.rank,(function(){return "The number of provided coordinates ("+n.length+") must match the rank ("+e.rank+")"}));var o=this.locToIndex(n);this.values[o]=t;},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=0,r=0,o=t;r<o.length;r++){var a=o[r];if(a<0||a>=this.shape[n]){var i="Requested out of range element at "+t+".   Buffer shape="+this.shape;throw new Error(i)}n++;}for(var s=t[t.length-1],u=0;u<t.length-1;++u)s+=this.strides[u]*t[u];return this.values[s]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return [];if(1===this.rank)return [t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return yt().makeTensor(this.values,this.shape,this.dtype)},t}(),yt=null,xt=null,bt=null;var wt=function(){function t(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=k(t),this.strides=$(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher";}return t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),C(1===this.size,(function(){return "The array must have only 1 element."})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,o){return this.throwIfDisposed(),this.reshape([t,e,n,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),xt.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return [4,this.data()];case 1:return t=e.sent(),[2,xt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return xt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return [4,this.data()];case 1:return t=e.sent(),[2,J(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return J(this.shape,this.dataSync())},t.prototype.data=function(){return n(this,void 0,void 0,(function(){var t,e;return r(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),t=yt().read(this.dataId),"string"!==this.dtype?[3,2]:[4,t];case 1:e=n.sent();try{return [2,e.map((function(t){return ot(t)}))]}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}n.label=2;case 2:return [2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=yt().readSync(this.dataId);if("string"===this.dtype)try{return t.map((function(t){return ot(t)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t},t.prototype.bytes=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),[4,yt().read(this.dataId)];case 1:return t=e.sent(),"string"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(yt().disposeTensor(this),this.isDisposedInternal=!0);},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),xt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),xt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),xt.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),xt.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),xt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),xt.clone(this)},t.prototype.toString=function(t){return void 0===t&&(t=!1),dt(this.dataSync(),this.shape,this.dtype,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),xt.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),xt.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),xt.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t="euclidean"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),xt.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),xt.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),xt.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),xt.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),xt.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),xt.stack([this,t],e)},t.prototype.unstack=function(t){return void 0===t&&(t=0),xt.unstack(this,t)},t.prototype.batchNormalization=function(t,e,n,r,o){return void 0===n&&(n=.001),bt("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(t,e,o,r,n)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),xt.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),xt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),xt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),xt.cast(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),xt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),xt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),xt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),xt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),xt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),xt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),xt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),xt.mulStrict(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),xt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),xt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),xt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),xt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),xt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),xt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),xt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),xt.modStrict(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),xt.squaredDifferenceStrict(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),xt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),xt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),xt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),xt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),xt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),xt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),xt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),xt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),xt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),xt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),xt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),xt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),xt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),xt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),xt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),xt.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),xt.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),xt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),xt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),xt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),xt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),xt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),xt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),xt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),xt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),xt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),xt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),xt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),xt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),xt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),xt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),xt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),xt.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),xt.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),xt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),xt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),xt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),xt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),xt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),xt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),xt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),xt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),xt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),xt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),xt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),xt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),xt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),xt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),xt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),xt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),xt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),xt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),xt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),xt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),xt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),xt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),xt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),xt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),xt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),xt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),xt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),xt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),xt.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),xt.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,o,a){return void 0===r&&(r="NWC"),void 0===o&&(o=1),this.throwIfDisposed(),xt.conv1d(this,t,e,n,r,o,a)},t.prototype.conv2d=function(t,e,n,r,o,a){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),xt.conv2d(this,t,e,n,r,o,a)},t.prototype.conv2dTranspose=function(t,e,n,r,o){return this.throwIfDisposed(),xt.conv2dTranspose(this,t,e,n,r,o)},t.prototype.depthwiseConv2D=function(t,e,n,r,o,a){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),xt.depthwiseConv2d(this,t,e,n,r,o,a)},t.prototype.separableConv2d=function(t,e,n,r,o,a){return void 0===o&&(o=[1,1]),void 0===a&&(a="NHWC"),this.throwIfDisposed(),xt.separableConv2d(this,t,e,n,r,o,a)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),xt.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),xt.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),xt.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,o){return this.throwIfDisposed(),xt.pool(this,t,e,n,r,o)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),yt().makeVariable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),xt.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),xt.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),xt.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),xt.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,o,a,i,s){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===a&&(a=0),void 0===i&&(i=0),void 0===s&&(s=0),this.throwIfDisposed(),xt.stridedSlice(this,t,e,n,r,o,a,i,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),xt.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),xt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),xt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),xt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),xt.spectral.irfft(this)},t}();Object.defineProperty(wt,Symbol.hasInstance,{value:function(t){return !!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var Ct,Et,Rt,It,kt,St=function(t){function n(e,n,r,o){var a=t.call(this,e.shape,e.dtype,e.dataId,o)||this;return a.trainable=n,a.name=r,a}return e(n,t),n.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!S(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");yt().disposeTensor(this),this.dataId=t.dataId,yt().incRef(this,null);},n.prototype.dispose=function(){yt().disposeVariable(this),this.isDisposedInternal=!0;},n}(wt);Object.defineProperty(St,Symbol.hasInstance,{value:function(t){return t instanceof wt&&null!=t.assign&&t.assign instanceof Function}}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6";}(Ct||(Ct={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64";}(Et||(Et={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64";}(Rt||(Rt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64";}(It||(It={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64";}(kt||(kt={}));var At={float32:It,int32:Et,bool:Rt,complex64:kt};function Tt(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return "string";throw new Error("Can not upcast "+t+" with "+e)}return At[t][e]}function Dt(t){return Tt(t,"int32")}function Nt(t,e){if(t.dtype===e.dtype)return [t,e];var n=Tt(t.dtype,e.dtype);return [t.cast(n),e.cast(n)]}function Ft(t,e){C(t.dtype===e.dtype,(function(){return "The dtypes of the first("+t.dtype+") and second("+e.dtype+") input must match"}));}function _t(t){var e=[];return function t(e,n,r){if(null==e)return;if(e instanceof wt)return void n.push(e);if(o=e,!Array.isArray(o)&&"object"!=typeof o)return;var o;var a=e;for(var i in a){var s=a[i];r.has(s)||(r.add(s),t(s,n,r));}}(t,e,new Set),e}var Ot,Mt=Object.freeze({makeTypesMatch:Nt,assertTypesMatch:Ft,isTensorInList:function(t,e){return e.some((function(e){return e.id===t.id}))},getTensorsInContainer:_t}),Bt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null};}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose();},t}(),Pt=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Bt;}return t.prototype.ready=function(){return n(this,void 0,void 0,(function(){var t,e,n;return r(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return [2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return [2];t=this.getSortedBackends(),e=0,r.label=1;case 1:return e<t.length?(n=t[e],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return e++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(t.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),e=t.name;if(t.asyncInit)throw new Error("The highest priority backend '"+e+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");this.setBackend(e);}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,e,n){return void 0===n&&(n=1),t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)},t.prototype.setBackend=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:if(null==this.registryFactory[t])throw new Error("Backend name '"+t+"' not found in registry");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,e=this.initializeBackend(t),n=e.success,e.asyncInit?[4,n]:[3,2]);case 1:return o=r.sent(),[3,3];case 2:o=n,r.label=3;case 3:if(!o)return [2,!1];r.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new ut(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;f(this.backendName).forEach((function(e){null!=e.setupFunc&&e.setupFunc(t.backendInstance);}));},t.prototype.disposeRegisteredKernels=function(t){var e=this;f(t).forEach((function(n){null!=n.disposeFunc&&n.disposeFunc(e.registry[t]);}));},t.prototype.initializeBackend=function(t){var e=this,n=this.registryFactory[t];if(null==n)throw new Error("Cannot initialize backend "+t+", no registration found.");try{var r=n.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,a=r.then((function(n){return !(o<e.pendingBackendInitId)&&(e.registry[t]=n,e.pendingBackendInit=null,!0)})).catch((function(n){return !(o<e.pendingBackendInitId)&&(e.pendingBackendInit=null,console.warn("Initialization of backend "+t+" failed"),console.warn(n.stack||n.message),!1)}));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(e){return console.warn("Initialization of backend "+t+" failed"),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null);},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(e,n){return t.registryFactory[n].priority-t.registryFactory[e].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),e=0;e<t.length;e++){var n=t[e],r=this.initializeBackend(n),o=r.success,a=r.asyncInit;if(a||o)return {name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")},t.prototype.moveData=function(t,e){var n=this.state.tensorInfo.get(e),r=n.backend,o=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++;},t.prototype.tidy=function(t,e){var n,r=this,o=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t;}else {if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t;}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(n)}),(function(){return (n=e())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n}))},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(function(t){return {x:function(){return t.toFloat()}}}),[],{}),e},t.prototype.runKernel=function(t,e,n,r,o){return this.runKernelFunc(null,e,null,t,n,r,o)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool("IS_TEST")},t.prototype.checkKernelForMemLeak=function(t,e,n){var r=this.backend.numDataIds(),o=0;n.forEach((function(t){o+="complex64"===t.dtype?3:1;}));var a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-e-o-a;if(i>0)throw new Error("Backend '"+this.backendName+"' has an internal memory leak ("+i+" data ids) after running '"+t+"'")},t.prototype.runKernelFunc=function(t,e,n,r,o,a,i){var s,u=this,c=[],h=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");var f,d=this.state.numBytes,p=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var v,g=l(r,this.backendName);if(null!=g)f=function(){var t=u.backend.numDataIds();v=g.kernelFunc({inputs:e,attrs:o,backend:u.backend});var n=Array.isArray(v)?v:[v];u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,t,n);var s=n.map((function(t){var e=t.dataId,n=t.shape,r=t.dtype;return u.makeTensorFromDataId(e,n,r)}));if(h){var l=u.getTensorsForGradient(r,e,s);if(null==l){null==i&&(i=[]);var f=s.filter((function(t,e){return i[e]}));l=(a||[]).slice().concat(f);}c=u.saveTensorsForBackwardMode(l);}return s};else {var m=function(t){h&&(c=t.map((function(t){return u.keep(u.clone(t))})));};f=function(){var e=u.backend.numDataIds();v=u.tidy((function(){return t(u.backend,m)}));var n=Array.isArray(v)?v:[v];return u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(r,e,n),n};}return this.scopedRun((function(){return u.state.kernelDepth++}),(function(){return u.state.kernelDepth--}),(function(){s=u.ENV.getBool("DEBUG")?u.profiler.profileKernel(r,e,(function(){return f()})):f();})),h&&this.addTapeNode(r,e,s,n,c,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-d,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((function(t){return e[t].shape})),outputShapes:s.map((function(t){return t.shape}))}),Array.isArray(v)?s:s[0]},t.prototype.saveTensorsForBackwardMode=function(t){var e=this;return t.map((function(t){return e.keep(e.clone(t))}))},t.prototype.getTensorsForGradient=function(t,e,n){var r=h(t);if(null!=r){var o=r.inputsToSave||[],a=r.outputsToSave||[],i=void 0;r.saveAllInputs?(C(Array.isArray(e),(function(){return "saveAllInputs is true, expected inputs to be an array."})),i=Object.keys(e).map((function(t){return e[t]}))):i=o.map((function(t){return e[t]}));var s=n.filter((function(t,e){return a[e]}));return i.concat(s)}return null},t.prototype.makeTensor=function(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;var o=t;"string"===n&&H(t[0])&&(o=t.map((function(t){return rt(t)})));var a=r.write(o,e,n),i=new wt(e,n,a,this.nextTensorId());if(this.incRef(i,r),"string"===n){var s=this.state.tensorInfo.get(a),u=G(o);this.state.numBytes+=u-s.bytes,s.bytes=u;}return i},t.prototype.makeTensorFromDataId=function(t,e,n,r){var o=new wt(e,n=n||"float32",t,this.nextTensorId());return this.incRef(o,r),o},t.prototype.makeVariable=function(t,e,n,r){void 0===e&&(e=!0),n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));var o=new St(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error("Variable with name "+o.name+" was already registered");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},t.prototype.incRef=function(t,e){var n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(r=t.size*z(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r;}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof St||this.track(t);},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;var e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--;}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var e=this.state.registeredVariables[t];this.disposeVariable(e);}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name];},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){return this.state.profiling=!0,e=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,e,n,r,o,a){var i=this,s={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:o},u=h(t);null!=u&&(r=u.gradFunc),null!=r&&(s.gradient=function(t){return t=t.map((function(t,e){if(null==t){var r=n[e],o=tt(r.size,r.dtype);return i.makeTensor(o,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],o,a)}),this.state.activeTape.push(s);},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++;},t.prototype.endTape=function(){this.state.gradientDepth--;},t.prototype.startScope=function(t){var e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e;},t.prototype.endScope=function(t){for(var e=this,n=_t(t),r=new Set(n.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var a=this.state.activeScope.track[o];a.kept||r.has(a.id)||a.dispose();}var i=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(t){t.kept||t.scopeId!==i.id||e.track(t);}));},t.prototype.gradients=function(t,e,n,r){var o=this;if(void 0===r&&(r=!1),C(e.length>0,(function(){return "gradients() received an empty list of xs."})),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '"+n.dtype+"'");var a=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy("forward",t)}));C(a instanceof wt,(function(){return "The result y returned by f() must be a tensor."}));var i=function(t,e,n){for(var r={},o={},a=0;a<e.length;a++)r[e[a].id]=!0;for(a=0;a<t.length;a++){var i=(p=t[a]).inputs;for(var s in i){for(var u=i[s],c=!1,l=0;l<e.length;l++)if(r[u.id]){p.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[p.id]=!0;break}if(c)break}}var h={};h[n.id]=!0;var f={};for(a=t.length-1;a>=0;a--)for(i=(p=t[a]).inputs,l=0;l<p.outputs.length;l++)if(h[p.outputs[l].id]){for(var s in i)h[i[s].id]=!0,f[p.id]=!0;break}var d=[];for(a=0;a<t.length;a++){var p;if(o[(p=t[a]).id]&&f[p.id]){var v={};for(var s in p.inputs){var g=p.inputs[s];r[g.id]&&(v[s]=g);}var m=Object.assign({},p);m.inputs=v,m.outputs=p.outputs,d.push(m);}}return d}(this.state.activeTape,e,a);if(!r&&0===i.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var t,r,s={};s[a.id]=null==n?(t=a.shape,r=Z(k(t),"float32"),Lt.makeTensor(r,t,"float32")):n,function(t,e,n){for(var r=function(r){var o=e[r],a=[];if(o.outputs.forEach((function(e){var n=t[e.id];null!=n?a.push(n):a.push(null);})),null==o.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+o.kernelName+".");var i=o.gradient(a),s=function(e){if(!(e in i))throw new Error("Cannot backprop through input "+e+". Available gradients found: "+Object.keys(i)+".");var r=n((function(){return i[e]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input "+e+" must have 'float32' dtype, but has '"+r.dtype+"'");var a=o.inputs[e];if(!S(r.shape,a.shape))throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input '"+e+"' has shape '"+r.shape+"', which does not match the shape of the input '"+a.shape+"'");if(null==t[a.id])t[a.id]=r;else {var s=t[a.id];t[a.id]=s.add(r),s.dispose();}};for(var u in o.inputs)s(u);},o=e.length-1;o>=0;o--)r(o);}(s,i,(function(t){return o.tidy(t)}));var u=e.map((function(t){return s[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var e=0,n=t.saved;e<n.length;e++){n[e].dispose();}})),o.state.activeTape=null),{value:a,grads:u}}))},t.prototype.customGrad=function(t){var e=this;return C(X(t),(function(){return "The f passed in customGrad(f) must be a function."})),function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];C(r.every((function(t){return t instanceof wt})),(function(){return "The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var a={};return r.forEach((function(t,e){a[e]=t;})),e.runKernelFunc((function(e,o){return C((n=t.apply(void 0,r.concat([o]))).value instanceof wt,(function(){return "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),C(X(n.gradFunc),(function(){return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),n.value}),a,(function(t,e){var o=n.gradFunc(t,e),a=Array.isArray(o)?o:[o];C(a.length===r.length,(function(){return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),C(a.every((function(t){return t instanceof wt})),(function(){return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var i={};return a.forEach((function(t,e){i[e]=function(){return t};})),i}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){switch(r.label){case 0:return e=et(),[4,this.backend.time(t)];case 1:return (n=r.sent()).wallMs=et()-e,[2,n]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Bt,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null;},t.nextTensorId=0,t.nextVariableId=0,t}();var Lt=function(){var t=function(){if(null==Ot){var t=void 0;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global$1)t=global$1;else if("undefined"!=typeof process)t=process;else {if("undefined"==typeof self)throw new Error("Could not find a global object");t=self;}Ot=t;}return Ot}();if(null==t._tfengine){var e=new o(t);t._tfengine=new Pt(e);}return function(t){s=t;}(t._tfengine.ENV),yt=function(){return t._tfengine},t._tfengine}();function Wt(){return "undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Ut=i();Ut.registerFlag("DEBUG",(function(){return !1}),(function(t){t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");})),Ut.registerFlag("IS_BROWSER",(function(){return Wt()})),Ut.registerFlag("IS_NODE",(function(){return "undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node})),Ut.registerFlag("IS_CHROME",(function(){return "undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Ut.registerFlag("PROD",(function(){return !1})),Ut.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return Ut.getBool("DEBUG")})),Ut.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return !0})),Ut.registerFlag("IS_TEST",(function(){return !1}));var Vt,zt,Gt,Ht={},qt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Kt(t,e){Ht[t]=e;}function jt(t){t in Ht||(Ht[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",(function(e){e.preventDefault(),delete Ht[t];}),!1),1===t)return e.getContext("webgl",qt)||e.getContext("experimental-webgl",qt);return e.getContext("webgl2",qt)}(t));var e=Ht[t];return e.isContextLost()?(delete Ht[t],jt(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Ht[t])}function Xt(t,e){return [e,t]}function Yt(t){var e=k(t);return D(Math.ceil(e/4))}function $t(t,e){return [Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Qt(t,e){var n,r,o,a,s,u,c,l,h,f=t;return 2===i().getNumber("WEBGL_VERSION")?(n=f.R32F,r=f.R16F,o=f.RGBA16F,a=f.RGBA32F,s=f.RED,u=4,c=1,l=f.HALF_FLOAT,h=f.FLOAT):(n=t.RGBA,r=t.RGBA,o=t.RGBA,a=f.RGBA,s=t.RGBA,u=4,c=4,l=null!=e?e.HALF_FLOAT_OES:null,h=t.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:s,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:l,textureTypeFloat:h}}function Jt(t,e,n){var r=n();return e&&function(t){var e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+ne(t,e))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH";}(Vt||(Vt={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD";}(zt||(zt={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16";}(Gt||(Gt={}));var Zt=5.96e-8,te=65504;function ee(t){return !!(i().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||Zt<Math.abs(t)&&Math.abs(t)<te)}function ne(t,e){switch(e){case t.NO_ERROR:return "NO_ERROR";case t.INVALID_ENUM:return "INVALID_ENUM";case t.INVALID_VALUE:return "INVALID_VALUE";case t.INVALID_OPERATION:return "INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return "INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return "OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return "CONTEXT_LOST_WEBGL";default:return "Unknown error code "+e}}function re(t,e,n){return ke(t,e,(function(){return t.getExtension(n)}),'Extension "'+n+'" not supported on this browser.')}function oe(t,e,n){var r=ke(t,e,(function(){return t.createShader(t.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if(Jt(t,e,(function(){return t.shaderSource(r,n)})),Jt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}function ae(t,e,n){var r=ke(t,e,(function(){return t.createShader(t.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if(Jt(t,e,(function(){return t.shaderSource(r,n)})),Jt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){var n=ue.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);for(var r=+n[1],o=t.split("\n"),a=o.length.toString().length+2,i=o.map((function(t,e){return N((e+1).toString(),a)+t})),s=0,u=0;u<i.length;u++)s=Math.max(i[u].length,s);var c=i.slice(0,r-1),l=i.slice(r-1,r),h=i.slice(r);console.log(c.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+N(l[0],s),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"));}(n,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}var ie,se,ue=/ERROR: [0-9]+:([0-9]+):/g;function ce(t,e){return ke(t,e,(function(){return t.createProgram()}),"Unable to create WebGLProgram.")}function le(t,e,n){if(Jt(t,e,(function(){return t.linkProgram(n)})),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}function he(t,e,n){if(Jt(t,e,(function(){return t.validateProgram(n)})),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function fe(t,e,n){var r=ke(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),Jt(t,e,(function(){return t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function de(t,e,n){var r=ke(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return Jt(t,e,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),Jt(t,e,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function pe(t,e){return ke(t,e,(function(){return t.createTexture()}),"Unable to create WebGLTexture.")}function ve(t,e){var n=i().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){var r="["+t+"x"+e+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(t>n||e>n){r="["+t+"x"+e+"]";throw new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU "+("["+n+"x"+n+"]")+".")}}function ge(t,e){return ke(t,e,(function(){return t.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}function me(t,e,n,r,o,a,i,s){var u=t.getAttribLocation(n,r);return -1!==u&&(Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),Jt(t,e,(function(){return t.vertexAttribPointer(u,a,t.FLOAT,!1,i,s)})),Jt(t,e,(function(){return t.enableVertexAttribArray(u)})),!0)}function ye(t,e,n,r){Se(t,r),Jt(t,e,(function(){return t.activeTexture(t.TEXTURE0+r)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)}));}function xe(t,e,n,r){return ke(t,e,(function(){return t.getUniformLocation(n,r)}),'uniform "'+r+'" not present in program.')}function be(t,e,n){return t.getUniformLocation(e,n)}function we(t,e,n,r,o,a){Jt(t,e,(function(){return ye(t,e,r,a)})),Jt(t,e,(function(){return t.uniform1i(o,a)}));}function Ce(t,e,n,r){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),Jt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0)}));}function Ee(t,e,n){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)})),Jt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}));}function Re(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+Ie(t,e))}function Ie(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return "FRAMEBUFFER_UNSUPPORTED";default:return "unknown error "+e}}function ke(t,e,n,r){var o=Jt(t,e,(function(){return n()}));if(null==o)throw new Error(r);return o}function Se(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error("textureUnit must be in "+("[gl.TEXTURE0, gl.TEXTURE"+n+"]")+".")}function Ae(t,e){return void 0===e&&(e=2),k(t.slice(0,t.length-e))}function Te(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return [t.length>1?t[t.length-2]:1,t[t.length-1]]}function De(t){var e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Ae(t)].concat(Te(t))),e}function Ne(t,e){var n;void 0===e&&(e=!1);var r=i().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map((function(e,n){return n>=t.length-2?b(t[n]):t[n]}))).length&&(t=[2,t[0]])),2!==t.length){var o=M$1(t);t=o.newShape;}var a=k(t);if(t.length<=1&&a<=r)return [1,a];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return [t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return [t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return [t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return [t[0],t[1]*t[2]*t[3]];if(e){var s=Ae(t),u=2,c=2;return t.length&&(u=(n=Te(t))[0],c=n[1]),D(a=s*(u/2)*(c/2)).map((function(t){return 2*t}))}return D(a)}function Fe(t){return t%2==0}function _e(t,e){if(S(t=t.slice(-2),e=e.slice(-2)))return !0;if(!t.length||!e.length)return !0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return !0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return !0;if(Fe(n)&&Fe(r)&&(1===t[0]||1===e[0]))return !0}return t[1]===e[1]&&Fe(t[0])&&Fe(e[0])}function Oe(t){if(null==ie){var e=jt(t);ie=e.getParameter(e.MAX_TEXTURE_SIZE);}return ie}function Me(t){if(null==se){var e=jt(t);se=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);}return Math.min(16,se)}function Be(t){if(0===t)return 0;var e=jt(t);return Pe(e,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Pe(e,"EXT_disjoint_timer_query")?1:0}function Pe(t,e){return null!=t.getExtension(e)}function Le(t){try{if(null!=jt(t))return !0}catch(t){return !1}return !1}function We(t){if(0===t)return !1;var e=jt(t);if(1===t){if(!Pe(e,"OES_texture_float"))return !1}else if(!Pe(e,"EXT_color_buffer_float"))return !1;return Ve(e)}function Ue(t){if(0===t)return !1;var e=jt(t);if(1!==t){if(Pe(e,"EXT_color_buffer_float"))return Ve(e);if(Pe(e,"EXT_color_buffer_half_float")){var n=e.getExtension("EXT_color_buffer_half_float");return function(t,e){var n=Qt(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),a}(e,n)}return !1}return !!Pe(e,"OES_texture_float")&&(!!Pe(e,"WEBGL_color_buffer_float")&&Ve(e))}function Ve(t){var e=Qt(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}function ze(t){return 2===t&&null!=jt(t).fenceSync}var Ge=Object.freeze({callAndCheck:Jt,canBeRepresented:ee,getWebGLErrorMessage:ne,getExtensionOrThrow:re,createVertexShader:oe,createFragmentShader:ae,createProgram:ce,linkProgram:le,validateProgram:he,createStaticVertexBuffer:fe,createStaticIndexBuffer:de,getNumChannels:function(){return 2===i().getNumber("WEBGL_VERSION")?1:4},createTexture:pe,validateTextureSize:ve,createFramebuffer:ge,bindVertexBufferToProgramAttribute:me,bindTextureUnit:ye,unbindTextureUnit:function(t,e,n){Se(t,n),Jt(t,e,(function(){return t.activeTexture(t.TEXTURE0+n)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}));},getProgramUniformLocationOrThrow:xe,getProgramUniformLocation:be,bindTextureToProgramUniformSampler:we,bindCanvasToFramebuffer:function(t,e){Jt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),Jt(t,e,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),Jt(t,e,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}));},bindColorTextureToFramebuffer:Ce,unbindColorTextureFromFramebuffer:Ee,validateFramebuffer:Re,getFramebufferErrorMessage:Ie,getBatchDim:Ae,getRowsCols:Te,getShapeAs3D:De,getTextureShapeFromLogicalShape:Ne,isReshapeFree:_e,getWebGLMaxTextureSize:Oe,resetMaxTextureSize:function(){ie=null;},resetMaxTexturesInShader:function(){se=null;},getMaxTexturesInShader:Me,getWebGLDisjointQueryTimerVersion:Be,hasExtension:Pe,isWebGLVersionEnabled:Le,isCapableOfRenderingToFloatTexture:We,isDownloadFloatTextureEnabled:Ue,isWebGLFenceEnabled:ze}),He=i();function qe(){i().set("PROD",!0);}function Ke(){i().set("DEBUG",!0);}function je(){i().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.");}function Xe(t){i().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().");}function Ye(){Lt.disposeVariables();}function $e(){return Lt}function Qe(){return Lt.memory()}function Je(t){return Lt.profile(t)}function Ze(t,e){return Lt.tidy(t,e)}function tn(t){_t(t).forEach((function(t){return t.dispose()}));}function en(t){return Lt.keep(t)}function nn(t){return Lt.time(t)}function rn(t){return Lt.setBackend(t)}function on$1(){return Lt.ready()}function an(){return Lt.backendName}function sn(t){Lt.removeBackend(t);}function un(t){return Lt.findBackend(t)}function cn(t){return Lt.findBackendFactory(t)}function ln$1(t,e,n){return void 0===n&&(n=1),Lt.registerBackend(t,e,n)}function hn(){return Lt.backend}function fn(t,e){i().setPlatform(t,e);}function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i().getBool("IS_TEST")||console.warn.apply(console,t);}function pn(t,e){var n=t;if(V(t))return "string"===e?[]:[t.length];if(!Array.isArray(t))return [];for(var r=[];Array.isArray(n)||V(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&i().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],!Array.isArray(e)&&!V(e))return void C(0===n.length,(function(){return "Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+n[0]+" elements"}));C(n.length>0,(function(){return "Element arr["+r.join("][")+"] should be a primitive, but is an array of "+e.length+" elements"})),C(e.length===n[0],(function(){return "Element arr["+r.join("][")+"] should have "+n[0]+" elements, but has "+e.length+" elements"}));for(var o=n.slice(1),a=0;a<e.length;++a)t(e[a],o,r.concat(a));}(t,r,[]),r}function vn(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error("Argument '"+n+"' passed to '"+r+"' must be "+t+" tensor, but got "+e+" tensor")}function gn(t,e,n,r){if(void 0===r&&(r="numeric"),t instanceof wt)return vn(r,t.dtype,e,n),t;var o=j(t);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),vn(r,o,e,n),null==t||!V(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){var a=null==t?"null":t.constructor.name;throw new Error("Argument '"+e+"' passed to '"+n+"' must be a Tensor or TensorLike, but got '"+a+"'")}var s=pn(t,o);V(t)||Array.isArray(t)||(t=[t]);var u="string"!==o?Q(t,o,i().getBool("DEBUG")):I(t,[],!0);return Lt.makeTensor(u,s,o)}function mn(t,e,n,r){if(void 0===r&&(r="numeric"),!Array.isArray(t))throw new Error("Argument "+e+" passed to "+n+" must be a `Tensor[]` or `TensorLike[]`");return t.map((function(t,r){return gn(t,e+"["+r+"]",n)}),r)}function yn(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return !1;return !0}function xn(t,e,n){for(var r=t.length+e.length,o=[],a=0,i=0,s=0;s<r;s++)-1===n.indexOf(s)?o.push(t[a++]):o.push(e[i++]);return o}function bn(t,e){for(var n=[],r=t.length,o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return [n,e.map((function(e){return t[e]}))]}function wn(t,e){return xn(t,e.map((function(t){return 1})),e)}function Cn(t,e,n){C(yn(e,n),(function(){return t+" supports only inner-most axes for now. Got axes "+e+" and rank-"+n+" input."}));}function En(t,e){if(yn(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((function(t){return n.push(t)})),n}function Rn(t){return t.map((function(t,e){return [e,t]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return t[0]}))}function In(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function kn(t,e){var n=t[0].length;t.forEach((function(t,e){C(t.length===n,(function(){return "Error in concat"+n+"D: rank of tensors["+e+"] must be the same as the rank of the rest ("+n+")"}));})),C(e>=0&&e<n,(function(){return "Error in concat"+n+"D: axis must be between 0 and "+(n-1)+"."}));var r=t[0];t.forEach((function(t,o){for(var a=0;a<n;a++)C(a===e||t[a]===r[a],(function(){return "Error in concat"+n+"D: Shape of tensors["+o+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+o+"."}));}));}function Sn(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function An(t){var e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");var n=e[0],r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));var o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Lt.startScope(n);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Lt.endScope(o),o}catch(t){throw Lt.endScope(null),t}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}He.registerFlag("HAS_WEBGL",(function(){return He.getNumber("WEBGL_VERSION")>0})),He.registerFlag("WEBGL_VERSION",(function(){return Le(2)?2:Le(1)?1:0})),He.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===He.get("WEBGL_VERSION")})),He.registerFlag("WEBGL_CPU_FORWARD",(function(){return !0})),He.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return !1})),He.registerFlag("WEBGL_PACK",(function(){return He.getBool("HAS_WEBGL")})),He.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return He.getBool("WEBGL_PACK")})),He.registerFlag("WEBGL_PACK_CLIP",(function(){return He.getBool("WEBGL_PACK")})),He.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return !1})),He.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return He.getBool("WEBGL_PACK")})),He.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return He.getBool("WEBGL_PACK")})),He.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return He.getBool("WEBGL_PACK")})),He.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return He.getBool("WEBGL_PACK")})),He.registerFlag("WEBGL_PACK_REDUCE",(function(){return He.getBool("WEBGL_PACK")})),He.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return He.getBool("WEBGL_PACK")})),He.registerFlag("WEBGL_CONV_IM2COL",(function(){return He.getBool("WEBGL_PACK")})),He.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return Oe(He.getNumber("WEBGL_VERSION"))})),He.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return Me(He.getNumber("WEBGL_VERSION"))})),He.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var t=He.getNumber("WEBGL_VERSION");return 0===t?0:Be(t)})),He.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return He.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))));var t;})),He.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return We(He.getNumber("WEBGL_VERSION"))})),He.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return !He.getBool("WEBGL_FORCE_F16_TEXTURES")&&He.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),He.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return Ue(He.getNumber("WEBGL_VERSION"))})),He.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return ze(He.getNumber("WEBGL_VERSION"))})),He.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return He.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),bt=Xe;var Tn=An({complex_:function(t,e){var n=gn(t,"real","complex"),r=gn(e,"imag","complex");return E(n.shape,r.shape,"real and imag shapes, "+n.shape+" and "+r.shape+", must match in call to tf.complex()."),Lt.runKernelFunc((function(t){return t.complex(n,r)}),{$real:n,$imag:r})}}),Dn=An({real_:function(t){var e=gn(t,"input","real");return Lt.runKernelFunc((function(t){return t.real(e)}),{$input:e})}}),Nn=An({imag_:function(t){var e=gn(t,"input","imag");return Lt.runKernelFunc((function(t){return t.imag(e)}),{$input:e})}});function Fn(t,e,n){return _n(t,e,pn(t,n),n)}function _n(t,e,n,r){if(null==r&&(r=j(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!V(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){nt(e);var o=k(e),a=k(n);C(o===a,(function(){return "Based on the provided shape, ["+e+"], the tensor should have "+o+" values but has "+a}));for(var s=0;s<n.length;++s){var u=n[s],c=s!==n.length-1||u!==k(e.slice(s));C(n[s]===e[s]||!c,(function(){return "Error creating a new Tensor. Inferred shape ("+n+") does not match the provided shape ("+e+"). "}));}}return V(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?Q(t,r,i().getBool("DEBUG")):I(t,[],!0),Lt.makeTensor(t,e,r)}function On(t,e){if((V(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&V(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return _n(t,[],[],e)}function Mn(t,e){R(t);var n=pn(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return _n(t,null,n,e)}function Bn(t,e,n){if(R(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");var r=pn(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return _n(t,e,r,n)}function Pn(t,e,n){if(R(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");var r=pn(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return _n(t,e,r,n)}function Ln(t,e,n){if(R(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");var r=pn(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return _n(t,e,r,n)}function Wn(t,e,n){if(R(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");var r=pn(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return _n(t,e,r,n)}function Un(t,e,n){if(R(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");var r=pn(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return _n(t,e=e||r,r,n)}function Vn(t,e,n,r){return void 0===e&&(e=!0),Lt.makeVariable(t,e,n,r)}function zn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=zn(t,"float32"),r=Gn(t,"float32");return Tn(n,r)}var o=Z(k(t),e);return Lt.makeTensor(o,t,e)}function Gn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Gn(t,"float32"),r=Gn(t,"float32");return Tn(n,r)}var o=tt(k(t),e);return Lt.makeTensor(o,t,e)}function Hn(t,e,n){return Lt.runKernelFunc((function(r){return r.fill(t,e,n)}),{})}function qn(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");return Lt.runKernelFunc((function(r){return r.linspace(t,e,n)}),{})}function Kn(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r="float32"),0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return Gn([0],r);var o=tt(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+n;return Mn(o,r)}var jn=An({onesLike_:function(t){var e=gn(t,"x","onesLike");if("complex64"===e.dtype){var n=jn(Dn(e)),r=Xn(Nn(e));return Tn(n,r)}return Lt.runKernelFunc((function(t){return t.onesLike(e)}),{x:e},(function(t,e){return {x:function(){return Xn(t)}}}),"OnesLike")}}),Xn=An({zerosLike_:function(t){var e=gn(t,"x","zerosLike");return Lt.runKernelFunc((function(t){return t.zerosLike(e)}),{x:e},(function(t,e){return {x:function(){return Xn(t)}}}),"ZerosLike")}});var Yn=An({concat_:function(t,e){void 0===e&&(e=0),C(t.length>=1,(function(){return "Pass at least one tensor to concat"}));var n=mn(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((function(t){if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+t.dtype+". ")})),e=O(e,n[0].shape)[0];var r=Sn(n.map((function(t){return t.shape})),e);if(0===k(r))return Fn([],r);if(1===(n=n.filter((function(t){return t.size>0}))).length)return n[0];var o=n.map((function(t){return t.shape}));kn(o,e);var a=n,i={axis:e};return Lt.runKernelFunc((function(t){return t.concat(n,e)}),a,(function(t){var n=o.map((function(t){return t[e]}));return tr(t,n,e).map((function(t){return function(){return t}}))}),"Concat",i)}}),$n=An({concat1d_:function(t){return Yn(t,0)}}),Qn=An({concat2d_:function(t,e){return Yn(t,e)}}),Jn=An({concat3d_:function(t,e){return Yn(t,e)}}),Zn=An({concat4d_:function(t,e){return Yn(t,e)}}),tr=An({split_:function(t,e,n){void 0===n&&(n=0);var r,o=gn(t,"x","split");return n=O(n,o.shape)[0],"number"==typeof e?(C(o.shape[n]%e==0,(function(){return "Number of splits must evenly divide the axis."})),r=new Array(e).fill(o.shape[n]/e)):(C(o.shape[n]===e.reduce((function(t,e){return t+e})),(function(){return "The sum of sizes must match the size of the axis dimension."})),r=e),Lt.runKernelFunc((function(t){return t.split(o,r,n)}),{$x:o},(function(t){return {$x:function(){return Yn(t,n)}}}))}});function er(t,e,n){return void 0===e&&(e="float32"),e=e||"float32",nt(t),new mt(t,e,n)}function nr(t,e){void 0===e&&(e=!1),console.log(t.toString(e));}var rr=An({batchToSpaceND_:function(t,e,n){var r=gn(t,"x","batchToSpaceND"),o=e.reduce((function(t,e){return t*e}));return C(r.rank>=1+e.length,(function(){return "input rank is "+r.rank+" but should be > than blockShape.length "+e.length})),C(n.length===e.length,(function(){return "crops.length is "+n.length+" but should be equal to blockShape.length  "+e.length})),C(r.shape[0]%o==0,(function(){return "input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+e.join(" * ")+" === "+o})),Lt.runKernelFunc((function(t){return t.batchToSpaceND(r,e,n)}),{$x:r},(function(t){return {$x:function(){return t.spaceToBatchND(e,n)}}}))}}),or=An({cast_:function(t,e){var n=gn(t,"x","cast");if(!W(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");var r={dtype:e};return Lt.runKernelFunc((function(t){return t.cast(n,e)}),{x:n},(function(t){return {x:function(){return t.clone()}}}),"Cast",r)}}),ar=An({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var o=gn(t,"x","cumsum"),a=En([e|=0],o.rank),i=o;null!=a&&(i=o.transpose(a));var s=In(1,o.rank)[0],u=Lt.runKernelFunc((function(t){return t.cumsum(i,s,n,r)}),{permutedX:i},(function(t){return {permutedX:function(){return t.cumsum(e,n,!r)}}}));return null!=a&&(u=u.transpose(a)),u}}),ir=An({depthToSpace_:function(t,e,n){void 0===n&&(n="NHWC");var r=gn(t,"x","depthToSpace"),o="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];return C(o*e>=0,(function(){return "Negative dimension size caused by overflow when multiplying\n      "+o+" and "+e+"  for depthToSpace with input shape\n      "+r.shape})),C(a*e>=0,(function(){return "Negative dimension size caused by overflow when multiplying\n      "+a+" and "+e+" for depthToSpace with input shape\n          "+r.shape})),C(i%(e*e)==0,(function(){return "Dimension size must be evenly divisible by "+e*e+" but is "+i+" for depthToSpace with input shape "+r.shape})),Lt.runKernelFunc((function(t){return t.depthToSpace(r,e,n)}),{$x:r})}}),sr=An({expandDims_:function(t,e){void 0===e&&(e=0);var n=gn(t,"x","expandDims",null);C(e<=n.rank,(function(){return "Axis must be <= rank of the tensor"}));var r=n.shape.slice();return e<0&&(C(-(n.rank+1)<=e,(function(){return "Axis must be in the interval ["+-(n.rank+1)+", "+n.rank+"]"})),e=n.rank+e+1),r.splice(e,0,1),ur(n,r)}}),ur=An({reshape_:function(t,e){var n=gn(t,"x","reshape",null);e=_(e,n.size),C(n.size===k(e),(function(){return "new shape and old shape must have the same number of elements."}));var r={shape:e};return Lt.runKernelFunc((function(t){return t.reshape(n,e)}),{x:n},(function(t){return {x:function(){return t.reshape(n.shape)}}}),"Reshape",r)}}),cr=An({spaceToBatchND_:function(t,e,n){var r=gn(t,"x","spaceToBatchND");return C(r.rank>=1+e.length,(function(){return "input rank "+r.rank+" should be > than [blockShape] "+e.length})),C(n.length===e.length,(function(){return "paddings.shape[0] "+n.length+" must be equal to [blockShape] "+e.length})),C(r.shape.reduce((function(t,r,o){return o>0&&o<=e.length?t&&(r+n[o-1][0]+n[o-1][1])%e[o-1]==0:t}),!0),(function(){return "input spatial dimensions "+r.shape.slice(1)+" with paddings "+n.toString()+" must be divisible by blockShapes "+e.toString()})),Lt.runKernelFunc((function(t){return t.spaceToBatchND(r,e,n)}),{$x:r},(function(t){return {$x:function(){return t.batchToSpaceND(e,n)}}}))}}),lr=An({squeeze_:function(t,e){var n=gn(t,"x","squeeze");return ur(n,M$1(n.shape,e).newShape)}}),hr=An({stack_:function(t,e){void 0===e&&(e=0);var n=mn(t,"tensors","stack");if(C(n.length>=1,(function(){return "Pass at least one tensor to tf.stack"})),1===n.length)return n[0].expandDims(e);var r=n[0].rank,o=n[0].shape,a=n[0].dtype;C(e<=r,(function(){return "Axis must be <= rank of the tensor"})),n.forEach((function(t){E(o,t.shape,"All tensors passed to stack must have matching shapes");})),n.forEach((function(t){C(a===t.dtype,(function(){return "All tensors passed to stack must have matching dtypes"}));}));var i=n.map((function(t){return t.expandDims(e)}));return Yn(i,e)}}),fr=An({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=gn(t,"x","unstack");C(e>=-n.shape.length&&e<n.shape.length,(function(){return "Axis = "+e+" is not in [-"+n.shape.length+", "+n.shape.length+")"})),e<0&&(e+=n.shape.length);var r={axis:e};return Lt.runKernelFunc((function(t){return t.unstack(n,e)}),{x:n},(function(t){return {x:function(){return hr(t,e)}}}),"Unpack",r)}}),dr=function(t,e){return n(this,void 0,void 0,(function(){var n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,"x","setdiff1d"),o=gn(e,"y","setdiff1d"),C(n.dtype===o.dtype,(function(){return "x and y should have the same dtype, but got x ("+n.dtype+") and y ("+o.dtype+")."})),C(1===n.rank,(function(){return "x should be 1D tensor, but got x ("+n.shape+")."})),C(1===o.rank,(function(){return "y should be 1D tensor, but got y ("+o.shape+")."})),[4,n.data()];case 1:return a=r.sent(),[4,o.data()];case 2:for(i=r.sent(),s=new Set(i),u=0,h=0;h<a.length;h++)s.has(a[h])||u++;for(c=new mt([u],n.dtype),l=new mt([u],"int32"),h=0,f=0;h<a.length;h++)s.has(a[h])||(c.values[f]=a[h],l.values[f]=h,f++);return [2,[c.toTensor(),l.toTensor()]]}}))}))};function pr(t,e,n,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(e.slice(0))).push(t[0]/n),o=o.concat(t.slice(1));else {o=o.concat(t[0]);for(var a=e.length,i=0;i<a;++i)o=o.concat([t[i+1]/e[i],e[i]]);o=o.concat(t.slice(a+1));}return o}function vr(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var o=e+1;o<t;++o)o<=2*e?(r.push(o),r.push(o-(e+1))):r.push(o);}else {var a=[],i=[];for(o=1;o<t;++o)o>=2*e+1||o%2==1?i.push(o):a.push(o);r.push.apply(r,a),r.push(0),r.push.apply(r,i);}return r}function gr(t,e,n,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(var a=1;a<t.length;++a)a<=e.length?r?o.push(e[a-1]*t[a]):o.push(t[a]/e[a-1]):o.push(t[a]);return o}function mr(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function yr(t,e,n){for(var r=t.slice(0,1),o=0;o<n;++o)r.push(t[o+1]-e[o][0]-e[o][1]);return r}var xr="Add",br="AddN",wr="Div",Cr="FusedBatchNorm",Er="SquaredDifference",Rr="Square",Ir="Transpose",kr="NonMaxSuppressionV5",Sr="BroadcastTo",Ar="OneHot",Tr="Identity",Dr="Tile",Nr="PadV2",Fr="FromPixels",_r="MaxPoolWithArgmax";var Or=An({add_:function(t,e){var n,r=gn(t,"a","add"),o=gn(e,"b","add");n=Nt(r,o),r=n[0],o=n[1];var a={a:r,b:o};return Lt.runKernelFunc((function(t,e){var n=t.add(r,o);return e([r,o]),n}),a,null,xr)}});function Mr(t,e){for(var n=t.length,r=[],o=0;o<n;o++){var a=n-1-o,i=t[a]||1;(e[e.length-1-o]||1)>1&&1===i&&r.unshift(a);}return r}function Br(t,e){for(var n=[],r=0;r<e.length;r++){var o=t[t.length-r-1],a=e.length-r-1,i=e[a];(null==o||1===o&&i>1)&&n.unshift(a);}return n}function Pr(t,e){for(var n=[],r=Math.max(t.length,e.length),o=0;o<r;o++){var a=t[t.length-o-1];null==a&&(a=1);var i=e[e.length-o-1];if(null==i&&(i=1),1===a)n.unshift(i);else if(1===i)n.unshift(a);else {if(a!==i)throw Error("Operands could not be broadcast together with shapes "+t+" and "+e+".");n.unshift(a);}}return n}var Lr=An({abs_:function(t){var e=gn(t,"x","abs");return "complex64"===e.dtype?Lt.runKernelFunc((function(t){return t.complexAbs(e)}),{$x:e}):Lt.runKernelFunc((function(t,n){var r=t.abs(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return {x:function(){return t.mul(n.toFloat().step(-1))}}}),"Abs")}}),Wr=An({acos_:function(t){var e=gn(t,"x","acos");return Lt.runKernelFunc((function(t,n){var r=t.acos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.divStrict(On(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),Ur=An({acosh_:function(t){var e=gn(t,"x","acosh");return Lt.runKernelFunc((function(t,n){var r=t.acosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),Vr=An({asin_:function(t){var e=gn(t,"x","asin");return Lt.runKernelFunc((function(t,n){var r=t.asin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.divStrict(On(1).sub(n.toFloat().square()).sqrt())}}}))}}),zr=An({asinh_:function(t){var e=gn(t,"x","asinh");return Lt.runKernelFunc((function(t,n){var r=t.asinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.divStrict(On(1).add(n.toFloat().square()).sqrt())}}}))}}),Gr=An({atan_:function(t){var e=gn(t,"x","atan");return Lt.runKernelFunc((function(t,n){var r=t.atan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.div(n.toFloat().square().add(1))}}}))}}),Hr=An({atanh_:function(t){var e=gn(t,"x","atanh");return Lt.runKernelFunc((function(t,n){var r=t.atanh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.div(On(1).sub(n.toFloat().square()))}}}))}}),qr=An({ceil_:function(t){var e=gn(t,"x","ceil");return Lt.runKernelFunc((function(t){return t.ceil(e)}),{$x:e},(function(t){return {$x:function(){return Xn(t)}}}))}}),Kr=An({clipByValue_:function(t,e,n){var r=gn(t,"x","clipByValue");C(e<=n,(function(){return "Error in clip: min ("+e+") must be less than or equal to max ("+n+")."}));var o=[r],a={min:e,max:n};return Lt.runKernelFunc((function(t,o){var a=t.clip(r,e,n);return o([r]),a}),{x:r},(function(t,r){var o=r[0];return {x:function(){return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)),Xn(t))}}}),"ClipByValue",a,o)}}),jr=An({cos_:function(t){var e=gn(t,"x","cos"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.cos(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return {x:function(){return n.toFloat().sin().neg().mul(t)}}}),"Cos",{},n)}}),Xr=An({cosh_:function(t){var e=gn(t,"x","cosh");return Lt.runKernelFunc((function(t,n){var r=t.cosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return n.toFloat().sinh().mulStrict(t)}}}))}}),Yr=An({erf_:function(t){var e=gn(t,"x","erf");return C("int32"===e.dtype||"float32"===e.dtype,(function(){return "Input dtype must be `int32` or `float32`."})),"int32"===e.dtype&&(e=e.toFloat()),Lt.runKernelFunc((function(t,n){var r=t.erf(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),$r=An({exp_:function(t){var e=gn(t,"x","exp");return Lt.runKernelFunc((function(t,n){var r=t.exp(e);return n([r]),r}),{x:e},(function(t,e){return {x:function(){return t.mulStrict(e[0])}}}),"Exp",{},[],[!0])}}),Qr=An({expm1_:function(t){var e=gn(t,"x","expm1");return Lt.runKernelFunc((function(t,n){var r=t.expm1(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.mul(n.exp())}}}))}}),Jr=An({floor_:function(t){var e=gn(t,"x","floor");return Lt.runKernelFunc((function(t){return t.floor(e)}),{$x:e},(function(t){return {$x:function(){return Xn(t)}}}))}}),Zr=An({log_:function(t){var e=gn(t,"x","log"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.log(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return {x:function(){return t.div(n.toFloat())}}}),"Log",{},n)}}),to=An({log1p_:function(t){var e=gn(t,"x","log1p");return Lt.runKernelFunc((function(t,n){var r=t.log1p(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.div(n.add(1))}}}))}}),eo=An({logSigmoid_:function(t){var e=gn(t,"x","logSigmoid");return Lt.runKernelFunc((function(t,n){var r=t.softplus(e.neg()).neg();return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.mul(n.neg().sigmoid())}}}))}}),no=An({neg_:function(t){var e=gn(t,"x","neg"),n=[e];return Lt.runKernelFunc((function(t){return t.neg(e)}),{x:e},(function(t){return {x:function(){return t.neg()}}}),"Neg",{},n)}}),ro=An({reciprocal_:function(t){var e=gn(t,"x","reciprocal");return Lt.runKernelFunc((function(t,n){var r=t.reciprocal(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.div(n.square().neg())}}}))}}),oo=An({round_:function(t){var e=gn(t,"x","round");return Lt.runKernelFunc((function(t){return t.round(e)}),{$x:e},(function(t){return {$x:function(){return Xn(t)}}}))}}),ao=An({rsqrt_:function(t){var e=gn(t,"x","rsqrt"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.rsqrt(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return {x:function(){return t.div(n.pow(1.5).mul(2)).neg()}}}),"Rsqrt",{},n)}}),io=An({sigmoid_:function(t){var e=gn(t,"x","sigmoid");return Lt.runKernelFunc((function(t,n){var r=t.sigmoid(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return {x:function(){return t.mul(n.mul(On(1).sub(n)))}}}),"Sigmoid")}}),so=An({sign_:function(t){var e=gn(t,"x","sign");return Lt.runKernelFunc((function(t){return t.sign(e)}),{$x:e},(function(t){return {$x:function(){return Xn(t)}}}))}}),uo=An({isNaN_:function(t){var e=gn(t,"x","isNaN");return Lt.runKernelFunc((function(t){return t.isNaN(e)}),{$x:e},(function(t){return {$x:function(){return Xn(t)}}}))}}),co=An({isInf_:function(t){var e=gn(t,"x","isInf");return Lt.runKernelFunc((function(t){return t.isInf(e)}),{$x:e},(function(t){return {$x:function(){return Xn(t)}}}))}}),lo=An({isFinite_:function(t){var e=gn(t,"x","isFinite");return Lt.runKernelFunc((function(t){return t.isFinite(e)}),{$x:e},(function(t){return {$x:function(){return Xn(t)}}}))}}),ho=An({sin_:function(t){var e=gn(t,"x","sin"),n=[e];return Lt.runKernelFunc((function(t,n){var r=t.sin(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return {x:function(){return n.toFloat().cos().mul(t)}}}),"Sin",{},n)}}),fo=An({sinh_:function(t){var e=gn(t,"x","sinh");return Lt.runKernelFunc((function(t,n){var r=t.sinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return n.toFloat().cosh().mulStrict(t)}}}))}}),po=An({softplus_:function(t){var e=gn(t,"x","softplus");return Lt.runKernelFunc((function(t,n){var r=t.softplus(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.mul(n.sigmoid())}}}))}}),vo=An({sqrt_:function(t){var e=gn(t,"x","sqrt");return Lt.runKernelFunc((function(t,n){var r=t.sqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.div(n.toFloat().sqrt().mul(2))}}}))}}),go=An({step_:function(t,e){void 0===e&&(e=0);var n=gn(t,"x","step");return Lt.runKernelFunc((function(t){return t.step(n,e)}),{$x:n},(function(t){return {$x:function(){return Xn(t)}}}))}}),mo=An({tan_:function(t){var e=gn(t,"x","tan");return Lt.runKernelFunc((function(t,n){var r=t.tan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return t.div(n.cos().square())}}}))}}),yo=An({tanh_:function(t){var e=gn(t,"x","tanh");return Lt.runKernelFunc((function(t,n){var r=t.tanh(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return {x:function(){return On(1).sub(n.square()).mulStrict(t)}}}),"Tanh",{},null,[!0])}});var xo=An({addStrict_:function(t,e){var n=gn(t,"a","addStrict"),r=gn(e,"b","addStrict");return E(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),bo=An({atan2_:function(t,e){var n,r=gn(t,"a","atan2"),o=gn(e,"b","atan2");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.atan2(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return {$a:function(){var e=Or(n.square(),r.square()),o=t.mul(r.div(e)),i=Br(n.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(n.shape)},$b:function(){var e=Or(n.square(),r.square()),o=no(t.mul(n.div(e))),i=Br(r.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(r.shape)}}}))}}),wo=An({divStrict_:function(t,e){var n=gn(t,"a","div"),r=gn(e,"b","div");return E(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),Co=An({floorDiv_:function(t,e){var n,r=gn(t,"a","floorDiv"),o=gn(e,"b","floorDiv");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.floorDiv(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return {a:function(){var e=t.div(r.toFloat()),o=Br(n.shape,a);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=Br(r.shape,a);o.length>0&&(e=e.sum(o).reshape(r.shape));var i=r.square();return e.div(i.toFloat()).neg()}}}),"FloorDiv")}}),Eo=An({maximum_:function(t,e){var n,r=gn(t,"a","maximum"),o=gn(e,"b","maximum");return n=Nt(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.maximum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return {a:function(){return t.mul(n.greaterEqual(r).toFloat())},b:function(){return t.mul(n.less(r).toFloat())}}}),"Maximum")}}),Ro=An({maximumStrict_:function(t,e){var n=gn(t,"a","maximumStrict"),r=gn(e,"b","maximumStrict");return E(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),Io=An({minimum_:function(t,e){var n,r=gn(t,"a","minimum"),o=gn(e,"b","minimum");return n=Nt(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.minimum(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return {a:function(){return t.mul(n.lessEqual(r).toFloat())},b:function(){return t.mul(n.greater(r).toFloat())}}}),"Minimum")}}),ko=An({minimumStrict_:function(t,e){var n=gn(t,"a","minimumStrict"),r=gn(e,"b","minimumStrict");return E(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),So=An({mod_:function(t,e){var n,r=gn(t,"a","mod"),o=gn(e,"b","mod");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.mod(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return {$a:function(){var e=Br(n.shape,a);return e.length>0?t.sum(e).reshape(n.shape):t},$b:function(){var e=t.mul(n.div(r).floor().neg()),o=Br(r.shape,a);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),Ao=An({modStrict_:function(t,e){var n=gn(t,"a","modStrict"),r=gn(e,"b","modStrict");return E(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),To=An({mul_:function(t,e){var n,r=gn(t,"a","mul"),o=gn(e,"b","mul");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t,e){var n=t.multiply(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return {a:function(){var e=t.mul(r.toFloat()),o=Br(n.shape,a);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=Br(r.shape,a);return o.length>0?e.sum(o).reshape(r.shape):e}}}),"Mul")}}),Do=An({mulStrict_:function(t,e){var n=gn(t,"a","mul"),r=gn(e,"b","mul");return E(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),No=An({pow_:function(t,e){var n,r=gn(t,"base","pow"),o=gn(e,"exp","pow");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape),i=[r,o];return Lt.runKernelFunc((function(t,e){var n=t.pow(r,o);return e([r,o,n]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1],o=e[2];return {a:function(){var e=r.toFloat(),o=t.mul(e.mul(n.pow(e.sub(On(1))))),i=Br(n.shape,a);return i.length>0&&(o=o.sum(i)),o.reshape(n.shape)},b:function(){var e=n.greater(0),i=n.log().where(e,Xn(n)),s=t.mul(o.mul(i)),u=Br(r.shape,a);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}),"Pow",{},i,[!0])}}),Fo=An({powStrict_:function(t,e){return E(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),_o=An({squaredDifferenceStrict_:function(t,e){var n=gn(t,"a","squaredDifferenceStrict"),r=gn(e,"b","squaredDifferenceStrict");return E(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),Oo=An({sub_:function(t,e){var n,r=gn(t,"a","sub"),o=gn(e,"b","sub");n=Nt(r,o),r=n[0],o=n[1];var a=Pr(r.shape,o.shape);return Lt.runKernelFunc((function(t){return t.subtract(r,o)}),{a:r,b:o},(function(t){return {a:function(){var e=t,n=Br(r.shape,a);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=Br(o.shape,a);return n.length>0&&(e=e.sum(n)),e.neg().reshape(o.shape)}}}),"Sub")}}),Mo=An({subStrict_:function(t,e){var n=gn(t,"a","subStrict"),r=gn(e,"b","subStrict");return E(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}});var Bo=An({div_:function(t,e){var n,r=gn(t,"a","div"),o=gn(e,"b","div");if(n=Nt(r,o),r=n[0],o=n[1],"int32"===r.dtype&&"int32"===o.dtype)return Co(r,o);var a={a:r,b:o};return Lt.runKernelFunc((function(t,e){var n=t.realDivide(r,o);return e([r,o]),n}),a,null,wr,{})}});function Po(t,e){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(e.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if("int32"!==e.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+e.dtype+".");if(e.shape[e.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+e.shape[e.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var n=e.shape,r=n[n.length-1],o=1,a=0;a<n.length-1;++a)o*=n[a];var i=t.shape,s=n.slice();s.pop();var u=1;for(a=r;a<t.rank;++a)u*=i[a],s.push(i[a]);var c=$(t.shape).map((function(t){return t/u})).concat([1]).slice(0,r);return [s,o,u,c]}var Lo=Object.freeze({prepareAndValidate:Po}),Wo=30;function Uo(t){return t<=Wo?t:Y(t,Math.floor(Math.sqrt(t)))}function Vo(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+", indices.shape: "+e.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+o+".";if(n.rank<o)throw new Error(a+" update.rank < "+o+". ");if(t.length<r+(n.rank-o))throw new Error(a+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(a+" update.rank != "+(o+t.length-r));for(var i=0;i<o;++i)if(n.shape[i]!==e.shape[i])throw new Error(a+" updates.shape["+i+"] ("+n.shape[i]+") != indices.shape["+i+"] ("+e.shape[i]+").");for(i=0;i<n.rank-o;++i)if(n.shape[i+o]!==t[i+r])throw new Error(a+" updates.shape["+(i+o)+"] ("+n.shape[i+o]+") != shape["+(i+o)+"] ("+t[i+o]+")")}function zo(t,e,n){if(e.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Vo(n,e,t);}function Go(t,e,n){for(var r=e.shape.length,o=r>1?e.shape[r-1]:1,a=n.length,i=1,s=o;s<a;++s)i*=n[s];var u=o<1?1:o;return {sliceRank:o,numUpdates:k(e.shape)/u,sliceSize:i,strides:$(n.slice(0,o)).concat([1]),outputSize:k(n)}}var Ho=Object.freeze({validateUpdateShape:Vo,validateInput:zo,calculateShapes:Go});function qo(t,e,n){C(t.rank===e.length,(function(){return "Error in slice"+t.rank+"D: Length of begin "+e+" must match the rank of the array ("+t.rank+")."})),C(t.rank===n.length,(function(){return "Error in slice"+t.rank+"D: Length of size "+n+" must match the rank of the array ("+t.rank+")."}));for(var r=function(r){C(e[r]+n[r]<=t.shape[r],(function(){return "Error in slice"+t.rank+"D: begin["+r+"] + size["+r+"] ("+(e[r]+n[r])+") would overflow input.shape["+r+"] ("+t.shape[r]+")"}));},o=0;o<t.rank;++o)r(o);}function Ko(t){for(var e=[],n=0;t>0;)1&t&&e.push(n),t/=2,n++;return e}function jo(t,e,n){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function Xo(t,e,n,r,o){var a=e[o],i=n[o]||1;(t&1<<o||null==a)&&(a=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return a<0&&(a+=s),a=x(0,a,s-1)}function Yo(t,e,n,r,o){var a=e[o],i=n[o]||1;(t&1<<o||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return a<0&&(a+=s),a=i>0?x(0,a,s):x(-1,a,s-1)}function $o(t,e,n){for(var r=n.length,o=0;o<n.length;o++)if(n[o]>1){r=o;break}for(o=r+1;o<n.length;o++)if(e[o]>0||n[o]!==t[o])return !1;return !0}function Qo(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}var Jo=Object.freeze({assertParamsValid:qo,maskToAxes:Ko,computeOutShape:jo,startForAxis:Xo,stopForAxis:Yo,isSliceContinous:$o,computeFlatOffset:Qo});function Zo(t){return C(X(t),(function(){return "The f passed in grad(f) must be a function"})),function(e,n){var r=gn(e,"x","tf.grad",null),o=null!=n?gn(n,"dy","tf.grad"):null;return Lt.tidy((function(){var e=Lt.gradients((function(){return t(r)}),[r],o),n=e.value,a=e.grads;return null!=o&&E(n.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),aa(a),a[0]}))}}function ta(t){return C(X(t),(function(){return "The f passed in grads(f) must be a function"})),function(e,n){C(Array.isArray(e),(function(){return "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"}));var r=mn(e,"args","tf.grads",null),o=null!=n?gn(n,"dy","tf.grads"):null;return Lt.tidy((function(){var e=Lt.gradients((function(){return t.apply(void 0,r)}),r,o),n=e.value,a=e.grads;return null!=o&&E(n.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),aa(a),a}))}}function ea(t){return C(X(t),(function(){return "The f passed in valueAndGrad(f) must be a function"})),function(e,n){C(e instanceof wt,(function(){return "The x passed in valueAndGrad(f)(x) must be a tensor"})),C(null==n||n instanceof wt,(function(){return "The dy passed in valueAndGrad(f)(x, dy) must be a tensor"}));var r=Lt.gradients((function(){return t(e)}),[e],n),o=r.grads,a=r.value;return aa(o),{grad:o[0],value:a}}}function na(t){return C(X(t),(function(){return "The f passed in valueAndGrads(f) must be a function"})),function(e,n){C(Array.isArray(e)&&e.every((function(t){return t instanceof wt})),(function(){return "The args passed in valueAndGrads(f)(args) must be array of tensors"})),C(null==n||n instanceof wt,(function(){return "The dy passed in valueAndGrads(f)(args, dy) must be a tensor"}));var r=Lt.gradients((function(){return t.apply(void 0,e)}),e,n);return null!=n&&E(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),aa(r.grads),r}}function ra(t,e){C(X(t),(function(){return "The f passed in variableGrads(f) must be a function"})),C(null==e||Array.isArray(e)&&e.every((function(t){return t instanceof St})),(function(){return "The varList passed in variableGrads(f, varList) must be an array of variables"}));var n=null!=e;if(!n)for(var r in e=[],Lt.registeredVariables)e.push(Lt.registeredVariables[r]);var o=n?e.filter((function(t){return !t.trainable})):null,a=e.length;C((e=e.filter((function(t){return t.trainable}))).length>0,(function(){return "variableGrads() expects at least one of the input variables to be trainable, but none of the "+a+" variables is trainable."}));var i=Lt.gradients(t,e,null,!0),s=i.value,u=i.grads;C(u.some((function(t){return null!=t})),(function(){return "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),C(0===s.rank,(function(){return "The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+s.rank+" tensor"}));var c={};return e.forEach((function(t,e){null!=u[e]&&(c[t.name]=u[e]);})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:s,grads:c}}function oa(t){return Lt.customGrad(t)}function aa(t){if(t.filter((function(t){return null==t})).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var ia=An({softmax_:function(t,e){void 0===e&&(e=-1);var n=gn(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and dim was "+e);return Lt.runKernelFunc((function(t,r){var o=t.softmax(n,e);return r([o]),o}),{logits:n},(function(t,n){var r=n[0],o=t.mul(r);return {logits:function(){return o.sub(o.sum([e],!0).mul(r))}}}),"Softmax",{dim:e},[],[!0])}}),sa=An({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=gn(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and axis was "+e);return oa((function(t,n){var r=t.max(e,!0),o=t.sub(r),a=o.toFloat().sub(o.exp().sum(e,!0).log());n([a]);return {value:a,gradFunc:function(t,n){var r=n[0].exp();return t.sub(t.sum(e,!0).mul(r))}}}))(n)}});var ua=An({transpose_:function(t,e){var n=gn(t,"x","transpose");if(null==e&&(e=n.shape.map((function(t,e){return e})).reverse()),C(n.rank===e.length,(function(){return "Error in transpose: rank of input "+n.rank+" must match length of perm "+e+"."})),e.forEach((function(t){C(t>=0&&t<n.rank,(function(){return "All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e}));})),n.rank<=1)return n.clone();var r={perm:e};return Lt.runKernelFunc((function(t){return t.transpose(n,e)}),{x:n},null,"Transpose",r)}}),ca=function(){function t(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0;}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,e){this.dataIdsCount++,this.data.set(t,e);},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),la=function(){function t(){}return t.prototype.time=function(t){return ha("time")},t.prototype.read=function(t){return ha("read")},t.prototype.readSync=function(t){return ha("readSync")},t.prototype.numDataIds=function(){return ha("numDataIds")},t.prototype.disposeData=function(t){return ha("disposeData")},t.prototype.write=function(t,e,n){return ha("write")},t.prototype.move=function(t,e,n,r){return ha("move")},t.prototype.memory=function(){return ha("memory")},t.prototype.floatPrecision=function(){return ha("floatPrecision")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,e,n,r){return ha("batchMatMul")},t.prototype.fusedBatchMatMul=function(t){t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights;return ha("fusedBatchMatMul")},t.prototype.slice=function(t,e,n){return ha("slice")},t.prototype.stridedSlice=function(t,e,n,r){return ha("stridedSlice")},t.prototype.unstack=function(t,e){return ha("unstack")},t.prototype.reverse=function(t,e){return ha("reverse")},t.prototype.concat=function(t,e){return ha("concat")},t.prototype.neg=function(t){return ha("neg")},t.prototype.add=function(t,e){return ha("add")},t.prototype.addN=function(t){return ha("addN")},t.prototype.subtract=function(t,e){return ha("subtract")},t.prototype.multiply=function(t,e){return ha("multiply")},t.prototype.realDivide=function(t,e){return ha("realDivide")},t.prototype.floorDiv=function(t,e){return ha("floorDiv")},t.prototype.sum=function(t,e){return ha("sum")},t.prototype.prod=function(t,e){return ha("prod")},t.prototype.unsortedSegmentSum=function(t,e,n){return ha("unsortedSegmentSum")},t.prototype.argMin=function(t,e){return ha("argMin")},t.prototype.argMax=function(t,e){return ha("argMax")},t.prototype.equal=function(t,e){return ha("equal")},t.prototype.notEqual=function(t,e){return ha("notEqual")},t.prototype.less=function(t,e){return ha("less")},t.prototype.lessEqual=function(t,e){return ha("lessEqual")},t.prototype.greater=function(t,e){return ha("greater")},t.prototype.greaterEqual=function(t,e){return ha("greaterEqual")},t.prototype.logicalNot=function(t){return ha("logicalNot")},t.prototype.logicalAnd=function(t,e){return ha("logicalAnd")},t.prototype.logicalOr=function(t,e){return ha("logicalOr")},t.prototype.where=function(t){return ha("where")},t.prototype.select=function(t,e,n){return ha("select")},t.prototype.topk=function(t,e,n){return ha("topk")},t.prototype.min=function(t,e){return ha("min")},t.prototype.minimum=function(t,e){return ha("minimum")},t.prototype.mod=function(t,e){return ha("mod")},t.prototype.max=function(t,e){return ha("max")},t.prototype.maximum=function(t,e){return ha("maximum")},t.prototype.all=function(t,e){return ha("all")},t.prototype.any=function(t,e){return ha("any")},t.prototype.squaredDifference=function(t,e){return ha("squaredDifference")},t.prototype.ceil=function(t){return ha("ceil")},t.prototype.floor=function(t){return ha("floor")},t.prototype.round=function(t){return ha("round")},t.prototype.sign=function(t){return ha("sign")},t.prototype.isNaN=function(t){return ha("isNaN")},t.prototype.isInf=function(t){return ha("isInf")},t.prototype.isFinite=function(t){return ha("isFinite")},t.prototype.pow=function(t,e){return ha("pow")},t.prototype.exp=function(t){return ha("exp")},t.prototype.expm1=function(t){return ha("expm1")},t.prototype.softmax=function(t,e){return ha("softmax")},t.prototype.log=function(t){return ha("log")},t.prototype.log1p=function(t){return ha("log1p")},t.prototype.sqrt=function(t){return ha("sqrt")},t.prototype.rsqrt=function(t){return ha("rsqrt")},t.prototype.square=function(t){return ha("square")},t.prototype.reciprocal=function(t){return ha("reciprocal")},t.prototype.relu=function(t){return ha("relu")},t.prototype.relu6=function(t){return ha("relu6")},t.prototype.prelu=function(t,e){return ha("prelu")},t.prototype.elu=function(t){return ha("elu")},t.prototype.eluDer=function(t,e){return ha("eluDer")},t.prototype.selu=function(t){return ha("selu")},t.prototype.int=function(t){return ha("int")},t.prototype.clip=function(t,e,n){return ha("clip")},t.prototype.abs=function(t){return ha("abs")},t.prototype.complexAbs=function(t){return ha("complexAbs")},t.prototype.sigmoid=function(t){return ha("sigmoid")},t.prototype.softplus=function(t){return ha("softplus")},t.prototype.sin=function(t){return ha("sin")},t.prototype.cos=function(t){return ha("cos")},t.prototype.tan=function(t){return ha("tan")},t.prototype.asin=function(t){return ha("asin")},t.prototype.acos=function(t){return ha("acos")},t.prototype.atan=function(t){return ha("atan")},t.prototype.atan2=function(t,e){return ha("atan2")},t.prototype.sinh=function(t){return ha("sinh")},t.prototype.cosh=function(t){return ha("cosh")},t.prototype.tanh=function(t){return ha("tanh")},t.prototype.asinh=function(t){return ha("asinh")},t.prototype.acosh=function(t){return ha("acosh")},t.prototype.atanh=function(t){return ha("atanh")},t.prototype.erf=function(t){return ha("erf")},t.prototype.step=function(t,e){return ha("step")},t.prototype.fusedConv2d=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return ha("fusedConv2d")},t.prototype.conv2d=function(t,e,n){return ha("conv2d")},t.prototype.conv2dDerInput=function(t,e,n){return ha("conv2dDerInput")},t.prototype.conv2dDerFilter=function(t,e,n){return ha("conv2dDerFilter")},t.prototype.fusedDepthwiseConv2D=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return ha("fusedDepthwiseConv2D")},t.prototype.depthwiseConv2D=function(t,e,n){return ha("depthwiseConv2D")},t.prototype.depthwiseConv2DDerInput=function(t,e,n){return ha("depthwiseConv2DDerInput")},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){return ha("depthwiseConv2DDerFilter")},t.prototype.conv3d=function(t,e,n){return ha("conv3d")},t.prototype.conv3dDerInput=function(t,e,n){return ha("conv3dDerInput")},t.prototype.conv3dDerFilter=function(t,e,n){return ha("conv3dDerFilter")},t.prototype.maxPool=function(t,e){return ha("maxPool")},t.prototype.maxPoolBackprop=function(t,e,n,r){return ha("maxPoolBackprop")},t.prototype.avgPool=function(t,e){return ha("avgPool")},t.prototype.avgPoolBackprop=function(t,e,n){return ha("avgPoolBackprop")},t.prototype.avgPool3d=function(t,e){return ha("avgPool3d")},t.prototype.avgPool3dBackprop=function(t,e,n){return ha("avgPool3dBackprop")},t.prototype.maxPool3d=function(t,e){return ha("maxPool3d")},t.prototype.maxPool3dBackprop=function(t,e,n,r){return ha("maxPool3dBackprop")},t.prototype.reshape=function(t,e){return ha("reshape")},t.prototype.cast=function(t,e){return ha("cast")},t.prototype.tile=function(t,e){return ha("tile")},t.prototype.pad=function(t,e,n){return ha("pad")},t.prototype.transpose=function(t,e){return ha("transpose")},t.prototype.gather=function(t,e,n){return ha("gather")},t.prototype.gatherND=function(t,e){return ha("gatherND")},t.prototype.scatterND=function(t,e,n){return ha("scatterND")},t.prototype.batchToSpaceND=function(t,e,n){return ha("batchToSpaceND")},t.prototype.spaceToBatchND=function(t,e,n){return ha("spaceToBatchND")},t.prototype.resizeBilinear=function(t,e,n,r){return ha("resizeBilinear")},t.prototype.resizeBilinearBackprop=function(t,e,n){return ha("resizeBilinearBackprop")},t.prototype.resizeNearestNeighbor=function(t,e,n,r){return ha("resizeNearestNeighbor")},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){return ha("resizeNearestNeighborBackprop")},t.prototype.batchNormalization=function(t,e,n,r,o,a){return ha("batchNormalization")},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){return ha("localResponseNormalization4D")},t.prototype.LRNGrad=function(t,e,n,r,o,a,i){return ha("LRNGrad")},t.prototype.multinomial=function(t,e,n,r){return ha("multinomial")},t.prototype.oneHot=function(t,e,n,r){return ha("oneHot")},t.prototype.cumsum=function(t,e,n,r){return ha("cumsum")},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return ha("nonMaxSuppression")},t.prototype.fft=function(t){return ha("fft")},t.prototype.ifft=function(t){return ha("ifft")},t.prototype.complex=function(t,e){return ha("complex")},t.prototype.real=function(t){return ha("real")},t.prototype.imag=function(t){return ha("imag")},t.prototype.cropAndResize=function(t,e,n,r,o,a){return ha("cropAndResize")},t.prototype.depthToSpace=function(t,e,n){return ha("depthToSpace")},t.prototype.split=function(t,e,n){return ha("split")},t.prototype.sparseToDense=function(t,e,n,r){return ha("sparseToDense")},t.prototype.diag=function(t){return ha("diag")},t.prototype.fill=function(t,e,n){return ha("fill")},t.prototype.onesLike=function(t){return ha("onesLike")},t.prototype.zerosLike=function(t){return ha("zerosLike")},t.prototype.linspace=function(t,e,n){return ha("linspace")},t.prototype.dispose=function(){return ha("dispose")},t}();function ha(t){throw new Error("'"+t+"' not yet implemented or not found in the registry. Did you forget to import the kernel?")}function fa(t,e,n,r,o,a,i){void 0===i&&(i="channelsLast");var s,u=ma(e),c=u[0],l=u[1];if("channelsLast"===i)s=[c,l,t[3],t[3]];else {if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);s=[c,l,t[1],t[1]];}return pa(t,s,n,r,o,a,!1,i)}function da(t,e,n,r,o,a,i){void 0===i&&(i="NDHWC");var s,u,c=ya(e),l=c[0],h=c[1],f=c[2];if("NDHWC"===i)u="channelsLast",s=[l,h,f,t[4],t[4]];else {if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);u="channelsFirst",s=[l,h,f,t[1],t[1]];}return va(t,s,n,r,o,!1,u,a)}function pa(t,e,n,r,o,a,i,s){void 0===i&&(i=!1),void 0===s&&(s="channelsLast");var u=[-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3];if("channelsLast"===s)c=t[0],l=t[1],h=t[2],f=t[3];else {if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);c=t[0],f=t[1],l=t[2],h=t[3];}var d,p=e[0],v=e[1],g=e[3],m=ma(n),y=m[0],x=m[1],b=ma(r),w=b[0],E=b[1],R=xa(p,w),I=xa(v,E),k=function(t,e,n,r,o,a,i,s){var u,c,l;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var h=function(t,e,n,r,o){null==r&&(r=ga(t,e,n));var a=t[0],i=t[1],s=ba((a-e+2*r)/n+1,o);C(A$1(s),(function(){return "The output # of rows ("+s+") must be an integer. Change the stride and/or zero pad parameters"}));var u=ba((i-e+2*r)/n+1,o);return C(A$1(u),(function(){return "The output # of columns ("+u+") must be an integer. Change the stride and/or zero pad parameters"})),[s,u]}([e,n],a,r,t,s);c=h[0],l=h[1];}else if("same"===t){c=Math.ceil(e/r),l=Math.ceil(n/o);var f=Math.max(0,(c-1)*r+a-e),d=Math.max(0,(l-1)*o+i-n),p=Math.floor(f/2),v=f-p,g=Math.floor(d/2);u={top:p,bottom:v,left:g,right:d-g,type:"SAME"};}else {if("valid"!==t)throw Error("Unknown padding parameter: "+t);u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/r),l=Math.ceil((n-i+1)/o);}return {padInfo:u,outHeight:c,outWidth:l}}(o,l,h,y,x,R,I,a),S=k.padInfo,T=k.outHeight,D=k.outWidth,N=i?g*f:g;return "channelsFirst"===s?d=[c,N,T,D]:"channelsLast"===s&&(d=[c,T,D,N]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:h,inChannels:f,outHeight:T,outWidth:D,outChannels:N,padInfo:S,strideHeight:y,strideWidth:x,filterHeight:p,filterWidth:v,effectiveFilterHeight:R,effectiveFilterWidth:I,dilationHeight:w,dilationWidth:E,inShape:t,outShape:d,filterShape:e}}function va(t,e,n,r,o,a,i,s){void 0===a&&(a=!1),void 0===i&&(i="channelsLast");var u=[-1,-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3],d=u[4];if("channelsLast"===i)c=t[0],l=t[1],h=t[2],f=t[3],d=t[4];else {if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);c=t[0],d=t[1],l=t[2],h=t[3],f=t[4];}var p,v=e[0],g=e[1],m=e[2],y=e[4],x=ya(n),b=x[0],w=x[1],E=x[2],R=ya(r),I=R[0],k=R[1],S=R[2],T=xa(v,I),D=xa(g,k),N=xa(m,S),F=function(t,e,n,r,o,a,i,s,u,c,l){var h,f,d,p;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};var v=function(t,e,n,r,o,a){null==o&&(o=ga(t,e,r));var i=t[0],s=t[1],u=t[2],c=ba((i-e+2*o)/r+1,a);C(A$1(c),(function(){return "The output # of depths ("+c+") must be an integer. Change the stride and/or zero pad parameters"}));var l=ba((s-e+2*o)/r+1,a);C(A$1(l),(function(){return "The output # of rows ("+l+") must be an integer. Change the stride and/or zero pad parameters"}));var h=ba((u-e+2*o)/r+1,a);return C(A$1(h),(function(){return "The output # of columns ("+h+") must be an integer. Change the stride and/or zero pad parameters"})),[c,l,h,n]}([e,n,r,1],s,1,o,t,l);f=v[0],d=v[1],p=v[2];}else if("same"===t){f=Math.ceil(e/o),d=Math.ceil(n/a),p=Math.ceil(r/i);var g=(f-1)*o+s-e,m=(d-1)*a+u-n,y=(p-1)*i+c-r,x=Math.floor(g/2),b=g-x,w=Math.floor(m/2),E=m-w,R=Math.floor(y/2);h={top:w,bottom:E,left:R,right:y-R,front:x,back:b,type:"SAME"};}else {if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((e-s+1)/o),d=Math.ceil((n-u+1)/a),p=Math.ceil((r-c+1)/i);}return {padInfo:h,outDepth:f,outHeight:d,outWidth:p}}(o,l,h,f,b,w,E,T,D,N,s),_=F.padInfo,O=F.outDepth,M=F.outHeight,B=F.outWidth,P=a?y*d:y;return "channelsFirst"===i?p=[c,P,O,M,B]:"channelsLast"===i&&(p=[c,O,M,B,P]),{batchSize:c,dataFormat:i,inDepth:l,inHeight:h,inWidth:f,inChannels:d,outDepth:O,outHeight:M,outWidth:B,outChannels:P,padInfo:_,strideDepth:b,strideHeight:w,strideWidth:E,filterDepth:v,filterHeight:g,filterWidth:m,effectiveFilterDepth:T,effectiveFilterHeight:D,effectiveFilterWidth:N,dilationDepth:I,dilationHeight:k,dilationWidth:S,inShape:t,outShape:p,filterShape:e}}function ga(t,e,n,r){void 0===r&&(r=1);var o=xa(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function ma(t){return "number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function ya(t){return "number"==typeof t?[t,t,t]:t}function xa(t,e){return e<=1?t:t+(t-1)*(e-1)}function ba(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function wa(t){var e=ma(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function Ca(t,e){return wa(t)||wa(e)}function Ea(t){if("NHWC"===t)return "channelsLast";if("NCHW"===t)return "channelsFirst";throw new Error("Unknown dataFormat "+t)}function Ra(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();var r=Gn(t.shape),o=t.toFloat(),a=n.complex(o,r);return r.dispose(),o.dispose(),a}if(!U(t.dtype,e))return Lt.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){var i=n.real(t);a=i.cast(e);return i.dispose(),a}if("int32"===e)return n.int(t);if("bool"===e){var s=On(0,t.dtype);a=n.notEqual(t,s);return s.dispose(),a}throw new Error("Error in Cast: failed to cast "+t.dtype+" to "+e)}function Ia(t,e){return Lt.makeTensorFromDataId(t.dataId,e,t.dtype)}function ka(t,e,n){var r=(e-t)/(n-1),o=tt(n,"float32");o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+r;return Mn(o,"float32")}var Sa=Object.freeze({castTensor:Ra,reshapeTensor:Ia,linspaceImpl:ka,upcastType:Tt,axesAreInnerMostDims:yn,combineLocations:xn,computeOutAndReduceShapes:bn,expandShapeToKeepDim:wn,assertAxesAreInnerMostDims:Cn,getAxesPermutation:En,getUndoAxesPermutation:Rn,getInnerMostAxes:In,getBroadcastDims:Mr,getReductionAxes:Br,assertAndGetBroadcastShape:Pr,assertParamsConsistent:kn,computeOutShape:Sn,computePool2DInfo:fa,computePool3DInfo:da,computeConv2DInfo:pa,computeConv3DInfo:va,computeDefaultPad:ga,tupleValuesAreOne:wa,eitherStridesOrDilationsAreOne:Ca,convertConv2DDataFormat:Ea,PARALLELIZE_THRESHOLD:Wo,computeOptimalWindowSize:Uo});function Aa(t,e){if(t.length!==e.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+e.length+".");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Ta(t,e){return {real:t[2*e],imag:t[2*e+1]}}function Da(t,e,n,r){t[2*r]=e,t[2*r+1]=n;}function Na(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return {real:Math.cos(r),imag:Math.sin(r)}}function Fa(t,e,n){var r=function(t,e,n){return function(t,e,n){var r=0,o=t.length,a=0,i=!1;for(;r<o;){var s=n(e,t[a=r+(o-r>>>1)]);s>0?r=a+1:(o=a,i=!s);}return i?r:-r-1}(t,e,n||_a)}(t,e,n),o=r<0?-(r+1):r;t.splice(o,0,e);}function _a(t,e){return t>e?1:t<e?-1:0}function Oa(t,e,n,r,o){return Ba(t,e,n,r,o,0).selectedIndices}function Ma(t,e,n,r,o,a){var i=Ba(t,e,n,r,o,a);return i.numValidOutputs.dispose(),{selectedIndices:i.selectedIndices,selectedScores:i.selectedScores}}function Ba(t,e,n,r,o,a,i,s){void 0===s&&(s=!1);for(var u=Array.from(e).map((function(t,e){return {score:t,boxIndex:e,suppressBeginIndex:0}})).filter((function(t){return t.score>o})).sort(Wa),c=a>0?-.5/a:0,l=[],h=[];l.length<n&&u.length>0;){var f=u.pop(),d=f.score,p=f.boxIndex,v=f.suppressBeginIndex;if(d<o)break;for(var g=!1,m=l.length-1;m>=v;--m){var y=Pa(t,p,l[m]);if(y>=r){g=!0;break}if(f.score=f.score*La(r,c,y),f.score<=o)break}f.suppressBeginIndex=l.length,g||(f.score===d?(l.push(p),h.push(f.score)):f.score>o&&Fa(u,f,Wa));}var x=l.length;return s&&(l.fill(0,x),h.fill(0,x)),{selectedIndices:Mn(l,"int32"),selectedScores:Mn(h,"float32"),numValidOutputs:On(x,"int32")}}function Pa(t,e,n){var r=t.subarray(4*e,4*e+4),o=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),h=Math.max(o[0],o[2]),f=Math.max(o[1],o[3]),d=(s-a)*(u-i),p=(h-c)*(f-l);if(d<=0||p<=0)return 0;var v=Math.max(a,c),g=Math.max(i,l),m=Math.min(s,h),y=Math.min(u,f),x=Math.max(m-v,0)*Math.max(y-g,0);return x/(d+p-x)}function La(t,e,n){var r=Math.exp(e*n*n);return n<=t?r:0}function Wa(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}function Ua(t,e,n){var r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map((function(e){o[n]=e;var a=t.slice(r,o);return r[n]+=e,a}))}function Va(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var o=er(n,t.dtype);for(r=0;r<o.values.length;++r){for(var a=o.indexToLoc(r),i=new Array(t.rank),s=0;s<i.length;s++)i[s]=a[s]%t.shape[s];var u=t.locToIndex(i);o.values[r]=t.values[u];}return o.toTensor()}function za(t,e,n,r,o){for(var a=e[e.length-1],i=[t.length/a,a],s=i[0],u=i[1],c=B(n,s*r),l=B("int32",s*r),h=0;h<s;h++){for(var f=h*u,d=t.subarray(f,f+u),p=[],v=0;v<d.length;v++)p.push({value:d[v],index:v});p.sort((function(t,e){return e.value-t.value}));var g=h*r,m=c.subarray(g,g+r),y=l.subarray(g,g+r);for(v=0;v<r;v++)m[v]=p[v].value,y[v]=p[v].index;}var x=e.slice();return x[x.length-1]=r,[Fn(c,x,n),Fn(l,x,"int32")]}function Ga(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var o=er(t,"int32"),a=er([n.length,t.length],"int32");for(r=0;r<n.length;r++){var i=o.indexToLoc(n[r]),s=r*t.length;a.values.set(i,s);}return a.toTensor()}var Ha=function(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((function(t,e){return "T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("float v"+t+" = get"+t+"AtOutCoords();");}));var r=this.variableNames.map((function(t){return "v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        float result = "+r+";\n        setOutput(result);\n      }\n    ";},qa=function(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((function(t,e){return "T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("vec4 v"+t+" = get"+t+"AtOutCoords();");}));var r=this.variableNames.map((function(t){return "v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        vec4 result = "+r+";\n        setOutput(result);\n      }\n    ";},Ka=function(t,e,n){this.variableNames=["A"];var r=t.windowSize,o=t.batchSize,a=t.inSize,i=Math.ceil(a/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,i];var s="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+u+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+s+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";};function ja(t,e){return ["x","y","z","w","u","v"].slice(0,e).map((function(e){return t+"."+e}))}function Xa(t,e){return 1===e?[t]:ja(t,e)}function Ya(){var t,e,n,r,o,a,s,u,c,l;return 2===i().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",o="texture",a="outputColor",s="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",c="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",o="texture2D",a="gl_FragColor",s="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",c="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:o,output:a,defineOutput:s,defineSpecialNaN:u,defineSpecialInf:c,defineRound:l}}function $a(t,e,n){void 0===n&&(n="index");var r=$(e);return r.map((function(e,o){return "int "+t[o]+" = "+n+" / "+e+"; "+(o===r.length-1?"int "+t[o+1]+" = "+n+" - "+t[o]+" * "+e:"index -= "+t[o]+" * "+e)+";"})).join("")}function Qa(t){var e=$(t).map((function(t){return t.toString()}));return "\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * "+e[0]+" + coords.y * "+e[1]+" + coords.z;\n  }\n"}var Ja="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function Za(t,e,n,r){var o=[];t.forEach((function(t){var e=k(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push("uniform float "+t.name+(e>1?"["+e+"]":"")+";"):(o.push("uniform sampler2D "+t.name+";"),o.push("uniform int offset"+t.name+";"));}));var a,i,s=o.join("\n"),u=t.map((function(t){return function(t,e,n){void 0===n&&(n=!1);var r="";r+=n?ei(t):ti(t);var o=t.shapeInfo.logicalShape,a=e.logicalShape;o.length<=a.length&&(r+=n?function(t,e){var n,r=t.name,o=r.charAt(0).toUpperCase()+r.slice(1),a="get"+o+"AtOutCoords",i=t.shapeInfo.logicalShape.length,s=e.logicalShape.length,u=Mr(t.shapeInfo.logicalShape,e.logicalShape),c=ui(s),l=s-i,h=["x","y","z","w","u","v"];n=0===i?"":s<2&&u.length>=1?"coords = 0;":u.map((function(t){return "coords."+h[t+l]+" = 0;"})).join("\n");var f="";f=s<2&&i>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return "coords."+h[e+l]})).join(", ");var d="return outputValue;",p=1===k(t.shapeInfo.logicalShape),v=1===k(e.logicalShape);if(1!==i||p||v){if(p&&!v)d=1===s?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){var g=i-2,m=i-1;u.indexOf(g)>-1&&u.indexOf(m)>-1?d="return vec4(outputValue.x);":u.indexOf(g)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(m)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);");}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return "\n    vec4 "+a+"() {\n      "+c+" coords = getOutputCoords();\n      "+n+"\n      vec4 outputValue = get"+o+"("+f+");\n      "+d+"\n    }\n  "}(t,e):function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&s===u&&null==t.shapeInfo.flatOffset&&S(i,a))return "\n      float "+o+"() {\n        return sampleTexture("+n+", resultUV);\n      }\n    ";var c,l=ui(u),h=Mr(t.shapeInfo.logicalShape,e.logicalShape),f=u-s,d=["x","y","z","w","u","v"];c=0===s?"":u<2&&h.length>=1?"coords = 0;":h.map((function(t){return "coords."+d[t+f]+" = 0;"})).join("\n");var p="";p=u<2&&s>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return "coords."+d[e+f]})).join(", ");return "\n    float "+o+"() {\n      "+l+" coords = getOutputCoords();\n      "+c+"\n      return get"+r+"("+p+");\n    }\n  "}(t,e));return r}(t,e,r)})).join("\n"),c=e.texShape,l=Ya(),h=function(t){return "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+t.texture2D+"(textureSampler, uv).r;\n    }\n  "}(l),f=function(t){return t.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+t.varyingFs+" vec2 resultUV;\n    "+t.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    "+t.defineSpecialNaN+"\n    "+t.defineSpecialInf+"\n    "+t.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+ni+"\n    "+ri+"\n    "+oi+"\n  "}(l);return e.isPacked?(a=function(t,e){switch(t.length){case 0:return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+n[1]+".0);\n      }\n    ";if(1===n[1])return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+n[0]+".0);\n      }\n    ";return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return 2 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n    }\n  "}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(S(t,e))return "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ";var r=Math.ceil(t[1]/2);return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=t,r=e,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Math.ceil(n[2]/2),i=a*Math.ceil(n[1]/2),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+o[0]+", "+o[1]+"));\n      int index = resTexRC.x * "+o[1]+" + resTexRC.y;\n\n      int b = index / "+i+";\n      index -= b * "+i+";\n\n      int r = 2 * (index / "+a+");\n      int c = imod(index, "+a+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";default:return function(t,e){for(var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),a=o,i="",s="b, r, c",u=2;u<t.length-1;u++)a*=t[t.length-u-1],i="\n      int b"+u+" = index / "+a+";\n      index -= b"+u+" * "+a+";\n    "+i,s="b"+u+", "+s;return "\n    ivec"+t.length+" getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+i+"\n\n      int b = index / "+o+";\n      index -= b * "+o+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec"+t.length+"("+s+");\n    }\n  "}(t,e)}var n,r,o,a,i;}(e.logicalShape,c),i=function(t){return "\n    void setOutput(vec4 val) {\n      "+t.output+" = val;\n    }\n  "}(l)):(a=function(t,e){switch(t.length){case 0:return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){if(1===e[0])return "\n      int getOutputCoords() {\n        return int(resultUV.x * "+e[1]+".0);\n      }\n    ";if(1===e[1])return "\n      int getOutputCoords() {\n        return int(resultUV.y * "+e[0]+".0);\n      }\n    ";return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return resTexRC.x * "+e[1]+" + resTexRC.y;\n    }\n  "}(0,e);case 2:return function(t,e){if(S(t,e))return "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ";if(1===t[1])return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ";if(1===t[0])return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ";return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=e,r=$a(["r","c","d"],t),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      "+r+"\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(t,e){var n=$a(["r","c","d","d2"],t);return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+n+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,e);case 5:return function(t,e){var n=$a(["r","c","d","d2","d3"],t);return "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+e[0]+",\n                             "+e[1]+"));\n\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(t,e);case 6:return function(t,e){var n=$a(["r","c","d","d2","d3","d4"],t);return "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}var n,r;}(e.logicalShape,c),i=function(t){return "\n    void setOutput(float val) {\n      "+t.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(l)),r&&(f+=ai),[f,h,i,s,a,u,n].join("\n")}function ti(t){var e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return "float "+n+"() {return "+e+";}";var r=t.shapeInfo.texShape,o=r[0],a=r[1];if(1===o&&1===a)return "\n      float "+n+"() {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var i=t.shapeInfo.texShape,s=i[0],u=i[1],c=ii(e);return "\n    float "+n+"() {\n      vec2 uv = uvFromFlat("+s+", "+u+", "+c+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(t);case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return "\n      float "+n+"(int index) {\n        "+si(t)+"\n      }\n    ";var r=t.shapeInfo.texShape,o=r[0],a=r[1];if(1===a&&1===o)return "\n      float "+n+"(int index) {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var i=ii(e);if(1===a)return "\n      float "+n+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+i+") + 0.5) / "+o+".0);\n        return sampleTexture("+e+", uv);\n      }\n    ";if(1===o)return "\n      float "+n+"(int index) {\n        vec2 uv = vec2((float(index + "+i+") + 0.5) / "+a+".0, 0.5);\n        return sampleTexture("+e+", uv);\n      }\n    ";return "\n    float "+n+"(int index) {\n      vec2 uv = uvFromFlat("+o+", "+a+", index + "+i+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape;if(null!=o&&S(e,o)){var a=o[0],i=o[1];return "\n    float "+r+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+i+".0, "+a+".0);\n      return sampleTexture("+n+", uv);\n    }\n  "}var s=M$1(e),u=s.newShape,c=s.keptDims,l=u;if(l.length<e.length){var h=ci(t,l);return "\n      "+ti(h)+"\n      float "+r+"(int row, int col) {\n        return "+r+"("+li(["row","col"],c)+");\n      }\n    "}if(t.shapeInfo.isUniform)return "\n      float "+r+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+e[1]+", 1)));\n        "+si(t)+"\n      }\n    ";var f=o[0],d=o[1],p=ii(n);if(1===d)return "\n    float "+r+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+f+".0);\n      return sampleTexture("+n+", uv);\n    }\n  ";if(1===f)return "\n    float "+r+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+d+".0, 0.5);\n      return sampleTexture("+n+", uv);\n    }\n  ";return "\n  float "+r+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+e[1]+" + col + "+p+";\n    vec2 uv = uvFromFlat("+f+", "+d+", index);\n    return sampleTexture("+n+", uv);\n  }\n"}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e[1]*e[2],a=e[2],i=M$1(e),s=i.newShape,u=i.keptDims,c=s;if(c.length<e.length){var l=ci(t,c);return "\n        "+ti(l)+"\n        float "+r+"(int row, int col, int depth) {\n          return "+r+"("+li(["row","col","depth"],u)+");\n        }\n      "}if(t.shapeInfo.isUniform)return "\n      float "+r+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+o+", "+a+", 1)));\n        "+si(t)+"\n      }\n    ";var h=t.shapeInfo.texShape,f=h[0],d=h[1],p=t.shapeInfo.flatOffset;if(d===o&&null==p)return "\n        float "+r+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+a+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+d+".0, "+f+".0);\n          return sampleTexture("+n+", uv);\n        }\n      ";if(d===a&&null==p)return "\n    float "+r+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+e[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+d+".0, "+f+".0);\n      return sampleTexture("+n+", uv);\n    }\n  ";var v=ii(n);return "\n      float "+r+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+o+" + col * "+a+" + depth + "+v+";\n        vec2 uv = uvFromFlat("+f+", "+d+", index);\n        return sampleTexture("+n+", uv);\n      }\n  "}(t);case 4:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e[3],a=e[2]*o,i=e[1]*a,s=M$1(e),u=s.newShape,c=s.keptDims;if(u.length<e.length){var l=ci(t,u);return "\n      "+ti(l)+"\n      float "+r+"(int row, int col, int depth, int depth2) {\n        return "+r+"("+li(["row","col","depth","depth2"],c)+");\n      }\n    "}if(t.shapeInfo.isUniform)return "\n      float "+r+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+i+", "+a+", "+o+", 1)));\n        "+si(t)+"\n      }\n    ";var h=t.shapeInfo.flatOffset,f=t.shapeInfo.texShape,d=f[0],p=f[1];if(p===i&&null==h)return "\n      float "+r+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+a+", "+o+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+p+".0, "+d+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ";if(p===o&&null==h)return "\n      float "+r+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+e[1]*e[2]+", "+e[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+p+".0, "+d+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ";var v=ii(n);return "\n    float "+r+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+i+" + col * "+a+" +\n          depth * "+o+" + depth2;\n      vec2 uv = uvFromFlat("+d+", "+p+", index + "+v+");\n      return sampleTexture("+n+", uv);\n    }\n  "}(t);case 5:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=e[4],a=e[3]*o,i=e[2]*a,s=e[1]*i,u=M$1(e),c=u.newShape,l=u.keptDims;if(c.length<e.length){var h=ci(t,c);return "\n      "+ti(h)+"\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+r+"("+li(["row","col","depth","depth2","depth3"],l)+");\n      }\n    "}if(t.shapeInfo.isUniform)return "\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+s+", "+i+", "+a+", "+o+")) +\n          depth3;\n        "+si(t)+"\n      }\n    ";var f=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],v=d[1];if(v===s&&null==f)return "\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+i+", "+a+", "+o+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+v+".0, "+p+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ";if(v===o&&null==f)return "\n      float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]+",\n               "+e[2]*e[3]+", "+e[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+v+".0, "+p+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ";var g=ii(n);return "\n    float "+r+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+i+" + depth * "+a+" +\n          depth2 * "+o+" + depth3 + "+g+";\n      vec2 uv = uvFromFlat("+p+", "+v+", index);\n      return sampleTexture("+n+", uv);\n    }\n  "}(t);case 6:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=M$1(e),a=o.newShape,i=o.keptDims;if(a.length<e.length){var s=ci(t,a);return "\n      "+ti(s)+"\n      float "+r+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+r+"("+li(["row","col","depth","depth2","depth3","depth4"],i)+");\n      }\n    "}var u=e[5],c=e[4]*u,l=e[3]*c,h=e[2]*l,f=e[1]*h;if(t.shapeInfo.isUniform)return "\n      float "+r+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+f+", "+h+", "+l+", "+c+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+u+", 1)));\n        "+si(t)+"\n      }\n    ";var d=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,v=p[0],g=p[1];if(g===f&&null==d)return "\n      float "+r+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+h+", "+l+", "+c+", "+u+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+g+".0, "+v+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ";if(g===u&&null==d)return "\n      float "+r+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]*e[4]+",\n               "+e[2]*e[3]*e[4]+",\n               "+e[3]*e[4]+",\n               "+e[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+g+".0, "+v+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ";var m=ii(n);return "\n    float "+r+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+f+" + col * "+h+" + depth * "+l+" +\n          depth2 * "+c+" + depth3 * "+u+" + depth4 + "+m+";\n      vec2 uv = uvFromFlat("+v+", "+g+", index);\n      return sampleTexture("+n+", uv);\n    }\n  "}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function ei(t){var e,n,r;switch(t.shapeInfo.logicalShape.length){case 0:return e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=Ya(),"\n    vec4 "+n+"() {\n      return "+r.texture2D+"("+e+", halfCR);\n    }\n  ";case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=Ya();return "\n    vec4 "+n+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+o[0]+", "+o[1]+", index);\n      return "+a.texture2D+"("+e+", uv);\n    }\n  "}(t);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,a=o[0],i=o[1],s=Ya();if(null!=o&&S(e,o))return "\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+i+".0, "+a+".0);\n\n        return "+s.texture2D+"("+n+", uv);\n      }\n    ";var u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],c=Math.ceil(e[1]/2);return "\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+c+", "+u[0]+", "+u[1]+", row, col);\n      return "+s.texture2D+"("+n+", uv);\n    }\n  "}(t);case 3:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){var i=e.slice(1),s=ci(t,i);return "\n        "+ei(s)+"\n        vec4 "+r+"(int b, int row, int col) {\n          return "+r+"("+li(["b","row","col"],[1,2])+");\n        }\n      "}var u=a[0],c=a[1],l=Math.ceil(e[2]/2),h=l*Math.ceil(e[1]/2),f=Ya();return "\n    vec4 "+r+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+u+", "+c+", "+h+", "+l+", b, row, col);\n      return "+f.texture2D+"("+n+", uv);\n    }\n  "}(t);default:return function(t){for(var e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],s=i[0],u=i[1],c=Math.ceil(e[n-1]/2),l=c*Math.ceil(e[n-2]/2),h="int b, int row, int col",f="b * "+l+" + (row / 2) * "+c+" + (col / 2)",d=2;d<n-1;d++)h="int b"+d+", "+h,l*=e[n-d-1],f="b"+d+" * "+l+" + "+f;var p=Ya();return "\n    vec4 "+o+"("+h+") {\n      int index = "+f+";\n      int texR = index / "+u+";\n      int texC = index - texR * "+u+";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+u+", "+s+");\n      return "+p.texture2D+"("+r+", uv);\n    }\n  "}(t)}}var ni="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ri="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",oi="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ai="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function ii(t){return "offset"+t}function si(t){var e=t.name,n=k(t.shapeInfo.logicalShape);return n<2?"return "+e+";":"\n    for (int i = 0; i < "+n+"; i++) {\n      if (i == index) {\n        return "+e+"[i];\n      }\n    }\n  "}function ui(t){if(t<=1)return "int";if(2===t)return "ivec2";if(3===t)return "ivec3";if(4===t)return "ivec4";if(5===t)return "ivec5";if(6===t)return "ivec6";throw Error("GPU for rank "+t+" is not yet supported")}function ci(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function li(t,e){return e.map((function(e){return t[e]})).join(", ")}var hi=function(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,C(t.length>2,(function(){return "Packed arg"+(n.charAt(0).toUpperCase()+n.slice(1))+" supports only inputs with rank above 2."}));var o=t[t.length-1],a=Math.ceil(o/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");var i,s,u=this.outputShape,c=u.length,l=ui(c),h=Xa("coords",c);if(1===a){var f=ui(s=c+1);i="\n        "+f+" sourceLocR = "+f+"("+h.join()+", 0);\n        ++"+h[c-1]+";\n        "+f+" sourceLocG = "+f+"("+h.join()+", 0);\n        ++"+h[c-2]+";\n        "+f+" sourceLocA = "+f+"("+h.join()+", 0);\n        --"+h[c-1]+";\n        "+f+" sourceLocB = "+f+"("+h.join()+", 0);\n        --"+h[c-2]+";";}else s=c,i="\n        "+l+" sourceLocR = coords;\n        ++"+h[c-1]+";\n        "+l+" sourceLocG = coords;\n        ++"+h[c-2]+";\n        "+l+" sourceLocA = coords;\n        --"+h[c-1]+";\n        "+l+" sourceLocB = coords;\n        --"+h[c-2]+";";var d=["x","y","z","w","u","v"].slice(0,s),p="."+d[s-1],v=d.map((function(t){return "int "+t})),g=Xa("sourceLocR",s-1).concat("inIdx.r"),m=Xa("sourceLocG",s-1).concat("inIdx.g"),y=Xa("sourceLocB",s-1).concat("inIdx.b"),x=Xa("sourceLocA",s-1).concat("inIdx.a"),b="max"===n?"greaterThan":"lessThan",w=r?"":"\n          inIdx = round(vec4(getBestIndicesAChannel("+g.join()+"),\n                             getBestIndicesAChannel("+m.join()+"),\n                             getBestIndicesAChannel("+y.join()+"),\n                             getBestIndicesAChannel("+x.join()+")));",E="vec4(\n            getAChannel("+g.join()+"),\n            hasNextCol ? getAChannel("+m.join()+") : 0.,\n            hasNextRow ? getAChannel("+y.join()+") : 0.,\n            hasNextRow && hasNextCol ? getAChannel("+x.join()+") : 0.)",R=r?"":"\n      float getBestIndicesAChannel("+v.join()+") {\n        return getChannel(getBestIndicesA("+d.join()+"),\n                                          vec2("+d.slice(-2).join()+"));\n      }";this.userCode="\n      float getAChannel("+v.join()+") {\n        return getChannel(getA("+d.join()+"),\n                               vec2("+d.slice(-2).join()+"));\n      }\n      "+R+"\n      void main() {\n        "+l+" coords = getOutputCoords();\n        bool hasNextCol = "+h[c-1]+" < "+(u[c-1]-1)+";\n        bool hasNextRow = "+h[c-2]+" < "+(u[c-2]-1)+";\n        "+i+"\n        ivec4 srcIdx = ivec4(sourceLocR"+p+", sourceLocG"+p+",\n          sourceLocB"+p+", sourceLocA"+p+") * "+e+";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = "+E+";\n\n        for (int i = 0; i < "+e+"; i++) {\n          inIdx = srcIdx;\n          "+w+"\n          vec4 candidate = "+E+";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4("+b+"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ";},fi=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=s-1-t.padInfo.top,l=u-1-t.padInfo.left,h=1/(e*n);this.userCode="\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float avgMultiplier = float("+h+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+";\n            wR += "+a+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+u+";\n            wC+= "+i+") {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},di=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,d=l-1-t.padInfo.front,p=h-1-t.padInfo.top,v=f-1-t.padInfo.left,g=1/(e*n*r);this.userCode="\n      const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n      const float avgMultiplier = float("+g+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          float dyD = float(dyDCorner + wD) / "+o+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+h+";\n              wR += "+u+") {\n            float dyR = float(dyRCorner + wR) / "+a+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+f+";\n                wC += "+c+") {\n              float dyC = float(dyCCorner + wC) / "+i+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},pi=function(t,e,n,r,o,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Pr(t,e),Pr(t,n);var i="0.0";null!=r&&(Pr(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");var s="1.0";null!=o&&(Pr(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+i+";\n        float scale = "+s+";\n        float inv = scale * inversesqrt(variance + float("+a+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ";},vi=function(t,e,n,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Pr(t,e),Pr(t,n);var i="vec4(0.0)";null!=r&&(Pr(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");var s="vec4(1.0)";null!=o&&(Pr(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = "+i+";\n        vec4 scale = "+s+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+a+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ";},gi="return areal * breal - aimag * bimag;",mi="return areal * bimag + aimag * breal;",yi=function(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Pr(e,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+t+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ";},xi="return a + b;",bi="return a - b;",wi="return a * b;",Ci="\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",Ei="return (a < 0.) ? b * a : a;",Ri=function(t,e,n){this.variableNames=["A","B"],this.outputShape=Pr(e,n),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";},Ii="\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",ki="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Si=function(t,e,n,r){void 0===r&&(r=!1),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Pr(e,n);var o=this.outputShape.length,a="";if(r)if(0===o||1===k(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a="\n          "+ui(o)+" coords = getOutputCoords();\n        ",1===o)a+="\n            result.y = (coords + 1) >= "+this.outputShape[0]+" ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";else {var i=Xa("coords",o);a+="\n            bool nextRowOutOfBounds =\n              ("+i[o-2]+" + 1) >= "+this.outputShape[o-2]+";\n            bool nextColOutOfBounds =\n              ("+i[o-1]+" + 1) >= "+this.outputShape[o-1]+";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ";}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        "+a+"\n\n        setOutput(result);\n      }\n    ";},Ai=function(){function t(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    ";}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e);}},t}(),Ti=function(){function t(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    ";}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e);}},t}(),Di=function(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ";},Ni=function(t){this.outputShape=[],this.outputShape=Sn(t,1),this.variableNames=t.map((function(t,e){return "T"+e}));var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=["if (yC < "+e[0]+") setOutput(getT0(yR, yC));"];for(n=1;n<e.length;n++){var o=e[n-1];r.push("else if (yC < "+e[n]+") setOutput(getT"+n+"(yR, yC-"+o+"));");}var a=e.length,i=e[e.length-1];r.push("else setOutput(getT"+a+"(yR, yC-"+i+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    ";},Fi=function(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Sn(t,e);var n=this.outputShape,r=n.length,o=ui(r),a=Xa("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((function(t,e){return "T"+e}));var s=new Array(t.length-1);s[0]=t[0][e];for(var u=1;u<s.length;u++)s[u]=s[u-1]+t[u][e];var c=i[e],l=i.slice(-2),h=i.join(),f="if ("+c+" < "+s[0]+") {\n        return getChannel(\n            getT0("+h+"), vec2("+l.join()+"));\n        }";for(u=1;u<s.length;u++){var d=s[u-1];f+="\n        if ("+c+" < "+s[u]+"  && "+c+" >= "+s[u-1]+") {\n          return getChannel(\n            getT"+u+"("+_i(i,c,d)+"),\n            vec2("+_i(l,c,d)+"));\n        }";}var p=s.length,v=s[s.length-1];f+="\n        return getChannel(\n          getT"+p+"("+_i(i,c,v)+"),\n          vec2("+_i(l,c,v)+"));",this.userCode="\n      float getValue("+i.map((function(t){return "int "+t}))+") {\n        "+f+"\n      }\n\n      void main() {\n        "+o+" coords = getOutputCoords();\n        vec4 result = vec4(getValue("+a+"), 0., 0., 0.);\n\n        "+a[r-1]+" = "+a[r-1]+" + 1;\n        if ("+a[r-1]+" < "+n[r-1]+") {\n          result.g = getValue("+a+");\n        }\n\n        "+a[r-2]+" = "+a[r-2]+" + 1;\n        if ("+a[r-2]+" < "+n[r-2]+") {\n          result.a = getValue("+a+");\n        }\n\n        "+a[r-1]+" = "+a[r-1]+" - 1;\n        if ("+a[r-2]+" < "+n[r-2]+" &&\n            "+a[r-1]+" < "+n[r-1]+") {\n          result.b = getValue("+a+");\n        }\n        setOutput(result);\n      }\n    ";};function _i(t,e,n){var r=t.indexOf(e);return t.map((function(t,e){return e===r?t+" - "+n:t})).join()}var Oi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              if ("+a+") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},Mi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,s=n-1-t.padInfo.left,u=a?1:2,c=a?2:3,l=a?3:1;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords["+l+"];\n\n        ivec2 dyCorner = ivec2(coords["+u+"], coords["+c+"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n\n              if ("+a+") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},Bi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yF = 0; yF < "+t.outDepth+"; yF++) {\n            int xF = wF + yF * "+e+" - "+o+";\n\n            if (xF < 0 || xF >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n              int xR = wR + yR * "+n+" - "+a+";\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+i+";\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},Pi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+s+", "+u+", "+c+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+e+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+o+".0;\n\n          if (dyF < 0.0 || dyF >= "+t.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+e+" - 1 - wF;\n\n          for (int wR = 0; wR < "+n+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+a+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+n+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+i+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},Li=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+a+" + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},Wi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+s+"; dm++) {\n              int d2 = d1 * "+s+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},Ui=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,h=t.filterWidth,f=4*Math.floor(t.inChannels/4),d=t.inChannels%4,p="channelsLast"===t.dataFormat,v=p?1:2,g=p?2:3,m=p?3:1,y="",x="";n&&(y=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",x="result = activation(result);");var b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+y+"\n\n      const ivec2 strides = ivec2("+i+", "+s+");\n      const ivec2 pads = ivec2("+o+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords["+m+"];\n\n        ivec2 xRCCorner =\n            ivec2(coords["+v+"], coords["+g+"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+l+"; wR++) {\n          int xR = xRCorner + wR * "+u+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+h+"; wC++) {\n            int xC = xCCorner + wC * "+c+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+f+"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if ("+p+") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if ("+(1===d)+") {\n\n              if ("+p+") {\n                dotProd +=\n                    getX(batch, xR, xC, "+f+") *\n                    getW(wR, wC, "+f+", d2);\n              } else {\n                dotProd +=\n                    getX(batch, "+f+", xR, xC) *\n                    getW(wR, wC, "+f+", d2);\n              }\n\n            } else if ("+(2===d)+") {\n              vec2 wValues = vec2(\n                getW(wR, wC, "+f+", d2),\n                getW(wR, wC, "+f+" + 1, d2)\n              );\n\n              if ("+p+") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, "+f+"),\n                  getX(batch, xR, xC, "+f+" + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, "+f+", xR, xC),\n                  getX(batch, "+f+" + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if ("+(3===d)+") {\n              vec3 wValues = vec3(\n                getW(wR, wC, "+f+", d2),\n                getW(wR, wC, "+f+" + 1, d2),\n                getW(wR, wC, "+f+" + 2, d2)\n              );\n\n              if ("+p+") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, "+f+"),\n                  getX(batch, xR, xC, "+f+" + 1),\n                  getX(batch, xR, xC, "+f+" + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, "+f+", xR, xC),\n                  getX(batch, "+f+" + 1, xR, xC),\n                  getX(batch, "+f+" + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        "+b+"\n        "+x+"\n        setOutput(result);\n      }\n    ";},Vi=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,h=t.filterHeight,f=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+o+", "+a+", "+i+");\n      const ivec3 pads = ivec3("+e+", "+n+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+l+"; wF++) {\n          int xF = xFCorner + wF * "+s+";\n\n          if (xF < 0 || xF >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+h+"; wR++) {\n            int xR = xRCorner + wR * "+u+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+f+"; wC++) {\n              int xC = xCCorner + wC * "+c+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+d+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===p)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+d+") *\n                  getW(wF, wR, wC, "+d+", d2);\n              } else if ("+(2===p)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===p)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1),\n                  getX(batch, xF, xR, xC, "+d+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2),\n                  getW(wF, wR, wC, "+d+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},zi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.inHeight,a=t.inWidth,i=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=t.outChannels/t.inChannels,v="",g="";n&&(v=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",g="result = activation(result);");var m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+v+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+i+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+p+";\n        int q = d2 - d1 * "+p+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+f+"; wR++) {\n          int xR = xRCorner + wR * "+l+";\n\n          if (xR < 0 || xR >= "+o+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+d+"; wC++) {\n            int xC = xCCorner + wC * "+h+";\n\n            if (xC < 0 || xC >= "+a+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        "+m+"\n        "+g+"\n        setOutput(result);\n      }\n    ";},Gi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var o=t.inHeight,a=t.inWidth,i=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=d,v="int xR; int xC; int xCOffset;",g=0;g<f;g++)for(var m=0;m<d;m++)v+="\n          vec4 xTexelR"+g+"C"+2*m+" = vec4(0.);\n          vec4 wR"+g+"C"+m+" = vec4(0.);\n          vec4 xR"+g+"C"+m+" = vec4(0.);";for(g=0;g<f;g++)for(var y=0;y<p;y++){if(v+="\n          xR = xRCorner + "+g*l+";\n          xC = xCCorner + "+(m=2*y)*h+";\n        ",1===c){if(m<d&&(v+=s%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+a+") {\n                  xTexelR"+g+"C"+m+" = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+a+") {\n                    xTexelR"+g+"C"+m+".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR"+g+"C"+m+" = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+a+") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+a+") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR"+g+"C"+m+" = vec4(previous.zw, xTexelR"+g+"C"+m+".xy);\n                } else {\n                  xR"+g+"C"+m+" = vec4(0, 0, xTexelR"+g+"C"+m+".xy);\n                }\n              ":"\n                if(xR >= 0 && xR < "+o+" && xC >= 0 && xC < "+a+") {\n                  xTexelR"+g+"C"+m+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+g+"C"+m+" = vec4(0.);\n                }\n\n                xR"+g+"C"+m+" = xTexelR"+g+"C"+m+";\n              ",m+1<d)){var x=s%2==0?b(h):h;h%2==0&&s%2==1||h%2!=0&&s%2!=1?(v+="\n                  xCOffset = xC + "+s%2+" + "+x+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+a+") {\n                    xTexelR"+g+"C"+(m+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n                ",h>1&&(v+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < "+o+" &&\n                      xCOffset >= 0 && xCOffset < "+a+") {\n                      xTexelR"+g+"C"+m+" = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR"+g+"C"+m+" = vec4(0.);\n                    }\n                  "),v+="\n                  xR"+g+"C"+(m+1)+" = vec4(\n                    xTexelR"+g+"C"+m+".zw, xTexelR"+g+"C"+(m+2)+".xy);\n                "):v+="\n                  xCOffset = xC + "+x+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+a+") {\n                    xTexelR"+g+"C"+(m+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR"+g+"C"+(m+1)+" = xTexelR"+g+"C"+(m+2)+";\n                ";}}else m<d&&(v+="\n              if(xR >= 0 && xR < "+o+") {\n            ",s%2==1?(v+="\n                xCOffset = xC + 1 - "+c+";\n                if(xCOffset >= 0 && xCOffset < "+a+") {\n                  xTexelR"+g+"C"+m+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+g+"C"+m+" = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < "+a+") {\n                  xTexelR"+g+"C"+(m+2)+" = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR"+g+"C"+(m+2)+" = vec4(0.);\n                }\n\n                xR"+g+"C"+m+" = vec4(\n                  xTexelR"+g+"C"+m+".zw, xTexelR"+g+"C"+(m+2)+".zw);\n              ",m+1<d&&(v+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + "+c+";\n                  if(xCOffset >= 0 && xCOffset < "+a+") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR"+g+"C"+(m+1)+" = vec4(xTexelR"+g+"C"+(m+2)+".xy, final.xy);\n                ")):(v+="\n                if(xC >= 0 && xC < "+a+") {\n                  xTexelR"+g+"C"+m+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+g+"C"+m+" = vec4(0.);\n                }\n\n                xCOffset = xC + "+c+";\n                if(xCOffset >= 0 && xCOffset < "+a+") {\n                  xTexelR"+g+"C"+(m+2)+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+g+"C"+(m+2)+" = vec4(0.);\n                }\n\n                xR"+g+"C"+m+" = vec4(\n                  xTexelR"+g+"C"+m+".xy, xTexelR"+g+"C"+(m+2)+".xy);\n              ",m+1<d&&(v+="\n                  xR"+g+"C"+(m+1)+" = vec4(\n                    xTexelR"+g+"C"+m+".zw, xTexelR"+g+"C"+(m+2)+".zw);\n                ")),v+="}");m<d&&(v+="\n            vec4 wTexelR"+g+"C"+m+" = getW("+g+", "+m+", d1, q);\n            wR"+g+"C"+m+" = vec4(wTexelR"+g+"C"+m+".xz, wTexelR"+g+"C"+m+".xz);\n          ",m+1<d&&(v+="\n              vec4 wTexelR"+g+"C"+(m+1)+" = getW("+g+", "+(m+1)+", d1, q);\n              wR"+g+"C"+(m+1)+" =\n                vec4(wTexelR"+g+"C"+(m+1)+".xz, wTexelR"+g+"C"+(m+1)+".xz);"));}for(g=0;g<f;g++)for(m=0;m<d;m++)v+="dotProd += xR"+g+"C"+m+" * wR"+g+"C"+m+";";var w="",C="";n&&(w=r?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"vec4 activation(vec4 x) {\n          "+n+"\n        }",C="result = activation(result);");var E=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+w+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+i+", "+s+");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        "+v+"\n\n        vec4 result = dotProd;\n        "+E+"\n        "+C+"\n        setOutput(result);\n      }\n    ";},Hi=function(t,e,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var a=t[0],i=t[1],s=t[2],u=t[3],c=e[0],l=n[0],h=n[1];this.outputShape=[c,l,h,u];var f="bilinear"===r?1:0,d=[i-1+".0",s-1+".0"],p=d[0],v=d[1],g=l>1?[""+(i-1)/(l-1),"(y2-y1) * height_ratio","y1*"+p+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+p],m=g[0],y=g[1],x=g[2],b=h>1?[""+(s-1)/(h-1),"(x2-x1) * width_ratio","x1*"+v+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+v],w=b[0],C=b[1],E=b[2];this.userCode="\n      const float height_ratio = float("+m+");\n      const float width_ratio = float("+w+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+a+") {\n          return;\n        }\n\n        float height_scale = "+y+";\n        float width_scale = "+C+";\n\n        float in_y = "+x+";\n        if( in_y < 0.0 || in_y > "+p+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n        float in_x = "+E+";\n        if( in_x < 0.0 || in_x > "+v+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if("+f+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ";},qi=function(t,e,n){this.variableNames=["x"],this.outputShape=t;var r=t.length,o=t[t.length-1],a=n?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(n?"return "+o+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+ui(r)+" coords = getOutputCoords();\n        int end = "+Ki(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+o+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+a+" end) {\n            continue;\n          }\n          if (idx == end && "+e+") {\n            continue;\n          }\n          "+Ki(r,"coords")+" = idx;\n          val += getX("+function(t,e){if(1===t)return ""+e;if(2===t)return e+".x, "+e+".y";if(3===t)return e+".x, "+e+".y, "+e+".z";if(4===t)return e+".x, "+e+".y, "+e+".z, "+e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    ";};function Ki(t,e){if(1===t)return ""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var ji=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=Yt(t),n=Ya();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+$a(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        "+n.output+" = result;\n      }\n    ";},Xi=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Vt.DENSE;var e=Yt(t),n=Ya();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+$a(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        "+n.output+" = result;\n      }\n    ";},Yi=function(){function t(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+e+";\n      int offset_h = imod(h, "+e+");\n      int in_w = w / "+e+";\n      int offset_w = imod(w, "+e+");\n      int offset_d = (offset_h * "+e+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  ";}return t.prototype.getHeightCoordString=function(){return "NHWC"===this.dataFormat?"coords[1]":"coords[2]"},t.prototype.getWidthCoordString=function(){return "NHWC"===this.dataFormat?"coords[2]":"coords[3]"},t.prototype.getDepthCoordString=function(){return "NHWC"===this.dataFormat?"coords[3]":"coords[1]"},t.prototype.getOutputDepthSize=function(){return "NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return "NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},t}(),$i=function(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    ";},Qi=function(t){this.variableNames=["A"],this.outTexUsage=zt.DOWNLOAD;var e=Ya();this.outputShape=t,this.userCode="\n      "+Ja+"\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+e.output+" = encode_float(x);\n      }\n    ";},Ji=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=zt.DOWNLOAD;var e=Ya();this.outputShape=t,this.userCode="\n      "+Ja+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        "+e.output+" = encode_float(x);\n      }\n    ";},Zi=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"];var r=Ya(),o=e[0],a=e[1];this.outputShape=t;var i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode="\n      "+Qa(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / "+a+";\n        int c = imod(flatIndex, "+a+");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2("+a+".0, "+o+".0);\n        vec4 values = "+r.texture2D+"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        "+r.output+" = vec4("+i+", 0., 0., 0.);\n      }\n    ";},ts=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var r=Ya(),o=e[0],a=e[1];this.outputShape=t;var i="",s="result";n&&(s="floor(result * 255. + 0.5)");for(var u=0;u<=1;u++)for(var c=0;c<=1;c++){var l=2*u+c;i+="\n          localCoords = coords;\n          if(localCoords[2] + "+c+" < "+t[2]+") {\n            localCoords[2] += "+c+";\n            if(localCoords[1] + "+u+" < "+t[1]+") {\n              localCoords[1] += "+u+";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / "+a+";\n              c = imod(flatIndex, "+a+");\n              uv = (vec2(c, r) + halfCR) / vec2("+a+".0, "+o+".0);\n              values = "+r.texture2D+"(A, uv);\n\n              if(offset == 0) {\n                result["+l+"] = values[0];\n              } else if(offset == 1) {\n                result["+l+"] = values[1];\n              } else if(offset == 2) {\n                result["+l+"] = values[2];\n              } else {\n                result["+l+"] = values[3];\n              }\n            }\n          }\n        ";}this.userCode="\n      "+Qa(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        "+i+"\n\n        "+r.output+" = "+s+";\n      }\n    ";},es="return real * expR - imag * expI;",ns="return real * expI + imag * expR;",rs=function(t,e,n){this.variableNames=["real","imag"];var r=e[1];this.outputShape=e;var o=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+o+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+t+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+a+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";},os$3=function(){function t(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ";}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.valueLoc&&(e.valueLoc=n.getUniformLocationNoThrow(r,"value")),n.gl.uniform1f(e.valueLoc,t);}},t}(),as=function(t,e,n){this.variableNames=["A","indices"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var o=ui(this.rank),a=function(t,e){var n=t.length;if(n>4)throw Error("Gather for rank "+n+" is not yet supported");if(1===n)return "int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],a=0;a<t.length;a++)a===e?o.push("int(getIndices("+r[a]+"))"):o.push(""+r[a]);return o.join()}(t,n);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+a+"));\n      }\n    ";};var is=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;var r=ui(e.length),o=ui(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+o+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+a+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";};function ss(t,e){var n=Ya();return oe(t,e,n.version+"\n    precision highp float;\n    "+n.attribute+" vec3 clipSpacePos;\n    "+n.attribute+" vec2 uv;\n    "+n.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function us(t,e){return fe(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function cs(t,e){return de(t,e,new Uint16Array([0,1,2,2,1,3]))}function ls(t,e,n,r,o,a,i){ve(n,r);var s=pe(t,e),u=t.TEXTURE_2D;return Jt(t,e,(function(){return t.bindTexture(u,s)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)})),Jt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)})),Jt(t,e,(function(){return t.texImage2D(u,0,o,n,r,0,a,i,null)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),s}function hs(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function fs$1(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function ds(t,e,n,r,o){var a=Xt(n,r);return ls(t,e,a[0],a[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function ps(t,e,n,r,o){var a=$t(n,r);return ls(t,e,a[0],a[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function vs(t,e,n,r,o){var a=$t(n,r);return ls(t,e,a[0],a[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function gs(t,e,n,r){return Jt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),me(t,e,n,"clipSpacePos",r,3,20,0)&&me(t,e,n,"uv",r,2,20,12)}function ms(t,e,n,r,o,a,i){var s,u,c;Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),a instanceof Uint8Array?(s=new Uint8Array(r*o*4),u=t.UNSIGNED_BYTE,c=t.RGBA):(s=new Float32Array(r*o*4),u=t.FLOAT,c=i.internalFormatPackedFloat),s.set(a),Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,o,0,t.RGBA,u,s)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}));}function ys(t,e,n,r){Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),r.data instanceof Uint8Array?Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):Jt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),Jt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}));}function xs(t,e,n,r,o){var a=t.createBuffer();Jt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,a)}));var i=16*n*r;return Jt(t,e,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ)})),Jt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)})),Jt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),a}function bs(t,e,n){var r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function ws(t,e,n,r,o){var a=Xt(n,r),i=a[0],s=a[1],u=new Uint8Array(n*r*4);return Jt(t,e,(function(){return t.readPixels(0,0,i,s,o.downloadTextureFormat,t.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function Cs(t,e,n,r,o,a,i,s){var u=t,c=new Float32Array(function(t,e){var n=$t(t,e);return n[0]*n[1]*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function Es(t,e,n,r){var o=new Float32Array(n*r*4);return Jt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,o)})),o}var Rs=Object.freeze({createVertexShader:ss,createVertexBuffer:us,createIndexBuffer:cs,createFloat32MatrixTexture:hs,createFloat16MatrixTexture:fs$1,createUnsignedBytesMatrixTexture:ds,createPackedMatrixTexture:ps,createFloat16PackedMatrixTexture:vs,bindVertexProgramAttributeStreams:gs,uploadDenseMatrixToTexture:ms,uploadPixelDataToTexture:ys,createBufferFromOutputTexture:xs,downloadFloat32MatrixFromBuffer:bs,downloadByteEncodedFloatMatrixFromOutputTexture:ws,downloadPackedMatrixFromBuffer:Cs,downloadMatrixFromPackedOutputTexture:Es}),Is=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var e=i().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,Kt(e,t)):this.gl=jt(e);var n="WEBGL_color_buffer_float";if(1===i().getNumber("WEBGL_VERSION")){if(this.textureFloatExtension=re(this.gl,this.debug,"OES_texture_float"),Pe(this.gl,"OES_texture_half_float"))this.textureHalfFloatExtension=re(this.gl,this.debug,"OES_texture_half_float");else if(i().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Pe(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=re(this.gl,this.debug,"EXT_color_buffer_half_float");else if(i().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Pe(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else {if(!Pe(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float");}this.vertexBuffer=us(this.gl,this.debug),this.indexBuffer=cs(this.gl,this.debug),this.framebuffer=ge(this.gl,this.debug),this.textureConfig=Qt(this.gl,this.textureHalfFloatExtension);}return Object.defineProperty(t.prototype,"debug",{get:function(){return i().getBool("DEBUG")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var e=this.gl;Jt(e,this.debug,(function(){return e.finish()})),Jt(e,this.debug,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),Jt(e,this.debug,(function(){return e.deleteFramebuffer(t.framebuffer)})),Jt(e,this.debug,(function(){return e.bindBuffer(e.ARRAY_BUFFER,null)})),Jt(e,this.debug,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)})),Jt(e,this.debug,(function(){return e.deleteBuffer(t.indexBuffer)})),this.disposed=!0;}},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),hs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),fs$1(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),ds(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),ys(this.gl,this.debug,t,e);},t.prototype.uploadDenseMatrixToTexture=function(t,e,n,r){this.throwIfDisposed(),ms(this.gl,this.debug,t,e,n,r,this.textureConfig);},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),vs(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),ps(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(Ee(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Jt(this.gl,this.debug,(function(){return e.gl.deleteTexture(t)}));},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return ws(r.gl,r.debug,e,n,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,o,a){return Cs(this.gl,t,0,0,0,o,a,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e){return bs(this.gl,t,e)},t.prototype.createBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=xs(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(i().getBool("WEBGL_FENCE_API_ENABLED")){var o=t,a=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=o.clientWaitSync(a,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},e=a;}else i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):n=function(){return !0};return {query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return Es(r.gl,r.debug,e,n)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=ae(e,this.debug,t),r=ss(e,this.debug),o=ce(e,this.debug);return Jt(e,this.debug,(function(){return e.attachShader(o,r)})),Jt(e,this.debug,(function(){return e.attachShader(o,n)})),le(e,this.debug,o),this.debug&&he(e,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=gs(e,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Jt(this.gl,this.debug,(function(){return e.gl.deleteProgram(t)}));},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&he(this.gl,this.debug,this.program),Jt(this.gl,this.debug,(function(){return e.gl.useProgram(t)}));},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?xe(this.gl,this.debug,t,e):be(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return n.gl.getAttribLocation(t,e)}))},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),we(this.gl,this.debug,this.program,t,e,n);},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e);},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=$t(e,n),o=r[0],a=r[1];this.setOutputMatrixTextureDriver(t,o,a);},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e);},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&he(this.gl,this.debug,this.program),Re(this.gl);},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),Jt(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}));},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return t.gl.finish()}));},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=re(this.gl,this.debug,2===i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT);}else {var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT);}},t.prototype.waitForQueryAndGetTime=function(t){return n(this,void 0,void 0,(function(){var e=this;return r(this,(function(n){switch(n.label){case 0:return [4,F((function(){return e.disposed||e.isQueryAvailable(t,i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))];case 1:return n.sent(),[2,this.getQueryTime(t,i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}}))}))},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return !0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise((function(n){e.addItemToPoll((function(){return t.isFencePassed()}),(function(){return n()}));}))},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),e=0;e<=t;++e){(0, this.itemsToPoll[e].resolveFn)();}this.itemsToPoll=this.itemsToPoll.slice(t+1);},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||F((function(){return n.pollItems(),0===n.itemsToPoll.length}));},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),Ce(this.gl,this.debug,t,this.framebuffer),this.debug&&Re(this.gl);},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(Ce(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&Re(this.gl)):Ee(this.gl,this.debug,this.framebuffer);},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;Ce(r,this.debug,t,this.framebuffer),this.debug&&Re(r),this.outputTexture=t,Jt(r,this.debug,(function(){return r.viewport(0,0,e,n)})),Jt(r,this.debug,(function(){return r.scissor(0,0,e,n)}));},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var o=this;this.throwIfDisposed(),Jt(this.gl,this.debug,(function(){return o.gl.scissor(t,e,n,r)}));},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}();function ks(t,e){if(t.length!==e.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+e.length+" inputs");t.forEach((function(t,n){var r=t.logicalShape,o=e[n],a=o.shape;if(!S(r,a))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+a+" must match");if(!t.isUniform||!o.isUniform){var i=t.texShape,s=o.isUniform?null:o.texData.texShape;if(!S(i,s))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+i+" and "+s+" must match")}}));}var Ss=function(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var r=n.filterWidth,o=n.inChannels,a=n.strideWidth,i=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,h=n.dataFormat,f=s.left,d=s.top,p=o*r,v=Ya(),g="channelsLast"===h,m=g?0:1,y=g?1:2,x="",b=0;b<=1;b++)for(var w=0;w<=1;w++)x+="\n          blockIndex = rc.y + "+w+";\n          pos = rc.x + "+b+";\n\n          if(blockIndex < "+t[1]+" && pos < "+t[0]+") {\n            offsetY = int(blockIndex / ("+u+")) * "+i+" - "+d+";\n            d0 = offsetY + "+l+" * (pos / "+p+");\n\n            if(d0 < "+e[m]+" && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), "+u+".) * "+a+". - "+f+".);\n              d1 = offsetX + "+c+" * (int(mod(float(pos), "+p+".) / "+o+".));\n\n              if(d1 < "+e[y]+" && d1 >= 0) {\n\n                ch = int(mod(float(pos), "+o+".));\n\n                if ("+g+") {\n                  innerDims = vec2(d1, ch);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        "+x+"\n\n        "+v.output+" = result;\n      }\n    ";},As=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[];var a,i=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";a=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+i+"; j <= "+i+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+s+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+a+";\n        setOutput(val);\n      }\n    ";},Ts=function(t,e,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+e+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+e+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+n+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+o+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+o+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ";},Ds=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var a,i=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";a=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < "+this.outputShape[3]+";\n        bool hasNextRow = c < "+this.outputShape[2]+";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - "+i+";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - "+i+"; j <= "+i+"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2("+s+"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * "+a+";\n        setOutput(result);\n      }\n    ";},Ns=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=o-1-t.padInfo.top,s=a-1-t.padInfo.left,u=o*a-1;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+o+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+e+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+a+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+n+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+u+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+a+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},Fs=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,s=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=s-1-t.padInfo.front,h=u-1-t.padInfo.top,f=c-1-t.padInfo.left,d=s*u*c-1;this.userCode="\n      const ivec3 pads = ivec3("+l+", "+h+", "+f+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+s+";\n           wD += "+o+") {\n          float dyD = float(dyDCorner + wD) / "+e+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+a+") {\n            float dyR = float(dyRCorner + wR) / "+n+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+i+") {\n              float dyC = float(dyCCorner + wC) / "+r+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = "+d+" -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * "+u+" * "+c+" +\n                  wR * "+c+" + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";},_s=function(t,e,n,r,o,a,i){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===a&&(a=null),void 0===i&&(i=!1),this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;var s=n?t[1]:t[2],u=Math.ceil(s/2),c=n?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],d="",p="";a&&(d=i?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+a+"\n        }":"vec4 activation(vec4 x) {\n          "+a+"\n        }",p="result = activation(result);");var v=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+d+"\n\n      const float sharedDimension = "+u+".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+u+"; i++) {\n          vec4 a = getMatrixA(rc.x, "+c+");\n          vec4 b = getMatrixB(rc.x, "+l+");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += ("+h[0]+" * "+f[0]+");\n          result += ("+h[1]+" * "+f[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        "+v+"\n\n        "+p+"\n\n        setOutput(result);\n      }\n    ";},Os=function(){function t(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(e-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(e-1)+"));\n      }\n    ";}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,"seed")),n.gl.uniform1f(e.seedLoc,t);}},t}(),Ms=function(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+n+"),\n                      float(index == coords.y)));\n      }\n    ";},Bs=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else {var n=Xa("rc",e),r=ui(e),o=function(t,e,n){if(1===t)return "rc > "+e[0];for(var r="",o=t-2;o<t;o++)r+=n[o]+" >= "+e[o],o<t-1&&(r+="||");return r}(e,t,n),a=function(t,e,n,r){if(1===t)return "";var o=r.slice(-2);return "\n    int r = "+o[0]+";\n    int c = "+o[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+e+";\n    bool rEdge = rp1 >= "+n+";\n  "}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var a=(0===r?"r":"rp1")+", "+(0===o?"c":"cp1"),i=2;i<t;i++)a=e[e.length-1-i]+","+a;n.push(a);}return n}(n,e);return 1===n?"getA(rc),\n            rc + 1 >= "+t[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(t,n);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+o+") {\n            setOutput(vec4(0));\n          } else {\n            "+a+"\n\n            setOutput(vec4("+i+"));\n          }\n        }\n      ";}};var Ps=function(t,e,n){this.variableNames=["x"],this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));var r=t.length,o=ui(r),a=e.map((function(t){return t[0]})).join(","),i=e.map((function(e,n){return e[0]+t[n]})).join(","),s=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+o+" start = "+o+"("+a+");\n      "+o+" end = "+o+"("+i+");\n\n      void main() {\n        "+o+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+n+"));\n        } else {\n          "+o+" coords = outC - start;\n          setOutput(getX("+s+"));\n        }\n      }\n    ":"\n        int start = "+a+";\n        int end = "+i+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+n+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";},Ls=function(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));for(var r=t.length,o=ui(r),a=e.map((function(t){return t[0]})).join(","),i=e.map((function(e,n){return e[0]+t[n]})).join(","),s=Xa("rc",r),u=Xa("source",r),c=s[r-1]+" < "+this.outputShape[r-1],l=1===r?"source":"vec2("+u.slice(-2).join()+")",h=[o+" rc = outputLoc;",s[r-1]+" += 1;\n       if("+c+") {\n      ",1===r?"":"}\n       rc = outputLoc;\n       "+s[r-2]+" += 1;\n       if("+s[r-2]+" < "+this.outputShape[r-2]+") {",1===r?"":"  "+s[r-1]+" += 1;\n         if("+c+") {"],f=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",d="",p=0,v=1===r?2:4;p<v;p++)d+="\n        "+h[p]+"\n        if ("+f+") {\n          result["+p+"] = float("+n+");\n        } else {\n          "+o+" source = rc - start;\n          result["+p+"] = getChannel(getX("+u.join()+"), "+l+");\n        }\n      ";d+=1===r?"} ":"}}",this.userCode="\n      const "+o+" start = "+o+"("+a+");\n      const "+o+" end = "+o+"("+i+");\n\n      void main() {\n        "+o+" outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        "+d+"\n        setOutput(result);\n      }\n    ";},Ws=function(t,e,n,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var a=t.filterWidth,i=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterHeight,h=t.effectiveFilterWidth,f=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;var p="avg"===e,v="((batch  * "+t.inHeight+" + xR) * "+t.inWidth+" + xC) * "+t.inChannels+" + d",g="(xR * "+t.inWidth+" + xC) * "+t.inChannels+" + d",m="0.0";if(p||(m="-1.0 / 1e-20"),n)this.userCode="\n        const ivec2 strides = ivec2("+i+", "+s+");\n        const ivec2 pads = ivec2("+f+", "+d+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+l+";\n              wR += "+u+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+h+";\n                wC += "+c+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = "+(r?o?v:g:"wR * "+h+" + wC")+";\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else {var y=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(y="avgValue / count");var x=4*Math.floor(a/4),b=a%4,w="\n      if ("+p+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+i+", "+s+");\n      const ivec2 pads = ivec2("+f+", "+d+");\n      const float initializationValue = "+m+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+m+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+l+";\n            wR += "+u+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+x+"; wC += 4) {\n            int xC = xCCorner + wC * "+c+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+c+", d),\n              getValue(batch, xR, xC + 2 * "+c+", d),\n              getValue(batch, xR, xC + 3 * "+c+", d)\n            );\n\n            "+w+"\n          }\n\n          int xC = xCCorner + "+x+";\n          if ("+(1===b)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+w+"\n          } else if ("+(2===b)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+c+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+w+"\n          } else if ("+(3===b)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+c+", d),\n              getValue(batch, xR, xC + 2 * "+c+", d),\n              initializationValue\n            );\n\n            "+w+"\n          }\n        }\n        setOutput("+y+");\n      }\n    ";}},Us=function(t,e,n,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var a=t.filterWidth,i=t.strideDepth,s=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,l=t.dilationHeight,h=t.dilationWidth,f=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth,v=t.padInfo.front,g=t.padInfo.top,m=t.padInfo.left;this.outputShape=t.outShape;var y="avg"===e,x="0.0";if(y||(x="-1.0 / 1e-20"),n)this.userCode="\n        const ivec3 strides =\n            ivec3("+i+", "+s+", "+u+");\n        const ivec3 pads = ivec3("+v+", "+g+", "+m+");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < "+f+";\n              wD += "+c+") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int wR = 0; wR < "+d+";\n                wR += "+l+") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int wC = 0; wC < "+p+";\n                  wC += "+h+") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = "+(r?o?"(((batch * "+t.inDepth+" + xD) * "+t.inHeight+" + xR) * "+t.inWidth+" + xC) * "+t.inChannels+" + ch":"((xD * "+t.inHeight+" + xR) * "+t.inWidth+" + xC) * "+t.inChannels+" + ch":"wD * "+d+" * "+p+" +\n                      wR * "+p+" + wC")+";\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else {var b=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(b="avgValue / count");var w=4*Math.floor(a/4),C=a%4,E="\n      if ("+y+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec3 strides =\n        ivec3("+i+", "+s+", "+u+");\n      const ivec3 pads = ivec3("+v+", "+g+", "+m+");\n      const float initializationValue = "+x+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+x+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < "+f+";\n            wD += "+c+") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+d+";\n            wR += "+l+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+w+"; wC += 4) {\n              int xC = xCCorner + wC * "+h+";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+h+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+h+", ch),\n                getValue(batch, xD, xR, xC + 3 * "+h+", ch)\n              );\n\n              "+E+"\n            }\n\n            int xC = xCCorner + "+w+";\n            if ("+(1===C)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              "+E+"\n            } else if ("+(2===C)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+h+", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              "+E+"\n            } else if ("+(3===C)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+h+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+h+", ch),\n                initializationValue\n              );\n\n              "+E+"\n            }\n          }\n          setOutput("+b+");\n        }\n      }\n    ";}},Vs=function(t,e){this.variableNames=["x"];var n=t.windowSize,r=t.batchSize,o=t.inSize,a=Math.ceil(o/n);this.outputShape=[r,a];var i="0.0",s="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",s="min"):"max"===e&&(i="-1.0 / 1e-20",s="max");var u=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");var c=4*Math.floor(n/4),l=n%4,h="\n      if ("+("sum"===e)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===e)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+s+"(values, minMaxValue);\n      }\n    ",f="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",f="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",f="bvec4");var d="";o%n>0&&(d="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+i+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+d+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+n+";\n\n        vec4 minMaxValue = vec4("+i+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+h+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+h+"\n        } else if ("+(2===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+h+"\n        } else if ("+(3===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+h+"\n        }\n        setOutput("+u+");\n      }\n    ";},zs=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var n="",r=0;r<4;r++){var o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),n+="\n        "+o+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      ";}this.userCode="\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+$a(["r","c","d"],e)+"\n      return ivec3(r, c, d);\n    }\n  \n      "+Qa(t)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+t[1]+";\n        int cols = "+t[2]+";\n\n        "+n+"\n\n        setOutput(result);\n      }\n    ";};var Gs=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],a=r[2],i=t.shape,s=i[1],u=i[2],c=[n&&s>1?o-1:o,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+h+");\n        const float widthScale = float("+f+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+g+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(o-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(a-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";},Hs=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+a+".0, "+i+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";},qs=function(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+",\n          "+u[1]/c[1]+");\n      const vec3 inputShapeRC = vec3("+a+".0, "+i+".0,\n                                     "+i+".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < "+(s-1)+";\n        bool hasNextRow = coords.z < "+(n-1)+";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ";},Ks=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],a=r[2],i=t.shape,s=i[1],u=i[2],c=[n&&s>1?o-1:o,n&&u>1?a-1:a],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+h+");\n        const float widthScale = float("+f+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+g+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+c[0]+") *\n                (float(dyR) / float("+l[0]+"));\n\n            float sourceFracCol =\n                float("+c[1]+") *\n                  (float(dyC) / float("+l[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+o+") - 1),\n                "+n+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+a+") - 1),\n                "+n+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";},js=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],a=t[1],i=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?a-1:a,r&&n>1?i-1:i],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+a+".0, "+i+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+l+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";},Xs=function(t,e){this.variableNames=["x"];var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");if(this.outputShape=t,1!==n){var r=t.map((function(n,r){return function(n){return -1!==e.indexOf(n)&&1!==t[n]?t[n]+" - coords["+n+"] - 1":"coords["+n+"]"}(r)})).join(","),o=ui(n);this.userCode="\n      void main() {\n        "+o+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    ";}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      ";},Ys=function(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");this.outputShape=t;var r=Xa("rc",n),o=r[n-1]+" + 1 < "+this.outputShape[n-1],a=r[n-2]+" + 1 < "+this.outputShape[n-2],i=ui(n);function s(n){var r=t.map((function(r,o){return function(n,r){return -1!==e.indexOf(n)&&1!==t[n]?t[n]+" - "+r[n]+" - 1":""+r[n]}(o,n)}));return "getChannel(getX("+r.join(",")+"), vec2("+r.slice(-2).join(",")+"))"}this.userCode=1===n?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX("+t[0]+" - rc - 1),\n            "+t[0]+" - rc - 1);\n          if("+o+"){\n              result.g = getChannel(getX("+t[0]+" - (rc  + 1) - 1),\n                "+t[0]+" - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ":"\n        void main() {\n          "+i+" rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = "+function(t){return s(t)}(r.slice())+";\n          if("+o+"){\n            result.g = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",s(t)}(r.slice())+";\n          }\n          if("+a+") {\n            result.b = "+function(t){return t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            if("+o+") {\n              result.a = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            }\n          }\n          setOutput(result);\n        }\n    ";},$s=function(t,e,n,r,o,a,i){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;var s=ui(o.length),u=ui(a.length),c="";1===n?c="i":2===n&&(c="i, j");var l="getIndices("+c+")",h="";1===r?h="i":2===r&&(h="i, coords[1]");var f="getUpdates("+h+")",d=e>1?"strides[j]":"strides";this.userCode="\n        "+s+" strides = "+s+"("+o+");\n\n        void main() {\n          "+u+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+t+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+e+"; j++) {\n              int index = round("+l+");\n              flattenedIndex += index * "+d+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+f+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";},Qs=function(t,e){this.variableNames=["x","segmentIds"];var n=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/n);this.outputShape=[r,i];var s=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ",l="";o%n>0&&(l="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      ");var h="";o%n>0&&(h="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+l+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+h+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+a+")) * float("+n+"));\n        int currentSeg = int(mod(float(outIdx), float("+a+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+s+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+c+"\n        }\n\n        int inIdx = inOffset + "+s+";\n        if ("+(1===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+c+"\n        } else if ("+(2===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+c+"\n        } else if ("+(3===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+c+"\n        }\n        setOutput(sumValue);\n      }\n    ";},Js=function(t,e,n){var r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error("Where for rank "+n+" is not yet supported");if(1===n)o="resRC",r="resRC";else {for(var a=["resRC.x","resRC.y","resRC.z","resRC.w"],i=[],s=[],u=0;u<e.length;u++)s.push(""+a[u]),u<t&&i.push(""+a[u]);r=i.join(),o=s.join();}var c=ui(n);this.userCode="\n      void main() {\n        "+c+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+o+"));\n        } else {\n          setOutput(getB("+o+"));\n        }\n      }\n    ";},Zs=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var e,n=ui(this.rank),r="uniform int start["+this.rank+"];",o=function(t){if(1===t)return "sourceLoc";if(t<=6)return tu.slice(0,t).map((function(t){return "sourceLoc."+t})).join(",");throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);e="\n        "+n+" sourceLoc;\n        "+n+" coords = getOutputCoords();\n        "+t.map((function(t,e){return "sourceLoc."+tu[e]+" = start["+e+"] + coords."+tu[e]+";"})).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+e+"\n        setOutput(getSource("+o+"));\n      }\n    ";}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t);}},t}(),tu=["x","y","z","w","u","v"];var eu=function(){function t(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var e=ui(this.rank),n=Xa("coords",this.rank),r=Xa("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":"vec2("+r.slice(-2).join()+")",a="getChannel(getSource("+r.join()+"), "+o+")",i="\n      result.x = "+a+";\n      if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n        ++"+r[this.rank-1]+";\n        result.y = "+a+";\n        --"+r[this.rank-1]+";\n      }\n    ",s=1===this.rank?"":"\n      --"+n[this.rank-1]+";\n      if (++"+n[this.rank-2]+" < "+t[this.rank-2]+") {\n        ++"+r[this.rank-2]+";\n        result.z = "+a+";\n        if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n          ++"+r[this.rank-1]+";\n          result.w = "+a+";\n        }\n      }\n    ",u=this.rank<=4?"sourceLoc = coords +\n            "+e+"("+t.map((function(t,e){return "start["+e+"]"})).join()+");":t.map((function(t,e){return r[e]+" = "+n[e]+" + start["+e+"];"})).join("\n");this.userCode="\n      uniform int start["+this.rank+"];\n      void main() {\n        "+e+" coords = getOutputCoords();\n        "+e+" sourceLoc;\n        "+u+"\n        vec4 result = vec4(0.);\n        "+i+"\n        "+s+"\n        setOutput(result);\n      }\n    ";}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t);}},t}(),nu=function(t,e,n){this.variableNames=["x"],this.outputShape=n;var r=n.length,o=ui(n.length),a=ui(n.length),i="";if(1===r)i="coords * strides + begin";else {var s=0;i=n.map((function(t,e){return s++,1===n.length?"coords * strides["+e+"] + begin["+e+"]":"coords["+(s-1)+"] * strides["+e+"] + begin["+e+"]"})).join(",");}this.userCode="\n      "+o+" begin = "+o+"("+t+");\n      "+o+" strides = "+o+"("+e+");\n\n      void main() {\n        "+a+" coords = getOutputCoords();\n        setOutput(getX("+i+"));\n      }\n    ";},ru=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={};}return t.prototype.acquireTexture=function(t,e,n){var r,o=ou(e,n),a=au(t,o,n);if(a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]),this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var i=this.freeTextures[a].shift();return this.usedTextures[a].push(i),i}return this.numUsedTextures++,this.log(),o===Gt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===Gt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===Gt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[a].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var o=au(e,ou(n,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var a=this.usedTextures[o],i=a.indexOf(t);if(i<0)throw new Error("Cannot release a texture that was never provided by this texture manager");a.splice(i,1),this.log();}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")");}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e);}));for(var e in this.usedTextures)this.usedTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e);}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0;}},t}();function ou(t,e){if(t===zt.UPLOAD)return Gt.PACKED_2X2_FLOAT32;if(t===zt.RENDER||null==t)return function(t){return i().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Gt.PACKED_2X2_FLOAT32:Gt.UNPACKED_FLOAT32:t?Gt.PACKED_2X2_FLOAT16:Gt.UNPACKED_FLOAT16}(e);if(t===zt.DOWNLOAD||t===zt.PIXELS)return Gt.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function au(t,e,n){return t[0]+"_"+t[1]+"_"+e+"_"+n}var iu=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var o=ui(this.rank),a=function(t){var e=t.length;if(e>5)throw Error("Tile for rank "+e+" is not yet supported");if(1===e)return "imod(resRC, "+t[0]+")";for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],o=0;o<t.length;o++)r.push("imod("+n[o]+", "+t[o]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+a+"));\n      }\n    ";};var su=1.7580993408473768,uu=1.0507009873554805,cu=function(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        "+e+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";},lu="if (isnan(x)) return x;",hu="return x;",fu="return abs(x);",du=lu+"\n  return (x < 0.0) ? 0.0 : x;\n",pu=lu+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",vu="return (x >= 0.0) ? x : (exp(x) - 1.0);",gu="\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = "+su+";\n  float scale = "+uu+";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";var mu="return -x;",yu="return ceil(x);",xu="return floor(x);",bu="return exp(x);",wu="return exp(x) - 1.0;",Cu=lu+"\n  return sin(x);\n",Eu=lu+"\n  return cos(x);\n",Ru=lu+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n",Iu=lu+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n",ku=lu+"\n  return atan(x);\n",Su=lu+"return log(x + sqrt(x * x + 1.0));",Au=lu+"\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));",Tu=lu+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;",Du="return x;",Nu="return x;",Fu="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",_u="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Ou="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",Mu=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        "+e+"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";},Bu=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var e=t.length,n=Xa("rc",e),r=ui(e),o=function(t,e){if(1===t)return "rc";for(var n="",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":"vec2("+a.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+o+");\n\n        setOutput(getChannel(packedInput, "+i+"));\n      }\n    ";},Pu={};function Lu(t,e){if(void 0===e&&(e=!1),"linear"===t)return e?Nu:hu;if("relu"===t)return e?Fu:du;if("elu"===t)return e?Ou:vu;if("relu6"===t)return e?_u:pu;if("prelu"===t)return e?ki:Ei;throw new Error("Activation "+t+" has not been implemented for the WebGL backend.")}var Wu=600;var Uu=function(t){function o(e){var n,r=t.call(this)||this;if(r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!i().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){var o=jt(i().getNumber("WEBGL_VERSION"));r.binaryCache=(n=i().getNumber("WEBGL_VERSION"))in Pu?Pu[n]:(Pu[n]={},Pu[n]),r.gpgpu=new Is(o),r.canvas=o.canvas,r.gpgpuCreatedLocally=!0;}else r.gpgpu=e,r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=e.gl.canvas;return r.textureManager=new ru(r.gpgpu),r.numMBBeforeWarning=null==i().global.screen?1024:i().global.screen.height*i().global.screen.width*window.devicePixelRatio*Wu/1024/1024,r.texData=new ca(r,Lt),r}return e(o,t),o.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},o.prototype.write=function(t,e,n){if(i().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");var r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:zt.UPLOAD}),r},o.prototype.move=function(t,e,n,r){if(i().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:zt.UPLOAD});},o.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,o=e.complexTensors,a=e.slice,i=e.shape,s=e.isPacked;if(null!=a){var u=void 0;u=s?new Mu(i,Du):new cu(i,Du);var c=this.runWebGLProgram(u,[{dataId:t,shape:i,dtype:r}],r),l=this.readSync(c.dataId);return this.disposeData(c.dataId),l}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;var h,f,d=null!=this.activeTimers;(d&&(h=et()),"complex64"===r)?f=Aa(o.real.dataSync(),o.imag.dataSync()):f=this.getValuesFromTexture(t);return d&&(this.downloadWaitMs+=et()-h),this.convertAndCacheOnCPU(t,f)},o.prototype.read=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,s,u,c,l,h,f,d,p,v,g,m,y,x,b,w,C,E,R;return r(this,(function(r){switch(r.label){case 0:if(this.pendingRead.has(t))return e=this.pendingRead.get(t),[2,new Promise((function(t){return e.push(t)}))];if(n=this.texData.get(t),o=n.values,a=n.shape,s=n.slice,u=n.dtype,c=n.complexTensors,l=n.isPacked,null!=s)return h=void 0,h=l?new Mu(a,Du):new cu(a,Du),f=this.runWebGLProgram(h,[{dataId:t,shape:a,dtype:u}],u),d=this.read(f.dataId),this.disposeData(f.dataId),[2,d];if(null!=o)return [2,this.convertAndCacheOnCPU(t)];if(!i().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===i().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return p=null,"complex64"!==u&&i().get("WEBGL_BUFFER_SUPPORTED")&&(v=this.decode(t),g=this.texData.get(v.dataId),p=(R=this.gpgpu).createBufferFromTexture.apply(R,[g.texture].concat(Yt(a)))),this.pendingRead.set(t,[]),"complex64"===u?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:r.sent(),r.label=2;case 2:return "complex64"!==u?[3,4]:[4,Promise.all([c.real.data(),c.imag.data()])];case 3:return y=r.sent(),x=y[0],b=y[1],m=Aa(x,b),[3,5];case 4:null==p?m=this.getValuesFromTexture(t):(w=k(a),m=this.gpgpu.downloadFloat32MatrixFromBuffer(p,w)),r.label=5;case 5:return null!=v&&this.disposeData(v.dataId),C=this.convertAndCacheOnCPU(t,m),E=this.pendingRead.get(t),this.pendingRead.delete(t),E.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),[2,C]}}))}))},o.prototype.checkNumericalProblems=function(t){if(null!=t)for(var e=0;e<t.length;e++){var n=t[e];if(!ee(n)){if(i().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value "+n+" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value "+n+" cannot be represented on this device.")}}},o.prototype.getValuesFromTexture=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,a=n.isPacked,s=k(r);if(i().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var u=this.decode(t),c=this.texData.get(u.dataId),l=(e=this.gpgpu).downloadMatrixFromPackedTexture.apply(e,[c.texture].concat(Yt(r))).subarray(0,s);return this.disposeData(u.dataId),l}var h=i().getBool("WEBGL_PACK")&&!0===a,f=h?De(r):r,d=h?new Ji(f):new Qi(f),p=this.runWebGLProgram(d,[{shape:f,dtype:o,dataId:t}],"float32"),v=this.texData.get(p.dataId),g=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v.texture,v.texShape[0],v.texShape[1]).subarray(0,s);return this.disposeData(p.dataId),g},o.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,s,u,c;return r(this,(function(r){switch(r.label){case 0:return e=this.activeTimers,n=[],o=!1,null==this.programTimersStack?(this.programTimersStack=n,o=!0):this.activeTimers.push(n),this.activeTimers=n,t(),a=I(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),s=I(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=e,o&&(this.programTimersStack=null),u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[4,Promise.all(a)]:[3,2];case 1:return c=r.sent(),u.kernelMs=w(c),u.getExtraProfileInfo=function(){return c.map((function(t,e){return {name:s[e],ms:t}})).map((function(t){return t.name+": "+t.ms})).join(", ")},[3,3];case 2:u.kernelMs={error:"WebGL query timers are not supported in this environment."},r.label=3;case 3:return this.uploadWaitMs=0,this.downloadWaitMs=0,[2,u]}}))}))},o.prototype.memory=function(){return {unreliable:!1,numBytesInGPU:this.numBytesInGPU}},o.prototype.startTimer=function(){return i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:et(),endMs:null}},o.prototype.endTimer=function(t){return i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=et(),t)},o.prototype.getQueryTime=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return i().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]}))}))},o.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t)){if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(this.texData.has(t)){this.releaseGPUData(t);var e=this.texData.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t);}}},o.prototype.releaseGPUData=function(t){var e=this.texData.get(t),n=e.texture,r=e.dtype,o=e.texShape,a=e.usage,i=e.isPacked,s=e.slice,u=s&&s.origDataId||t,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(n,o,a,i)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null;},o.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},o.prototype.getDataInfo=function(t){return this.texData.get(t)},o.prototype.getCPUBackend=function(){return i().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Lt.findBackend("cpu")),this.cpuBackend):null},o.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=128),null!=this.getCPUBackend()&&t.every((function(t){return null==n.texData.get(t.dataId).texture&&k(t.shape)<e}))},o.prototype.getGPGPUContext=function(){return this.gpgpu},o.prototype.complex=function(t,e){var n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Lt.keep(t.clone()),imag:Lt.keep(e.clone())},n},o.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},o.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},o.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===k(n))return Fn([],n,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=$o(t.shape,e,n);if(r||!o){var a=i().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new eu(n):new Zs(n),s=a.getCustomSetupFunc(e);return this.compileAndRun(a,[t],null,s)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},o.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),o=this.makeOutput(n,t.dtype),a=this.texData.get(o.dataId);Object.assign(a,r),a.shape=n,a.dtype=t.dtype;var i=Qo(e,t.strides);r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,s+1),o},o.prototype.stridedSlice=function(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);var o=jo(e,n,r);if(o.some((function(t){return 0===t})))return Fn([],o);var a=new nu(e,r,o);return this.compileAndRun(a,[t])},o.prototype.reverse=function(t,e){var n=i().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ys(t.shape,e):new Xs(t.shape,e);return this.compileAndRun(n,[t])},o.prototype.concat=function(t,e){if("complex64"===t[0].dtype){var n=t.map((function(t){return Dn(t)})),r=t.map((function(t){return Nn(t)}));return Tn(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>i().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var o=Math.floor(t.length/2),a=this.concat(t.slice(0,o),e),s=this.concat(t.slice(o),e);return this.concat([a,s],e)}if(i().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){var u=new Fi(t.map((function(t){return t.shape})),e);return this.compileAndRun(u,t)}var c=Sn(t.map((function(t){return t.shape})),e),l=t.map((function(t){return t.as2D(-1,k(t.shape.slice(e)))})),h=new Ni(l.map((function(t){return t.shape})));return this.compileAndRun(h,l).reshape(c)},o.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(i().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,mu,t.dtype);var e=new cu(t.shape,mu);return this.compileAndRun(e,[t])},o.prototype.batchMatMul=function(t,e,n,r){var o=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===o||1===a)&&i>1e3){n&&(t=ua(t,[0,2,1])),r&&(e=ua(e,[0,2,1]));var u=1===a?t:t.as3D(s,i,1),c=1===a?2:1,l=1===a?e.as3D(s,1,i):e;return this.multiply(u,l).sum(c,!0)}var h=Tt(t.dtype,e.dtype),f=new _s(t.shape,[s,o,a],n,r);return this.compileAndRun(f,[t,e],h)},o.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,a=t.bias,i=t.activation,s=t.preluActivationWeights,u=r?e.shape[2]:e.shape[1],c=o?n.shape[1]:n.shape[2],l=e.shape[0],h=Tt(e.dtype,n.dtype),f=null!=a,d=null!=s,p=i?Lu(i,!0):null,v=new _s(e.shape,[l,u,c],r,o,f,p,d),g=[e,n];return a&&g.push(a),s&&g.push(s),this.compileAndRun(v,g,h)},o.prototype.multiply=function(t,e){if("complex64"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),o=new yi(gi,t.shape,e.shape),a=new yi(mi,t.shape,e.shape),s=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],u=this.compileAndRun(o,s),c=this.compileAndRun(a,s),l=this.complex(u,c);return u.dispose(),c.dispose(),l}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,wi,t.dtype);var h=new Ri(wi,t.shape,e.shape);return this.compileAndRun(h,[t,e],t.dtype)},o.prototype.batchNormalization=function(t,e,n,r,o,a){var s=[t,e,n],u=null;null!=a&&(u=a.shape,s.push(a));var c=null;if(null!=o&&(c=o.shape,s.push(o)),i().getBool("WEBGL_PACK_NORMALIZATION")){var l=new vi(t.shape,e.shape,n.shape,u,c,r);return this.compileAndRun(l,s)}var h=new pi(t.shape,e.shape,n.shape,u,c,r);return this.compileAndRun(h,s)},o.prototype.localResponseNormalization4D=function(t,e,n,r,o){var a=i().getBool("WEBGL_PACK_NORMALIZATION")?new Ds(t.shape,e,n,r,o):new As(t.shape,e,n,r,o);return this.compileAndRun(a,[t])},o.prototype.LRNGrad=function(t,e,n,r,o,a,i){var s=new Ts(e.shape,r,o,a,i);return this.compileAndRun(s,[e,n,t])},o.prototype.tile=function(t,e){if("string"===t.dtype){var n=this.readSync(t.dataId).map((function(t){return ot(t)}));return Va(er(t.shape,t.dtype,n),e)}var r=new iu(t.shape,e);return this.compileAndRun(r,[t])},o.prototype.pad=function(t,e,n){var r=i().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ls(t.shape,e,n):new Ps(t.shape,e,n);return this.compileAndRun(r,[t])},o.prototype.gather=function(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);var r=new as(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},o.prototype.batchToSpaceND=function(t,e,n){C(t.rank<=4,(function(){return "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=pr(t.shape,e,r),a=vr(o.length,e.length),i=gr(t.shape,e,r),s=mr(n,e.length),u=yr(i,n,e.length);return ua(t.reshape(o),a).reshape(i).slice(s,u)},o.prototype.spaceToBatchND=function(t,e,n){C(t.rank<=4,(function(){return "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var a=1+e.length;a<t.shape.length;++a)o.push([0,0]);var i=t.pad(o),s=pr(i.shape,e,r,!1),u=vr(s.length,e.length,!1),c=gr(i.shape,e,r,!1);return ua(i.reshape(s),u).reshape(c)},o.prototype.reduce=function(t,e,n){var r=t.shape[0],o=t.shape[1],a=Uo(o),i=new Vs({windowSize:a,inSize:o,batchSize:r},e),s=this.compileAndRun(i,[t],n);return 1===s.shape[1]?s:this.reduce(s,e,n)},o.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],o=t.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);var a=Uo(o),i=new Ka({windowSize:a,inSize:o,batchSize:r},e,null==n),s=[t];null!=n&&s.push(n);var u=this.compileAndRun(i,s,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)},o.prototype.argReducePacked=function(t,e,n){void 0===n&&(n=null);var r=null!=n?n.shape:t.shape,o=Uo(r[r.length-1]),a=new hi(r,o,e,null==n),i=null==n?[t]:[t,n],s=this.compileAndRun(a,i,"int32");return s.rank===t.rank?this.argReducePacked(t,e,s):s},o.prototype.sum=function(t,e){Cn("sum",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o),i=Dt(t.dtype);return this.reduce(a,"sum",i).reshape(r)},o.prototype.prod=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o),i=Dt(t.dtype);return this.reduce(a,"prod",i).reshape(r)},o.prototype.unsortedSegmentSum=function(t,e,n){var r=0,o=En([r],t.rank),a=t;null!=o&&(a=ua(t,o),r=In(1,t.rank)[0]);var i=function(t,e,n){for(var r=[],o=t.length,a=0;a<o;a++)a!==e?r.push(t[a]):r.push(n);return r}(a.shape,r,n),s=k([a.shape[r]]),u=a.as2D(-1,s),c=Dt(t.dtype),l=this.segOpCompute(u,"unsortedSegmentSum",e,c,n).reshape(i);return null!=o&&(l=ua(l,Rn(o))),l},o.prototype.segOpCompute=function(t,e,n,r,o){var a=t.shape[0],i=t.shape[1],s=function(t,e){var n,r=!1;for(t<=Wo?(n=t,r=!0):n=Y(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=Y(t,n+1);return n}(i,o),u=new Qs({windowSize:s,inSize:i,batchSize:a,numSegments:o},e),c=this.compileAndRun(u,[t,n],r);return c.shape[1]===o?c:(n=Kn(0,o).tile([i/s]),this.segOpCompute(c,e,n,r,o))},o.prototype.argMinMaxReduce=function(t,e,n){var r=[e];if(Cn("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!i().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){var o=bn(t.shape,r),a=o[0],s=k(o[1]),u=t.as2D(-1,s);return this.argReduce(u,n).reshape(a)}return this.argReducePacked(t,n)},o.prototype.argMin=function(t,e){return this.argMinMaxReduce(t,e,"min")},o.prototype.argMax=function(t,e){return this.argMinMaxReduce(t,e,"max")},o.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(t.rank-1)+" but got axis="+e);var o=new qi(t.shape,n,r);return this.compileAndRun(o,[t])},o.prototype.equal=function(t,e){if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");var n=new Ri("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},o.prototype.notEqual=function(t,e){if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");var n=new Ri("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},o.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");var n=new Ri("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},o.prototype.lessEqual=function(t,e){if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");var n=new Ri("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},o.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");var n=new Ri("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},o.prototype.greaterEqual=function(t,e){if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var n=new Ri("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},o.prototype.logicalNot=function(t){var e=new cu(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])},o.prototype.logicalAnd=function(t,e){if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var n=new Ri("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},o.prototype.logicalOr=function(t,e){if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var n=new Ri("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},o.prototype.select=function(t,e,n){var r=new Js(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Tt(e.dtype,n.dtype))},o.prototype.where=function(t){dn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var e=t.dataSync();return Ga(t.shape,e)},o.prototype.topk=function(t,e,n){return za(t.dataSync(),t.shape,t.dtype,e)},o.prototype.min=function(t,e){Cn("min",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,"min",a.dtype).reshape(r)},o.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=i().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Si("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ri("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.mod=function(t,e){var n=i().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Si("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ri("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.max=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);Cn("max",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,"max",a.dtype).reshape(r)},o.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=i().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Si("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ri("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.all=function(t,e){Cn("all",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,"all",a.dtype).reshape(r)},o.prototype.any=function(t,e){Cn("any",e,t.rank);var n=bn(t.shape,e),r=n[0],o=k(n[1]),a=t.as2D(-1,o);return this.reduce(a,"any",a.dtype).reshape(r)},o.prototype.floorDiv=function(t,e){if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var n=new Ri("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")},o.prototype.add=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,xi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);var n=Tt(t.dtype,e.dtype);if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,xi,n);var r=new Ri(xi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},o.prototype.packedUnaryOp=function(t,e,n){var r=new Mu(t.shape,e);return this.compileAndRun(r,[t],n)},o.prototype.packedBinaryOp=function(t,e,n,r,o){void 0===o&&(o=!1);var a=new Si(n,t.shape,e.shape,o);return this.compileAndRun(a,[t,e],r)},o.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,o=this.texData.get(t.dataId),a=this.texData.get(e.dataId),i=[[o.complexTensors.real,a.complexTensors.real],[o.complexTensors.imag,a.complexTensors.imag]].map((function(o){var a=o[0],i=o[1],s=r.makeComplexComponentTensorInfo(t,a),u=r.makeComplexComponentTensorInfo(e,i),c=new Ri(n,t.shape,e.shape);return r.compileAndRun(c,[s,u],Tt(a.dtype,i.dtype))})),s=i[0],u=i[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},o.prototype.makeComplexComponentTensorInfo=function(t,e){return {dataId:e.dataId,dtype:e.dtype,shape:t.shape}},o.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>i().get("WEBGL_MAX_TEXTURES_IN_SHADER")){var e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,e){return Tt(t,e)})),a=t.map((function(t){return t.shape})),s=i().getBool("WEBGL_PACK")?new qa(t[0].shape,a):new Ha(t[0].shape,a);return this.compileAndRun(s,t,o)},o.prototype.subtract=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,bi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=Tt(t.dtype,e.dtype);if(i().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,bi,t.dtype);var r=new Ri(bi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},o.prototype.pow=function(t,e){var n=i().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Si("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ri("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=Tt(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)},o.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(i().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,yu,t.dtype);var e=new cu(t.shape,yu);return this.compileAndRun(e,[t])},o.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(i().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,xu,t.dtype);var e=new cu(t.shape,xu);return this.compileAndRun(e,[t])},o.prototype.sign=function(t){var e=new cu(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])},o.prototype.isNaN=function(t){var e=new cu(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")},o.prototype.isInf=function(t){var e=new cu(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")},o.prototype.isFinite=function(t){var e=new cu(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")},o.prototype.round=function(t){var e=new cu(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])},o.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(i().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,bu,t.dtype);var e=new cu(t.shape,bu);return this.compileAndRun(e,[t])},o.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(i().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,wu,t.dtype);var e=new cu(t.shape,wu);return this.compileAndRun(e,[t])},o.prototype.softmax=function(t,e){var n=O([e],t.shape),r=this.max(t,n),o=wn(r.shape,n),a=this.subtract(t,r.reshape(o)),i=this.exp(a),s=this.sum(i,n).reshape(o);return Bo(i,s)},o.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(i().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);var e=new cu(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])},o.prototype.log1p=function(t){var e=new cu(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])},o.prototype.sqrt=function(t){var e=new cu(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])},o.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var e=new cu(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])},o.prototype.reciprocal=function(t){var e=new cu(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])},o.prototype.relu=function(t){var e;return e=i().getBool("WEBGL_PACK")?new Mu(t.shape,Fu):new cu(t.shape,du),this.compileAndRun(e,[t])},o.prototype.relu6=function(t){var e;return e=i().getBool("WEBGL_PACK")?new Mu(t.shape,_u):new cu(t.shape,pu),this.compileAndRun(e,[t])},o.prototype.prelu=function(t,e){var n=i().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Si(ki,t.shape,e.shape):new Ri(Ei,t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.elu=function(t){if(i().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ou,t.dtype);var e=new cu(t.shape,vu);return this.compileAndRun(e,[t])},o.prototype.eluDer=function(t,e){var n=i().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Si("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Ri("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.selu=function(t){var e=new cu(t.shape,gu);return this.compileAndRun(e,[t])},o.prototype.int=function(t){var e=new cu(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")},o.prototype.clip=function(t,e,n){var r,o=(r=i().getBool("WEBGL_PACK_CLIP")?new Ti(t.shape):new Ai(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,o)},o.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(i().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,fu,t.dtype);var e=new cu(t.shape,fu);return this.compileAndRun(e,[t])},o.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new Di(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},o.prototype.sigmoid=function(t){var e=new cu(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])},o.prototype.softplus=function(t){var e=new cu(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])},o.prototype.sin=function(t){var e=new cu(t.shape,Cu);return this.compileAndRun(e,[t])},o.prototype.cos=function(t){var e=new cu(t.shape,Eu);return this.compileAndRun(e,[t])},o.prototype.tan=function(t){var e=new cu(t.shape,"return tan(x);");return this.compileAndRun(e,[t])},o.prototype.asin=function(t){var e=new cu(t.shape,Ru);return this.compileAndRun(e,[t])},o.prototype.acos=function(t){var e=new cu(t.shape,Iu);return this.compileAndRun(e,[t])},o.prototype.atan=function(t){var e=new cu(t.shape,ku);return this.compileAndRun(e,[t])},o.prototype.atan2=function(t,e){var n=i().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Si("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Ri("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},o.prototype.sinh=function(t){var e=new cu(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},o.prototype.cosh=function(t){var e=new cu(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},o.prototype.tanh=function(t){var e=new cu(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])},o.prototype.asinh=function(t){var e=new cu(t.shape,Su);return this.compileAndRun(e,[t])},o.prototype.acosh=function(t){var e=new cu(t.shape,Au);return this.compileAndRun(e,[t])},o.prototype.atanh=function(t){var e=new cu(t.shape,Tu);return this.compileAndRun(e,[t])},o.prototype.erf=function(t){var e=new cu(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])},o.prototype.step=function(t,e){var n=new cu(t.shape,function(t){return void 0===t&&(t=0),lu+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(e));return this.compileAndRun(n,[t])},o.prototype.conv2dByMatMul=function(t,e,n,r,o,a){var s=t.shape,u=this.texData.get(t.dataId),c=n.inChannels,l=s[0]*s[1]*s[2],h=n.outChannels,f="channelsLast"===n.dataFormat,d=(1===l||1===h)&&c>1e3,p=s[2]%2!=0&&!!u.isPacked;if(d||!i().getBool("WEBGL_LAZILY_UNPACK")||!i().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!p){var v=f?s[0]*s[1]*s[2]:s[0]*s[2]*s[3],g=this.reshape(t,[1,v,n.inChannels]),m=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:g,b:m,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a}),n.outShape)}var y=f?s[0]*s[1]*(s[2]+1):s[0]*s[2]*(s[3]+1),x={dataId:t.dataId,shape:[1,y,n.inChannels],dtype:t.dtype},b=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,C(_e(u.shape,x.shape),(function(){return "packed reshape "+u.shape+" to "+x.shape+" isn't free"}));var w=this.reshape(e,[1,n.inChannels,n.outChannels]),E=this.fusedBatchMatMul({a:x,b:w,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a}),R=this.texData.get(E.dataId);return C(R.isPacked,(function(){return "batchMatMul result is expected to be packed"})),u.shape=b,R.shape=n.outShape,Lt.makeTensorFromDataId(E.dataId,n.outShape,E.dtype)},o.prototype.conv2dWithIm2Row=function(t,e,n,r,o,a){var i=n.filterWidth,s=n.filterHeight,u=n.inChannels,c=n.outWidth,l=n.outHeight,h="channelsLast"===n.dataFormat,f=i*s*u,d=l*c,p=[f,d],v=t.squeeze([0]),g=e.reshape([1,f,-1]),m=new Ss(p,v.shape,n),y=this.compileAndRun(m,[v]).reshape([1,p[0],p[1]]),x=null!=r,b=null!=a,w=o?Lu(o,!0):null,C=new _s(y.shape,[1,d,n.outChannels],!0,!1,x,w,b),E=[y,g];r&&E.push(r),b&&E.push(a);var R=this.compileAndRun(C,E);return h?R.reshape([1,l,c,n.outChannels]):R.reshape([1,n.outChannels,l,c])},o.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,s=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(e,n,r,o,a,s);if(i().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r,o,a,s);var u=null!=o,c=null!=s,l=a?Lu(a,!1):null,h=new Ui(r,u,l,c),f=[e,n];return o&&f.push(o),s&&f.push(s),this.compileAndRun(h,f)},o.prototype.conv2d=function(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(i().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new Ui(n);return this.compileAndRun(r,[t,e])},o.prototype.conv2dDerInput=function(t,e,n){var r=new Mi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv2dDerFilter=function(t,e,n){var r=new Oi(n);return this.compileAndRun(r,[t,e])},o.prototype.fusedDepthwiseConv2D=function(t){var e,n=t.input,r=t.filter,o=t.convInfo,a=t.bias,s=t.activation,u=t.preluActivationWeights,c=i().getBool("WEBGL_PACK_DEPTHWISECONV")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,l=s?Lu(s,c):null,h=[n,r],f=null!=a,d=null!=u;return f&&h.push(a),d&&h.push(u),c?(e=new Gi(o,f,l,d),this.compileAndRun(e,h)):(e=new zi(o,f,l,d),this.compileAndRun(e,h))},o.prototype.depthwiseConv2D=function(t,e,n){var r;return i().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Gi(n),this.compileAndRun(r,[t,e])):(r=new zi(n),this.compileAndRun(r,[t,e]))},o.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new Wi(n);return this.compileAndRun(r,[t,e])},o.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new Li(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3d=function(t,e,n){var r=new Vi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3dDerInput=function(t,e,n){var r=new Pi(n);return this.compileAndRun(r,[t,e])},o.prototype.conv3dDerFilter=function(t,e,n){var r=new Bi(n);return this.compileAndRun(r,[t,e])},o.prototype.maxPool=function(t,e){var n=new Ws(e,"max",!1);return this.compileAndRun(n,[t])},o.prototype.avgPool=function(t,e){var n=new Ws(e,"avg",!1);return this.compileAndRun(n,[t],"float32")},o.prototype.maxPoolBackprop=function(t,e,n,r){var o=new Ws(r,"max",!0),a=this.compileAndRun(o,[e]),i=new Ns(r),s=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),s},o.prototype.avgPoolBackprop=function(t,e,n){var r=new fi(n);return this.compileAndRun(r,[t],e.dtype)},o.prototype.cast=function(t,e){return Ra(t,e,this)},o.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,a=0;a<t.rank;a++)a!==e&&(r[o++]=t.shape[a]);var i=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)i[e]=a,u[a]=this.slice(t,i,s).reshape(r);return u},o.prototype.avgPool3d=function(t,e){var n=new Us(e,"avg",!1);return this.compileAndRun(n,[t],"float32")},o.prototype.avgPool3dBackprop=function(t,e,n){var r=new di(n);return this.compileAndRun(r,[t],e.dtype)},o.prototype.maxPool3d=function(t,e){var n=new Us(e,"max",!1);return this.compileAndRun(n,[t],"float32")},o.prototype.maxPool3dBackprop=function(t,e,n,r){var o=new Us(r,"max",!0),a=this.compileAndRun(o,[e]),i=new Fs(r),s=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),s},o.prototype.reshape=function(t,e){var n=this.texData.get(t.dataId);if(n.isPacked&&!_e(t.shape,e)&&(null===n.texture||!_e(n.shape,e))){var r=this.packedReshape(t,e);return Lt.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return Ia(t,e)},o.prototype.resizeBilinear=function(t,e,n,r){var o=i().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new qs(t.shape,e,n,r):new Hs(t.shape,e,n,r);return this.compileAndRun(o,[t],"float32")},o.prototype.resizeBilinearBackprop=function(t,e,n){var r=new Gs(t,e,n);return this.compileAndRun(r,[t])},o.prototype.resizeNearestNeighbor=function(t,e,n,r){var o=new js(t.shape,e,n,r);return this.compileAndRun(o,[t])},o.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new Ks(t,e,n);return this.compileAndRun(r,[t])},o.prototype.multinomial=function(t,e,n,r){var o=e?t:ia(t),a=o.shape[0],i=o.shape[1],s=new Os(a,i,n),u=s.getCustomSetupFunc(r);return this.compileAndRun(s,[o],"int32",u)},o.prototype.oneHot=function(t,e,n,r){var o=new Ms(t.size,e,n,r);return this.compileAndRun(o,[t])},o.prototype.diag=function(t){var e=new $i(t.size);return this.compileAndRun(e,[t])},o.prototype.nonMaxSuppression=function(t,e,n,r,o){return dn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),Oa(t.dataSync(),e.dataSync(),n,r,o)},o.prototype.cropAndResize=function(t,e,n,r,o,a){var i=new Hi(t.shape,e.shape,r,o,a);return this.compileAndRun(i,[t,e,n],"float32")},o.prototype.depthToSpace=function(t,e,n){C(e>1,(function(){return "blockSize should be > 1 for depthToSpace, but was: "+e}));var r=t.shape[0],o="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],s=o*e,u=a*e,c=i/(e*e),l=new Yi("NHWC"===n?[r,s,u,c]:[r,c,s,u],e,n);return this.compileAndRun(l,[t])},o.prototype.split=function(t,e,n){return Ua(t,e,n)},o.prototype.scatterND=function(t,e,n){var r=Go(0,t,n),o=r.sliceRank,a=r.numUpdates,i=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/i,i],l=t.reshape([a,o]),h=e.reshape([a,i]);if(0===u)return Ia(Fn([]),n);var f=On(0),d=new $s(a,o,l.rank,h.rank,s,c);return this.compileAndRun(d,[h,l,f]).reshape(n)},o.prototype.sparseToDense=function(t,e,n,r){var o=Go(0,t,n),a=o.sliceRank,i=o.numUpdates,s=o.strides,u=o.outputSize,c=new $s(i,a,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(c,[e,t,r]).reshape(n)},o.prototype.fft=function(t){return this.fftImpl(t,!1)},o.prototype.ifft=function(t){return this.fftImpl(t,!0)},o.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new rs(es,t.shape,e),o=new rs(ns,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(r,a),s=this.compileAndRun(o,a),u=this.complex(i,s).as2D(t.shape[0],t.shape[1]);return i.dispose(),s.dispose(),u},o.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Po(t,e),a=o[0],i=o[1],s=o[2],u=o[3],c=e.reshape([i,r]),l=t.reshape([t.size/s,s]),h=new is(r,u,[i,s]);return this.compileAndRun(h,[l,c]).reshape(a)},o.prototype.fill=function(t,e,n){if("string"===(n=n||j(e))){var r=P(n,k(t));return r.fill(e),Lt.makeTensor(r,t,n,this)}var o=new os$3(t,e),a=o.getCustomSetupFunc(e);return this.compileAndRun(o,[],n,a)},o.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)},o.prototype.zerosLike=function(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)},o.prototype.linspace=function(t,e,n){return ka(t,e,n)},o.prototype.makeTensorInfo=function(t,e){var n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}},o.prototype.makeOutput=function(t,e){var n=this.makeTensorInfo(t,e).dataId;return Lt.makeTensorFromDataId(n,t,e,this)},o.prototype.unpackTensor=function(t){var e=new Bu(t.shape);return this.runWebGLProgram(e,[t],t.dtype)},o.prototype.packTensor=function(t){var e=new Bs(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)},o.prototype.packedReshape=function(t,e){var n=[Ae(t.shape)].concat(Te(t.shape)),r={dtype:t.dtype,shape:n,dataId:t.dataId},o=[Ae(e)].concat(Te(e)),a=new zs(o,n),i=this.runWebGLProgram(a,[r],t.dtype,null,!0);return {dataId:i.dataId,shape:e,dtype:i.dtype}},o.prototype.decode=function(t){var e,n=this.texData.get(t),r=n.isPacked,o=n.shape,a=n.dtype,i=De(o);e=r?new Xi(i):new ji(i);return {dtype:a,shape:o,dataId:this.runWebGLProgram(e,[{shape:i,dtype:a,dataId:t}],a,null,!0).dataId}},o.prototype.runWebGLProgram=function(t,e,n,r,o){var a=this;void 0===o&&(o=!1);var s=this.makeTensorInfo(t.outputShape,n),u=this.texData.get(s.dataId);if(t.packedOutput&&(u.isPacked=!0),t.outPackingScheme===Vt.DENSE){var c=Yt(t.outputShape);u.texShape=c.map((function(t){return 2*t}));}if(null!=t.outTexUsage&&(u.usage=t.outTexUsage),0===k(s.shape))return u.values=B(s.dtype,0),s;var l=[],h=e.map((function(e){if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var n=a.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&k(e.shape)<=i().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return {shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape);}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?a.unpackTensor(e):a.packTensor(e),l.push(e),n=a.texData.get(e.dataId);else if(n.isPacked&&!_e(n.shape,e.shape)){var r=e,o=e.shape;e.shape=n.shape,e=a.packedReshape(e,o),l.push(e),n=a.texData.get(e.dataId),r.shape=o;}return a.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(s.dataId);var f,d={shape:s.shape,texData:u,isUniform:!1},p=function(t,e,n){var r="";e.concat(n).forEach((function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=t.shape+"_"+n+"_"+e;}));var o=t.userCode,a=t.constructor.name;return a+="_"+r+"_"+o}(t,h,d),v=this.getAndSaveBinary(p,(function(){return function(t,e,n,r){var o=e.userCode,a=n.map((function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),s=a.map((function(t){return t.shapeInfo})),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},c=Za(a,u,o,e.packedInputs),l=t.createProgram(c),h=null,f=t.getUniformLocation(l,"NAN",!1);1===i().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(l,"INFINITY",!1));for(var d={},p=0;p<e.variableNames.length;p++){var v=e.variableNames[p];d[v]=t.getUniformLocation(l,v,!1),d["offset"+v]=t.getUniformLocation(l,"offset"+v,!1);}return {program:e,source:c,webGLProgram:l,uniformLocations:d,inShapeInfos:s,outShapeInfo:u,infLoc:h,nanLoc:f}}(a.gpgpu,t,h,d)})),g=null!=this.activeTimers;if(g&&(f=this.startTimer()),function(t,e,n,r,o){ks(e.inShapeInfos,n),ks([e.outShapeInfo],[r]);var a=r.texData.texture,s=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(a,s[0],s[1]):t.setOutputMatrixTexture(a,s[0],s[1]),t.setProgram(e.webGLProgram),1===i().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((function(n,r){var o=e.program.variableNames[r],a=e.uniformLocations[o],i=e.uniformLocations["offset"+o];if(null!=a)if(n.isUniform)if(k(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else {var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),t.gl.uniform1fv(a,s);}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,r);})),null!=o&&o(t,e.webGLProgram),t.executeProgram();}(this.gpgpu,v,h,d,r),l.forEach((function(t){return a.disposeData(t.dataId)})),g&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!i().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===o){var m=this.unpackTensor(s);return this.disposeData(s.dataId),m}return s},o.prototype.compileAndRun=function(t,e,n,r,o){void 0===o&&(o=!1),n=n||e[0].dtype;var a=this.runWebGLProgram(t,e,n,r,o);return Lt.makeTensorFromDataId(a.dataId,a.shape,a.dtype)},o.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},o.prototype.getTextureManager=function(){return this.textureManager},o.prototype.dispose=function(){var t=this;if(!this.disposed){if(!i().getBool("IS_TEST"))Object.keys(this.binaryCache).forEach((function(e){t.gpgpu.deleteProgram(t.binaryCache[e].webGLProgram),delete t.binaryCache[e];}));this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0;}},o.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Ze((function(){if(!i().get("WEBGL_RENDER_FLOAT32_ENABLED")){var e=i().getBool("DEBUG");i().set("DEBUG",!1);var n=t.abs(On(1e-8)).dataSync()[0];if(i().set("DEBUG",e),n>0)return 32}return 16}))),this.floatPrecisionValue},o.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},o.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,a=n.values,i=n.texture,s=n.usage,u=n.isPacked;if(null==i){var c,l=null!=this.activeTimers;l&&(c=et());var h=n.texShape;if(null==h&&(h=Ne(r,u),n.texShape=h),null!=a){var f=De(r),d=void 0,p=h[1],v=h[0],g=a instanceof Uint8Array;u?(p=(e=$t(h[0],h[1]))[0],v=e[1],d=new ts(f,[v,p],g)):d=new Zi(f,[v,p],g);var m=this.makeTensorInfo([v,p],o);this.texData.get(m.dataId).usage=g?zt.PIXELS:zt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId),p,v,a);var y=this.runWebGLProgram(d,[m],o,null,!0),x=this.texData.get(y.dataId);n.texture=x.texture,n.texShape=x.texShape,n.isPacked=x.isPacked,n.usage=x.usage,this.disposeData(m.dataId),this.texData.delete(y.dataId),n.values=null,l&&(this.uploadWaitMs+=et()-c);}else {var b=this.acquireTexture(h,s,o,u);n.texture=b;}}},o.prototype.convertAndCacheOnCPU=function(t,e){var n=this.texData.get(t),r=n.dtype;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){for(var n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values},o.prototype.acquireTexture=function(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: "+o+" MB, most likely due to a memory leak");}return this.textureManager.acquireTexture(t,e,r)},o.prototype.computeBytes=function(t,e){return t[0]*t[1]*z(e)},o}(la);Wt()&&Lt.registerBackend("webgl",(function(){return new Uu}),2);function Vu(t,e){return t(e={exports:{}},e.exports),e.exports}var zu=Vu((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e);}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null;}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a;}(0,t,!1);})),Gu=Vu((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next();}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return (n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a;}(0,t,!1);})),Hu=Vu((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next();}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return (n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a;}(0,t,!1);})),qu=Vu((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next();}(e,t);}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return (n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a;}(0,t,!1);})),Ku=Vu((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,a=e.i;return e.w=r=r+1640531527|0,n=o[a+34&127],t=o[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,o,a,i,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),o=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,o=0==(n=s[127&a]^=r+i)?o+1:0);for(o>=128&&(s[127&(e&&e.length||0)]=-1),o=127,a=512;a>0;--a)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;t.w=i,t.X=s,t.i=o;}(e,t);}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,i=function(){return (n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a;}(0,t,!1);})),ju=Vu((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next();}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,i=function(){return (n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&o(a,n),i.state=function(){return o(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a;}(0,t,!1);})),Xu=Vu((function(t){!function(e,n){var r,o=this,a=256,i=6,s="random",u=n.pow(a,i),c=n.pow(2,52),l=2*c,h=a-1;function f(t,h,f){var m=[],y=v(function t(e,n){var r,o=[],a=typeof e;if(n&&"object"==a)for(r in e)try{o.push(t(e[r],n-1));}catch(t){}return o.length?o:"string"==a?e:e+"\0"}((h=1==h?{entropy:!0}:h||{}).entropy?[t,g(e)]:null==t?function(){try{var t;return r&&(t=r.randomBytes)?t=t(a):(t=new Uint8Array(a),(o.crypto||o.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=o.navigator,i=n&&n.plugins;return [+new Date,o,i,o.screen,g(e)]}}():t,3),m),x=new d(m),b=function(){for(var t=x.g(i),e=u,n=0;t<c;)t=(t+n)*a,e*=a,n=x.g(1);for(;t>=l;)t/=2,e/=2,n>>>=1;return (t+n)/e};return b.int32=function(){return 0|x.g(4)},b.quick=function(){return x.g(4)/4294967296},b.double=b,v(g(x.S),e),(h.pass||f||function(t,e,r,o){return o&&(o.S&&p(o,x),t.state=function(){return p(x,{})}),r?(n[s]=t,e):t})(b,y,"global"in h?h.global:this==n,h.state)}function d(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=h&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=h&o+1],n=n*a+s[h&(s[o]=s[i=h&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(a);}function p(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function v(t,e){for(var n,r=t+"",o=0;o<r.length;)e[h&o]=h&(n^=19*e[h&o])+r.charCodeAt(o++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(n["seed"+s]=f,v(n.random(),e),t.exports){t.exports=f;try{r=require("crypto");}catch(t){}}}([],Math);}));Xu.alea=zu,Xu.xor128=Gu,Xu.xorwow=Hu,Xu.xorshift7=qu,Xu.xor4096=Ku,Xu.tychei=ju;var Yu=Xu.alea;var $u=An({addN_:function(t){C(Array.isArray(t),(function(){return "The argument passed to tf.addN() must be a list of tensors"})),C(t.length>=1,(function(){return "Must pass at least one tensor to tf.addN(), but got "+t.length}));var e=t.map((function(t,e){return gn(t,"tensors"+e,"addN")})),n=e[0];e.forEach((function(t){if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((function(t){if(!S(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=e;return Lt.runKernelFunc((function(t,n){return t.addN(e)}),r,null,"AddN")}});function Qu(){Xe("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon");}function Ju(t){return 0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function Zu(t,e,n,r,o,a){null==a&&(a=.001);var i,s,u=gn(t,"x","batchNorm"),c=gn(e,"mean","batchNorm"),l=gn(n,"variance","batchNorm");null!=o&&(i=gn(o,"scale","batchNorm")),null!=r&&(s=gn(r,"offset","batchNorm")),C(c.rank===l.rank,(function(){return "Batch normalization gradient requires mean and variance to have equal ranks."})),C(null==s||c.rank===s.rank,(function(){return "Batch normalization gradient requires mean and offset to have equal ranks."})),C(null==i||c.rank===i.rank,(function(){return "Batch normalization gradient requires mean and scale to have equal ranks."}));var h={x:u,scale:i,offset:s,mean:c,variance:l},f={varianceEpsilon:a};return Lt.runKernelFunc((function(t,e){var n=Ju(u),r=t.batchNormalization(n,tc(c),tc(l),a,tc(i),tc(s));return e([u,c,l,i]),r}),h,null,"FusedBatchNorm",f).reshape(u.shape)}function tc(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}var ec=An({batchNormalization_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),Zu(t,e,n,a,o,r)}}),nc=An({batchNorm_:Zu});function rc(t,e,n,r,o,a){var i,s,u=gn(t,"x","batchNorm"),c=gn(e,"mean","batchNorm"),l=gn(n,"variance","batchNorm");return null!=o&&(i=gn(o,"scale","batchNorm")),null!=r&&(s=gn(r,"offset","batchNorm")),C(2===u.rank,(function(){return "Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),C(2===c.rank||1===c.rank,(function(){return "Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."})),C(2===l.rank||1===l.rank,(function(){return "Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."})),null!=i&&C(2===i.rank||1===i.rank,(function(){return "Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+i.rank+"."})),null!=s&&C(2===s.rank||1===s.rank,(function(){return "Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+s.rank+"."})),nc(u,c,l,s,i,a)}var oc=An({batchNormalization2d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),rc(t,e,n,a,o,r)}}),ac=An({batchNorm2d_:rc});function ic(t,e,n,r,o,a){var i,s,u=gn(t,"x","batchNorm"),c=gn(e,"mean","batchNorm"),l=gn(n,"variance","batchNorm");return null!=o&&(i=gn(o,"scale","batchNorm")),null!=r&&(s=gn(r,"offset","batchNorm")),C(3===u.rank,(function(){return "Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),C(3===c.rank||1===c.rank,(function(){return "Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."})),C(3===l.rank||1===l.rank,(function(){return "Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."})),null!=i&&C(3===i.rank||1===i.rank,(function(){return "Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+i.rank+"."})),null!=s&&C(3===s.rank||1===s.rank,(function(){return "Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+s.rank+"."})),nc(u,c,l,s,i,a)}var sc=An({batchNormalization3d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),ic(t,e,n,a,o,r)}}),uc=An({batchNorm3d_:ic});function cc(t,e,n,r,o,a){var i,s,u=gn(t,"x","batchNorm"),c=gn(e,"mean","batchNorm"),l=gn(n,"variance","batchNorm");return null!=o&&(i=gn(o,"scale","batchNorm")),null!=r&&(s=gn(r,"offset","batchNorm")),C(4===u.rank,(function(){return "Error in batchNorm4D: x must be rank 4 but got rank "+u.rank+"."})),C(4===c.rank||1===c.rank,(function(){return "Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."})),C(4===l.rank||1===l.rank,(function(){return "Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."})),null!=i&&C(4===i.rank||1===i.rank,(function(){return "Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+i.rank+"."})),null!=s&&C(4===s.rank||1===s.rank,(function(){return "Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+s.rank+"."})),nc(u,c,l,s,i,a)}var lc=An({batchNormalization4d_:function(t,e,n,r,o,a){return void 0===r&&(r=.001),Qu(),cc(t,e,n,a,o,r)}}),hc=An({batchNorm4d_:cc});var fc=An({broadcastTo_:function(t,e){var n=gn(t,"broadcastTo","x"),r=n.shape;if(e.some((function(t){return !(t>0)||t%1!=0})))throw new Error("broadcastTo(): Invalid broadcast shape ["+e+"].");if(e.length<n.rank)throw new Error("broadcastTo(): shape.length="+e.length+" < input.rank="+n.rank+".");if(e.length>n.rank){for(var o=n.shape.slice();o.length<e.length;)o.unshift(1);n=n.reshape(o);}for(var a=n.shape,i=Array.from(e),s=e.length-1;s>=0;s--)if(a[s]===e[s])i[s]=1;else if(1!==n.shape[s])throw new Error("broadcastTo(): ["+r+"] cannot be broadcast to ["+e+"].");var u=i.map((function(t,e){return t>1?e:-1})).filter((function(t){return t>=0}));if(0===u.length)return n.clone();var c={x:n},l={shape:e,inputShape:a};return Lt.runKernelFunc((function(t){return t.tile(n,i)}),c,(function(t){return {x:function(){return t.sum(u,!0)}}}),Sr,l)}});var dc=An({clone_:function(t){var e=gn(t,"x","clone",null);return Lt.runKernelFunc((function(){return Lt.makeTensorFromDataId(e.dataId,e.shape,e.dtype)}),{x:e},null,Tr)}});var pc=An({logicalAnd_:function(t,e){var n=gn(t,"a","logicalAnd","bool"),r=gn(e,"b","logicalAnd","bool");return Pr(n.shape,r.shape),Lt.runKernelFunc((function(t){return t.logicalAnd(n,r)}),{a:n,b:r},null,"LogicalAnd")}}),vc=An({logicalNot_:function(t){var e=gn(t,"x","logicalNot","bool");return Lt.runKernelFunc((function(t){return t.logicalNot(e)}),{$x:e})}}),gc=An({logicalOr_:function(t,e){var n=gn(t,"a","logicalOr","bool"),r=gn(e,"b","logicalOr","bool");return Pr(n.shape,r.shape),Lt.runKernelFunc((function(t){return t.logicalOr(n,r)}),{$a:n,$b:r})}}),mc=An({logicalXor_:function(t,e){var n=gn(t,"a","logicalXor","bool"),r=gn(e,"b","logicalXor","bool");return Pr(n.shape,r.shape),gc(t,e).logicalAnd(pc(t,e).logicalNot())}}),yc=An({where_:function(t,e,n){var r=gn(e,"a","where"),o=gn(n,"b","where"),a=gn(t,"condition","where","bool");return E(r.shape,o.shape,"Error in where: "),1===a.rank?C(a.shape[0]===r.shape[0],(function(){return "The first dimension of `a` must match the size of `condition`."})):E(a.shape,o.shape,"Error in where: "),Lt.runKernelFunc((function(t,e){var n=t.select(a,r,o);return e([a]),n}),{$condition:a,$a:r,$b:o},(function(t,e){var n=e[0];return {$condition:function(){return Xn(n).toFloat()},$a:function(){return t.mul(n.cast(t.dtype))},$b:function(){return t.mul(n.logicalNot().cast(t.dtype))}}}))}}),xc=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:return [4,(e=gn(t,"condition","whereAsync","bool")).data()];case 1:return n=r.sent(),o=Ga(e.shape,n),t!==e&&e.dispose(),[2,o]}}))}))};var bc=An({divNoNan_:function(t,e){var n,r=gn(t,"a","div"),o=gn(e,"b","div");r=(n=Nt(r,o))[0],o=n[1];var a=Bo(r,o),i=Xn(a),s=o.equal(i);return yc(s,i,a)}});var wc=An({tile_:function(t,e){var n=gn(t,"x","tile",null);C(n.rank===e.length,(function(){return "Error in transpose: rank of input "+n.rank+" must match length of reps "+e+"."}));var r=[n],o={x:n},a={reps:e};return Lt.runKernelFunc((function(t,r){var o=t.tile(n,e);return r([n]),o}),o,null,Dr,a,r)}});var Cc=An({eye_:function(t,e,n,r){void 0===r&&(r="float32"),null==e&&(e=t);for(var o=er([t,e],r),a=t<=e?t:e,i=0;i<a;++i)o.set(1,i,i);var s=o.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return wc(sr(s,0),[n[0],1,1]);if(2===n.length)return wc(sr(sr(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return wc(sr(sr(sr(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+n.length+"D.")}});var Ec=An({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var o=gn(t,"logits","multinomial"),a=o.size,i=o.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();var s=1===i?o.as2D(1,-1):o,u=Lt.runKernelFunc((function(t){return t.multinomial(s,r,e,n)}),{logits2D:s});return 1===i?u.as1D():u}});var Rc=An({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);var o=gn(t,"indices","oneHot","int32"),a=o.shape.concat([e]),i={indices:o=o.flatten()},s={depth:e,onValue:n,offValue:r};return Lt.runKernelFunc((function(t,a){return a([o]),t.oneHot(o,e,n,r)}),i,null,Ar,s).reshape(a)}});var Ic=An({pad_:function(t,e,n){void 0===n&&(n=0);var r=gn(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var o={paddings:e,constantValue:n},a={x:r};return Lt.runKernelFunc((function(t,o){return o([r]),t.pad(r,e,n)}),a,null,Nr,o)}});var kc=An({pad1d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length,(function(){return "Invalid number of paddings. Must be length of 2."})),Ic(t,[e],n)}});var Sc=An({pad2d_:function(t,e,n){return void 0===n&&(n=0),C(2===e.length&&2===e[0].length&&2===e[1].length,(function(){return "Invalid number of paddings. Must be length of 2 each."})),Ic(t,e,n)}});var Ac=An({pad3d_:function(t,e,n){return void 0===n&&(n=0),C(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(function(){return "Invalid number of paddings. Must be length of 2 each."})),Ic(t,e,n)}});var Tc=An({pad4d_:function(t,e,n){return void 0===n&&(n=0),C(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(function(){return "Invalid number of paddings. Must be length of 2 each."})),Ic(t,e,n)}});var Dc=An({rand_:function(t,e,n){var r=k(t),o=null;if(null==n||"float32"===n)o=new Float32Array(r);else if("int32"===n)o=new Int32Array(r);else {if("bool"!==n)throw new Error("Unknown data type "+n);o=new Uint8Array(r);}for(var a=0;a<r;a++)o[a]=e();return Lt.makeTensor(o,t,n)}}),Nc=.001,Fc=.1;function _c(){return 32===Lt.backend.floatPrecision()?Nc:Fc}function Oc(t,e,n){var r=!0;if((V(t)||V(e))&&(r=!1),V(t)&&V(e)&&(r=!0),r){var o=t.constructor.name,a=e.constructor.name;if(o!==a)throw new Error("Arrays are of different type. Actual: "+o+". Expected: "+a)}if(Array.isArray(t)&&Array.isArray(e)){var i=pn(t),s=pn(e);if(!S(i,s))throw new Error("Arrays have different shapes. Actual: ["+i+"]. Expected: ["+s+"]")}var u=V(t)?t:I(t),c=V(e)?e:I(e);if(u.length!==c.length)throw new Error("Arrays have different lengths actual: "+u.length+" vs expected: "+c.length+".\nActual:   "+u+".\nExpected: "+c+".");for(var l=0;l<c.length;++l){var h=u[l],f=c[l];if(!n(h,f))throw new Error("Arrays differ: actual["+l+"] = "+h+", expected["+l+"] = "+f+".\nActual:   "+u+".\nExpected: "+c+".")}}function Mc(t,e,n){return !isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Bc=Object.freeze({TEST_EPSILON_FLOAT16:Fc,expectArraysClose:function(t,e,n){return null==n&&(n=_c()),Oc(t,e,(function(t,e){return Mc(t,e,n)}))},testEpsilon:_c,expectPromiseToFail:function(t,e){t().then((function(){return e.fail()}),(function(){return e()}));},expectArraysEqual:function(t,e){var n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return H(t)||H(t[0])||H(e)||H(e[0])?Oc(t,n,(function(t,e){return t==e})):Oc(t,e,(function(t,e){return Mc(t,e,0)}))},expectNumbersClose:function(t,e,n){if(null==n&&(n=_c()),!Mc(t,e,n))throw new Error("Numbers differ: actual === "+t+", expected === "+e)},expectValuesInRange:function(t,e,n){for(var r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error("Value out of range:"+t[r]+" low: "+e+", high: "+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e));}}),Pc=function(){function t(t,e,n,r,o){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var a=o||Math.random();this.random=Yu(a.toString());}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var o=void 0,a=void 0,i=void 0;do{i=(o=2*this.random()-1)*o+(a=2*this.random()-1)*a;}while(i>=1||0===i);var s=Math.sqrt(-2*Math.log(i)/i);e=this.mean+this.stdDev*o*s,n=this.mean+this.stdDev*a*s,this.truncated&&!this.isValidTruncated(e)||(r=!0);}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),Lc=function(){function t(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;var o=r||Math.random();this.randu=Yu(o.toString()),this.randn=new Pc(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d);}return t.prototype.nextValue=function(){for(var t,e,n,r,o,a;;){do{r=this.randn.nextValue(),a=1+this.c*r;}while(a<=0);if(a*=a*a,e=1-.331*(t=r*r)*t,n=.5*t+this.d*(1-a+Math.log(a)),(o=this.randu())<e||Math.log(o)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)},t.prototype.convertValue=function(t){return "float32"===this.dtype?t:Math.round(t)},t}(),Wc=function(){function t(t,e,n,r){var o=this;if(void 0===t&&(t=0),void 0===e&&(e=1),this.canReturnFloat=function(){return null==o.dtype||"float32"===o.dtype},this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+t+" - "+e+" <= 1 and dtype is not float");this.random=Yu(r);}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();var Uc=An({randomGamma_:function(t,e,n,r,o){if(void 0===n&&(n=1),void 0===r&&(r="float32"),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var a=new Lc(e,n,r,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var Vc=An({randomNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var a=new Pc(e,n,r,!1,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var zc=An({randomUniform_:function(t,e,n,r,o){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r="float32");for(var a=er(t,r),i=new Wc(e,n,null,o),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}});var Gc=An({square_:function(t){var e=gn(t,"x","square"),n=[e];return Lt.runKernelFunc((function(t,n){return n([e]),t.square(e)}),{x:e},null,"Square",{},n,[])}});var Hc=An({squaredDifference_:function(t,e){var n,r=gn(t,"a","squaredDifference"),o=gn(e,"b","squaredDifference");n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape);var a={a:r,b:o},i=[r,o];return Lt.runKernelFunc((function(t,e){var n=t.squaredDifference(r,o);return e([r,o]),n}),a,(function(t,e){var n=e[0],r=e[1],o=On(2);return {a:function(){return t.mul(n.sub(r).mul(o))},b:function(){return t.mul(r.sub(n).mul(o))}}}),Er,{},i,[])}});var qc=An({truncatedNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");for(var a=new Pc(e,n,r,!0,o),i=er(t,r),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}});var Kc=An({equal_:function(t,e){var n,r=gn(t,"a","equal"),o=gn(e,"b","equal");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),jc=An({equalStrict_:function(t,e){var n=gn(t,"a","equalStrict"),r=gn(e,"b","equalStrict");return E(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),Xc=An({greater_:function(t,e){var n,r=gn(t,"a","greater"),o=gn(e,"b","greater");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.greater(r,o)}),{a:r,b:o},null,"Greater")}}),Yc=An({greaterEqual_:function(t,e){var n,r=gn(t,"a","greaterEqual"),o=gn(e,"b","greaterEqual");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.greaterEqual(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return {a:function(){return Xn(n)},b:function(){return Xn(r)}}}),"GreaterEqual")}}),$c=An({greaterEqualStrict_:function(t,e){var n=gn(t,"a","greaterEqualStrict"),r=gn(e,"b","greaterEqualStrict");return E(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),Qc=An({greaterStrict_:function(t,e){var n=gn(t,"a","greaterStrict"),r=gn(e,"b","greaterStrict");return E(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),Jc=An({less_:function(t,e){var n,r=gn(t,"a","less"),o=gn(e,"b","less");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.less(r,o)}),{a:r,b:o},null,"Less")}}),Zc=An({lessEqual_:function(t,e){var n,r=gn(t,"a","lessEqual"),o=gn(e,"b","lessEqual");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t,e){var n=t.lessEqual(r,o);return e([r,o]),n}),{a:r,b:o},null,"LessEqual")}}),tl=An({lessEqualStrict_:function(t,e){var n=gn(t,"a","lessEqualStrict"),r=gn(e,"b","lessEqualStrict");return E(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),el=An({lessStrict_:function(t,e){var n=gn(t,"a","lessStrict"),r=gn(e,"b","lessStrict");return E(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),nl=An({notEqual_:function(t,e){var n,r=gn(t,"a","notEqual"),o=gn(e,"b","notEqual");return n=Nt(r,o),r=n[0],o=n[1],Pr(r.shape,o.shape),Lt.runKernelFunc((function(t){return t.notEqual(r,o)}),{a:r,b:o},null,"NotEqual")}}),rl=An({notEqualStrict_:function(t,e){var n=gn(t,"a","notEqualStrict"),r=gn(e,"b","notEqualStrict");return E(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});function ol(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function al(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var il=An({gather_:function(t,e,n){void 0===n&&(n=0);var r=gn(t,"x","gather"),o=gn(e,"indices","gather","int32");n=O(n,r.shape)[0];var a=function(t,e,n){for(var r=t.shape[n],o=[],a=1,i=1,s=0;s<n;s++)o.push(t.shape[s]),a*=t.shape[s];for(s=0;s<e.rank;s++)o.push(e.shape[s]);for(s=n+1;s<t.rank;s++)o.push(t.shape[s]),i*=t.shape[s];return {batchSize:a,sliceSize:i,dimSize:r,outputShape:o}}(r,o,n);return Lt.runKernelFunc((function(t,e){var a=t.gather(r,o.flatten(),n);return e([o]),a}),{x:r,indices:o},(function(t,e){var o=e[0];return {x:function(){var e=r.shape,a=o.size,i=e.slice(0,n),s=i.length,u=e.slice(n,e.length).slice(1),c=u.length,l=ol(0,s),h=ol(s+1,s+1+c),f=al([i,[a],u]),d=t.reshape(f),p=o.reshape([a]),v=al([[s],l,h]),g=d.transpose(v),m=sl(g,p,r.shape[n]),y=Rn(v);return m=m.transpose(y)},indices:function(){return o}}}),"Gather",{axis:n}).reshape(a.outputShape)}}),sl=An({unsortedSegmentSum_:function(t,e,n){var r=gn(t,"x","unsortedSegmentSum"),o=gn(e,"segmentIds","unsortedSegmentSum","int32");return C(A$1(n),(function(){return "numSegments must be of dtype int"})),Lt.runKernelFunc((function(t,e){var a=t.unsortedSegmentSum(r,o,n);return e([o]),a}),{$x:r},(function(t,e){var n=e[0];return {$x:function(){return function(t,e){for(var n=Eo(e,Xn(e)),r=il(t,n),o=Yc(e,On(0,"int32")),a=r.rank-o.rank,i=0;i<a;++i)o=sr(o,i+1);o=pc(o,zn(r.shape,"bool"));var s=Xn(r);return yc(o,r,s)}(t,n)}}}))}});var ul=function(t,e,o){return n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f,d,p,v,g;return r(this,(function(r){switch(r.label){case 0:for(n=gn(t,"tensor","boolMask"),a=gn(e,"mask","boolMask","bool"),i=null==o?0:o,s=a.rank,u=n.shape,C(s>0,(function(){return "mask cannot be scalar"})),E(u.slice(i,i+s),a.shape,"mask's shape must match the first K dimensions of tensor's shape,"),c=1,l=i;l<i+s;l++)c*=u[l];return h=u.slice(0,i).concat([c],u.slice(i+s)),f=n.reshape(h),d=a.reshape([-1]),[4,xc(d)];case 1:return p=r.sent(),v=p.squeeze([1]),g=il(f,v,i),t!==n&&n.dispose(),e!==a&&a.dispose(),v.dispose(),f.dispose(),d.dispose(),p.dispose(),[2,g]}}))}))};function cl(t,e,n,r,o,a,i){void 0===a&&(a="NHWC"),C(t.length===e.rank,(function(){return "Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var s=t,u=e,c=!1;3===e.rank&&(c=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),s=[1,t[0],t[1],t[2]]),C(4===s.length,(function(){return "Error in conv2dDerInput: inShape must be length 4, but got length "+s.length+"."})),C(4===u.rank,(function(){return "Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank})),C(4===n.rank,(function(){return "Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank}));var l="NHWC"===a?s[3]:s[1],h="NHWC"===a?u.shape[3]:u.shape[1];C(l===n.shape[2],(function(){return "Error in conv2dDerInput: depth of input ("+l+") must match input depth for filter "+n.shape[2]+"."})),C(h===n.shape[3],(function(){return "Error in conv2dDerInput: depth of output ("+h+") must match output depth for filter "+n.shape[3]+"."})),null!=i&&C(A$1(o),(function(){return "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var f=Ea(a),d=pa(s,n.shape,r,1,o,i,!1,f),p=Lt.runKernelFunc((function(t,e){var r=t.conv2dDerInput(u,n,d);return e([n,u]),r}),{dy4D:u,filter:n},(function(t,e){var n=e[0],s=e[1];return {dy4D:function(){return dl(t,n,r,o,a,1,i)},filter:function(){return vl(t,s,n.shape,r,o,a,i)}}}));return c?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}function ll(t){var e=function(t){return "number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function hl(t,e,n,r,o){C(t.length===e.rank,(function(){return "Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var a=t,i=e,s=!1;4===e.rank&&(s=!0,i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),a=[1,t[0],t[1],t[2],t[3]]);var u=a[4],c=i.shape[4];C(5===a.length,(function(){return "Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."})),C(5===i.rank,(function(){return "Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank})),C(5===n.rank,(function(){return "Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank})),C(u===n.shape[3],(function(){return "Error in conv3dDerInput: depth of input ("+u+") must match input depth for filter "+n.shape[3]+"."})),C(c===n.shape[4],(function(){return "Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+n.shape[4]+"."}));var l=va(a,n.shape,r,1,o),h=Lt.runKernelFunc((function(t){return t.conv3dDerInput(i,n,l)}),{dy5D:i});return s?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}var fl=An({conv1d_:function(t,e,n,r,o,a,i){void 0===o&&(o="NWC"),void 0===a&&(a=1);var s=gn(t,"x","conv1d"),u=gn(e,"filter","conv1d"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),C(3===c.rank,(function(){return "Error in conv1d: input must be rank 3, but got rank "+c.rank+"."})),C(3===u.rank,(function(){return "Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."})),null!=i&&C(A$1(r),(function(){return "Error in conv1d: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+r+"."})),C(c.shape[2]===u.shape[1],(function(){return "Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+u.shape[1]+"."})),C(Ca(n,a),(function(){return "Error in conv1D: Either stride or dilation must be 1. Got stride "+n+" and dilation '"+a+"'"})),C("NWC"===o,(function(){return "Error in conv1d: got dataFormat of "+o+" but only NWC is currently supported."}));var h=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),f=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),d=dl(f,h,[1,n],r,"NHWC",[1,a],i);return l?d.as2D(d.shape[2],d.shape[3]):d.as3D(d.shape[0],d.shape[2],d.shape[3])}}),dl=An({conv2d_:function(t,e,n,r,o,a,i){void 0===o&&(o="NHWC"),void 0===a&&(a=[1,1]);var s=gn(t,"x","conv2d"),u=gn(e,"filter","conv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return "Error in conv2d: input must be rank 4, but got rank "+c.rank+"."})),C(4===u.rank,(function(){return "Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."})),null!=i&&C(A$1(r),(function(){return "Error in conv2d: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+r+"."}));var h="NHWC"===o?c.shape[3]:c.shape[1];C(h===u.shape[2],(function(){return "Error in conv2d: depth of input ("+h+") must match input depth for filter "+u.shape[2]+"."})),C(Ca(n,a),(function(){return "Error in conv2D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"}));var f=Ea(o),d=pa(c.shape,u.shape,n,a,r,i,!1,f),p=[u,c],v=Lt.runKernelFunc((function(t,e){var n=t.conv2d(c,u,d);return e([u,c]),n}),{x:c,filter:u},(function(t,e){var i=e,s=i[0],u=i[1];return C(wa(a),(function(){return "Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+a+"'"})),{x:function(){return gl(u.shape,t,s,n,r,o)},filter:function(){return vl(u,t,s.shape,n,r,o)}}}),"Conv2D",d,p);return l?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),pl=An({conv3d_:function(t,e,n,r,o,a){void 0===o&&(o="NDHWC"),void 0===a&&(a=[1,1,1]);var i=gn(t,"x","conv3d"),s=gn(e,"filter","conv3d"),u=i,c=!1;4===i.rank&&(c=!0,u=i.as5D(1,i.shape[0],i.shape[1],i.shape[2],i.shape[3])),C(5===u.rank,(function(){return "Error in conv3d: input must be rank 5, but got rank "+u.rank+"."})),C(5===s.rank,(function(){return "Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."})),C(u.shape[4]===s.shape[3],(function(){return "Error in conv3d: depth of input ("+u.shape[4]+") must match input depth for filter "+s.shape[3]+"."})),C(function(t,e){return ll(t)||ll(e)}(n,a),(function(){return "Error in conv3D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),C("NDHWC"===o,(function(){return "Error in conv3d: got dataFormat of "+o+" but only NDHWC is currently supported."}));var l=va(u.shape,s.shape,n,a,r),h=Lt.runKernelFunc((function(t,e){var n=t.conv3d(u,s,l);return e([u,s]),n}),{x:u,$filter:s},(function(t,e){C(ll(a),(function(){return "Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+a+"'"}));var o=e[0],i=e[1];return {x:function(){return hl(o.shape,t,i,n,r)},$filter:function(){return function(t,e,n,r,o){var a=t;4===t.rank&&(a=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var i=e;4===i.rank&&(i=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]));C(5===a.rank,(function(){return "Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."})),C(5===i.rank,(function(){return "Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."})),C(5===n.length,(function(){return "Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."})),C(a.shape[4]===n[3],(function(){return "Error in conv3dDerFilter: depth of input "+a.shape[4]+") must match input depth in filter ("+n[3]+"."})),C(i.shape[4]===n[4],(function(){return "Error in conv3dDerFilter: depth of dy ("+i.shape[4]+") must match output depth for filter ("+n[4]+")."}));var s=va(a.shape,n,r,1,o);return Lt.runKernelFunc((function(t){return t.conv3dDerFilter(a,i,s)}),{x5D:a,dy5D:i})}(o,t,i.shape,n,r)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),vl=An({conv2dDerFilter_:function(t,e,n,r,o,a,i){void 0===a&&(a="NHWC");var s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var u=e;3===u.rank&&(u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),C(4===s.rank,(function(){return "Error in conv2dDerFilter: input must be rank 4, but got shape "+s.shape+"."})),C(4===u.rank,(function(){return "Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."})),C(4===n.length,(function(){return "Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."}));var c="NHWC"===a?s.shape[3]:s.shape[1],l="NHWC"===a?u.shape[3]:u.shape[1];C(c===n[2],(function(){return "Error in conv2dDerFilter: depth of input "+c+") must match input depth in filter ("+n[2]+"."})),C(l===n[3],(function(){return "Error in conv2dDerFilter: depth of dy ("+l+") must match output depth for filter ("+n[3]+")."})),null!=i&&C(A$1(o),(function(){return "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var h=Ea(a),f=pa(s.shape,n,r,1,o,i,!1,h);return Lt.runKernelFunc((function(t){return t.conv2dDerFilter(s,u,f)}),{x4D:s,dy4D:u})}}),gl=An({conv2dDerInput_:cl}),ml=An({depthwiseConv2d_:function(t,e,n,r,o,a,i){void 0===a&&(a=[1,1]);var s=gn(t,"x","depthwiseConv2d"),u=gn(e,"filter","depthwiseConv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),C(4===c.rank,(function(){return "Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."})),C(4===u.rank,(function(){return "Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."})),C(c.shape[3]===u.shape[2],(function(){return "Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+u.shape[2]+"."})),null==a&&(a=[1,1]),C(Ca(n,a),(function(){return "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=i&&C(A$1(r),(function(){return "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+r+"."}));var h=pa(c.shape,u.shape,n,a,r,i,!0),f=[c,u],d=Lt.runKernelFunc((function(t,e){var n=t.depthwiseConv2D(c,u,h);return e([c,u]),n}),{x:c,filter:u},(function(t,e){C(wa(a),(function(){return "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+a+"'"}));var n=e[0],r=e[1];return {x:function(){return yl(n.shape,t,r,h)},filter:function(){return xl(n,t,r.shape,h)}}}),"DepthwiseConv2dNative",h,f);return l?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}}),yl=An({depthwiseConv2dDerInput_:function(t,e,n,r){var o=e,a=!1;3===e.rank&&(a=!0,o=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var i=Lt.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(o,n,r)}),{dy4D:o});return a?i.as3D(i.shape[1],i.shape[2],i.shape[3]):i}}),xl=An({depthwiseConv2dDerFilter_:function(t,e,n,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var a=e;return 3===a.rank&&(a=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Lt.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(o,a,r)}),{x4D:o,dy4D:a})}}),bl=An({separableConv2d_:function(t,e,n,r,o,a,i){void 0===a&&(a=[1,1]),void 0===i&&(i="NHWC");var s=gn(t,"x","separableConv2d"),u=gn(e,"depthwiseFilter","separableConv2d"),c=gn(n,"pointwiseFilter","separableConv2d"),l=s,h=!1;if(3===s.rank&&(h=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");C(4===l.rank,(function(){return "Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."})),C(4===u.rank,(function(){return "Error in separableConv2d: depthwise filter must be rank 4, but got rank "+u.rank+"."})),C(4===c.rank,(function(){return "Error in separableConv2d: pointwise filter must be rank 4, but got rank "+u.rank+"."})),C(1===c.shape[0],(function(){return "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."})),C(1===c.shape[1],(function(){return "Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+c.shape[1]+"."}));var f=u.shape[2],d=u.shape[3];C(c.shape[2]===f*d,(function(){return "Error in separableConv2d: the third dimension of pointwise filter must be "+f*d+", but got "+c.shape[2]+"."}));var p=ml(l,u,r,o,i,a),v=dl(p,c,1,"valid",i);return h?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),wl=An({conv2dTranspose_:function(t,e,n,r,o,a){return cl(n,gn(t,"x","conv2dTranspose"),gn(e,"filter","conv2dTranspose"),r,o,"NHWC",a)}}),Cl=An({conv3dTranspose_:function(t,e,n,r,o){return hl(n,gn(t,"x","conv3dTranspose"),gn(e,"filter","conv3dTranspose"),r,o)}});var El=An({matMul_:function(t,e,n,r){var o;void 0===n&&(n=!1),void 0===r&&(r=!1);var a=gn(t,"a","matMul"),i=gn(e,"b","matMul");o=Nt(a,i),a=o[0],i=o[1];var s=n?a.shape[a.rank-2]:a.shape[a.rank-1],u=r?i.shape[i.rank-1]:i.shape[i.rank-2],c=n?a.shape[a.rank-1]:a.shape[a.rank-2],l=r?i.shape[i.rank-2]:i.shape[i.rank-1],h=a.shape.slice(0,-2),f=i.shape.slice(0,-2),d=k(h),p=k(f);C(a.rank>=2&&i.rank>=2&&a.rank===i.rank,(function(){return "Error in matMul: inputs must have the same rank of at least 2, got ranks "+a.rank+" and "+i.rank+"."})),C(S(h,f),(function(){return "Error in matMul: outer dimensions ("+h+") and ("+f+") of Tensors with shapes "+a.shape+" and "+i.shape+" must match."})),C(s===u,(function(){return "Error in matMul: inner shapes ("+s+") and ("+u+") of Tensors with shapes "+a.shape+" and "+i.shape+" and transposeA="+n+" and transposeB="+r+" must match."}));var v=a.shape.slice(0,-2).concat([c,l]),g=n?a.as3D(d,s,c):a.as3D(d,c,s),m=r?i.as3D(p,l,u):i.as3D(p,u,l),y={transposeA:n,transposeB:r};return Lt.runKernelFunc((function(t,e){var o=t.batchMatMul(g,m,n,r);return e([g,m]),o}),{a:g,b:m},(function(t,e){var o=e,a=o[0],i=o[1];return n||r?!n&&r?{a:function(){return t.matMul(i,!1,!1)},b:function(){return t.matMul(a,!0,!1)}}:n&&!r?{a:function(){return i.matMul(t,!1,!0)},b:function(){return a.matMul(t,!1,!1)}}:{a:function(){return i.matMul(t,!0,!0)},b:function(){return t.matMul(a,!0,!0)}}:{a:function(){return t.matMul(i,!1,!0)},b:function(){return a.matMul(t,!0,!1)}}}),"BatchMatMul",y).reshape(v)}}),Rl=An({dot_:function(t,e){var n=gn(t,"t1","dot"),r=gn(e,"t2","dot");C(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return "Error in dot: inputs must all be rank 1 or 2, but got ranks "+n.rank+" and "+r.rank+"."}));var o=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];return C(o===a,(function(){return "Error in dot: inner dimensions of inputs must match, but got "+o+" and "+a+"."})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),Il=An({outerProduct_:function(t,e){var n=gn(t,"v1","outerProduct"),r=gn(e,"v2","outerProduct");return C(1===n.rank&&1===r.rank,(function(){return "Error in outerProduct: inputs must be rank 1, but got ranks "+n.rank+" and "+r.rank+"."})),n.as2D(-1,1).matMul(r.as2D(1,-1))}});var kl=An({reverse_:function(t,e){var n=gn(t,"x","reverse");if(0===n.rank)return n.clone();var r=O(e,n.shape);return Lt.runKernelFunc((function(t){return t.reverse(n,r)}),{$x:n},(function(t){return {$x:function(){return t.reverse(r)}}})).reshapeAs(n)}}),Sl=An({reverse1d_:function(t){var e=gn(t,"x","reverse");return C(1===e.rank,(function(){return "Error in reverse1D: x must be rank 1 but got rank "+e.rank+"."})),kl(e,0)}}),Al=An({reverse2d_:function(t,e){var n=gn(t,"x","reverse");return C(2===n.rank,(function(){return "Error in reverse2D: x must be rank 2 but got rank "+n.rank+"."})),kl(n,e)}}),Tl=An({reverse3d_:function(t,e){var n=gn(t,"x","reverse");return C(3===n.rank,(function(){return "Error in reverse3D: x must be rank 3 but got rank "+n.rank+"."})),kl(n,e)}}),Dl=An({reverse4d_:function(t,e){var n=gn(t,"x","reverse");return C(4===n.rank,(function(){return "Error in reverse4D: x must be rank 4 but got rank "+n.rank+"."})),kl(n,e)}});function Nl(t,e,n,r,o,a){var i=gn(t,"x","maxPool"),s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),null==r&&(r=[1,1]),C(4===s.rank,(function(){return "Error in maxPool: input must be rank 4 but got rank "+s.rank+"."})),C(Ca(n,r),(function(){return "Error in maxPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"})),null!=a&&C(A$1(o),(function(){return "Error in maxPool: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var c=fa(s.shape,e,n,r,o,a);if(1===c.filterWidth&&1===c.filterHeight&&S(c.inShape,c.outShape))return i.clone();var l=[s],h=Lt.runKernelFunc((function(t,e){var n=t.maxPool(s,c);return e([s,n]),n}),{x:s},(function(t,a){var i=a[0],s=a[1];return {x:function(){return function(t,e,n,r,o,a,i,s){var u=gn(t,"dy","maxPoolBackprop"),c=gn(e,"input","maxPoolBackprop"),l=gn(n,"output","maxPoolBackprop");C(c.rank===u.rank,(function(){return "Rank of input ("+c.rank+") does not match rank of dy ("+u.rank+")"})),null==a&&(a=[1,1]);C(Ca(o,a),(function(){return "Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+a+"'"})),C(4===u.rank,(function(){return "Error in maxPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."})),C(4===c.rank,(function(){return "Error in maxPoolBackprop: input must be rank 4 but got rank "+c.rank+"."})),null!=s&&C(A$1(i),(function(){return "Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+i+"."}));var h=fa(c.shape,r,o,a,i,s);return Lt.runKernelFunc((function(t){return t.maxPoolBackprop(u,c,l,h)}),{$dy:u,$input:c})}(t,i,s,e,n,r,o)}}}),"MaxPool",c,l);return u?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}function Fl(t,e,n,r,o,a){var i=gn(t,"x","avgPool","float32");null==r&&(r=[1,1]),C(Ca(n,r),(function(){return "Error in avgPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"}));var s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),C(4===s.rank,(function(){return "Error in avgPool: x must be rank 4 but got rank "+s.rank+"."})),null!=a&&C(A$1(o),(function(){return "Error in avgPool: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var c=fa(s.shape,e,n,r,o,a);if(1===c.filterWidth&&1===c.filterHeight&&S(c.inShape,c.outShape))return i.clone();var l=Lt.runKernelFunc((function(t){return t.avgPool(s,c)}),{x:s},(function(t){return {x:function(){return function(t,e,n,r,o,a){var i=gn(t,"dy","avgPoolBackprop"),s=gn(e,"input","avgPoolBackprop");C(s.rank===i.rank,(function(){return "Rank of input ("+s.rank+") does not match rank of dy ("+i.rank+")"})),null==o&&(o=[1,1]);C(Ca(r,o),(function(){return "Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"}));var u=s,c=i,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));C(4===c.rank,(function(){return "Error in avgPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."})),C(4===u.rank,(function(){return "Error in avgPoolBackprop: input must be rank 4 but got rank "+u.rank+"."}));var h=fa(u.shape,n,r,o,a),f=Lt.runKernelFunc((function(t){return t.avgPoolBackprop(c,u,h)}),{dy4D:c,input4D:u});if(l)return f.as3D(f.shape[1],f.shape[2],f.shape[3]);return f}(t,s,e,n,r,o)}}}),"AvgPool",c);return l=l.cast(i.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var _l=An({maxPool_:function(t,e,n,r,o){return Nl(t,e,n,1,r,o)}}),Ol=An({avgPool_:function(t,e,n,r,o){return Fl(t,e,n,1,r,o)}}),Ml=An({pool_:function(t,e,n,r,o,a){null==o&&(o=[1,1]),null==a&&(a=1),0===r&&(r="valid");var i=gn(t,"x","maxPool"),s=i,u=!1;3===i.rank&&(u=!0,s=i.as4D(1,i.shape[0],i.shape[1],i.shape[2])),C(Ca(a,o),(function(){return "Error in pool: Either strides or dilations must be 1. Got strides "+a+" and dilations '"+o+"'"}));var c,l=fa(s.shape,e,a,o,r),h=[l.dilationHeight,l.dilationWidth];c="same"===r?function(t,e){var n=t.map((function(t,n){return t+(t-1)*(e[n]-1)})).map((function(t){return t-1})),r=n.map((function(t){return Math.floor(t/2)})),o=n.map((function(t,e){return t-r[e]}));return n.map((function(t,e){return [r[e],o[e]]}))}([l.filterHeight,l.filterWidth],h):[[0,0],[0,0]];var f=1===h[0]&&1===h[1],d=function(t,e,n){var r=n.map((function(t){return t[0]})),o=n.map((function(t){return t[1]})),a=t.concat(r,o),i=e.map((function(t,e){return (t-a[e]%t)%t})),s=o.map((function(t,e){return t+i[e]})),u=e.map((function(t,e){return [r[e],s[e]]})),c=e.map((function(t,e){return [0,i[e]]}));return [u,c]}([l.inHeight,l.inWidth],h,c),p=d[0],v=d[1],g=f?r:"valid",m=f?s:cr(s,h,p),y=("avg"===n?function(){return Fl(m,e,a,1,g)}:function(){return Nl(m,e,a,1,g)})(),x=f?y:rr(y,h,v);return u?x.as3D(x.shape[1],x.shape[2],x.shape[3]):x}}),Bl=An({maxPool3d_:function(t,e,n,r,o,a,i){void 0===a&&(a="NDHWC");var s=gn(t,"x","maxPool3d"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==i&&(i=[1,1,1]),C(5===u.rank,(function(){return "Error in maxPool3d: x must be rank 5 but got rank "+u.rank+"."})),C("NDHWC"===a,(function(){return "Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a})),C(Ca(n,i),(function(){return "Error in maxPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),null!=o&&C(A$1(r),(function(){return "Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=da(u.shape,e,n,i,r,o,a),h=Lt.runKernelFunc((function(t,e){var n=t.maxPool3d(u,l);return e([u,n]),n}),{x:u},(function(t,a){var s=a[0],u=a[1];return {x:function(){return function(t,e,n,r,o,a,i,s){var u=gn(t,"dy","maxPool3dBackprop"),c=gn(e,"input","maxPool3dBackprop"),l=gn(n,"output","maxPool3dBackprop"),h=u,f=c,d=l,p=!1;4===c.rank&&(p=!0,h=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),f=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),d=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]));C(5===h.rank,(function(){return "Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."})),C(5===f.rank,(function(){return "Error in maxPool3dBackprop: input must be rank 5 but got rank "+f.rank+"."})),C(5===d.rank,(function(){return "Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."})),null==a&&(a=[1,1,1]);C(Ca(o,a),(function(){return "Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+a+"'"})),null!=s&&C(A$1(i),(function(){return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+i+"."}));var v=da(f.shape,r,o,a,i,s),g=Lt.runKernelFunc((function(t){return t.maxPool3dBackprop(h,f,d,v)}),{dy5D:h,input5D:f});if(p)return g.as4D(g.shape[1],g.shape[2],g.shape[3],g.shape[4]);return g}(t,s,u,e,n,i,r,o)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Pl=An({avgPool3d_:function(t,e,n,r,o,a,i){void 0===a&&(a="NDHWC");var s=gn(t,"x","avgPool3d","float32"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==i&&(i=[1,1,1]),C(5===u.rank,(function(){return "Error in avgPool3d: x must be rank 5 but got rank "+u.rank+"."})),C("NDHWC"===a,(function(){return "Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a})),C(Ca(n,i),(function(){return "Error in avgPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),null!=o&&C(A$1(r),(function(){return "Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=da(u.shape,e,n,i,r,o,a),h=Lt.runKernelFunc((function(t){return t.avgPool3d(u,l)}),{x:u},(function(t){return {x:function(){return function(t,e,n,r,o,a,i){var s=gn(t,"dy","avgPool3dBackprop"),u=gn(e,"input","avgPool3dBackprop"),c=s,l=u,h=!1;4===u.rank&&(h=!0,c=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]));C(5===c.rank,(function(){return "Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),C(5===l.rank,(function(){return "Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."})),null==o&&(o=[1,1,1]);C(Ca(r,o),(function(){return "Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"})),null!=i&&C(A$1(a),(function(){return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+a+"."}));var f=da(l.shape,n,r,o,a,i),d=Lt.runKernelFunc((function(t){return t.avgPool3dBackprop(c,l,f)}),{dy5D:c,input5D:l});if(h)return d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]);return d}(t,u,e,n,i,r,o)}}}));return h=h.cast(u.dtype),c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Ll=An({maxPoolWithArgmax_:function(t,e,n,r,o){void 0===o&&(o=!1);var a=gn(t,"x","maxPoolWithArgmax"),i={filterSize:e,strides:n,pad:r,includeBatchInIndex:o},s=Lt.runKernel("MaxPoolWithArgmax",{x:a},i);return {result:s[0],indexes:s[1]}}});var Wl=An({slice_:function(t,e,n){var r,o,a=gn(t,"x","slice");if(0===a.rank)throw new Error("Slicing scalar is not possible");(r="number"==typeof e?[e].concat(new Array(a.rank-1).fill(0)):e.length<a.rank?e.concat(new Array(a.rank-e.length).fill(0)):e.slice()).forEach((function(t){C(-1!==t,(function(){return "slice() does not support negative begin indexing."}));})),o=(o=null==n?new Array(a.rank).fill(-1):"number"==typeof n?[n].concat(new Array(a.rank-1).fill(-1)):n.length<a.rank?n.concat(new Array(a.rank-n.length).fill(-1)):n).map((function(t,e){return t>=0?t:(C(-1===t,(function(){return "Negative size values should be exactly -1 but got "+t+" for the slice() size at index "+e+"."})),a.shape[e]-r[e])})),qo(a,r,o);var i=a.shape,s={begin:r,size:o};return Lt.runKernelFunc((function(t){return t.slice(a,r,o)}),{x:a},(function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],i[n]-r[n]-o[n]]);return {x:function(){return Ic(t,e)}}}),"Slice",s)}}),Ul=An({slice1d_:function(t,e,n){var r=gn(t,"x","slice1d");return C(1===r.rank,(function(){return "slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),Wl(r,[e],[n])}}),Vl=An({slice2d_:function(t,e,n){var r=gn(t,"x","slice2d");return C(2===r.rank,(function(){return "slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),Wl(r,e,n)}}),zl=An({slice3d_:function(t,e,n){var r=gn(t,"x","slice3d");return C(3===r.rank,(function(){return "slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),Wl(r,e,n)}}),Gl=An({slice4d_:function(t,e,n){var r=gn(t,"x","slice4d");return C(4===r.rank,(function(){return "slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),Wl(r,e,n)}});function Hl(t,e,n,r,o){return e.rank<n.rank&&(e=e.reshape(wn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(wn(t.shape,r))),{x:function(){var r=t.mul(n.equal(e).cast(t.dtype));return null==o?r:r.transpose(o)}}}var ql=An({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,"x","all","bool"),o=O(e,r.shape),a=o,i=En(a,r.rank);null!=i&&(r=r.transpose(i),a=In(a.length,r.rank));var s=Lt.runKernelFunc((function(t){return t.all(r,a)}),{$x:r});if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),Kl=An({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,"x","any","bool"),o=O(e,r.shape),a=o,i=En(a,r.rank);null!=i&&(r=r.transpose(i),a=In(a.length,r.rank));var s=Lt.runKernelFunc((function(t){return t.any(r,a)}),{$x:r});if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),jl=An({argMax_:function(t,e){void 0===e&&(e=0);var n=gn(t,"x","argMax");null==e&&(e=0);var r=O(e,n.shape),o=En(r,n.rank);null!=o&&(n=n.transpose(o),r=In(r.length,n.rank));var a={axis:r[0]},i=[n];return Lt.runKernelFunc((function(t,e){var o=t.argMax(n,r[0]);return e([n]),o}),{x:n},(function(t,e){var n=e[0];return {x:function(){return Xn(n)}}}),"ArgMax",a,i)}}),Xl=An({argMin_:function(t,e){void 0===e&&(e=0);var n=gn(t,"x","argMin");null==e&&(e=0);var r=O(e,n.shape),o=En(r,n.rank);return null!=o&&(n=n.transpose(o),r=In(r.length,n.rank)),Lt.runKernelFunc((function(t,e){var o=t.argMin(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return {$x:function(){return Xn(n)}}}))}}),Yl=An({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,"x","logSumExp"),o=O(e,r.shape),a=r.max(o,!0),i=r.sub(a).exp().sum(o).log(),s=a.reshape(i.shape).add(i);if(n){var u=wn(s.shape,o);return s.reshape(u)}return s}}),$l=An({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,"x","max"),o=r,a=O(e,r.shape),i=a,s=En(i,r.rank);null!=s&&(r=r.transpose(s),i=In(i.length,r.rank));var u=[r],c=Lt.runKernelFunc((function(t,e){var n=t.max(r,i);return e([o,n]),n}),{x:r},(function(t,e){return Hl(t,e[1],e[0],a,s)}),"Max",{axes:i},u,[!0]);if(n){var l=wn(c.shape,a);c=c.reshape(l);}return c}}),Ql=An({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,"x","mean"),o=O(e,r.shape),a=k(bn(r.shape,o)[1]);return oa((function(t){var r=On(a);return {value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1;})),e.reshape(n).mul(zn(t.shape,"float32")).div(a)}}}))(r)}}),Jl=An({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,"x","min"),o=r,a=O(e,r.shape),i=a,s=En(i,r.rank);null!=s&&(r=r.transpose(s),i=In(i.length,r.rank));var u=[r],c=Lt.runKernelFunc((function(t,e){var n=t.min(r,i);return e([o,n]),n}),{x:r},(function(t,e){return Hl(t,e[1],e[0],a,s)}),"Min",{axes:i},u,[!0]);if(n){var l=wn(c.shape,a);c=c.reshape(l);}return c}}),Zl=An({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=O(e,(t=gn(t,"x","moments")).shape),o=t.mean(r,n),a=o.shape;n||(a=wn(o.shape,r));var i=t.toFloat().sub(o.reshape(a)).square();return {mean:o,variance:i.mean(r,n)}}}),th=An({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());var o=O(e,r.shape);return oa((function(t){var e=En(o,t.rank),r=o,a=t;null!=e&&(a=t.transpose(e),r=In(r.length,t.rank));var i=function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1;})),e.reshape(n).mul(zn(t.shape,"float32"))},s={axes:r},u=Lt.runKernelFunc((function(t){return t.sum(a,r)}),{x:a},(function(t){return {x:function(){return i(t)}}}),"Sum",s);if(n){var c=wn(u.shape,o);u=u.reshape(c);}return {value:u,gradFunc:i}}))(r)}}),eh=An({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=gn(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());var o=O(e,r.shape),a=En(o,r.rank),i=o,s=r;null!=a&&(s=r.transpose(a),i=In(i.length,r.rank));var u=Lt.runKernelFunc((function(t){return t.prod(s,i)}),{permutedX:s});if(n){var c=wn(u.shape,o);u=u.reshape(c);}return u}});var nh=An({elu_:function(t){var e=gn(t,"x","elu");return Lt.runKernelFunc((function(t,n){var r=t.elu(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){return Lt.runKernelFunc((function(e){return e.eluDer(t,n)}),{dy:t,y:n})}}}))}}),rh=An({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=gn(t,"x","leakyRelu");return Eo(On(e).mul(n),n)}}),oh=An({prelu_:function(t,e){var n=gn(t,"x","prelu"),r=gn(e,"alpha","prelu");return Lt.runKernelFunc((function(t,e){var o=t.prelu(n,r);return e([n,r]),o}),{x:n,alpha:r},(function(t,e){var n=e[0],r=e[1],o=n.greater(0);return {x:function(){return yc(o,t,t.mul(r))},alpha:function(){var e=yc(o,Xn(t),t.mul(n)),a=Br(r.shape,t.shape);return a.length>0&&(e=e.sum(a)),e.reshape(r.shape)}}}),"Prelu")}}),ah=An({relu_:function(t){var e=gn(t,"x","relu");return "bool"===e.dtype?e.toInt():Lt.runKernelFunc((function(t,n){var r=t.relu(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return {x:function(){return t.mulStrict(n.step().toFloat())}}}),"Relu")}}),ih=An({relu6_:function(t){var e=gn(t,"x","relu6");return "bool"===e.dtype?e.toInt():Lt.runKernelFunc((function(t,n){var r=t.relu6(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0],r=n.lessEqual(6).mul(n.step());return {x:function(){return t.mulStrict(r.toFloat())}}}),"Relu6")}}),sh=An({selu_:function(t){var e=gn(t,"x","selu");return Lt.runKernelFunc((function(t,n){var r=t.selu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return {$x:function(){var e=n.greater(On(0)),r=On(su),o=On(uu),a=t.mul(o),i=t.mul(r).mul(n.toFloat().exp());return yc(e,a,i)}}}))}});var uh=An({localResponseNormalization_:function(t,e,n,r,o){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===o&&(o=.5);var a=gn(t,"x","localResponseNormalization");C(4===a.rank||3===a.rank,(function(){return "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+a.rank+"."})),C(A$1(e),(function(){return "Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+e+"."}));var i=a,s=!1;3===a.rank&&(s=!0,i=a.as4D(1,a.shape[0],a.shape[1],a.shape[2]));var u=Lt.runKernelFunc((function(t,a){var s=t.localResponseNormalization4D(i,e,n,r,o);return a([i,s]),s}),{x4D:i},(function(t,a){var i=a[0],s=a[1];return {x4D:function(){return Lt.runKernelFunc((function(a){return a.LRNGrad(t,i,s,e,n,r,o)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}});var ch=An({norm_:function(t,e,n,r){void 0===e&&(e="euclidean"),void 0===n&&(n=null),void 0===r&&(r=!1);var o=function t(e,n,r){void 0===r&&(r=null);if(0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(On(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=gn(t,"x","norm"),e,n),a=o.shape;if(r){var i=O(n,t.shape);a=wn(o.shape,i);}return o.reshape(a)}});var lh=An({basicLSTMCell_:function(t,e,n,r,o,a){var i=gn(t,"forgetBias","basicLSTMCell"),s=gn(e,"lstmKernel","basicLSTMCell"),u=gn(n,"lstmBias","basicLSTMCell"),c=gn(r,"data","basicLSTMCell"),l=gn(o,"c","basicLSTMCell"),h=gn(a,"h","basicLSTMCell"),f=c.concat(h,1).matMul(s).add(u),d=f.shape[0],p=f.shape[1]/4,v=[d,p],g=f.slice([0,0],v),m=f.slice([0,p],v),y=f.slice([0,2*p],v),x=f.slice([0,3*p],v),b=g.sigmoid().mulStrict(m.tanh()).addStrict(l.mulStrict(i.add(y).sigmoid())),w=b.tanh().mulStrict(x.sigmoid());return [b,w]}}),hh=An({multiRNNCell_:function(t,e,n,r){for(var o=gn(e,"data","multiRNNCell"),a=mn(n,"c","multiRNNCell"),i=mn(r,"h","multiRNNCell"),s=o,u=[],c=0;c<t.length;c++){var l=t[c](s,a[c],i[c]);u.push(l[0]),u.push(l[1]),s=l[1];}var h=[],f=[];for(c=0;c<u.length;c+=2)h.push(u[c]),f.push(u[c+1]);return [h,f]}});var fh=An({movingAverage_:function(t,e,n,r,o){void 0===o&&(o=!0);var a=gn(t,"v","movingAverage"),i=gn(e,"x","movingAverage"),s=gn(n,"decay","movingAverage");Ft(a,i),C(S(a.shape,i.shape),(function(){return "Shape mismatch in v and x"}));var u=On(1),c=u.sub(s),l=i.sub(a).mul(c);if(o){C(null!=r,(function(){return "When using zeroDebias: true, step is required."}));var h=gn(r,"step","movingAverage");l=l.div(u.sub(No(s,h)));}return a.add(l)}});var dh=An({stridedSlice_:function(t,e,n,r,o,a,i,s,u){if(void 0===o&&(o=0),void 0===a&&(a=0),void 0===i&&(i=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(e.length)),0!==i)throw new Error("ellipsis mask is not yet supported");var c=gn(t,"x","stridedSlice"),l=Ko(s),h=c.shape.slice();l.forEach((function(t){e[t]=0,n[t]=1,h.splice(t,0,1);})),c=c.reshape(h);for(var f=0;f<c.rank;f++)e[f]=Xo(o,e,r,c.shape,f),n[f]=Yo(a,n,r,c.shape,f),r[f]=r[f]||1;var d=Ko(u);d.forEach((function(t){n[t]=e[t]+1,r[t]=1;}));var p=jo(e,n,r),v=p.filter((function(t,e){return -1===d.indexOf(e)}));return r.every((function(t){return 1===t}))?Wl(c,e,p).reshape(v):Lt.runKernelFunc((function(t){return t.stridedSlice(c,e,n,r)}),{$x:c}).reshape(v)}});var ph=An({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=gn(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var o=r.shape[r.shape.length-1];if(e>o)throw new Error("'k' passed to topk() must be <= the last dimension ("+o+") but got "+e);var a=Lt.runKernelFunc((function(t){return t.topk(r,e,n)}),{$x:r});return {values:a[0],indices:a[1]}}});var vh=An({scatterND_:function(t,e,n){var r=gn(t,"indices","scatterND","int32"),o=gn(e,"updates","scatterND");return zo(o,r,n),Lt.runKernelFunc((function(t){return t.scatterND(r,o,n)}),{indices:r,updates:o},null,"ScatterNd",{shape:n})}});var gh=An({fft_:function(t){C("complex64"===t.dtype,(function(){return "The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.runKernelFunc((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),mh=An({ifft_:function(t){C("complex64"===t.dtype,(function(){return "The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Lt.runKernelFunc((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),yh=An({rfft_:function(t,e){C("float32"===t.dtype,(function(){return "The dtype for rfft() must be real value but got "+t.dtype}));var n,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=e&&e<r){var a=t.shape.map((function(t){return 0})),i=t.shape.map((function(t){return t}));i[t.shape.length-1]=e,n=t.slice(a,i),r=e;}else if(null!=e&&e>r){var s=t.shape.map((function(t){return t}));s[t.shape.length-1]=e-r,n=t.concat(Gn(s),t.shape.length-1),r=e;}else n=t;var u=n.zerosLike(),c=Tn(n,u).as2D(o,r),l=gh(c),h=Math.floor(r/2)+1,f=Dn(l),d=Nn(l),p=f.split([h,r-h],f.shape.length-1),v=d.split([h,r-h],d.shape.length-1),g=n.shape.slice();return g[n.shape.length-1]=h,Tn(p[0],v[0]).reshape(g)}}),xh=An({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),o=mh(r);return Dn(o)}var a=[n,2*(e-1)],i=Dn(t).as2D(n,e),s=Nn(t).as2D(n,e),u=i.slice([0,1],[n,e-2]).reverse(1),c=s.slice([0,1],[n,e-2]).reverse(1).mul(On(-1)),l=i.concat(u,1),h=s.concat(c,1);return r=Tn(l,h).as2D(a[0],a[1]),o=mh(r),Dn(o)}}),bh=Object.freeze({fft:gh,ifft:mh,rfft:yh,irfft:xh});var wh=An({sparseToDense_:function(t,e,n,r){void 0===r&&(r=0);var o=gn(t,"sparseIndices","sparseToDense","int32"),a=gn(e,"sparseValues","sparseToDense"),i=gn(r,"defaultValue","sparseToDense",a.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var o=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error("outputShape has incorrect number of elements:, "+n.length+", should be: "+a+".");var i=e.size;if(0!==e.rank&&(1!==e.rank||i!==o))throw new Error("sparseValues has incorrect shape "+e.shape+", should be [] or ["+o+"]");if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,a,n,i),Lt.runKernelFunc((function(t){return t.sparseToDense(o,a,n,i)}),{$sparseIndices:o,$sparseValues:a,$defaultValue:i})}});var Ch=An({gatherND_:function(t,e){var n=gn(e,"indices","gatherND","int32"),r=gn(t,"x","gatherND");return Lt.runKernelFunc((function(t){return t.gatherND(r,n)}),{x:r,indices:n},null,"GatherNd")}});var Eh=An({diag_:function(t){var e=gn(t,"x","diag").flatten(),n=t.shape.concat(t.shape);return Lt.runKernelFunc((function(t){return t.diag(e)}),{$x:e}).reshape(n)}});var Rh=An({dropout_:function(t,e,n,r){var o=gn(t,"x","dropout");if(C("float32"===o.dtype,(function(){return "x has to be a floating point tensor since it's going to be scaled, but got a "+o.dtype+" tensor instead."})),C(e>=0&&e<1,(function(){return "rate must be a float in the range [0, 1), but got "+e+"."})),0===e)return t instanceof wt?o.clone():o;var a=function(t,e){if(null==e)return t.shape.slice();if(S(t.shape,e))return e;if(t.shape.length===e.length){for(var n=[],r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(o,n),i=1-e,s=zc(a,0,1,"float32",r).add(i).floor().div(i);return o.mul(s)}});function Ih(t,e,n){for(var r=1-t%2,o=new Float32Array(t),a=0;a<t;++a){var i=2*Math.PI*a/(t+r-1);o[a]=e-n*Math.cos(i);}return Mn(o,"float32")}var kh=An({hannWindow_:function(t){return Ih(t,.5,.5)}}),Sh=An({hammingWindow_:function(t){return Ih(t,.54,.46)}}),Ah=An({frame_:function(t,e,n,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var a=0,i=[];a+e<=t.size;)i.push(Wl(t,a,e)),a+=n;if(r)for(;a<t.size;){var s=a+e-t.size,u=Yn([Wl(t,a,e-s),Hn([s],o)]);i.push(u),a+=n;}return 0===i.length?Bn([],[0,e]):Yn(i).as2D(i.length,e)}}),Th=An({stft_:function(t,e,n,r,o){var a;void 0===o&&(o=kh),null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));for(var i=Ah(t,e,n),s=To(i,o(e)),u=[],c=0;c<i.shape[0];c++)u.push(yh(s.slice([c,0],[1,e]),r));return Yn(u)}}),Dh=Object.freeze({hannWindow:kh,hammingWindow:Sh,frame:Ah,stft:Th});var Nh,Fh=function(t,e,o){return void 0===o&&(o=1),n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f,d,p,v,g,m;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,"predictions","inTopK"),a=gn(e,"targets","inTopK"),C(n.rank>1,(function(){return "inTopK() expects the predictions to be of rank 2 or higher, but got "+n.rank})),C(n.rank-1===a.rank,(function(){return "predictions rank should be 1 larger than targets rank, but got predictions rank "+n.rank+" and targets rank "+a.rank})),E(n.shape.slice(0,n.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),i=n.shape[n.shape.length-1],C(o>0&&o<=i,(function(){return "'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+i+"), but got "+o})),[4,n.data()];case 1:return s=r.sent(),[4,a.data()];case 2:for(u=r.sent(),c=[s.length/i,i],h=c[1],f=B("bool",l=c[0]),d=0;d<l;d++){for(p=d*h,v=s.subarray(p,p+h),g=[],m=0;m<v.length;m++)g.push({value:v[m],index:m});for(g.sort((function(t,e){return e.value-t.value})),f[d]=0,m=0;m<o;m++)if(g[m].index===u[d]){f[d]=1;break}}return t!==n&&n.dispose(),e!==a&&a.dispose(),[2,Fn(f,a.shape,"bool")]}}))}))};!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";}(Nh||(Nh={}));var _h=An({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,"labels","absoluteDifference"),a=gn(e,"predictions","absoluteDifference"),i=null;null!=n&&(i=gn(n,"weights","absoluteDifference")),E(o.shape,a.shape,"Error in absoluteDifference: ");var s=o.sub(a).abs();return Oh(s,i,r)}}),Oh=An({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=Nh.SUM_BY_NONZERO_WEIGHTS);var r=gn(t,"losses","computeWeightedLoss"),o=null;null!=e&&(o=gn(e,"weights","computeWeightedLoss"));var a=null==o?r:r.mul(o);if(n===Nh.NONE)return a;if(n===Nh.SUM)return a.sum();if(n===Nh.MEAN){if(null==o)return a.mean();var i=r.size/o.size,s=a.sum().div(o.sum());return i>1?s.div(On(i)):s}if(n===Nh.SUM_BY_NONZERO_WEIGHTS){if(null==o)return a.sum().div(On(r.size));var u=o.mul(zn(r.shape)).notEqual(On(0)).sum().toFloat();return a.sum().div(u)}throw Error("Unknown reduction: "+n)}}),Mh=An({cosineDistance_:function(t,e,n,r,o){void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,"labels","cosineDistance"),i=gn(e,"predictions","cosineDistance"),s=null;null!=r&&(s=gn(r,"weights","cosineDistance")),E(a.shape,i.shape,"Error in cosineDistance: ");var u=On(1).sub(a.mul(i).sum(n,!0));return Oh(u,s,o)}}),Bh=An({hingeLoss_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,"labels","hingeLoss"),a=gn(e,"predictions","hingeLoss"),i=null;null!=n&&(i=gn(n,"weights","hingeLoss")),E(o.shape,a.shape,"Error in hingeLoss: ");var s=On(1);o=On(2).mul(o).sub(s);var u=s.sub(o.mul(a)).relu();return Oh(u,i,r)}}),Ph=An({huberLoss_:function(t,e,n,r,o){void 0===r&&(r=1),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,"labels","huberLoss"),i=gn(e,"predictions","huberLoss"),s=null;null!=n&&(s=gn(n,"weights","huberLoss")),E(a.shape,i.shape,"Error in huberLoss: ");var u=On(r),c=i.sub(a).abs(),l=Io(c,u),h=c.sub(l),f=On(.5).mul(l.square()).add(u.mul(h));return Oh(f,s,o)}}),Lh=An({logLoss_:function(t,e,n,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,"labels","logLoss"),i=gn(e,"predictions","logLoss"),s=null;null!=n&&(s=gn(n,"weights","logLoss")),E(a.shape,i.shape,"Error in logLoss: ");var u=On(1),c=On(r),l=a.mul(i.add(c).log()).neg().sub(u.sub(a).mul(u.sub(i).add(c).log()));return Oh(l,s,o)}}),Wh=An({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=Nh.SUM_BY_NONZERO_WEIGHTS);var o=gn(t,"labels","meanSquaredError"),a=gn(e,"predictions","meanSquaredError"),i=null;null!=n&&(i=gn(n,"weights","meanSquaredError")),E(o.shape,a.shape,"Error in meanSquaredError: ");var s=o.squaredDifference(a);return Oh(s,i,r)}}),Uh=An({sigmoidCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,"multiClassLabels","sigmoidCrossEntropy"),i=gn(e,"logits","sigmoidCrossEntropy"),s=null;if(null!=n&&(s=gn(n,"weights","sigmoidCrossEntropy")),E(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){var u=On(r),c=On(1),l=On(.5);a=a.mul(c.sub(u)).add(l.mul(u));}var h=function(t,e){var n=gn(t,"labels","sigmoidCrossEntropyWithLogits"),r=gn(e,"logits","sigmoidCrossEntropyWithLogits");E(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var o=r.relu(),a=r.mul(n),i=r.abs().neg().exp().log1p();return o.sub(a).add(i)}(a,i);return Oh(h,s,o)}}),Vh=An({softmaxCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=Nh.SUM_BY_NONZERO_WEIGHTS);var a=gn(t,"onehotLabels","softmaxCrossEntropy"),i=gn(e,"logits","softmaxCrossEntropy"),s=null;if(null!=n&&(s=gn(n,"weights","softmaxCrossEntropy")),E(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){var u=On(r),c=On(1),l=On(a.shape[1]);a=a.mul(c.sub(u)).add(u.div(l));}var h=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+e.rank+" and dim was "+n);return oa((function(t,e,r){var o=e.logSumExp([n],!0),a=e.toFloat().sub(o);r([t,a]);return {value:a.mul(t).neg().sum([n]),gradFunc:function(t,e){var r=e[0],o=e[1],a=wn(t.shape,[n]);return [t.reshape(a).mul(r.toFloat().sub(o.exp())),t.reshape(a).mul(o.exp().sub(r.toFloat()))]}}}))(t,e)}(a,i);return Oh(h,s,o)}}),zh=Object.freeze({get Reduction(){return Nh},absoluteDifference:_h,computeWeightedLoss:Oh,cosineDistance:Mh,hingeLoss:Bh,huberLoss:Ph,logLoss:Lh,meanSquaredError:Wh,sigmoidCrossEntropy:Uh,softmaxCrossEntropy:Vh});function Gh(t,e){return void 0===e&&(e=!1),Lt.tidy((function(){if(2!==t.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor.");for(var n=t.shape[0],r=t.shape[1],o=Cc(n),a=t.clone(),i=Bn([[1]],[1,1]),s=i.clone(),u=n>=r?r:n,c=function(t){var e,u=a,c=s,l=o;e=Lt.tidy((function(){var e=a.slice([t,t],[n-t,1]),u=e.norm(),c=a.slice([t,t],[1,1]),l=Bn([[-1]]).where(c.greater(0),Bn([[1]])),h=c.sub(l.mul(u)),f=e.div(h);s=1===f.shape[0]?i.clone():i.concat(f.slice([1,0],[f.shape[0]-1,f.shape[1]]),0);var d=l.matMul(h).div(u).neg(),p=a.slice([t,0],[n-t,r]),v=d.mul(s),g=s.transpose();if(0===t)a=p.sub(v.matMul(g.matMul(p)));else {var m=p.sub(v.matMul(g.matMul(p)));a=a.slice([0,0],[t,r]).concat(m,0);}var y=v.transpose(),x=o.slice([0,t],[n,o.shape[1]-t]);if(0===t)o=x.sub(x.matMul(s).matMul(y));else {var b=x.sub(x.matMul(s).matMul(y));o=o.slice([0,0],[n,t]).concat(b,1);}return [s,a,o]})),s=e[0],a=e[1],o=e[2],tn([u,c,l]);},l=0;l<u;++l)c(l);return !e&&n>r&&(o=o.slice([0,0],[n,r]),a=a.slice([0,0],[r,r])),[o,a]}))}var Hh=An({bandPart_:function(t,e,n){if(e%1!=0)throw new Error("bandPart(): numLower must be an integer, got "+e+".");if(n%1!=0)throw new Error("bandPart(): numUpper must be an integer, got "+n+".");var r=gn(t,"a","bandPart");if(r.rank<2)throw new Error("bandPart(): Rank must be at least 2, got "+r.rank+".");var o=r.shape,a=r.shape.slice(-2),i=a[0],s=a[1];if(!(e<=i))throw new Error("bandPart(): numLower ("+e+") must not be greater than the number of rows ("+i+").");if(!(n<=s))throw new Error("bandPart(): numUpper ("+n+") must not be greater than the number of columns ("+s+").");e<0&&(e=i),n<0&&(n=s);var u=Kn(0,i,1,"int32").reshape([-1,1]),c=Kn(0,s,1,"int32"),l=Oo(u,c),h=pc(l.lessEqual(On(+e,"int32")),l.greaterEqual(On(-n,"int32"))),f=Gn([i,s],r.dtype);return hr(fr(r.reshape([-1,i,s])).map((function(t){return yc(h,t,f)}))).reshape(o)}}),qh=An({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,C(null!=t&&t.length>0,(function(){return "Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var n=t[0].shape[0],r=function(e){C(t[e].shape[0]===n,(function(){return "Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[e].shape[0]+" vs. "+n+")"}));},o=1;o<t.length;++o)r(o);}else e=!0,t=tr(t,t.shape[0],0).map((function(t){return lr(t,[0])}));C(t.length<=t[0].shape[0],(function(){return "Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+")."}));var a=[],i=t,s=function(t){a.push(Lt.tidy((function(){var e=i[t];if(t>0)for(var n=0;n<t;++n){var r=th(a[n].mulStrict(e)).mul(a[n]);e=e.sub(r);}return e.div(ch(e,"euclidean"))})));};for(o=0;o<t.length;++o)s(o);return e?hr(a,0):a}}),Kh=An({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return Gh(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce((function(t,e){return t*e})),r=fr(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],a=[];return r.forEach((function(t){var n=Gh(t,e),r=n[0],i=n[1];o.push(r),a.push(i);})),[hr(o,0).reshape(t.shape),hr(a,0).reshape(t.shape)]}}),jh=Object.freeze({bandPart:Hh,gramSchmidt:qh,qr:Kh});function Xh(t,e,n,r,o,a){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==a&&(a=0);var i=t.shape[0];return n=Math.min(n,i),C(0<=r&&r<=1,(function(){return "iouThreshold must be in [0, 1], but was '"+r+"'"})),C(2===t.rank,(function(){return "boxes must be a 2D tensor, but was of rank '"+t.rank+"'"})),C(4===t.shape[1],(function(){return "boxes must have 4 columns, but 2nd dimension was "+t.shape[1]})),C(1===e.rank,(function(){return "scores must be a 1D tensor"})),C(e.shape[0]===i,(function(){return "scores has incompatible shape with boxes. Expected "+i+", but was "+e.shape[0]})),C(0<=a&&a<=1,(function(){return "softNmsSigma must be in [0, 1], but was '"+a+"'"})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o,softNmsSigma:a}}var Yh=An({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=gn(t,"images","resizeBilinear");C(3===r.rank||4===r.rank,(function(){return "Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),C(2===e.length,(function(){return "Error in resizeBilinear: new shape must 2D, but got shape "+e+"."}));var o=r,a=!1;3===r.rank&&(a=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var i=e[0],s=e[1],u=Lt.runKernelFunc((function(t,e){return e([o]),t.resizeBilinear(o,i,s,n)}),{x:o},(function(t,e){return {x:function(){return Lt.runKernelFunc((function(r){return r.resizeBilinearBackprop(t,e[0],n)}),{})}}}),"ResizeBilinear",{alignCorners:n,newHeight:i,newWidth:s});return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),$h=An({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=gn(t,"images","resizeNearestNeighbor");C(3===r.rank||4===r.rank,(function(){return "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),C(2===e.length,(function(){return "Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."})),C("float32"===r.dtype||"int32"===r.dtype,(function(){return "`images` must have `int32` or `float32` as dtype"}));var o=r,a=!1;3===r.rank&&(a=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var i=e[0],s=e[1],u=Lt.runKernelFunc((function(t,e){return e([o]),t.resizeNearestNeighbor(o,i,s,n)}),{batchImages:o},(function(t,e){return {batchImages:function(){return Lt.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(t,e[0],n)}),{})}}}));return a?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Qh=An({nonMaxSuppression_:function(t,e,n,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var a=gn(t,"boxes","nonMaxSuppression"),i=gn(e,"scores","nonMaxSuppression"),s=Xh(a,i,n,r,o);n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold;var u={maxOutputSize:n,iouThreshold:r,scoreThreshold:o};return Lt.runKernelFunc((function(t){return t.nonMaxSuppression(a,i,n,r,o)}),{boxes:a,scores:i},null,"NonMaxSuppressionV3",u)}}),Jh=function(t,e,o,a,i){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),n(this,void 0,void 0,(function(){var n,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,"boxes","nonMaxSuppressionAsync"),s=gn(e,"scores","nonMaxSuppressionAsync"),u=Xh(n,s,o,a,i),o=u.maxOutputSize,a=u.iouThreshold,i=u.scoreThreshold,[4,Promise.all([n.data(),s.data()])];case 1:return c=r.sent(),l=c[0],h=c[1],f=Oa(l,h,o,a,i),n!==t&&n.dispose(),s!==e&&s.dispose(),[2,f]}}))}))},Zh=An({nonMaxSuppressionWithScore_:function(t,e,n,r,o,a){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===a&&(a=0);var i=gn(t,"boxes","nonMaxSuppression"),s=gn(e,"scores","nonMaxSuppression"),u=Xh(i,s,n,r,o,a),c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:o=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},l=Lt.runKernel("NonMaxSuppressionV5",{boxes:i,scores:s},c);return {selectedIndices:l[0],selectedScores:l[1]}}}),tf=function(t,e,o,a,i,s){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),void 0===s&&(s=0),n(this,void 0,void 0,(function(){var n,u,c,l,h,f,d;return r(this,(function(r){switch(r.label){case 0:return n=gn(t,"boxes","nonMaxSuppressionAsync"),u=gn(e,"scores","nonMaxSuppressionAsync"),c=Xh(n,u,o,a,i,s),o=c.maxOutputSize,a=c.iouThreshold,i=c.scoreThreshold,s=c.softNmsSigma,[4,Promise.all([n.data(),u.data()])];case 1:return l=r.sent(),h=l[0],f=l[1],d=Ma(h,f,o,a,i,s),n!==t&&n.dispose(),u!==e&&u.dispose(),[2,d]}}))}))},ef=An({cropAndResize_:function(t,e,n,r,o,a){var i=gn(t,"image","cropAndResize"),s=gn(e,"boxes","cropAndResize","float32"),u=gn(n,"boxInd","cropAndResize","int32");o=o||"bilinear",a=a||0;var c=s.shape[0];return C(4===i.rank,(function(){return "Error in cropAndResize: image must be rank 4,but got rank "+i.rank+"."})),C(2===s.rank&&4===s.shape[1],(function(){return "Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+s.shape+"."})),C(1===u.rank&&u.shape[0]===c,(function(){return "Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+s.shape+"."})),C(2===r.length,(function(){return "Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),C(r[0]>=1&&r[1]>=1,(function(){return "cropSize must be atleast [1,1], but was "+r})),C("bilinear"===o||"nearest"===o,(function(){return "method must be bilinear or nearest, but was "+o})),Lt.runKernelFunc((function(t,e){return t.cropAndResize(i,s,u,r,o,a)}),{images:i,boxes:s,boxInd:u},null,"CropAndResize",{method:o,extrapolationValue:a,cropSize:r})}}),nf=Object.freeze({resizeBilinear:Yh,resizeNearestNeighbor:$h,nonMaxSuppression:Qh,nonMaxSuppressionAsync:Jh,nonMaxSuppressionWithScore:Zh,nonMaxSuppressionWithScoreAsync:tf,cropAndResize:ef}),rf=function(t,e){return !(t>0)||"linear"===e},of=function(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error("Gradient for activation "+n+" has not been implemented yet.")},af=function(t,e){var n=e,r=Br(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},sf=function(t,e,n){if("linear"===e)return t;if("relu"===e)return ah(t);if("elu"===e)return nh(t);if("relu6"===e)return ih(t);if("prelu"===e)return oh(t,n);throw new Error("Unknown fused activation "+e+".")};var uf=An({fusedMatMul_:function(t){var e,n=t.a,r=t.b,o=t.transposeA,a=void 0!==o&&o,i=t.transposeB,s=void 0!==i&&i,u=t.bias,c=t.activation,l=void 0===c?"linear":c,h=t.preluActivationWeights;if(!1===rf(Lt.state.gradientDepth,l)){var f=El(n,r,a,s);return null!=u&&(f=Or(f,u)),sf(f,l,h)}var d=gn(n,"a","fused matMul"),p=gn(r,"b","fused matMul");e=Nt(d,p),d=e[0],p=e[1];var v=a?d.shape[d.rank-2]:d.shape[d.rank-1],g=s?p.shape[p.rank-1]:p.shape[p.rank-2],m=a?d.shape[d.rank-1]:d.shape[d.rank-2],y=s?p.shape[p.rank-2]:p.shape[p.rank-1],x=d.shape.slice(0,-2),b=p.shape.slice(0,-2),w=k(x),E=k(b);C(d.rank>=2&&p.rank>=2&&d.rank===p.rank,(function(){return "Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+d.rank+" and "+p.rank+"."})),C(S(x,b),(function(){return "Error in fused matMul: outer dimensions ("+x+") and ("+b+") of Tensors with shapes "+d.shape+" and "+p.shape+" must match."})),C(v===g,(function(){return "Error in fused matMul: inner shapes ("+v+") and ("+g+") of Tensors with shapes "+d.shape+" and "+p.shape+" and transposeA="+a+" and transposeB="+s+" must match."}));var R,I,A=d.shape.slice(0,-2).concat([m,y]),T=a?d.as3D(w,v,m):d.as3D(w,m,v),D=s?p.as3D(E,y,g):p.as3D(E,g,y);null!=u&&Pr(A,(R=Nt(R=gn(u,"bias","fused matMul"),d)[0]).shape),null!=h&&(I=gn(h,"prelu weights","fused matMul"));var N={a:T,b:D};null!=u&&(N.bias=R),null!=h&&(N.preluActivationWeights=I);var F=[T,D];return Lt.runKernelFunc((function(t,e){var n=t.fusedBatchMatMul({a:T,b:D,transposeA:a,transposeB:s,bias:R,activation:l,preluActivationWeights:I});return e([T,D,n]),n}),N,(function(t,e){var n=e[0],r=e[1],o=e[2],i=of(t,o,l),c={};return null!=u&&(c={bias:function(){return af(R,i)}}),a||s?!a&&s?Object.assign({a:function(){return i.matMul(r,!1,!1)},b:function(){return i.matMul(n,!0,!1)}},c):a&&!s?Object.assign({a:function(){return r.matMul(i,!1,!0)},b:function(){return n.matMul(i,!1,!1)}},c):Object.assign({a:function(){return r.matMul(i,!0,!0)},b:function(){return i.matMul(n,!0,!0)}},c):Object.assign({a:function(){return i.matMul(r,!1,!0)},b:function(){return n.matMul(i,!0,!1)}},c)}),"_FusedMatMul",{transposeA:a,transposeB:s,activation:l},F,[!0]).reshape(A)}}),cf=An({fusedConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?"NHWC":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?"linear":h,d=t.preluActivationWeights;if(f=f||"linear",!1===rf(Lt.state.gradientDepth,f)){var p=dl(e,n,r,o,i,u,c);return null!=l&&(p=Or(p,l)),sf(p,f,d)}var v=gn(e,"x","conv2d"),g=gn(n,"filter","conv2d"),m=v,y=!1;3===v.rank&&(y=!0,m=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),C(4===m.rank,(function(){return "Error in fused conv2d: input must be rank 4, but got rank "+m.rank+"."})),C(4===g.rank,(function(){return "Error in fused conv2d: filter must be rank 4, but got rank "+g.rank+"."})),null!=c&&C(A$1(o),(function(){return "Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+c+" but got pad "+o+"."})),C(m.shape[3]===g.shape[2],(function(){return "Error in conv2d: depth of input ("+m.shape[3]+") must match input depth for filter "+g.shape[2]+"."})),C(Ca(r,u),(function(){return "Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),C("NHWC"===i,(function(){return "Error in conv2d: got dataFormat of "+i+" but only NHWC is currently supported."}));var x,b,w=pa(m.shape,g.shape,r,u,o,c);null!=l&&(x=Nt(x=gn(l,"bias","fused conv2d"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=gn(d,"prelu weights","fused conv2d"));var E={x:m,filter:g};null!=l&&(E.bias=x),null!=d&&(E.preluActivationWeights=b);var R=[g,m],I=Lt.runKernelFunc((function(t,e){var n=t.fusedConv2d({input:m,filter:g,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([g,m,n]),n}),E,(function(t,e){var n=e,a=n[0],i=n[1],s=n[2],c=of(t,s,f);C(wa(u),(function(){return "Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+u+"'"}));var h={};return null!=l&&(h={bias:function(){return af(x,c)}}),Object.assign({x:function(){return gl(i.shape,c,a,r,o)},filter:function(){return vl(i,c,a.shape,r,o)}},h)}),"FusedConv2D",{convInfo:w,activation:f},R,[!0]);return y?I.as3D(I.shape[1],I.shape[2],I.shape[3]):I}}),lf=An({fusedDepthwiseConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?"NHWC":a,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?"linear":h,d=t.preluActivationWeights;if(!1===rf(Lt.state.gradientDepth,f)){var p=ml(e,n,r,o,i,u,c);return null!=l&&(p=Or(p,l)),sf(p,f,d)}var v=gn(e,"x","depthwiseConv2d"),g=gn(n,"filter","depthwiseConv2d"),m=v,y=!1;3===v.rank&&(y=!0,m=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),C(4===m.rank,(function(){return "Error in fused depthwiseConv2d: input must be rank 4, but got rank "+m.rank+"."})),C(4===g.rank,(function(){return "Error in fused depthwiseConv2d: filter must be rank 4, but got rank "+g.rank+"."})),C(m.shape[3]===g.shape[2],(function(){return "Error in fused depthwiseConv2d: number of input channels ("+m.shape[3]+") must match the inChannels dimension in filter "+g.shape[2]+"."})),null==u&&(u=[1,1]),C(Ca(r,u),(function(){return "Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),null!=c&&C(A$1(o),(function(){return "Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode "+c+" but got pad "+o+"."}));var x,b,w=pa(m.shape,g.shape,r,u,o,c,!0);null!=l&&(x=Nt(x=gn(l,"bias","fused conv2d"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=gn(d,"prelu weights","fused depthwiseConv2d"));var E={x:m,filter:g};null!=l&&(E.bias=x),null!=d&&(E.preluActivationWeights=b);var R=[g,m],I=Lt.runKernelFunc((function(t,e){var n=t.fusedDepthwiseConv2D({input:m,filter:g,convInfo:w,bias:x,activation:f,preluActivationWeights:b});return e([g,m,n]),n}),E,(function(t,e){C(wa(u),(function(){return "Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+u+"'"}));var n=e[0],r=e[1],o=e[2],a=of(t,o,f),i={};return null!=l&&(i={bias:function(){return af(x,a)}}),Object.assign({x:function(){return yl(r.shape,a,n,w)},filter:function(){return xl(r,a,n.shape,w)}},i)}),"FusedDepthwiseConv2D",{convInfo:w,activation:f},R,[!0]);return y?I.as3D(I.shape[1],I.shape[2],I.shape[3]):I}}),hf=Object.freeze({matMul:uf,conv2d:cf,depthwiseConv2d:lf}),ff=Object.freeze({image:nf,linalg:jh,losses:zh,spectral:bh,fused:hf,signal:Dh,add:Or,addN:$u,batchNorm:nc,batchNormalization:ec,batchNorm2d:ac,batchNormalization2d:oc,batchNorm3d:uc,batchNormalization3d:sc,batchNorm4d:hc,batchNormalization4d:lc,broadcastTo:fc,clone:dc,div:Bo,divNoNan:bc,eye:Cc,multinomial:Ec,oneHot:Rc,pad:Ic,pad1d:kc,pad2d:Sc,pad3d:Ac,pad4d:Tc,rand:Dc,randomGamma:Uc,randomNormal:Vc,randomUniform:zc,square:Gc,squaredDifference:Hc,tile:wc,truncatedNormal:qc,conv1d:fl,conv2d:dl,conv3d:pl,depthwiseConv2d:ml,separableConv2d:bl,conv2dTranspose:wl,conv3dTranspose:Cl,op:An,booleanMaskAsync:ul,complex:Tn,real:Dn,imag:Nn,concat:Yn,concat1d:$n,concat2d:Qn,concat3d:Jn,concat4d:Zn,split:tr,matMul:El,dot:Rl,outerProduct:Il,reverse:kl,reverse1d:Sl,reverse2d:Al,reverse3d:Tl,reverse4d:Dl,maxPool:_l,avgPool:Ol,pool:Ml,maxPool3d:Bl,avgPool3d:Pl,maxPoolWithArgmax:Ll,slice:Wl,slice1d:Ul,slice2d:Vl,slice3d:zl,slice4d:Gl,abs:Lr,acos:Wr,acosh:Ur,asin:Vr,asinh:zr,atan:Gr,atanh:Hr,ceil:qr,clipByValue:Kr,cos:jr,cosh:Xr,erf:Yr,exp:$r,expm1:Qr,floor:Jr,log:Zr,log1p:to,logSigmoid:eo,neg:no,reciprocal:ro,round:oo,rsqrt:ao,sigmoid:io,sign:so,isNaN:uo,isInf:co,isFinite:lo,sin:ho,sinh:fo,softplus:po,sqrt:vo,step:go,tan:mo,tanh:yo,all:ql,any:Kl,argMax:jl,argMin:Xl,logSumExp:Yl,max:$l,mean:Ql,min:Jl,moments:Zl,sum:th,prod:eh,equal:Kc,equalStrict:jc,greater:Xc,greaterEqual:Yc,greaterEqualStrict:$c,greaterStrict:Qc,less:Jc,lessEqual:Zc,lessEqualStrict:tl,lessStrict:el,notEqual:nl,notEqualStrict:rl,addStrict:xo,atan2:bo,divStrict:wo,floorDiv:Co,maximum:Eo,maximumStrict:Ro,minimum:Io,minimumStrict:ko,mod:So,modStrict:Ao,mul:To,mulStrict:Do,pow:No,powStrict:Fo,squaredDifferenceStrict:_o,sub:Oo,subStrict:Mo,elu:nh,leakyRelu:rh,prelu:oh,relu:ah,relu6:ih,selu:sh,logicalAnd:pc,logicalNot:vc,logicalOr:gc,logicalXor:mc,where:yc,whereAsync:xc,buffer:er,print:nr,batchToSpaceND:rr,cast:or,cumsum:ar,depthToSpace:ir,expandDims:sr,reshape:ur,spaceToBatchND:cr,squeeze:lr,stack:hr,unstack:fr,setdiff1dAsync:dr,fill:Hn,linspace:qn,ones:zn,range:Kn,scalar:On,tensor:Fn,tensor1d:Mn,tensor2d:Bn,tensor3d:Pn,tensor4d:Ln,tensor5d:Wn,tensor6d:Un,variable:Vn,zeros:Gn,onesLike:jn,zerosLike:Xn,transpose:ua,softmax:ia,logSoftmax:sa,localResponseNormalization:uh,norm:ch,gather:il,unsortedSegmentSum:sl,basicLSTMCell:lh,multiRNNCell:hh,movingAverage:fh,stridedSlice:dh,topk:ph,scatterND:vh,fft:gh,ifft:mh,rfft:yh,irfft:xh,sparseToDense:wh,gatherND:Ch,diag:Eh,dropout:Rh,hannWindow:kh,hammingWindow:Sh,frame:Ah,stft:Th,inTopKAsync:Fh});function df(t,e){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&C("complex64"!==t.dtype,(function(){return e+" does not support complex64 tensors."}));}));}function pf(t,e,n,r,o,a){for(var i=o.strideHeight,s=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,l=o.effectiveFilterHeight,h=o.effectiveFilterWidth,f=o.padInfo.top,d=o.padInfo.left,p="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=er(o.outShape,n),g=v.values,m=o.outShape[1]*o.outShape[2]*o.outShape[3],y=o.outShape[2]*o.outShape[3],x=o.outShape[3],b=0;b<o.batchSize;++b)for(var w=b*m,C=b*r[0],E=0;E<o.inChannels;++E)for(var R=0;R<o.outHeight;++R)for(var I=R*i-f,k=Math.max(0,I),S=Math.min(o.inHeight,l+I),A=w+R*y,T=0;T<o.outWidth;++T){for(var D=T*s-d,N=Math.max(0,D),F=Math.min(o.inWidth,h+D),_=p,O=0,M=0,B=k;B<S;B+=u){for(var P=C+B*r[1],L=N;L<F;L+=c){var W=t[P+L*r[2]+E];"max"===a&&W>_?_=W:"avg"===a&&(O+=W,M++);}if(isNaN(_))break}g[A+T*x+E]="avg"===a?O/M:_;}return v}function vf(t,e,n,r,o,a){void 0===o&&(o=!1),void 0===a&&(a=!1);for(var i=er(r.outShape,"int32"),s=r.strideHeight,u=r.strideWidth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterHeight,f=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,v=er(e,n,t),g=0;g<r.batchSize;++g)for(var m=0;m<r.inChannels;++m)for(var y=0;y<r.outHeight;++y){for(var x=y*s-d,b=x;b<0;)b+=c;for(var w=Math.min(r.inHeight,h+x),C=0;C<r.outWidth;++C){for(var E=C*u-p,R=E;R<0;)R+=l;for(var I=Math.min(r.inWidth,f+E),k=Number.NEGATIVE_INFINITY,S=-1,A=b;A<w;A+=c)for(var T=A-x,D=R;D<I;D+=l){var N=D-E,F=v.get(g,A,D,m);F>k&&(k=F,S=o?a?((g*r.inHeight+A)*r.inWidth+D)*r.inChannels+m:(A*r.inWidth+D)*r.inChannels+m:T*f+N);}i.set(S,g,y,C,m);}}return i}function gf(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error("Activation "+n+" has not been implemented for the CPU backend.")}var mf=function(t){function o(){var e=t.call(this)||this;return e.blockSize=48,e.firstUse=!0,e.data=new ca(e,Lt),e}return e(o,t),o.prototype.write=function(t,e,n){this.firstUse&&(this.firstUse=!1,i().get("IS_NODE")&&dn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));var r={};return this.data.set(r,{values:t,dtype:n}),r},o.prototype.move=function(t,e,n,r){this.data.set(t,{values:e,dtype:r});},o.prototype.numDataIds=function(){return this.data.numDataIds()},o.prototype.read=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){return [2,this.readSync(t)]}))}))},o.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return "complex64"===n?Aa(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},o.prototype.bufferSync=function(t){var e=this.readSync(t.dataId),n=e;if("string"===t.dtype)try{n=e.map((function(t){return ot(t)}));}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return er(t.shape,t.dtype,n)},o.prototype.makeOutput=function(t,e,n){var r=this.write(t,e,n);return Lt.makeTensorFromDataId(r,e,n,this)},o.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t);}},o.prototype.time=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return e=et(),t(),[2,{kernelMs:et()-e}]}))}))},o.prototype.memory=function(){return {unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},o.prototype.complex=function(t,e){var n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:Lt.keep(t.clone()),imag:Lt.keep(e.clone())},n},o.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},o.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},o.prototype.slice=function(t,e,n){if(df(t,"slice"),$o(t.shape,e,n)){var r=Qo(e,t.strides),o=k(n);return Fn(this.readSync(t.dataId).subarray(r,r+o),n,t.dtype)}for(var a=er(n,t.dtype),i=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s).map((function(t,n){return t+e[n]}));a.values[s]=i.get.apply(i,u);}return a.toTensor()},o.prototype.stridedSlice=function(t,e,n,r){df(t,"stridedSlice");var o=jo(e,n,r);if(o.some((function(t){return 0===t})))return Fn([],o);for(var a=er(o,t.dtype),i=this.bufferSync(t),s=0;s<a.size;s++){for(var u=a.indexToLoc(s),c=new Array(u.length),l=0;l<c.length;l++)c[l]=u[l]*r[l]+e[l];a.set.apply(a,[i.get.apply(i,c)].concat(u));}return a.toTensor()},o.prototype.diag=function(t){for(var e=this.readSync(t.dataId),n=er([t.size,t.size],t.dtype),r=n.values,o=0;o<e.length;o++)r[o*t.size+o]=e[o];return n.toTensor()},o.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,a=0;a<t.rank;a++)a!==e&&(r[o++]=t.shape[a]);var i=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(a=0;a<u.length;a++)i[e]=a,u[a]=this.slice(t,i,s).reshape(r);return u},o.prototype.reverse=function(t,e){df(t,"reverse");for(var n=er(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var a=n.indexToLoc(o),i=a.slice();e.forEach((function(e){return i[e]=t.shape[e]-1-i[e]})),n.set.apply(n,[r.get.apply(r,i)].concat(a));},a=0;a<n.size;a++)o(a);return n.toTensor()},o.prototype.concat=function(t,e){var n=this;if("complex64"===t[0].dtype){var r=t.map((function(t){return Dn(t)})),o=t.map((function(t){return Nn(t)}));return Tn(this.concat(r,e),this.concat(o,e))}var a=t.map((function(t){var n=k(t.shape.slice(e));return t.as2D(-1,n)})),i=Sn(a.map((function(t){return t.shape})),1),s=er(i,t[0].dtype).values;if(1===a[0].shape[0]){var u=0;a.forEach((function(t){s.set(n.readSync(t.dataId),u),u+=t.size;}));}else {var c=0;a.forEach((function(t){for(var e=n.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var a=o*i[1]+c,u=0;u<t.shape[1];++u)s[a+u]=e[r++];c+=t.shape[1];}));}var l=Sn(t.map((function(t){return t.shape})),e);return Fn(s,l,t[0].dtype)},o.prototype.neg=function(t){return df(t,"neg"),this.multiply(On(-1),t)},o.prototype.add=function(t,e){return "complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return {real:t+n,imag:e+r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t+e}))},o.prototype.addN=function(t){var e=this;df(t,"addN");for(var n=t.map((function(t){return e.readSync(t.dataId)})),r=er(t[0].shape,t[0].dtype),o=r.values,a=0;a<t.length;a++)for(var i=n[a],s=0;s<o.length;s++)o[s]+=i[s];return r.toTensor()},o.prototype.softmax=function(t,e){var n=O([e],t.shape),r=this.max(t,n),o=wn(r.shape,n),a=this.subtract(t,r.reshape(o)),i=this.exp(a),s=this.sum(i,n).reshape(o);return Bo(i,s)},o.prototype.subtract=function(t,e){return "complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return {real:t-n,imag:e-r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t-e}))},o.prototype.pow=function(t,e){return df([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.pow(t,e)}))},o.prototype.batchMatMul=function(t,e,n,r){df([t,e],"matMul");for(var o=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],s=t.shape[0],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],h=l[0],f=l[1],d=l[2],p=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],v=p[0],g=p[1],m=p[2],y=a*i,x=er([s,a,i],t.dtype),b=x.values,w=this.blockSize,C=0;C<s;C++)for(var E=0;E<a;E+=w)for(var R=0;R<i;R+=w)for(var I=0;I<o;I+=w)for(var k=Math.min(E+w,a),S=Math.min(R+w,i),A=Math.min(I+w,o),T=E;T<k;T++)for(var D=R;D<S;D++){for(var N=0,F=I;F<A;F++)N+=u[C*h+T*f+F*d]*c[F*v+D*g+C*m];b[C*y+(T*i+D)]+=N;}return x.toTensor()},o.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,a=t.bias,i=t.activation,s=t.preluActivationWeights,u=this.batchMatMul(e,n,r,o);return a&&(u=this.add(u,a)),i&&(u=gf(this,u,i,s)),u},o.prototype.multiply=function(t,e){return "complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return {real:t*n-e*r,imag:t*r+e*n}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t*e}))},o.prototype.floorDiv=function(t,e){df([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(function(t,e){return Math.floor(t/e)}))},o.prototype.sum=function(t,e){df(t,"sum"),Cn("sum",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,Tt(t.dtype,"int32")),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=0,f=0;f<i;++f)h+=u[l+f];s[c]=h;}return a},o.prototype.prod=function(t,e){df(t,"sum");for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,Tt(t.dtype,"int32")),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=1,f=0;f<i;++f)h*=u[l+f];s[c]=h;}return a},o.prototype.unsortedSegmentSum=function(t,e,n){df(t,"unsortedSegmentSum");for(var r=[],o=t.rank-e.rank,a=0;a<o;++a)e=e.expandDims(a+1);for(a=0;a<n;++a){var i=On(a,"int32"),s=Kc(i,e).asType("float32").mul(t).sum(0);r.push(s);}return hr(r)},o.prototype.argMin=function(t,e){df(t,"argMin");var n=[e];Cn("argMin",n,t.rank);for(var r=bn(t.shape,n),o=r[0],a=r[1],i=Gn(o,"int32"),s=k(a),u=this.readSync(i.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v<f&&(f=v,d=p);}u[l]=d;}return i},o.prototype.argMax=function(t,e){df(t,"argMax");var n=[e];Cn("argMax",n,t.rank);for(var r=bn(t.shape,n),o=r[0],a=r[1],i=Gn(o,"int32"),s=k(a),u=this.readSync(i.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v>f&&(f=v,d=p);}u[l]=d;}return i},o.prototype.cumsum=function(t,e,n,r){if(df(t,"cumsum"),e!==t.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(t.rank-1)+" but got axis="+e);for(var o=Tt(t.dtype,"int32"),a=Gn(t.shape,o),i=this.readSync(a.dataId),s=this.readSync(t.dataId),u=t.shape[t.rank-1],c=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},l=0;l<s.length;l+=u)for(var h=0;h<u;h++){var f=c(l,h);if(0===h)i[f]=n?0:s[f];else {var d=c(l,h-1);i[f]=n?s[d]+i[d]:s[f]+i[d];}}return a},o.prototype.equal=function(t,e){return df([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t===e?1:0}))},o.prototype.notEqual=function(t,e){return df([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t!==e?1:0}))},o.prototype.less=function(t,e){return df([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<e?1:0}))},o.prototype.lessEqual=function(t,e){return df([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<=e?1:0}))},o.prototype.greater=function(t,e){return df([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>e?1:0}))},o.prototype.greaterEqual=function(t,e){return df([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>=e?1:0}))},o.prototype.logicalNot=function(t){df(t,"logicalNot");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return this.makeOutput(n,t.shape,"bool")},o.prototype.logicalAnd=function(t,e){return df([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t&&e}))},o.prototype.logicalOr=function(t,e){return df([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t||e}))},o.prototype.select=function(t,e,n){df([t,e,n],"select");for(var r=this.readSync(t.dataId),o=this.readSync(e.dataId),a=this.readSync(n.dataId),i=Gn(e.shape,Tt(e.dtype,n.dtype)),s=this.readSync(i.dataId),u=0,c=0===t.rank||t.rank>1||1===e.rank?1:k(e.shape.slice(1)),l=0;l<r.length;l++)for(var h=0;h<c;h++)1===r[l]?s[u++]=o[l]:s[u++]=a[l];return i},o.prototype.where=function(t){df([t],"where");var e=this.readSync(t.dataId);return Ga(t.shape,e)},o.prototype.topk=function(t,e,n){return df(t,"topk"),za(this.readSync(t.dataId),t.shape,t.dtype,e)},o.prototype.min=function(t,e){df(t,"min"),Cn("min",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];d<h&&(h=d);}s[c]=h;}return a},o.prototype.minimum=function(t,e){return df([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.min(t,e)}))},o.prototype.mod=function(t,e){return df([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))},o.prototype.max=function(t,e){df(t,"max"),Cn("max",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];d>h&&(h=d);}s[c]=h;}return a},o.prototype.maximum=function(t,e){return df([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.max(t,e)}))},o.prototype.all=function(t,e){df(t,"all"),Cn("all",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];h=h&&d;}s[c]=h;}return a},o.prototype.any=function(t,e){df(t,"any"),Cn("any",e,t.rank);for(var n=bn(t.shape,e),r=n[0],o=n[1],a=Gn(r,t.dtype),i=k(o),s=this.readSync(a.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*i,h=u[l],f=0;f<i;++f){var d=u[l+f];h=h||d;}s[c]=h;}return a},o.prototype.squaredDifference=function(t,e){return df([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t-e;return n*n}))},o.prototype.ceil=function(t){df(t,"ceil");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return this.makeOutput(n,t.shape,"float32")},o.prototype.floor=function(t){df(t,"floor");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return this.makeOutput(n,t.shape,"float32")},o.prototype.sign=function(t){df(t,"x");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return this.makeOutput(n,t.shape,"float32")},o.prototype.isNaN=function(t){df(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},o.prototype.isInf=function(t){df(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},o.prototype.isFinite=function(t){df(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},o.prototype.round=function(t){df(t,"round");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=Math.floor(e[r]);e[r]-o<.5?n[r]=Math.floor(e[r]):e[r]-o>.5?n[r]=Math.ceil(e[r]):n[r]=o%2==0?o:o+1;}return this.makeOutput(n,t.shape,"float32")},o.prototype.exp=function(t){df(t,"exp");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return this.makeOutput(n,t.shape,"float32")},o.prototype.expm1=function(t){df(t,"expm1");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return this.makeOutput(n,t.shape,"float32")},o.prototype.log=function(t){df(t,"log");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log(o);}return this.makeOutput(n,t.shape,"float32")},o.prototype.log1p=function(t){df(t,"log1p");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log1p(o);}return this.makeOutput(n,t.shape,"float32")},o.prototype.sqrt=function(t){df(t,"sqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.sqrt(o);}return this.makeOutput(n,t.shape,"float32")},o.prototype.rsqrt=function(t){df(t,"rsqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=1/Math.sqrt(o);}return this.makeOutput(n,t.shape,"float32")},o.prototype.reciprocal=function(t){df(t,"reciprocal");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return this.makeOutput(n,t.shape,"float32")},o.prototype.linear=function(t){return t},o.prototype.relu=function(t){df(t,"relu");for(var e=Gn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.max(0,r[o]);return e},o.prototype.relu6=function(t){df(t,"relu");for(var e=Gn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.min(Math.max(0,r[o]),6);return e},o.prototype.prelu=function(t,e){return df([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return t<0?e*t:t}))},o.prototype.elu=function(t){df(t,"elu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?o:Math.exp(o)-1;}return this.makeOutput(e,t.shape,"float32")},o.prototype.eluDer=function(t,e){df([t,e],"eluDer");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId),a=0;a<r.length;++a){var i=r[a];n[a]=i>=1?o[a]:o[a]*(i+1);}return this.makeOutput(n,e.shape,"float32")},o.prototype.selu=function(t){df(t,"selu");for(var e=su,n=uu,r=new Float32Array(t.size),o=this.readSync(t.dataId),a=0;a<o.length;++a){var i=o[a];r[a]=i>=0?n*i:e*(Math.exp(i)-1);}return this.makeOutput(r,t.shape,"float32")},o.prototype.clip=function(t,e,n){df(t,"clip");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),a=0;a<o.length;++a){var i=o[a];r[a]=i>n?n:i<e?e:i;}return this.makeOutput(r,t.shape,"float32")},o.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<t.size;++r){var o=n[2*r],a=n[2*r+1];e[r]=Math.hypot(o,a);}return this.makeOutput(e,t.shape,"float32")},o.prototype.int=function(t){df(t,"int");for(var e=new Int32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=n[r];return this.makeOutput(e,t.shape,"int32")},o.prototype.sigmoid=function(t){df(t,"sigmoid");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return this.makeOutput(e,t.shape,"float32")},o.prototype.softplus=function(t){df(t,"softplus");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var a=r[o]>-e,i=r[o]<e,s=Math.exp(r[o]),u=void 0;u=i?s:a?r[o]:Math.log(1+s),n[o]=u;}return this.makeOutput(n,t.shape,"float32")},o.prototype.sin=function(t){df(t,"sin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.cos=function(t){df(t,"cos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.tan=function(t){df(t,"tan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.asin=function(t){df(t,"asin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.acos=function(t){df(t,"acos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.atan=function(t){df(t,"atan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.atan2=function(t,e){return df([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.atan2(t,e)}))},o.prototype.sinh=function(t){df(t,"sinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.cosh=function(t){df(t,"cosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.tanh=function(t){df(t,"tanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=T(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.asinh=function(t){df(t,"asinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.acosh=function(t){df(t,"acosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.atanh=function(t){df(t,"atanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return this.makeOutput(e,t.shape,"float32")},o.prototype.erf=function(t){df(t,"erf");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=Math.sign(n[r]),a=Math.abs(n[r]),i=1/(1+.3275911*a);e[r]=o*(1-((((1.061405429*i-1.453152027)*i+1.421413741)*i-.284496736)*i+.254829592)*i*Math.exp(-a*a));}return this.makeOutput(e,t.shape,"float32")},o.prototype.step=function(t,e){void 0===e&&(e=0),df(t,"step");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var a=r[o];isNaN(a)?n[o]=NaN:n[o]=a>0?1:e;}return this.makeOutput(n,t.shape,"float32")},o.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,i=t.preluActivationWeights,s=this.conv2d(e,n,r);return o&&(s=this.add(s,o)),a&&(s=gf(this,s,a,i)),s},o.prototype.conv2d=function(t,e,n){df([t,e],"conv2d");for(var r=n.filterHeight,o=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c="channelsLast"===n.dataFormat,l=er(n.outShape,t.dtype),h=t.strides[0],f=c?t.strides[1]:t.strides[2],d=c?t.strides[2]:1,p=c?1:t.strides[1],v=l.strides[0],g=c?l.strides[1]:l.strides[2],m=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),b=this.readSync(e.dataId),w=l.values,C=0;C<n.batchSize;++C)for(var E=C*h,R=C*v,I=0;I<n.outHeight;++I)for(var k=R+I*g,S=I*n.strideHeight-u,A=0;A<r;A++){var T=S+A*a;if(!(T<0||T>=n.inHeight))for(var D=A*e.strides[0],N=E+T*f,F=0;F<n.outWidth;++F)for(var _=k+F*m,O=F*n.strideWidth-s,M=0;M<o;M++){var B=O+M*i;if(!(B<0||B>=n.inWidth))for(var P=N+B*d,L=D+M*e.strides[1],W=0;W<n.inChannels;++W){for(var U=x[P+W*p],V=0;V<n.outChannels;++V)w[_+V*y]+=U*b[L+V];L+=n.outChannels;}}}return l.toTensor()},o.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,o=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,h=n.padInfo.top,f=er(n.outShape,t.dtype),d=this.readSync(t.dataId),p=this.readSync(e.dataId),v=f.values,g=0;g<n.batchSize;++g)for(var m=g*t.strides[0],y=g*f.strides[0],x=0;x<n.outDepth;++x)for(var b=y+x*f.strides[1],w=x*n.strideDepth-c,C=0;C<r;C++){var E=w+C*i;if(!(E<0||E>=n.inDepth))for(var R=C*e.strides[0],I=m+E*t.strides[1],k=0;k<n.outHeight;++k)for(var S=b+k*f.strides[2],A=k*n.strideHeight-h,T=0;T<o;T++){var D=A+T*s;if(!(D<0||D>=n.inHeight))for(var N=R+T*e.strides[1],F=I+D*t.strides[2],_=0;_<n.outWidth;++_)for(var O=S+_*n.outChannels,M=_*n.strideWidth-l,B=0;B<a;B++){var P=M+B*u;if(!(P<0||P>=n.inWidth))for(var L=N+B*e.strides[2],W=F+P*n.inChannels,U=L,V=0;V<n.inChannels;++V){for(var z=d[W+V],G=0;G<n.outChannels;++G)v[O+G]+=z*p[U+G];U+=n.outChannels;}}}}return f.toTensor()},o.prototype.conv2dDerInput=function(t,e,n){df([t,e],"conv2dDerInput");for(var r=er(n.inShape,"float32"),o=r.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),s=e.strides,u=s[0],c=s[1],l=s[2],h=n.batchSize,f=n.filterHeight,d=n.filterWidth,p=n.inChannels,v=n.inHeight,g=n.inWidth,m=n.outChannels,y=n.outHeight,x=n.outWidth,b=n.strideHeight,w=n.strideWidth,C=n.dataFormat,E=f-1-n.padInfo.top,R=d-1-n.padInfo.left,I="channelsLast"===C,k=r.strides[0],S=I?r.strides[1]:r.strides[2],A=I?r.strides[2]:1,T=I?1:r.strides[1],D=t.strides[0],N=I?t.strides[1]:t.strides[2],F=I?t.strides[2]:1,_=I?1:t.strides[1],O=0;O<h;++O)for(var M=0;M<p;++M)for(var B=0;B<v;++B)for(var P=B-E,L=Math.max(0,Math.ceil(P/b)),W=Math.min(y,(f+P)/b),U=0;U<g;++U){for(var V=U-R,z=Math.max(0,Math.ceil(V/w)),G=Math.min(x,(d+V)/w),H=0,q=L;q<W;++q)for(var K=q*b-P,j=z;j<G;++j)for(var X=D*O+N*q+F*j,Y=u*(f-1-K)+c*(d-1-(j*w-V))+l*M,$=0;$<m;++$){H+=a[X+_*$]*i[Y+$];}o[k*O+S*B+A*U+T*M]=H;}return r.toTensor()},o.prototype.conv3dDerInput=function(t,e,n){for(var r=er(n.inShape,"float32"),o=r.values,a=r.strides,i=a[0],s=a[1],u=a[2],c=a[3],l=this.readSync(t.dataId),h=t.strides,f=h[0],d=h[1],p=h[2],v=h[3],g=this.readSync(e.dataId),m=e.strides,y=m[0],x=m[1],b=m[2],w=m[3],C=n.batchSize,E=n.filterDepth,R=n.filterHeight,I=n.filterWidth,k=n.inChannels,S=n.inDepth,A=n.inHeight,T=n.inWidth,D=n.outChannels,N=n.outDepth,F=n.outHeight,_=n.outWidth,O=n.strideDepth,M=n.strideHeight,B=n.strideWidth,P=E-1-n.padInfo.front,L=R-1-n.padInfo.top,W=I-1-n.padInfo.left,U=0;U<C;++U)for(var V=0;V<k;++V)for(var z=0;z<S;++z)for(var G=z-P,H=Math.max(0,Math.ceil(G/O)),q=Math.min(N,(E+G)/O),K=0;K<A;++K)for(var j=K-L,X=Math.max(0,Math.ceil(j/M)),Y=Math.min(F,(R+j)/M),$=0;$<T;++$){for(var Q=$-W,J=Math.max(0,Math.ceil(Q/B)),Z=Math.min(_,(I+Q)/B),tt=0,et=H;et<q;++et)for(var nt=et*O-G,rt=X;rt<Y;++rt)for(var ot=rt*M-j,at=J;at<Z;++at)for(var it=f*U+d*et+p*rt+v*at,st=y*(E-1-nt)+x*(R-1-ot)+b*(I-1-(at*B-Q))+w*V,ut=0;ut<D;++ut){tt+=l[it+ut]*g[st+ut];}o[i*U+s*z+u*K+c*$+V]=tt;}return r.toTensor()},o.prototype.conv2dDerFilter=function(t,e,n){df([t,e],"conv2dDerFilter");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s="channelsLast"===n.dataFormat,u=er(n.filterShape,"float32"),c=n.padInfo.left,l=n.padInfo.top,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<a;++d)for(var p=Math.max(0,Math.ceil((l-d)/r)),v=Math.min(n.outHeight,(n.inHeight+l-d)/r),g=0;g<i;++g)for(var m=Math.max(0,Math.ceil((c-g)/o)),y=Math.min(n.outWidth,(n.inWidth+c-g)/o),x=0;x<n.inChannels;++x)for(var b=0;b<n.outChannels;++b){for(var w=0,C=0;C<n.batchSize;++C)for(var E=p;E<v;++E)for(var R=d+E*r-l,I=m;I<y;++I){var k=g+I*o-c;w+=s?h.get(C,R,k,x)*f.get(C,E,I,b):h.get(C,x,R,k)*f.get(C,b,E,I);}u.set(w,d,g,x,b);}return u.toTensor()},o.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,o=n.strideHeight,a=n.strideWidth,i=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=er(n.filterShape,"float32"),l=c.values,h=c.strides,f=h[0],d=h[1],p=h[2],v=h[3],g=this.readSync(e.dataId),m=e.strides,y=m[0],x=m[1],b=m[2],w=m[3],C=this.readSync(t.dataId),E=t.strides,R=E[0],I=E[1],k=E[2],S=E[3],A=n.padInfo.front,T=n.padInfo.left,D=n.padInfo.top,N=0;N<i;++N)for(var F=Math.max(0,Math.ceil((A-N)/r)),_=Math.min(n.outDepth,(n.inDepth+A-N)/r),O=N*f,M=0;M<s;++M)for(var B=Math.max(0,Math.ceil((D-M)/o)),P=Math.min(n.outHeight,(n.inHeight+D-M)/o),L=M*d+O,W=0;W<u;++W)for(var U=Math.max(0,Math.ceil((T-W)/a)),V=Math.min(n.outWidth,(n.inWidth+T-W)/a),z=W*p+L,G=0;G<n.inChannels;++G)for(var H=G*v+z,q=0;q<n.outChannels;++q){for(var K=0,j=0;j<n.batchSize;++j)for(var X=j*R,Y=j*y,$=F;$<_;++$)for(var Q=(N+$*r-A)*I+X,J=$*x+Y,Z=B;Z<P;++Z)for(var tt=(M+Z*o-D)*k+Q,et=Z*b+J,nt=U;nt<V;++nt){var rt=nt*w+et;K+=C[(W+nt*a-T)*S+tt+G]*g[rt+q];}l[H+q]=K;}return c.toTensor()},o.prototype.fusedDepthwiseConv2D=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,a=t.activation,i=t.preluActivationWeights,s=this.depthwiseConv2D(e,n,r);return o&&(s=this.add(s,o)),a&&(s=gf(this,s,a,i)),s},o.prototype.depthwiseConv2D=function(t,e,n){df([t,e],"depthwiseConv2D");for(var r=n.filterHeight,o=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=er(n.outShape,t.dtype),h=this.readSync(t.dataId),f=this.readSync(e.dataId),d=l.values,p=0;p<n.batchSize;++p)for(var v=p*t.strides[0],g=p*l.strides[0],m=0;m<n.outHeight;++m)for(var y=g+m*l.strides[1],x=m*n.strideHeight-s,b=0;b<r;++b){var w=x+b*a;if(!(w<0||w>=n.inHeight))for(var C=b*e.strides[0],E=v+w*t.strides[1],R=0;R<n.outWidth;++R)for(var I=y+R*l.strides[2],k=R*n.strideWidth-u,S=0;S<o;++S){var A=k+S*i;if(!(A<0||A>=n.inWidth))for(var T=C+S*e.strides[1],D=E+A*n.inChannels,N=I,F=T,_=0;_<n.inChannels;++_){for(var O=h[D+_],M=0;M<c;++M)d[N+M]+=O*f[F+M];N+=c,F+=c;}}}return l.toTensor()},o.prototype.depthwiseConv2DDerInput=function(t,e,n){df([t,e],"depthwiseConv2DDerInput");for(var r=er(n.inShape,"float32"),o=r.values,a=r.strides,i=a[0],s=a[1],u=a[2],c=this.readSync(t.dataId),l=t.strides,h=l[0],f=l[1],d=l[2],p=this.readSync(e.dataId),v=e.strides,g=v[0],m=v[1],y=v[2],x=n.batchSize,b=n.filterHeight,w=n.filterWidth,C=n.inChannels,E=n.inHeight,R=n.inWidth,I=n.outChannels,k=n.outHeight,S=n.outWidth,A=n.strideHeight,T=n.strideWidth,D=b-1-n.padInfo.top,N=w-1-n.padInfo.left,F=I/C,_=0;_<x;++_)for(var O=0;O<C;++O)for(var M=0;M<E;++M)for(var B=M-D,P=Math.max(0,Math.ceil(B/A)),L=Math.min(k,(b+B)/A),W=0;W<R;++W){for(var U=W-N,V=Math.max(0,Math.ceil(U/T)),z=Math.min(S,(w+U)/T),G=0,H=P;H<L;++H)for(var q=H*A-B,K=V;K<z;++K)for(var j=h*_+f*H+d*K,X=g*(b-1-q)+m*(w-1-(K*T-U))+y*O,Y=0;Y<F;++Y){G+=c[j+(O*F+Y)]*p[X+Y];}o[i*_+s*M+u*W+O]=G;}return r.toTensor()},o.prototype.depthwiseConv2DDerFilter=function(t,e,n){df([t,e],"depthwiseConv2DDerFilter");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=er(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<a;++d)for(var p=Math.max(0,Math.ceil((c-d)/r)),v=Math.min(n.outHeight,(n.inHeight+c-d)/r),g=0;g<i;++g)for(var m=Math.max(0,Math.ceil((u-g)/o)),y=Math.min(n.outWidth,(n.inWidth+u-g)/o),x=0;x<n.outChannels;++x){for(var b=Math.trunc(x/l),w=x%l,C=0,E=0;E<n.batchSize;++E)for(var R=p;R<v;++R)for(var I=d+R*r-c,k=m;k<y;++k){var S=g+k*o-u;C+=h.get(E,I,S,b)*f.get(E,R,k,x);}s.set(C,d,g,b,w);}return s.toTensor()},o.prototype.tile=function(t,e){return df(t,"tile"),Va(this.bufferSync(t),e)},o.prototype.pad=function(t,e,n){df(t,"pad");var r=e.map((function(e,n){return e[0]+t.shape[n]+e[1]})),o=e.map((function(t){return t[0]})),a=this.bufferSync(t),i=er(r,t.dtype);0!==n&&i.values.fill(n);for(var s=0;s<t.size;s++){var u=a.indexToLoc(s),c=u.map((function(t,e){return t+o[e]}));i.set.apply(i,[a.get.apply(a,u)].concat(c));}return i.toTensor()},o.prototype.gather=function(t,e,n){df([t,e],"gather");var r=t.shape.slice(),o=this.readSync(e.dataId);r[n]=o.length;for(var a=er(r,t.dtype),i=this.bufferSync(t),s=0;s<a.size;++s){var u=a.indexToLoc(s),c=u.slice();c[n]=o[u[n]];var l=i.locToIndex(c);a.values[s]=i.values[l];}return a.toTensor()},o.prototype.batchToSpaceND=function(t,e,n){df([t],"batchToSpaceND");var r=e.reduce((function(t,e){return t*e})),o=pr(t.shape,e,r),a=vr(o.length,e.length),i=gr(t.shape,e,r),s=mr(n,e.length),u=yr(i,n,e.length);return ua(t.reshape(o),a).reshape(i).slice(s,u)},o.prototype.spaceToBatchND=function(t,e,n){df([t],"spaceToBatchND");var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var a=1+e.length;a<t.shape.length;++a)o.push([0,0]);var i=t.pad(o),s=pr(i.shape,e,r,!1),u=vr(s.length,e.length,!1),c=gr(i.shape,e,r,!1);return ua(i.reshape(s),u).reshape(c)},o.prototype.maxPool=function(t,e){return df(t,"maxPool"),pf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"max").toTensor()},o.prototype.maxPoolBackprop=function(t,e,n,r){df([e,n],"maxPoolBackprop");for(var o=this.readSync(e.dataId),a=er(r.outShape,e.dtype,vf(o,e.shape,e.dtype,r).values),i=r.strideHeight,s=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,l=r.effectiveFilterHeight,h=r.effectiveFilterWidth,f=h-1-r.padInfo.left,d=l-1-r.padInfo.top,p=er(e.shape,"float32"),v=this.bufferSync(t),g=0;g<r.batchSize;++g)for(var m=0;m<r.inChannels;++m)for(var y=0;y<r.inHeight;++y)for(var x=0;x<r.inWidth;++x){for(var b=y-d,w=x-f,C=0,E=0;E<l;E+=u){var R=(b+E)/i;if(!(R<0||R>=r.outHeight||Math.floor(R)!==R))for(var I=0;I<h;I+=c){var k=(w+I)/s;if(!(k<0||k>=r.outWidth||Math.floor(k)!==k)){var S=l*h-1-a.get(g,R,k,m)===E*h+I?1:0;if(0!==S)C+=v.get(g,R,k,m)*S;}}}p.set(C,g,y,x,m);}return p.toTensor()},o.prototype.avgPoolBackprop=function(t,e,n){df([t,e],"avgPoolBackprop");for(var r=n.strideHeight,o=n.strideWidth,a=n.filterHeight,i=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,h=l-1-n.padInfo.left,f=c-1-n.padInfo.top,d=er(e.shape,"float32"),p=1/(a*i),v=this.bufferSync(t),g=0;g<n.batchSize;++g)for(var m=0;m<n.inChannels;++m)for(var y=0;y<n.inHeight;++y)for(var x=0;x<n.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var R=(b+E)/r;if(!(R<0||R>=n.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=u){var k=(w+I)/o;if(!(k<0||k>=n.outWidth||Math.floor(k)!==k))C+=v.get(g,R,k,m);}}d.set(C*p,g,y,x,m);}return d.toTensor()},o.prototype.pool3d=function(t,e,n){df(t,"pool3d");for(var r=e.strideDepth,o=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),m=er(e.outShape,t.dtype),y=m.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],b=e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[3]*e.outShape[4],C=e.outShape[4],E=0;E<e.batchSize;++E)for(var R=E*x,I=E*t.strides[0],k=0;k<e.inChannels;++k)for(var S=0;S<e.outDepth;++S){for(var A=S*r-f,T=A;T<0;)T+=i;for(var D=Math.min(e.inDepth,c+A),N=R+S*b,F=0;F<e.outHeight;++F){for(var _=F*o-d,O=_;O<0;)O+=s;for(var M=Math.min(e.inHeight,l+_),B=N+F*w,P=0;P<e.outWidth;++P){for(var L=P*a-p,W=L;W<0;)W+=u;for(var U=Math.min(e.inWidth,h+L),V=B+P*C,z=v,G=0,H=0,q=T;q<D;q+=i){for(var K=I+q*t.strides[1],j=O;j<M;j+=s){for(var X=K+j*t.strides[2],Y=W;Y<U;Y+=u){var $=g[X+Y*t.strides[3]+k];if("max"===n&&$>z?z=$:"avg"===n&&(G+=$,H++),isNaN(z))break}if(isNaN(z))break}if(isNaN(z))break}y[V+k]="avg"===n?G/H:z;}}}return m.toTensor()},o.prototype.avgPool3d=function(t,e){return df(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()},o.prototype.avgPool3dBackprop=function(t,e,n){df([t,e],"avgPool3dBackprop");for(var r=n.strideDepth,o=n.strideHeight,a=n.strideWidth,i=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,h=n.dilationWidth,f=n.effectiveFilterDepth,d=n.effectiveFilterHeight,p=n.effectiveFilterWidth,v=f-1-n.padInfo.front,g=p-1-n.padInfo.left,m=d-1-n.padInfo.top,y=er(e.shape,"float32"),x=1/(i*s*u),b=this.bufferSync(t),w=0;w<n.batchSize;++w)for(var C=0;C<n.inChannels;++C)for(var E=0;E<n.inDepth;++E)for(var R=0;R<n.inHeight;++R)for(var I=0;I<n.inWidth;++I){for(var k=E-v,S=R-m,A=I-g,T=0,D=0;D<f;D+=c){var N=(k+D)/r;if(!(N<0||N>=n.outDepth||Math.floor(N)!==N))for(var F=0;F<d;F+=l){var _=(S+F)/o;if(!(_<0||_>=n.outHeight||Math.floor(_)!==_))for(var O=0;O<p;O+=h){var M=(A+O)/a;if(!(M<0||M>=n.outWidth||Math.floor(M)!==M))T+=b.get(w,N,_,M,C);}}}y.set(T*x,w,E,R,I,C);}return y.toTensor()},o.prototype.maxPool3d=function(t,e){return df(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()},o.prototype.maxPool3dPositions=function(t,e){for(var n=er(e.outShape,"int32"),r=e.strideDepth,o=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v=this.bufferSync(t),g=0;g<e.batchSize;++g)for(var m=0;m<e.inChannels;++m)for(var y=0;y<e.outDepth;++y){for(var x=y*r-f,b=x;b<0;)b+=i;for(var w=Math.min(e.inDepth,c+x),C=0;C<e.outHeight;++C){for(var E=C*o-d,R=E;R<0;)R+=s;for(var I=Math.min(e.inHeight,l+E),k=0;k<e.outWidth;++k){for(var S=k*a-p,A=S;A<0;)A+=u;for(var T=Math.min(e.inWidth,h+S),D=Number.NEGATIVE_INFINITY,N=-1,F=b;F<w;F+=i)for(var _=F-x,O=R;O<I;O+=s)for(var M=O-E,B=A;B<T;B+=u){var P=B-S,L=v.get(g,F,O,B,m);L>=D&&(D=L,N=_*l*h+M*l+P);}n.set(N,g,y,C,k,m);}}}return n.toTensor()},o.prototype.maxPool3dBackprop=function(t,e,n,r){df([e,n],"maxPool3dBackprop");for(var o=this.maxPool3dPositions(e,r),a=r.strideDepth,i=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterDepth,f=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=h-1-r.padInfo.front,v=d-1-r.padInfo.left,g=f-1-r.padInfo.top,m=er(e.shape,"float32"),y=this.bufferSync(o),x=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var E=0;E<r.inHeight;++E)for(var R=0;R<r.inWidth;++R){for(var I=C-p,k=E-g,S=R-v,A=0,T=0;T<h;T+=u){var D=(I+T)/a;if(!(D<0||D>=r.outDepth||Math.floor(D)!==D))for(var N=0;N<f;N+=c){var F=(k+N)/i;if(!(F<0||F>=r.outHeight||Math.floor(F)!==F))for(var _=0;_<d;_+=l){var O=(S+_)/s;if(!(O<0||O>=r.outWidth||Math.floor(O)!==O)){var M=h*f*d-1-y.get(b,D,F,O,w)===T*f*d+N*d+_?1:0;if(0!==M)A+=x.get(b,D,F,O,w)*M;}}}}m.set(A,b,C,E,R,w);}return m.toTensor()},o.prototype.cast=function(t,e){return Ra(t,e,this)},o.prototype.reshape=function(t,e){return Ia(t,e)},o.prototype.avgPool=function(t,e){return df(t,"avgPool"),df(t,"maxPool"),pf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,e,"avg").toTensor().toFloat()},o.prototype.resizeBilinear=function(t,e,n,r){df(t,"resizeBilinear");for(var o=t.shape,a=o[0],i=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(k([a,e,n,u])),h=[r&&e>1?i-1:i,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=0,p=h[0]/f[0],v=h[1]/f[1],g=0;g<a;g++)for(var m=0;m<e;m++)for(var y=p*m,x=Math.floor(y),b=y-x,w=Math.min(i-1,Math.ceil(y)),C=g*t.strides[0]+x*t.strides[1],E=g*t.strides[0]+w*t.strides[1],R=0;R<n;R++)for(var I=v*R,S=Math.floor(I),A=I-S,T=Math.min(s-1,Math.ceil(I)),D=C+S*t.strides[2],N=E+S*t.strides[2],F=C+T*t.strides[2],_=E+T*t.strides[2],O=0;O<u;O++){var M=c[D+O],B=c[N+O],P=M+(c[F+O]-M)*A,L=P+(B+(c[_+O]-B)*A-P)*b;l[d++]=L;}return Fn(l,[a,e,n,u])},o.prototype.resizeBilinearBackprop=function(t,e,n){df([t,e],"resizeBilinearBackprop");for(var r=e.shape,o=r[0],a=r[1],i=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*a*i*s),f=[n&&c>1?a-1:a,n&&l>1?i-1:i],d=[n&&c>1?c-1:c,n&&l>1?l-1:l],p=f[0]/d[0],v=f[1]/d[1],g=this.readSync(t.dataId),m=0,y=0;y<o;y++)for(var x=y*e.strides[0],b=0;b<c;b++)for(var w=b*p,C=Math.floor(w),E=Math.min(Math.ceil(w),a-1),R=x+C*e.strides[1],I=x+E*e.strides[1],k=w-C,S=1-k,A=0;A<l;A++)for(var T=A*v,D=Math.floor(T),N=Math.min(Math.ceil(T),i-1),F=T-D,_=1-F,O=R+D*e.strides[2],M=R+N*e.strides[2],B=I+D*e.strides[2],P=I+N*e.strides[2],L=S*_,W=S*F,U=k*_,V=k*F,z=0;z<s;z++){var G=g[m++];h[O+z]+=G*L,h[M+z]+=G*W,h[B+z]+=G*U,h[P+z]+=G*V;}return Ln(h,[o,i,a,s],e.dtype)},o.prototype.resizeNearestNeighbor=function(t,e,n,r){df(t,"resizeNearestNeighbor");for(var o=t.shape,a=o[0],i=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(a*e*n*u),h=[r&&e>1?i-1:i,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=h[0]/f[0],p=h[1]/f[1],v=0,g=0;g<a;g++)for(var m=g*t.strides[0],y=0;y<e;y++)for(var x=d*y,b=m+Math.min(i-1,r?Math.round(x):Math.floor(x))*t.strides[1],w=0;w<n;w++)for(var C=p*w,E=b+Math.min(s-1,r?Math.round(C):Math.floor(C))*t.strides[2],R=0;R<u;R++){var I=c[E+R];l[v++]=I;}return Fn(l,[a,e,n,u],t.dtype)},o.prototype.resizeNearestNeighborBackprop=function(t,e,n){df([t,e],"resizeNearestNeighborBackprop");for(var r=e.shape,o=r[0],a=r[1],i=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*a*i*s),f=this.readSync(t.dataId),d=[n&&c>1?a-1:a,n&&l>1?i-1:i],p=[n&&c>1?c-1:c,n&&l>1?l-1:l],v=d[0]/p[0],g=d[1]/p[1],m=1/v,y=1/g,x=2*Math.ceil(m)+2,b=2*Math.ceil(y)+2,w=0;w<o;w++)for(var C=w*e.strides[0],E=0;E<a;E++)for(var R=C+E*e.strides[1],I=Math.floor(E*m),k=Math.floor(I-x/2),S=0;S<i;S++)for(var A=R+S*e.strides[2],T=Math.floor(S*y),D=Math.floor(T-b/2),N=0;N<s;N++){for(var F=0,_=0;_<x;_++){var O=_+k;if(!(O<0||O>=c)){var M=C+O*t.strides[1],B=O*v;if(E===Math.min(a-1,n?Math.round(B):Math.floor(B)))for(var P=0;P<b;P++){var L=P+D;if(!(L<0||L>=l)){var W=M+L*t.strides[2],U=L*g;S===Math.min(i-1,n?Math.round(U):Math.floor(U))&&(F+=f[W+N]);}}}}h[A+N]=F;}return Ln(h,e.shape,e.dtype)},o.prototype.batchNormalization=function(t,e,n,r,o,a){df([t,e,n,o,a],"batchNorm");for(var i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=this.readSync(n.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=a?this.readSync(a.dataId):new Float32Array([0]),h=new Float32Array(i.length),f=l.length,d=c.length,p=u.length,v=s.length,g=0,m=0,y=0,x=0,b=0;b<i.length;++b)h[b]=l[g++]+(i[b]-s[m++])*c[y++]/Math.sqrt(u[x++]+r),g>=f&&(g=0),m>=v&&(m=0),y>=d&&(y=0),x>=p&&(x=0);return Ln(h,t.shape)},o.prototype.localResponseNormalization4D=function(t,e,n,r,o){df(t,"localResponseNormalization4D");var a=t.shape[3],i=a-1,s=this.readSync(t.dataId),u=t.size,c=new Float32Array(u);function l(t){for(var n=t%a,r=t-n+Math.max(0,n-e),o=t-n+Math.min(n+e,i),u=0;r<=o;r++){var c=s[r];u+=c*c;}return u}for(var h=0;h<u;h++){var f=l(h),d=s[h]*Math.pow(n+r*f,-o);c[h]=d;}return Ln(c,t.shape)},o.prototype.LRNGrad=function(t,e,n,r,o,a,i){df(t,"LRNGrad");for(var s=t.shape[3],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=this.readSync(n.dataId),h=new Float32Array(t.size),f=t.size,d=0;d<f;d++){for(var p=d%s,v=d-p+Math.max(0,p-r),g=d-p+Math.min(s,p+r+1),m=0,y=v;y<g;y++)m+=Math.pow(c[y],2);m=a*m+o;for(y=v;y<g;y++){var x=-2*a*i*c[y]*l[d]/m;d===y&&(x+=Math.pow(m,-i)),x*=u[d],h[y]+=x;}}return Ln(h,t.shape)},o.prototype.multinomial=function(t,e,n,r){df(t,"multinomial");for(var o=e?t:ia(t),a=o.shape[0],i=o.shape[1],s=Gn([a,n],"int32"),u=this.readSync(s.dataId),c=this.readSync(o.dataId),l=0;l<a;++l){var h=l*i,f=new Float32Array(i-1);f[0]=c[h];for(var d=1;d<f.length;++d)f[d]=f[d-1]+c[h+d];for(var p=Yu(r.toString()),v=l*n,g=0;g<n;++g){var m=p();u[v+g]=f.length;for(var y=0;y<f.length;y++)if(m<f[y]){u[v+g]=y;break}}}return s},o.prototype.oneHot=function(t,e,n,r){df(t,"oneHot");var o=new Float32Array(t.size*e);o.fill(r);for(var a=this.readSync(t.dataId),i=0;i<t.size;++i)a[i]>=0&&a[i]<e&&(o[i*e+a[i]]=n);return Bn(o,[t.size,e],"int32")},o.prototype.nonMaxSuppression=function(t,e,n,r,o){return df(t,"nonMaxSuppression"),Oa(this.readSync(t.dataId),this.readSync(e.dataId),n,r,o)},o.prototype.fft=function(t){return this.fftBatch(t,!1)},o.prototype.ifft=function(t){return this.fftBatch(t,!0)},o.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],o=er(t.shape,"float32"),a=er(t.shape,"float32"),i=Dn(t).as2D(n,r),s=Nn(t).as2D(n,r),u=0;u<n;u++)for(var c=i.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),h=Tn(c,l),f=this.readSync(this.fftImpl(h,e).dataId),d=0;d<r;d++){var p=Ta(f,d);o.values[u*r+d]=p.real,a.values[u*r+d]=p.imag;}return Tn(o.toTensor(),a.toTensor()).as2D(n,r)},o.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(o=Tn(Dn(o).div(On(r)),Nn(o).div(On(r)))),o}var a=this.readSync(t.dataId),i=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return {real:e,imag:n}}(this.fourierTransformByMatmul(a,r,e));return Tn(i.real,i.imag).as2D(t.shape[0],t.shape[1])},o.prototype.isExponentOf2=function(t){return 0==(t&t-1)},o.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=this.readSync(t.dataId),o=e/2,a=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=0;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return {real:n,imag:r}}(r),i=Tn(a.real,a.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=2;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return {real:n,imag:r}}(r),u=Tn(s.real,s.imag).as1D();i=this.fftRadix2(i,o,n),u=this.fftRadix2(u,o,n);var c=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var a=(e?2:-2)*Math.PI*(o/t);n[o]=Math.cos(a),r[o]=Math.sin(a);}return {real:n,imag:r}}(e,n),l=Tn(c.real,c.imag).mul(u),h=i.add(l),f=i.sub(l),d=Dn(h).concat(Dn(f)),p=Nn(h).concat(Nn(f));return Tn(d,p).as1D()},o.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),o=0;o<e;o++){for(var a=0,i=0,s=0;s<e;s++){var u=Na(o*s,e,n),c=Ta(t,s);a+=c.real*u.real-c.imag*u.imag,i+=c.real*u.imag+c.imag*u.real;}n&&(a/=e,i/=e),Da(r,a,i,o);}return r},o.prototype.depthToSpace=function(t,e,n){C("NHWC"===n,(function(){return "Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n})),C(e>1,(function(){return "blockSize should be > 1 for depthToSpace, but was: "+e}));for(var r=t.shape[0],o=t.shape[1],a=t.shape[2],i=t.shape[3],s=o*e,u=a*e,c=i/(e*e),l=this.readSync(t.dataId),h=new Float32Array(r*s*u*c),f=0,d=0;d<r;++d)for(var p=0;p<s;++p)for(var v=Math.floor(p/e),g=p%e,m=0;m<u;++m)for(var y=Math.floor(m/e),x=(g*e+m%e)*c,b=0;b<c;++b){var w=b+x+i*(y+a*(v+o*d));h[f++]=l[w];}return Ln(h,[r,s,u,c])},o.prototype.broadcastedBinaryOp=function(t,e,n,r){var o=Pr(t.shape,e.shape),a=er(o,n),i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Mr(t.shape,o),c=Mr(e.shape,o),l=a.values;if(u.length+c.length===0)for(var h=0;h<l.length;++h)l[h]=r(i[h%i.length],s[h%s.length]);else {var f=this.bufferSync(t),d=this.bufferSync(e),p=function(n){var o=a.indexToLoc(n),h=o.slice(-t.rank);u.forEach((function(t){return h[t]=0}));var p=f.locToIndex(h),v=o.slice(-e.rank);c.forEach((function(t){return v[t]=0}));var g=d.locToIndex(v);l[n]=r(i[p],s[g]);};for(h=0;h<l.length;++h)p(h);}return a.toTensor()},o.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=Pr(t.shape,e.shape),o=er(r,"float32"),a=er(r,"float32"),i=this.readSync(t.dataId),s=this.readSync(e.dataId),u=Mr(t.shape,r),c=Mr(e.shape,r),l=o.values,h=a.values;if(u.length+c.length===0)for(var f=0;f<l.length;f++){var d=f%i.length,p=f%s.length,v=n(i[2*d],i[2*d+1],s[2*p],s[2*p+1]);l[f]=v.real,h[f]=v.imag;}else {var g=this.bufferSync(this.data.get(t.dataId).complexTensors.real),m=this.bufferSync(this.data.get(e.dataId).complexTensors.real),y=function(r){var a=o.indexToLoc(r),f=a.slice(-t.rank);u.forEach((function(t){return f[t]=0}));var d=g.locToIndex(f),p=a.slice(-e.rank);c.forEach((function(t){return p[t]=0}));var v=m.locToIndex(p),y=n(i[2*d],i[2*d+1],s[2*v],s[2*v+1]);l[r]=y.real,h[r]=y.imag;};for(f=0;f<l.length;f++)y(f);}return this.complex(o.toTensor(),a.toTensor())},o.prototype.split=function(t,e,n){return Ua(t,e,n)},o.prototype.dispose=function(){},o.prototype.floatPrecision=function(){return 32},o.prototype.epsilon=function(){return 1e-7},o.prototype.cropAndResize=function(t,e,n,r,o,a){for(var i=t.shape,s=i[0],u=i[1],c=i[2],l=i[3],h=e.shape[0],f=r[0],d=r[1],p=er([h,f,d,l],"float32"),v=this.readSync(e.dataId),g=this.readSync(n.dataId),m=this.readSync(t.dataId),y=t.strides,x=p.strides,b=0;b<h;b++){var w=4*b,C=v[w],E=v[w+1],R=v[w+2],I=v[w+3],k=g[b];if(!(k>=s))for(var S=f>1?(R-C)*(u-1)/(f-1):0,A=d>1?(I-E)*(c-1)/(d-1):0,T=0;T<f;T++){var D=f>1?C*(u-1)+T*S:.5*(C+R)*(u-1);if(D<0||D>u-1)for(var N=0;N<d;N++)for(var F=0;F<l;F++){var _=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a;}else if("bilinear"===o){var O=Math.floor(D),M=Math.ceil(D),B=D-O;for(N=0;N<d;N++){if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++){_=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a;}else {var P=Math.floor(q),L=Math.ceil(q),W=q-P;for(F=0;F<l;F++){var U=m[_=F+P*y[2]+O*y[1]+k*y[0]],V=m[_=F+L*y[2]+O*y[1]+k*y[0]],z=m[_=F+P*y[2]+M*y[1]+k*y[0]],G=U+(V-U)*W,H=z+(m[_=F+L*y[2]+M*y[1]+k*y[0]]-z)*W;_=F+N*x[2]+T*x[1]+b*x[0],p.values[_]=G+(H-G)*B;}}}}else for(N=0;N<d;++N){var q;if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++){_=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=a;}else {var K=Math.round(q),j=Math.round(D);for(F=0;F<l;F++){var X=F+K*y[2]+j*y[1]+k*y[0],Y=F+N*x[2]+T*x[1]+b*x[0];p.values[Y]=m[X];}}}}}return p.toTensor()},o.prototype.sparseToDense=function(t,e,n,r){var o=Go(0,t,n),a=o.sliceRank,i=o.numUpdates,s=o.sliceSize,u=o.strides,c=o.outputSize;return this.scatter(t,e,n,c,s,i,a,u,r,!1)},o.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Po(t,e),a=o[0],i=o[1],s=o[2],u=o[3];if(0===i)return Fn([],a,t.dtype);for(var c=new mt([i,s],t.dtype),l=this.readSync(e.dataId),h=this.readSync(t.dataId),f=0;f<i;f++){for(var d=[],p=0,v=0;v<r;v++){var g=l[f*r+v];p+=g*u[v],d.push(g);}if(p<0||p>=t.size/s)throw new Error("Invalid indices: "+d+" does not index into "+t.shape);for(var m=0;m<s;m++)c.values[f*s+m]=h[p*s+m];}return c.toTensor().reshape(a)},o.prototype.scatterND=function(t,e,n){var r=Go(0,t,n),o=r.sliceRank,a=r.numUpdates,i=r.sliceSize,s=r.strides,u=r.outputSize,c=On(0);return this.scatter(t,e,n,u,i,a,o,s,c,!0)},o.prototype.fill=function(t,e,n){var r=P(n=n||j(e),k(t));return r.fill(e),Lt.makeTensor(r,t,n,this)},o.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)},o.prototype.zerosLike=function(t){var e=P(t.dtype,k(t.shape));return this.makeOutput(e,t.shape,t.dtype)},o.prototype.linspace=function(t,e,n){return ka(t,e,n)},o.prototype.scatter=function(t,e,n,r,o,a,i,s,u,c){var l=[r/o,o],h=this.readSync(t.dataId),f=this.readSync(e.dataId);if(0===r)return Fn([],n,e.dtype);var d=new mt(l,e.dtype);d.values.fill(this.readSync(u.dataId)[0]);for(var p=0;p<a;p++){for(var v=[],g=0,m=0;m<i;m++){var y=h[p*i+m];v.push(y),g+=y*s[m];}if(g<0||g>=r/o)throw new Error("Invalid indices: "+v+" does not index into "+n);for(var x=0;x<o;x++)c?d.values[g*o+x]+=f[p*o+x]:d.values[g*o+x]=0===e.rank?f[0]:f[p*o+x];}return d.toTensor().reshape(n)},o}(la);function yf(t,e){return {kernelName:t,backendName:"cpu",kernelFunc:function(n){var r=n.inputs,o=n.backend,a=r,i=a.a,s=a.b,u=o;df([i,s],t);var c=u.data.get(i.dataId).values,l=u.data.get(s.dataId).values,h=e(i.shape,s.shape,c,l,i.dtype),f=h[0],d=h[1];return {dataId:u.write(f,d,i.dtype),shape:d,dtype:i.dtype}}}}function xf(t){return function(e,n,r,o,a){var i=Pr(e,n),s=i.length,u=$(i),c=B(a,k(i)),l=e.length,h=n.length,f=$(e),d=$(n),p=Mr(e,i),v=Mr(n,i);if(p.length+v.length===0)for(var g=0;g<c.length;++g)c[g]=t(r[g%r.length],o[g%o.length]);else {var m=function(e){var n=it(e,s,u),a=n.slice(-l);p.forEach((function(t){return a[t]=0}));var i=at(a,l,f),g=n.slice(-h);v.forEach((function(t){return g[t]=0}));var m=at(g,h,d);c[e]=t(r[i],o[m]);};for(g=0;g<c.length;++g)m(g);}return [c,i]}}Lt.registerBackend("cpu",(function(){return new mf}),1);var bf=xf((function(t,e){return t/e})),wf=yf(wr,bf);var Cf={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n,i=a.filterSize,s=a.strides,u=a.pad,c=a.includeBatchInIndex,l=r;df(o,"MaxPoolWithArgmax");var h=l.data.get(o.dataId).values,f=fa(o.shape,i,s,[1,1],u),d=function(t,e,n,r,o){var a=pf(t,0,n,$(e),o,"max"),i=vf(t,e,n,o,!0,r);return [a.values,i.values]}(h,o.shape,o.dtype,c,f),p=d[0],v=d[1],g=l.write(p,f.outShape,o.dtype),m=l.write(v,f.outShape,o.dtype);return [{dataId:g,shape:f.outShape,dtype:o.dtype},{dataId:m,shape:f.outShape,dtype:"int32"}]}},Ef={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e,a=o.boxes,i=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n;df(a,"NonMaxSuppressionWithScore");var d=Ma(f.data.get(a.dataId).values,f.data.get(i.dataId).values,u,c,l,h);return [d.selectedIndices,d.selectedScores]}},Rf={kernelName:"Square",backendName:"cpu",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n;df(r,"square");for(var a=o.data.get(r.dataId).values,i=new Float32Array(a.length),s=0;s<a.length;++s){var u=a[s];i[s]=u*u;}return {dataId:o.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},If=xf((function(t,e){var n=t-e;return n*n}));function kf(t,e,n,r,o){for(var a=k(e),i=e.length,s=$(e),u=$(o),c=B(n,k(o)),l=0;l<a;++l){for(var h=it(l,i,s),f=new Array(h.length),d=0;d<f.length;d++)f[d]=h[r[d]];c[at(f,i,u)]=t[l];}return c}for(var Sf=0,Af=[Ef,Rf,yf(Er,If),wf,{kernelName:"Transpose",backendName:"cpu",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n.perm,i=r;df(o,"transpose");for(var s=o.shape.length,u=new Array(s),c=0;c<u.length;c++)u[c]=o.shape[a[c]];var l=kf(i.data.get(o.dataId).values,o.shape,o.dtype,a,u);return {dataId:i.write(l,u,o.dtype),shape:u,dtype:o.dtype}}},Cf];Sf<Af.length;Sf++){d(Af[Sf]);}var Tf,Df=function(t){this.variableNames=["A"];var e=Ya(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n\n        vec4 values = "+e.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";},Nf=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var e=Ya(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2("+r+".0, "+n+".0);\n            vec4 values = "+e.texture2D+"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        "+e.output+" = result;\n      }\n    ";};var Ff=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var o=ui(this.rank),a=function(t){var e=t.length;if(e>6)throw Error("Transpose for rank "+e+" is not yet supported");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e),o=0;o<t.length;o++)r[t[o]]=n[o];return r.join()}(e);this.userCode="\n    void main() {\n      "+o+" resRC = getOutputCoords();\n      setOutput(getA("+a+"));\n    }\n    ";};var _f=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error("Packed transpose for rank "+this.rank+" is not yet supported.");var o=ui(this.rank),a=ja("rc",this.rank),i=new Array(this.rank);for(r=0;r<e.length;r++)i[e[r]]=a[r];var s="vec2("+i.slice(-2).join()+")",u="++"+a[this.rank-1]+" < "+n[this.rank-1],c="getChannel(getA("+i.join()+"), "+s+")";this.userCode="\n    void main() {\n      "+o+" rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = "+c+";\n      if("+u+") {\n        result[1] = "+c+";\n      }\n      --"+a[this.rank-1]+";\n      if(++"+a[this.rank-2]+" < "+n[this.rank-2]+") {\n        result[2] = "+c+";\n        if("+u+") {\n          result[3] = "+c+";\n        }\n      }\n      setOutput(result);\n    }\n    ";};for(var Of=0,Mf=[{kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs,o=e.pixels,a=r.numChannels,s="undefined"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,c=s?[o.videoWidth,o.videoHeight]:[o.width,o.height],l=c[0],h=c[1],f=[h,l],d=[h,l,a];(u||s)&&(null==Tf&&(Tf=document.createElement("canvas").getContext("2d")),Tf.canvas.width=l,Tf.canvas.height=h,Tf.drawImage(o,0,0,l,h),o=Tf.canvas);var p=n.makeTensorInfo(f,"int32");n.texData.get(p.dataId).usage=zt.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),o);var v=i().getBool("WEBGL_PACK")?new Nf(d):new Df(d),g=n.runWebGLProgram(v,[p],"int32");return n.disposeData(p.dataId),g}},{kernelName:wr,backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e;return function(t,e,n){var r=new Ri(Ci,t.shape,e.shape);return i().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(r=new Si(Ii,t.shape,e.shape,!0)),n.runWebGLProgram(r,[t,e],"float32")}(r.a,r.b,n)}},{kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=t.attrs;dn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var o=e,a=o.boxes,i=o.scores,s=r,u=s.maxOutputSize,c=s.iouThreshold,l=s.scoreThreshold,h=s.softNmsSigma,f=n,d=Ma(f.readSync(a.dataId),f.readSync(i.dataId),u,c,l,h);return [d.selectedIndices,d.selectedScores]}},{kernelName:"Square",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n,a=new cu(r.shape,"return x * x;");return o.runWebGLProgram(a,[r],r.dtype)}},{kernelName:Er,backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e,o=r.a,a=r.b,s=n,u=i().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Si("return (a - b) * (a - b);",o.shape,a.shape):new Ri("return (a - b) * (a - b);",o.shape,a.shape);return s.compileAndRun(u,[o,a])}},{kernelName:"Transpose",backendName:"webgl",kernelFunc:function(t){for(var e,n=t.inputs,r=t.attrs,o=t.backend,a=n.x,s=r.perm,u=o,c=a.shape.length,l=new Array(c),h=0;h<l.length;h++)l[h]=a.shape[s[h]];if(u.shouldExecuteOnCPU([a])){var f=kf(u.texData.get(a.dataId).values,a.shape,a.dtype,s,l);e=u.makeTensorInfo(l,a.dtype),u.texData.get(e.dataId).values=f;}else e=function(t,e,n){var r=i().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _f(t.shape,e):new Ff(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}(a,s,u);return e}},{kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.attrs,r=t.backend,o=e.x,a=n,i=a.filterSize,s=a.strides,u=a.pad,c=a.includeBatchInIndex,l=r;C(4===o.shape.length,(function(){return "Error in maxPool: input must be rank 4 but got rank "+o.shape.length+"."}));var h=[1,1];C(Ca(s,h),(function(){return "Error in maxPool: Either strides or dilations must be 1. Got strides "+s+" and dilations '"+h+"'"}));var f=fa(o.shape,i,s,h,u),d=function(t,e,n,r){var o=new Ws(n,"max",!1),a=r.runWebGLProgram(o,[t],"float32");return o=new Ws(n,"max",!0,!0,e),[a,r.runWebGLProgram(o,[t],"float32")]}(o,c,f,l);return [d[0],d[1]]}}];Of<Mf.length;Of++){d(Mf[Of]);}for(var Bf=0,Pf=[{kernelName:xr,inputsToSave:["a","b"],gradFunc:function(t,e){var n=e[0],r=e[1],o=Pr(n.shape,r.shape);return {a:function(){var e=t,r=Br(n.shape,o);return r.length>0&&(e=e.sum(r)),e.reshape(n.shape)},b:function(){var e=t,n=Br(r.shape,o);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)}}}},{kernelName:"AddN",saveAllInputs:!0,gradFunc:function(t,e){var n={};return e.forEach((function(e,r){n[r]=function(){return t.clone()};})),n}},{kernelName:Sr,gradFunc:function(t,e,n){for(var r=n,o=r.inputShape,a=r.shape,i=Array.from(a),s=o.length-1;s>=0;s--)if(o[s]===a[s])i[s]=1;else if(1!==o[s])throw new Error("broadcastTo(): ["+o+"] cannot be broadcast to ["+a+"].");var u=[];for(s=0;s<i.length;s++)i[s]>1&&u.push(s);return {x:function(){return t.sum(u,!0)}}}},{kernelName:wr,inputsToSave:["a","b"],gradFunc:function(t,e){var n=e[0],r=e[1],o=Pr(n.shape,r.shape);return {a:function(){var e=Bo(t,r.toFloat()),a=Br(n.shape,o);return a.length>0?th(e,a).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),a=Br(r.shape,o);a.length>0&&(e=th(e,a).reshape(r.shape));var i=Gc(r);return no(Bo(e,i.toFloat()))}}}},{kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:function(t,e,n){var r=n.varianceEpsilon,o=e[0],a=e[1],i=e[2],s=e[3],u=Ju(o),c=null==s?On(1):s,l=Br(a.shape,u.shape),h=[];if(1===a.rank){for(var f=0;f<u.shape.length-1;++f)h.push(u.shape[f]);h.push(1);}var d=Oo(o,a),p=To(t,c),v=ao(Or(i,On(r))),g=To(To(To(v,v),v),On(-.5));return {x:function(){return 1===a.rank?ur(To(To(t,wc(v.as4D(1,1,1,a.shape[0]),h)),c),o.shape):ur(To(To(t,v),c),o.shape)},mean:function(){var t=To(To(v,On(-1)),p);return 1===a.rank&&(t=th(t,l)),ur(t,a.shape)},variance:function(){var t=To(To(g,d),p);return 1===a.rank&&(t=th(t,l)),ur(t,a.shape)},scale:function(){var e=To(d,v),n=To(t,e);return 1===a.rank&&(n=th(n,l)),ur(n,a.shape)},offset:function(){var e=t;return 1===a.rank&&(e=th(e,l)),ur(e,a.shape)}}}},{kernelName:Tr,gradFunc:function(t){return {x:function(){return t.toFloat()}}}},{kernelName:Ar,inputsToSave:["indices"],gradFunc:function(t,e){var n=e[0];return {indices:function(){return Gn(n.shape,"float32")}}}},{kernelName:Nr,inputsToSave:["x"],gradFunc:function(t,e,n){var r=e[0],o=n.paddings.map((function(t){return t[0]}));return {x:function(){return t.slice(o,r.shape)}}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:function(t,e){var n=e[0];return {x:function(){return t.mul(n.toFloat().mul(2))}}}},{kernelName:Er,inputsToSave:["a","b"],gradFunc:function(t,e){var n=e[0],r=e[1],o=On(2);return {a:function(){return To(t,To(o,Oo(n,r)))},b:function(){return To(t,To(o,Oo(r,n)))}}}},{kernelName:Dr,inputsToSave:["x"],gradFunc:function(t,e,n){var r=e[0],o=n.reps;return {x:function(){var e=Xn(r);if(1===r.rank)for(var n=0;n<o[0];++n)e=e.add(t.slice([n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(n=0;n<o[0];++n)for(var a=0;a<o[1];++a)e=e.add(t.slice([n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(n=0;n<o[0];++n)for(a=0;a<o[1];++a)for(var i=0;i<o[2];++i)e=e.add(t.slice([n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else {if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(n=0;n<o[0];++n)for(a=0;a<o[1];++a)for(i=0;i<o[2];++i)for(var s=0;s<o[3];++s)e=e.add(t.slice([n*r.shape[0],a*r.shape[1],i*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));}return e}}}},{kernelName:"Transpose",gradFunc:function(t,e,n){var r=Rn(n.perm);return {x:function(){return ua(t,r)}}}}];Bf<Pf.length;Bf++){p(Pf[Bf]);}var Lf=function(){function t(){}return t.prototype.fetch=function(t,e){return fetch(t,e)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return new TextDecoder(e).decode(t)},t}();i().get("IS_BROWSER")&&i().setPlatform("browser",new Lf);var Wf,Uf=function(){return require("node-fetch")},Vf=function(){function t(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder;}return t.prototype.fetch=function(t,e){return null!=i().global.fetch?i().global.fetch(t,e):(null==Wf&&(Wf=Uf()),Wf(t,e))},t.prototype.now=function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)},t}();i().get("IS_NODE")&&i().setPlatform("node",new Vf);var zf={float32:4,int32:4,uint16:2,uint8:1,bool:1},Gf=4;function Hf(t,e){for(var n={},r=0,o=function(e){var o=e.name,a=e.dtype,i=e.shape,s=k(i),u=void 0;if("quantization"in e){var c=e.quantization;if("uint8"!==c.dtype&&"uint16"!==c.dtype)throw new Error("Weight "+e.name+" has unknown quantization dtype "+c.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var l=zf[c.dtype],h=t.slice(r,r+s*l),f="uint8"===c.dtype?new Uint8Array(h):new Uint16Array(h);if("float32"===a)u=Float32Array.from(f,(function(t){return t*c.scale+c.min}));else {if("int32"!==a)throw new Error("Unsupported dtype in weight '"+o+"': "+a);u=Int32Array.from(f,(function(t){return Math.round(t*c.scale+c.min)}));}r+=s*l;}else if("string"===a){var d=k(e.shape);u=[];for(var p=0;p<d;p++){var v=new Uint32Array(t.slice(r,r+Gf))[0];r+=Gf;var g=new Uint8Array(t.slice(r,r+v));u.push(g),r+=v;}}else {var m=zf[a];h=t.slice(r,r+s*m);if("float32"===a)u=new Float32Array(h);else if("int32"===a)u=new Int32Array(h);else {if("bool"!==a)throw new Error("Unsupported dtype in weight '"+o+"': "+a);u=new Uint8Array(h);}r+=s*m;}n[o]=Fn(u,i,a);},a=0,i=e;a<i.length;a++){o(i[a]);}return n}function qf(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var e=0,n=[];t.forEach((function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));var r=new Uint8Array(e),o=0;return n.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength;})),r.buffer}var Kf="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function jf(t){return Kf?Buffer.byteLength(t):new Blob([t]).size}function Xf(t){var e=0;t.forEach((function(t){e+=t.byteLength;}));var n=new Uint8Array(e),r=0;return t.forEach((function(t){n.set(new Uint8Array(t),r),r+=t.byteLength;})),n.buffer}function Yf(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var e=t.split("/");return e[e.length-1]}function $f(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return {dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:jf(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:jf(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var Qf=function(){function t(){this.saveRouters=[],this.loadRouters=[];}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e);},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e);},t.getSaveHandlers=function(e){return t.getHandlers(e,"save")},t.getLoadHandlers=function(e,n){return t.getHandlers(e,"load",n)},t.getHandlers=function(e,n,r){var o=[];return ("load"===n?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var n=t(e,r);null!==n&&o.push(n);})),o},t}(),Jf="://",Zf=function(){function t(){this.managers={};}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){C(null!=e,(function(){return "scheme must not be undefined or null."})),e.endsWith(Jf)&&(e=e.slice(0,e.indexOf(Jf))),C(e.length>0,(function(){return "scheme must not be an empty string."}));var r=t.getInstance();C(null==r.managers[e],(function(){return "A model store manager is already registered for scheme '"+e+"'."})),r.managers[e]=n;},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error("Cannot find model manager for scheme '"+t+"'");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function td(t){if(-1===t.indexOf(Jf))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Zf.getSchemes().join(","));return {scheme:t.split(Jf)[0],path:t.split(Jf)[1]}}function ed(t,e,o){return void 0===o&&(o=!1),n(this,void 0,void 0,(function(){var n,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return C(t!==e,(function(){return "Old path and new path are the same: '"+t+"'"})),C((n=Qf.getLoadHandlers(t)).length>0,(function(){return "Copying failed because no load handler is found for source URL "+t+"."})),C(n.length<2,(function(){return "Copying failed because more than one ("+n.length+") load handlers for source URL "+t+"."})),a=n[0],C((i=Qf.getSaveHandlers(e)).length>0,(function(){return "Copying failed because no save handler is found for destination URL "+e+"."})),C(i.length<2,(function(){return "Copying failed because more than one ("+n.length+") save handlers for destination URL "+e+"."})),s=i[0],u=td(t).scheme,c=td(t).path,l=u===td(t).scheme,[4,a.load()];case 1:return h=r.sent(),o&&l?[4,Zf.getManager(u).removeModel(c)]:[3,3];case 2:r.sent(),r.label=3;case 3:return [4,s.save(h)];case 4:return f=r.sent(),!o||l?[3,6]:[4,Zf.getManager(u).removeModel(c)];case 5:r.sent(),r.label=6;case 6:return [2,f.modelArtifactsInfo]}}))}))}var nd="models_store",rd="model_info_store";function od(){if(!i().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window||self,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function ad(t){var e=t.result;e.createObjectStore(nd,{keyPath:"modelPath"}),e.createObjectStore(rd,{keyPath:"modelPath"});}var id=function(){function t(t){if(this.indexedDB=od(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t;}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return [2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return [2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,e){var n=this;return new Promise((function(t,r){var o=n.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return ad(o)},o.onsuccess=function(){var a=o.result;if(null==e){var i=a.transaction(nd,"readonly"),s=i.objectStore(nd).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return a.close(),r(new Error("Cannot find model with path '"+n.modelPath+"' in IndexedDB."));t(s.result.modelArtifacts);},s.onerror=function(t){return a.close(),r(s.error)},i.oncomplete=function(){return a.close()};}else {var u,c=$f(e),l=a.transaction(rd,"readwrite"),h=l.objectStore(rd),f=h.put({modelPath:n.modelPath,modelArtifactsInfo:c});f.onsuccess=function(){var o=(u=a.transaction(nd,"readwrite")).objectStore(nd).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var e=(h=l.objectStore(rd)).delete(n.modelPath);e.onsuccess=function(){return a.close(),r(o.error)},e.onerror=function(t){return a.close(),r(o.error)};};},f.onerror=function(t){return a.close(),r(f.error)},l.oncomplete=function(){null==u?a.close():u.oncomplete=function(){return a.close()};};}},o.onerror=function(t){return r(o.error)};}))},t.URL_SCHEME="indexeddb://",t}(),sd$1=function(t){return i().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(id.URL_SCHEME)?(e=t.slice(id.URL_SCHEME.length),new id(e)):null;var e;};Qf.registerSaveRouter(sd$1),Qf.registerLoadRouter(sd$1);var ud=function(){function t(){this.indexedDB=od();}return t.prototype.listModels=function(){return n(this,void 0,void 0,(function(){var t=this;return r(this,(function(e){return [2,new Promise((function(e,n){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return ad(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(rd,"readonly"),a=o.objectStore(rd).getAll();a.onsuccess=function(){for(var t={},n=0,r=a.result;n<r.length;n++){var o=r[n];t[o.modelPath]=o.modelArtifactsInfo;}e(t);},a.onerror=function(e){return t.close(),n(a.error)},o.oncomplete=function(){return t.close()};},r.onerror=function(t){return n(r.error)};}))]}))}))},t.prototype.removeModel=function(t){return n(this,void 0,void 0,(function(){var e=this;return r(this,(function(n){var r;return t=(r=t).startsWith(id.URL_SCHEME)?r.slice(id.URL_SCHEME.length):r,[2,new Promise((function(n,r){var o=e.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return ad(o)},o.onsuccess=function(){var e,a=o.result,i=a.transaction(rd,"readwrite"),s=i.objectStore(rd),u=s.get(t);u.onsuccess=function(){if(null==u.result)return a.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var o=s.delete(t),i=function(){var o=(e=a.transaction(nd,"readwrite")).objectStore(nd).delete(t);o.onsuccess=function(){return n(u.result.modelArtifactsInfo)},o.onerror=function(t){return r(u.error)};};o.onsuccess=i,o.onerror=function(t){return i(),a.close(),r(u.error)};},u.onerror=function(t){return a.close(),r(u.error)},i.oncomplete=function(){null==e?a.close():e.oncomplete=function(){return a.close()};};},o.onerror=function(t){return r(o.error)};}))]}))}))},t}();if(i().getBool("IS_BROWSER"))try{Zf.registerManager(id.URL_SCHEME,new ud);}catch(t){}var cd="/",ld="tensorflowjs_models",hd="info",fd="model_topology",dd="weight_specs",pd="weight_data",vd="model_metadata";function gd(t){return {info:[ld,t,hd].join(cd),topology:[ld,t,fd].join(cd),weightSpecs:[ld,t,dd].join(cd),weightData:[ld,t,pd].join(cd),modelMetadata:[ld,t,vd].join(cd)}}function md(t){var e=t.split(cd);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(cd)}var yd=function(){function t(t){if(!i().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=gd(this.modelPath);}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(r){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),o=$f(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(o)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Kf)return Buffer.from(t).toString("base64");for(var e=new Uint8Array(t),n="",r=0,o=e.length;r<o;r++)n+=String.fromCharCode(e[r]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),[2,{modelArtifactsInfo:o}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+o.modelTopologyBytes+", weightSpecsBytes="+o.weightSpecsBytes+", weightDataBytes="+o.weightDataBytes+".")}return [2]}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s;return r(this,(function(r){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(e.modelTopology=n,null==(o=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(e.weightSpecs=o,null!=(a=this.LS.getItem(this.keys.modelMetadata))&&(i=JSON.parse(a),e.format=i.format,e.generatedBy=i.generatedBy,e.convertedBy=i.convertedBy,e.userDefinedMetadata=i.userDefinedMetadata),null==(s=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return e.weightData=function(t){if(Kf){var e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r.set([n.charCodeAt(o)],o);return r.buffer}(s),[2,e]}))}))},t.URL_SCHEME="localstorage://",t}(),xd=function(t){return i().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(yd.URL_SCHEME)?(e=t.slice(yd.URL_SCHEME.length),new yd(e)):null;var e;};Qf.registerSaveRouter(xd),Qf.registerLoadRouter(xd);var bd=function(){function t(){C(i().getBool("IS_BROWSER"),(function(){return "Current environment is not a web browser"})),C("undefined"==typeof window||void 0!==window.localStorage,(function(){return "Current browser does not appear to support localStorage"})),this.LS=window.localStorage;}return t.prototype.listModels=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i;return r(this,(function(r){for(t={},e=ld+cd,n=cd+hd,o=0;o<this.LS.length;++o)(a=this.LS.key(o)).startsWith(e)&&a.endsWith(n)&&(i=md(a),t[i]=JSON.parse(this.LS.getItem(a)));return [2,t]}))}))},t.prototype.removeModel=function(t){return n(this,void 0,void 0,(function(){var e,n;return r(this,(function(r){var o;if(t=(o=t).startsWith(yd.URL_SCHEME)?o.slice(yd.URL_SCHEME.length):o,e=gd(t),null==this.LS.getItem(e.info))throw new Error("Cannot find model at path '"+t+"'");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]}))}))},t}();if(i().getBool("IS_BROWSER"))try{Zf.registerManager(yd.URL_SCHEME,new bd);}catch(t){}var wd="model",Cd=".json",Ed=".weights.bin";function Rd(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Id=function(){function t(e){if(!i().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=wd),this.modelTopologyFileName=e+Cd,this.weightDataFileName=e+Ed;}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,i,s;return r(this,(function(r){switch(r.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer))return [3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],o={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},a=window.URL.createObjectURL(new Blob([JSON.stringify(o)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=a,[4,Rd((function(){return i.dispatchEvent(new MouseEvent("click"))}))];case 2:return r.sent(),null==t.weightData?[3,4]:((s=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,s.href=e,[4,Rd((function(){return s.dispatchEvent(new MouseEvent("click"))}))]);case 3:r.sent(),r.label=4;case 4:return [2,{modelArtifactsInfo:$f(t)}]}}))}))},t.URL_SCHEME="downloads://",t}(),kd=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t;}return t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n=this;return r(this,(function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise((function(r,o){var a=new FileReader;a.onload=function(a){var i=JSON.parse(a.target.result),s=i.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=i.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,e);}catch(t){return void o(t)}var l=[],h=[],f=[];u.forEach((function(t){t.paths.forEach((function(t){h.push(t),f.push(null);})),l.push.apply(l,t.weights);})),u.forEach((function(t){t.paths.forEach((function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,o=h.indexOf(t);f[o]=n,-1===f.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:Xf(f),format:i.format,generatedBy:i.generatedBy,convertedBy:i.convertedBy,userDefinedMetadata:i.userDefinedMetadata});},e.onerror=function(e){return o("Failed to weights data from file of path '"+t+"'.")},e.readAsArrayBuffer(c[t]);}));}));}else o(new Error("weightManifest field is missing from file "+t.name));}else o(new Error("modelTopology field is missing from file "+t.name));},a.onerror=function(e){return o("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},a.readAsText(t);}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map((function(t){return Yf(t.name)})),o={},a=0,i=t;a<i.length;a++){i[a].paths.forEach((function(t){var a=Yf(t);if(-1!==n.indexOf(a))throw new Error("Duplicate file basename found in weights manifest: '"+a+"'");if(n.push(a),-1===r.indexOf(a))throw new Error("Weight file with basename '"+a+"' is not provided.");o[t]=e[r.indexOf(a)];}));}if(n.length!==e.length)throw new Error("Mismatch in the number of files in weights manifest ("+n.length+") and the number of weight files provided ("+e.length+").");return o},t}();function Sd(t,e,n,r){!function(t){C(null!=t&&Array.isArray(t)&&t.length>0,(function(){return "promises must be a none empty array"}));}(t),function(t,e){C(t>=0&&t<=1,(function(){return "Progress fraction must be in range [0, 1], but got startFraction "+t})),C(e>=0&&e<=1,(function(){return "Progress fraction must be in range [0, 1], but got endFraction "+e})),C(e>=t,(function(){return "startFraction must be no more than endFraction, but got startFraction "+t+" and endFraction "+e}));}(n=null==n?0:n,r=null==r?1:r);var o=0;return Promise.all(t.map((function(a){return a.then((function(a){var i=n+ ++o/t.length*(r-n);return e(i),a})),a})))}function Ad(t,e){return n(this,void 0,void 0,(function(){var n,o,a,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return null==e&&(e={}),n=null==e.fetchFunc?i().platform.fetch:e.fetchFunc,o=t.map((function(t){return n(t,e.requestInit,{isBinary:!0})})),a=0,s=.5,null!=e.onProgress?[3,2]:[4,Promise.all(o)];case 1:return u=r.sent(),[3,4];case 2:return [4,Sd(o,e.onProgress,a,s)];case 3:u=r.sent(),r.label=4;case 4:return c=u.map((function(t){return t.arrayBuffer()})),l=.5,h=1,null!=e.onProgress?[3,6]:[4,Promise.all(c)];case 5:return f=r.sent(),[3,8];case 6:return [4,Sd(c,e.onProgress,l,h)];case 7:f=r.sent(),r.label=8;case 8:return [2,f]}}))}))}function Td(t){var e=this;return function(o,a,i){return void 0===a&&(a=""),n(e,void 0,void 0,(function(){var e,n,s,u,c,l,h,f,d,p;return r(this,(function(r){switch(r.label){case 0:if(e=o.map((function(){return !1})),n={},s=null!=i?i.map((function(){return !1})):[],u=[],o.forEach((function(t,r){var o=0;t.weights.forEach((function(t){var a="quantization"in t?t.quantization.dtype:t.dtype,c=zf[a]*k(t.shape),l=function(){e[r]=!0,null==n[r]&&(n[r]=[]),n[r].push({manifestEntry:t,groupOffset:o,sizeBytes:c});};null!=i?i.forEach((function(e,n){e===t.name&&(l(),s[n]=!0);})):l(),u.push(t.name),o+=c;}));})),!s.every((function(t){return t})))throw c=i.filter((function(t,e){return !s[e]})),new Error("Could not find weights in manifest with names: "+c.join(", ")+". \nManifest JSON has weights with names: "+u.join(", ")+".");return l=e.reduce((function(t,e,n){return e&&t.push(n),t}),[]),h=[],l.forEach((function(t){o[t].paths.forEach((function(t){var e=a+(a.endsWith("/")?"":"/")+t;h.push(e);}));})),[4,t(h)];case 1:return f=r.sent(),d={},p=0,l.forEach((function(t){for(var e=o[t].paths.length,r=0,a=0;a<e;a++)r+=f[p+a].byteLength;for(var i=new ArrayBuffer(r),s=new Uint8Array(i),u=0,c=0;c<e;c++){var l=new Uint8Array(f[p+c]);s.set(l,u),u+=l.byteLength;}n[t].forEach((function(t){var e=Hf(i.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)d[n]=e[n];})),p+=e;})),[2,d]}}))}))}}Qf.registerSaveRouter((function(t){return i().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Id.URL_SCHEME)?function(t){void 0===t&&(t="model");return new Id(t)}(t.slice(Id.URL_SCHEME.length)):null}));var Dd=function(){function t(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(C("function"==typeof e.fetchFunc,(function(){return "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=e.fetchFunc):this.fetch=i().platform.fetch,C(null!=t&&t.length>0,(function(){return "URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&C(2===t.length,(function(){return "URL paths for http must have a length of 2, (actual length is "+t.length+")."})),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{};}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a;return r(this,(function(r){switch(r.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return (e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],o={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n},e.body.append("model.json",new Blob([JSON.stringify(o)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,e)];case 1:if((a=r.sent()).ok)return [2,{modelArtifactsInfo:$f(t),responses:[a]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+a.status+".")}}))}))},t.prototype.load=function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:return [4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=r.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+t.status+". Please verify this URL points to the model JSON of the model to load.");r.label=2;case 2:return r.trys.push([2,4,,5]),[4,t.json()];case 3:return e=r.sent(),[3,5];case 4:throw r.sent(),n="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?n+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":n+=" Please make sure the server is serving valid JSON for this request.",new Error(n);case 5:if(o=e.modelTopology,a=e.weightsManifest,i=e.generatedBy,s=e.convertedBy,u=e.format,c=e.userDefinedMetadata,null==o&&null==a)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==a?[3,7]:[4,this.loadWeights(a)];case 6:f=r.sent(),l=f[0],h=f[1],r.label=7;case 7:return [2,{modelTopology:o,weightSpecs:l,weightData:h,userDefinedMetadata:c,generatedBy:i,convertedBy:s,format:u}]}}))}))},t.prototype.loadWeights=function(t){return n(this,void 0,void 0,(function(){var e,n,o,a,i,s,u,c,l,h,f;return r(this,(function(r){switch(r.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),r=t.substring(0,e),o=n>e?t.substring(n):"";return [r+"/",o]}(e),o=n[0],a=n[1],i=this.weightPathPrefix||o,s=[],u=0,c=t;u<c.length;u++)l=c[u],s.push.apply(s,l.weights);return h=[],t.forEach((function(t){t.paths.forEach((function(t){h.push(i+t+a);}));})),[4,Ad(h,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return f=r.sent(),[2,[s,Xf(f)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function Nd(t){return null!=t.match(Dd.URL_SCHEME_REGEX)}var Fd=function(t,e){if("undefined"==typeof fetch)return null;return (Array.isArray(t)?t.every((function(t){return Nd(t)})):Nd(t))?_d(t,{onProgress:e}):null};function _d(t,e){return new Dd(t,e)}Qf.registerSaveRouter(Fd),Qf.registerLoadRouter(Fd);var Od=function(){function t(t){this.modelArtifacts=t;}return t.prototype.load=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return [2,this.modelArtifacts]}))}))},t}(),Md=function(){function t(t){this.saveHandler=t;}return t.prototype.save=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){return [2,this.saveHandler(t)]}))}))},t}();var Bd=Object.freeze({browserFiles:function(t){return new kd(t)},browserHTTPRequest:function(t,e){return _d(t,e)},concatenateArrayBuffers:Xf,decodeWeights:Hf,encodeWeights:function(t,e){return n(this,void 0,void 0,(function(){var o,a,i,s,u,c=this;return r(this,(function(l){switch(l.label){case 0:for(o=[],a=[],i=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),s=function(s){var u=i[s],l=Array.isArray(t)?t[s].tensor:t[u];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype)throw new Error("Unsupported dtype in weight '"+u+"': "+l.dtype);var h={name:u,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){var f=new Promise((function(t){return n(c,void 0,void 0,(function(){var e,n,o,a,i,s,u;return r(this,(function(r){switch(r.label){case 0:return [4,l.bytes()];case 1:for(e=r.sent(),n=e.reduce((function(t,e){return t+e.length}),0)+Gf*e.length,o=new Uint8Array(n),a=0,i=0;i<e.length;i++)s=e[i],u=new Uint8Array(new Uint32Array([s.length]).buffer),o.set(u,a),a+=Gf,o.set(s,a),a+=s.length;return t(o),[2]}}))}))}));a.push(f);}else a.push(l.data());null!=e&&(h.group=e),o.push(h);},u=0;u<i.length;++u)s(u);return [4,Promise.all(a)];case 1:return [2,{data:qf(l.sent()),specs:o}]}}))}))},fromMemory:function(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Od(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Od({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Od({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))},getLoadHandlers:function(t,e){return Qf.getLoadHandlers(t,e)},getModelArtifactsInfoForJSON:$f,getSaveHandlers:function(t){return Qf.getSaveHandlers(t)},http:_d,isHTTPScheme:Nd,loadWeights:function(t,e,o,a){return void 0===e&&(e=""),n(this,void 0,void 0,(function(){return r(this,(function(n){return [2,Td((function(t){return Ad(t,{requestInit:a})}))(t,e,o)]}))}))},registerLoadRouter:function(t){return Qf.registerLoadRouter(t)},registerSaveRouter:function(t){return Qf.registerSaveRouter(t)},weightsLoaderFactory:Td,withSaveHandler:function(t){return new Md(t)},copyModel:function(t,e){return n(this,void 0,void 0,(function(){return r(this,(function(n){return [2,ed(t,e,!1)]}))}))},listModels:function(){return n(this,void 0,void 0,(function(){var t,e,n,o,a,i,s;return r(this,(function(r){switch(r.label){case 0:t=Zf.getSchemes(),e={},n=0,o=t,r.label=1;case 1:return n<o.length?(a=o[n],[4,Zf.getManager(a).listModels()]):[3,4];case 2:for(s in i=r.sent())e[a+Jf+s]=i[s];r.label=3;case 3:return n++,[3,1];case 4:return [2,e]}}))}))},moveModel:function(t,e){return n(this,void 0,void 0,(function(){return r(this,(function(n){return [2,ed(t,e,!0)]}))}))},removeModel:function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){return e=td(t),[2,Zf.getManager(e.scheme).removeModel(e.path)]}))}))}});var Pd,Ld=An({confusionMatrix_:function(t,e,n){var r=gn(t,"labels","confusionMatrix"),o=gn(e,"predictions","confusionMatrix");C(null==n||n>0&&Number.isInteger(n),(function(){return "If provided, numClasses must be a positive integer, but got "+n})),C(1===r.rank,(function(){return "Expected the rank of labels to be 1, but got "+r.rank})),C(1===o.rank,(function(){return "Expected the rank of predictions to be 1, but got "+o.rank})),C(r.shape[0]===o.shape[0],(function(){return "Mismatch in the number of examples: "+r.shape[0]+" vs. "+o.shape[0]+". Labels and predictions should have the same number of elements."})),C(n>0&&Number.isInteger(n),(function(){return "numClasses is required to be a positive integer, but got "+n}));var a=Rc(r.asType("int32"),n),i=Rc(o.asType("int32"),n);return a.transpose().matMul(i).asType("int32")}}),Wd=Object.freeze({confusionMatrix:Ld});var Ud=An({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n=!1,r=!1,o=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else {if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0;}if(o){if(o&&t.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=l("FromPixels",Lt.backendName))return Lt.runKernel("FromPixels",{pixels:t},{numChannels:e});var s,u,c=o?[t.videoWidth,t.videoHeight]:[t.width,t.height],h=c[0],f=c[1];if(i?s=t.getContext("2d").getImageData(0,0,h,f).data:r||n?s=t.data:(a||o)&&(null==Pd&&(Pd=document.createElement("canvas").getContext("2d")),Pd.canvas.width=h,Pd.canvas.height=f,Pd.drawImage(t,0,0,h,f),s=Pd.getImageData(0,0,h,f).data),4===e)u=new Int32Array(s);else {var d=h*f;u=new Int32Array(d*e);for(var p=0;p<d;p++)for(var v=0;v<e;++v)u[p*e+v]=s[4*p+v];}return Pn(u,[f,h,e],"int32")}}),Vd=Object.freeze({toPixels:function(t,e){return n(this,void 0,void 0,(function(){var n,o,a,i,s,u,c,l,h,f,d,p,v,g,m,y,x,b,w,C,E,R,I;return r(this,(function(r){switch(r.label){case 0:if(n=gn(t,"img","toPixels"),t instanceof wt||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+n.rank+".");if(o=n.shape.slice(0,2),a=o[0],i=o[1],(s=2===n.rank?1:n.shape[2])>4||2===s)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+s);return [4,n.data()];case 1:return u=r.sent(),c=n.min(),l=n.max(),[4,Promise.all([c.data(),l.data()])];case 2:if(h=r.sent(),f=h[0],d=h[1],p=f[0],v=d[0],c.dispose(),l.dispose(),"float32"===n.dtype){if(p<0||v>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+p+" - "+v+"].")}else {if("int32"!==n.dtype)throw new Error("Unsupported type for toPixels: "+n.dtype+". Please use float32 or int32 tensors.");if(p<0||v>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+p+" - "+v+"].")}for(g="float32"===n.dtype?255:1,m=new Uint8ClampedArray(i*a*4),y=0;y<a*i;++y)x=void 0,b=void 0,w=void 0,C=void 0,1===s?(x=u[y]*g,b=u[y]*g,w=u[y]*g,C=255):3===s?(x=u[3*y]*g,b=u[3*y+1]*g,w=u[3*y+2]*g,C=255):4===s&&(x=u[4*y]*g,b=u[4*y+1]*g,w=u[4*y+2]*g,C=u[4*y+3]*g),m[(E=4*y)+0]=Math.round(x),m[E+1]=Math.round(b),m[E+2]=Math.round(w),m[E+3]=Math.round(C);return null!=e&&(e.width=i,e.height=a,R=e.getContext("2d"),I=new ImageData(m,i,a),R.putImageData(I,0,0)),n!==t&&n.dispose(),[2,m]}}))}))},fromPixels:Ud}),zd=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),Gd=function(){function t(){this.classNameMap={};}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig];},t}();function Hd(t){C(null!=t.className,(function(){return "Class being registered does not have the static className property defined."})),C("string"==typeof t.className,(function(){return "className is required to be a string, but got type "+typeof t.className})),C(t.className.length>0,(function(){return "Class being registered has an empty-string as its className, which is disallowed."})),Gd.register(t);}var qd=Object.freeze({Serializable:zd,SerializationMap:Gd,registerClass:Hd}),Kd="1.7.2";var jd=Object.freeze({gpgpu_util:Rs,webgl_util:Ge,forceHalfFloat:function(){i().set("WEBGL_FORCE_F16_TEXTURES",!0);},MathBackendWebGL:Uu,setWebGLContext:Kt,GPGPUContext:Is}),Xd=function(t){function o(){return null!==t&&t.apply(this,arguments)||this}return e(o,t),o.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),o=r.value,a=r.grads;if(null!=n){var i=n.map((function(t){return {name:t.name,tensor:a[t.name]}}));this.applyGradients(i);}else this.applyGradients(a);return tn(a),e?o:(o.dispose(),null)},Object.defineProperty(o.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),o.prototype.incrementIterations=function(){this.iterations_=this.iterations+1;},o.prototype.computeGradients=function(t,e){return ra(t,e)},o.prototype.dispose=function(){null!=this.iterations_&&tn(this.iterations_);},o.prototype.saveIterations=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:On(this.iterations_,"int32")}]}))}))},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},o.prototype.extractIterations=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return e=this,[4,t[0].tensor.data()];case 1:return e.iterations_=n.sent()[0],[2,t.slice(1)]}}))}))},o}(zd);Object.defineProperty(Xd,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var Yd=function(t){function o(e,n,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=e,o.rho=n,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Lt.backend.epsilon()),o}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accum_grad",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedUpdates[r]&&(e.accumulatedUpdates[r]={originalName:n+"/accum_var",variable:Ze((function(){return Xn(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedGrads[r].variable,s=e.accumulatedUpdates[r].variable;Ze((function(){var t=i.mul(e.rho).add(a.square().mul(1-e.rho)),n=s.add(e.epsilon).sqrt().div(i.add(e.epsilon).sqrt()).mul(a),r=s.mul(e.rho).add(n.square().mul(1-e.rho));i.assign(t),s.assign(r);var u=n.mul(-e.learningRate).add(o);o.assign(u);}));}})),this.incrementIterations();},o.prototype.dispose=function(){null!=this.accumulatedUpdates&&(tn(this.accumulatedGrads.map((function(t){return t.variable}))),tn(this.accumulatedUpdates.map((function(t){return t.variable}))));},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return [2,[e.sent()].concat(t.map((function(t){return {name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return [4,this.extractIterations(t)];case 1:return t=n.sent(),e=t.length/2,this.accumulatedGrads=t.slice(0,e).map((function(t){return {originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(e,2*e).map((function(t){return {originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return {learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},o.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},o.className="Adadelta",o}(Xd);Hd(Yd);var $d=function(t){function o(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];if(null==e.accumulatedGrads[r]){e.accumulatedGrads[r]={originalName:n+"/accumulator",variable:Ze((function(){return Hn(o.shape,e.initialAccumulatorValue).variable(!1)}))};}var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedGrads[r].variable;Ze((function(){var t=i.add(a.square());i.assign(t);var n=a.div(t.add(Lt.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);o.assign(n);}));}})),this.incrementIterations();},o.prototype.dispose=function(){null!=this.accumulatedGrads&&tn(this.accumulatedGrads.map((function(t){return t.variable})));},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return [4,this.saveIterations()];case 1:return [2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return {name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return [4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulatedGrads=t.map((function(t){return {originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return {learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},o.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},o.className="Adagrad",o}(Xd);Hd($d);var Qd=function(t){function o(e,n,r,o){void 0===o&&(o=null);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=o,a.accumulatedFirstMoment=[],a.accumulatedSecondMoment=[],Ze((function(){a.accBeta1=On(n).variable(),a.accBeta2=On(r).variable();})),null==o&&(a.epsilon=Lt.backend.epsilon()),a}return e(o,t),o.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ze((function(){var r=Oo(1,e.accBeta1),o=Oo(1,e.accBeta2);n.forEach((function(n,a){var i=Lt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+"/m",variable:Ze((function(){return Xn(i).variable(!1)}))}),null==e.accumulatedSecondMoment[a]&&(e.accumulatedSecondMoment[a]={originalName:n+"/v",variable:Ze((function(){return Xn(i).variable(!1)}))});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedSecondMoment[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2).add(s.square().mul(1-e.beta2)),f=l.div(r),d=h.div(o);u.assign(l),c.assign(h);var p=f.div(d.sqrt().add(e.epsilon)).mul(-e.learningRate).add(i);i.assign(p);}})),e.accBeta1.assign(e.accBeta1.mul(e.beta1)),e.accBeta2.assign(e.accBeta2.mul(e.beta2));})),this.incrementIterations();},o.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&tn(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&tn(this.accumulatedSecondMoment.map((function(t){return t.variable})));},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return [2,[e.sent()].concat(t.map((function(t){return {name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e,n=this;return r(this,(function(r){switch(r.label){case 0:return [4,this.extractIterations(t)];case 1:return t=r.sent(),Ze((function(){n.accBeta1.assign(No(n.beta1,n.iterations_+1)),n.accBeta2.assign(No(n.beta2,n.iterations_+1));})),e=t.length/2,this.accumulatedFirstMoment=t.slice(0,e).map((function(t){return {originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(e,2*e).map((function(t){return {originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return {learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},o.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},o.className="Adam",o}(Xd);Hd(Qd);var Jd=function(t){function o(e,n,r,o,a){void 0===o&&(o=null),void 0===a&&(a=0);var i=t.call(this)||this;return i.learningRate=e,i.beta1=n,i.beta2=r,i.epsilon=o,i.decay=a,i.accumulatedFirstMoment=[],i.accumulatedWeightedInfNorm=[],Ze((function(){i.iteration=On(0).variable(),i.accBeta1=On(n).variable();})),null==o&&(i.epsilon=Lt.backend.epsilon()),i}return e(o,t),o.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Ze((function(){var r=Oo(1,e.accBeta1),o=Bo(-e.learningRate,e.iteration.mul(e.decay).add(1));n.forEach((function(n,a){var i=Lt.registeredVariables[n];null==e.accumulatedFirstMoment[a]&&(e.accumulatedFirstMoment[a]={originalName:n+"/m",variable:Xn(i).variable(!1)}),null==e.accumulatedWeightedInfNorm[a]&&(e.accumulatedWeightedInfNorm[a]={originalName:n+"/v",variable:Xn(i).variable(!1)});var s=Array.isArray(t)?t[a].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[a].variable,c=e.accumulatedWeightedInfNorm[a].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2),f=s.abs(),d=h.maximum(f);u.assign(l),c.assign(d);var p=o.div(r).mul(l.div(d.add(e.epsilon))).add(i);i.assign(p);}})),e.iteration.assign(e.iteration.add(1)),e.accBeta1.assign(e.accBeta1.mul(e.beta1));})),this.incrementIterations();},o.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&tn(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&tn(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})));},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(t){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},o.prototype.getConfig=function(){return {learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},o.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},o.className="Adamax",o}(Xd);Hd(Jd);var Zd=function(t){function o(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Array.isArray(t)?t[r].tensor:t[n];if(null!=o){var a=Lt.registeredVariables[n];Ze((function(){var t=e.c.mul(o).add(a);a.assign(t);}));}})),this.incrementIterations();},o.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=en(On(-t));},o.prototype.dispose=function(){this.c.dispose();},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return [4,this.saveIterations()];case 1:return [2,[t.sent()]]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return [4,this.extractIterations(t)];case 1:if(0!==(t=e.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return [2]}}))}))},o.prototype.getConfig=function(){return {learningRate:this.learningRate}},o.fromConfig=function(t,e){return new t(e.learningRate)},o.className="SGD",o}(Xd);Hd(Zd);var tp=function(t){function o(e,n,r){void 0===r&&(r=!1);var o=t.call(this,e)||this;return o.learningRate=e,o.momentum=n,o.useNesterov=r,o.accumulations=[],o.m=On(o.momentum),o}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];if(null==e.accumulations[r]){e.accumulations[r]={originalName:n+"/momentum",variable:Ze((function(){return Xn(o).variable(!1)}))};}var a=e.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[n];null!=i&&Ze((function(){var t,n=e.m.mul(a).add(i);t=e.useNesterov?e.c.mul(i.add(n.mul(e.m))).add(o):e.c.mul(n).add(o),a.assign(n),o.assign(t);}));})),this.incrementIterations();},o.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&tn(this.accumulations.map((function(t){return t.variable})));},o.prototype.setMomentum=function(t){this.momentum=t;},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return [4,this.saveIterations()];case 1:return [2,[t.sent()].concat(this.accumulations.map((function(t){return {name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return [4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulations=t.map((function(t){return {originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},o.prototype.getConfig=function(){return {learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},o.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},o.className="Momentum",o}(Zd);Hd(tp);var ep=function(t){function o(e,n,r,o,a){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===a&&(a=!1);var i=t.call(this)||this;if(i.learningRate=e,i.decay=n,i.momentum=r,i.epsilon=o,i.accumulatedMeanSquares=[],i.accumulatedMoments=[],i.accumulatedMeanGrads=[],i.centered=a,null==o&&(i.epsilon=Lt.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.");return i}return e(o,t),o.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Lt.registeredVariables[n];null==e.accumulatedMeanSquares[r]&&(e.accumulatedMeanSquares[r]={originalName:n+"/rms",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedMoments[r]&&(e.accumulatedMoments[r]={originalName:n+"/momentum",variable:Ze((function(){return Xn(o).variable(!1)}))}),null==e.accumulatedMeanGrads[r]&&e.centered&&(e.accumulatedMeanGrads[r]={originalName:n+"/mg",variable:Ze((function(){return Xn(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[n];if(null!=a){var i=e.accumulatedMeanSquares[r].variable,s=e.accumulatedMoments[r].variable;Ze((function(){var t=i.mul(e.decay).add(a.square().mul(1-e.decay));if(e.centered){var n=e.accumulatedMeanGrads[r].variable,u=n.mul(e.decay).add(a.mul(1-e.decay)),c=s.mul(e.momentum).add(a.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));i.assign(t),n.assign(u),s.assign(c);var l=o.sub(c);o.assign(l);}else {var h=i.mul(e.decay).add(a.square().mul(1-e.decay));c=s.mul(e.momentum).add(a.mul(e.learningRate).div(h.add(e.epsilon).sqrt()));i.assign(h),s.assign(c);l=o.sub(c);o.assign(l);}}));}})),this.incrementIterations();},o.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&tn(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&tn(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&tn(this.accumulatedMoments.map((function(t){return t.variable})));},o.prototype.getWeights=function(){return n(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return [2,[e.sent()].concat(t.map((function(t){return {name:t.originalName,tensor:t.variable}})))]}}))}))},o.prototype.setWeights=function(t){return n(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return [4,this.extractIterations(t)];case 1:return t=n.sent(),e=this.centered?t.length/3:t.length/2,this.accumulatedMeanSquares=t.slice(0,e).map((function(t){return {originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(e,2*e).map((function(t){return {originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((function(t){return {originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},o.prototype.getConfig=function(){return {learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},o.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},o.className="RMSProp",o}(Xd);Hd(ep);var np=function(){function t(){}return t.sgd=function(t){return new Zd(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new tp(t,e,n)},t.rmsprop=function(t,e,n,r,o){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===o&&(o=!1),new ep(t,e,n,r,o)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new Qd(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new Yd(t,e,n)},t.adamax=function(t,e,n,r,o){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===o&&(o=0),new Jd(t,e,n,r,o)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new $d(t,e)},t}(),rp={sgd:np.sgd,momentum:np.momentum,adadelta:np.adadelta,adagrad:np.adagrad,rmsprop:np.rmsprop,adamax:np.adamax,adam:np.adam},op="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:function(t){return t()};function ap(){return new Promise((function(t){return op((function(){return t()}))}))}wt.prototype.add=function(t){return Or(this,t)},wt.prototype.broadcastTo=function(t){return fc(this,t)},wt.prototype.div=function(t){return Bo(this,t)},wt.prototype.divNoNan=function(t){return bc(this,t)},wt.prototype.squaredDifference=function(t){return Hc(this,t)},wt.prototype.tile=function(t){return wc(this,t)},wt.prototype.oneHot=function(t,e,n){return void 0===e&&(e=1),void 0===n&&(n=0),Rc(this,t,e,n)},wt.prototype.transpose=function(t){return ua(this,t)},wt.prototype.pad=function(t,e){return Ic(this,t,e)},wt.prototype.batchNorm=function(t,e,n,r,o){return nc(this,t,e,n,r,o)},xt=ff;

            /**
             * @license
             * Copyright 2020 Google LLC. All Rights Reserved.
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             * http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             * =============================================================================
             */
            var extendStatics=function(e,t){return (extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);})(e,t)};function __extends(e,t){function n(){this.constructor=e;}extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n);}var _epsilon,__assign=function(){return (__assign=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function __awaiter(e,t,n,r){return new(n||(n=Promise))(function(i,a){function o(e){try{l(r.next(e));}catch(e){a(e);}}function s(e){try{l(r.throw(e));}catch(e){a(e);}}function l(e){e.done?i(e.value):new n(function(t){t(e.value);}).then(o,s);}l((r=r.apply(e,t||[])).next());})}function __generator(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o);}catch(e){a=[6,e],r=0;}finally{n=i=0;}if(5&a[0])throw a[1];return {value:a[0]?a[1]:void 0,done:!0}}([a,s])}}}function epsilon(){return null==_epsilon&&(_epsilon=hn().epsilon()),_epsilon}function imageDataFormat(){return "channelsLast"}var AttributeError=function(e){function t(n){var r=e.call(this,n)||this;return Object.setPrototypeOf(r,t.prototype),r}return __extends(t,e),t}(Error),RuntimeError=function(e){function t(n){var r=e.call(this,n)||this;return Object.setPrototypeOf(r,t.prototype),r}return __extends(t,e),t}(Error),ValueError=function(e){function t(n){var r=e.call(this,n)||this;return Object.setPrototypeOf(r,t.prototype),r}return __extends(t,e),t}(Error),NotImplementedError=function(e){function t(n){var r=e.call(this,n)||this;return Object.setPrototypeOf(r,t.prototype),r}return __extends(t,e),t}(Error),AssertionError=function(e){function t(n){var r=e.call(this,n)||this;return Object.setPrototypeOf(r,t.prototype),r}return __extends(t,e),t}(Error),IndexError=function(e){function t(n){var r=e.call(this,n)||this;return Object.setPrototypeOf(r,t.prototype),r}return __extends(t,e),t}(Error);function pyListRepeat(e,t){if(Array.isArray(e)){for(var n=[],r=0;r<t;r++)n=n.concat(e);return n}return (n=new Array(t)).fill(e),n}function assert(e,t){if(!e)throw new AssertionError(t)}function count(e,t){for(var n=0,r=0,i=e;r<i.length;r++){i[r]===t&&n++;}return n}function singletonOrArray(e){return 1===e.length?e[0]:e}function toList(e){return Array.isArray(e)?e:[e]}function toSnakeCase(e){var t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return "_"!==t[0]?t:"private"+t}function toCamelCase(e){return e.length<=1?e:-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,function(e,t){return t.toUpperCase()})}var _GLOBAL_CUSTOM_OBJECTS={};function serializeKerasObject(e){if(null===e||void 0===e)return null;var t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function convertNDArrayScalarsInConfig(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(function(e){return convertNDArrayScalarsInConfig(e)});else for(var t=0,n=Object.keys(e);t<n.length;t++){var r=n[t],i=e[r];null!=i&&"object"==typeof i&&(Array.isArray(i)||"ndarray"!==i.type||"number"!=typeof i.value?convertNDArrayScalarsInConfig(i):e[r]=i.value);}}function deserializeKerasObject(e,t,n,r,i){var a,o,s;if(void 0===t&&(t={}),void 0===n&&(n={}),void 0===r&&(r="object"),void 0===i&&(i=!1),"string"==typeof e){var l=e,u=void 0;if(l in n)u=n[l];else if(l in _GLOBAL_CUSTOM_OBJECTS)u=_GLOBAL_CUSTOM_OBJECTS[l];else if(null==(u=t[l]))throw new ValueError("Unknown "+r+": "+e+". This may be due to one of the following reasons:\n1. The "+r+" is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom "+r+" is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");return u}var c=e;if(null==c.className||null==c.config)throw new ValueError(r+": Improper config format: "+JSON.stringify(c)+".\n'className' and 'config' must set.");var p=c.className,h=void 0,d=void 0;if(p in n?(h=(a=n[p])[0],d=a[1]):p in _GLOBAL_CUSTOM_OBJECTS?(h=(o=_GLOBAL_CUSTOM_OBJECTS.className)[0],d=o[1]):p in t&&(h=(s=t[p])[0],d=s[1]),null==h)throw new ValueError("Unknown "+r+": "+p+". This may be due to one of the following reasons:\n1. The "+r+" is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom "+r+" is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");if(null!=d){for(var f={},g=0,m=Object.keys(_GLOBAL_CUSTOM_OBJECTS);g<m.length;g++){f[S=m[g]]=_GLOBAL_CUSTOM_OBJECTS[S];}for(var y=0,v=Object.keys(n);y<v.length;y++){f[S=v[y]]=n[S];}c.config.customObjects=f;for(var b=__assign({},_GLOBAL_CUSTOM_OBJECTS),w=0,z=Object.keys(n);w<z.length;w++){var S=z[w];_GLOBAL_CUSTOM_OBJECTS[S]=n[S];}convertNDArrayScalarsInConfig(c.config);var A=d(h,c.config,n,i);return _GLOBAL_CUSTOM_OBJECTS=__assign({},b),A}b=__assign({},_GLOBAL_CUSTOM_OBJECTS);for(var _=0,I=Object.keys(n);_<I.length;_++){S=I[_];_GLOBAL_CUSTOM_OBJECTS[S]=n[S];}A=new h(c.config);return _GLOBAL_CUSTOM_OBJECTS=__assign({},b),A}function numberCompare(e,t){return e<t?-1:e>t?1:0}function reverseNumberCompare(e,t){return -1*numberCompare(e,t)}function unique(e){if(null==e)return e;for(var t=[],n=0,r=e;n<r.length;n++){var i=r[n];-1===t.indexOf(i)&&t.push(i);}return t}function isObjectEmpty(e){if(null==e)throw new ValueError("Invalid value in obj: "+JSON.stringify(e));for(var t in e)if(e.hasOwnProperty(t))return !1;return !0}function checkStringTypeUnionValue(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new ValueError(n+" is not a valid "+t+".  Valid values are "+e+" or null/undefined.")}function checkArrayTypeAndLength(e,t,n,r){return void 0===n&&(n=0),void 0===r&&(r=1/0),assert(n>=0),assert(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every(function(e){return typeof e===t})}function assertPositiveInteger(e,t){Array.isArray(e)?(st.assert(e.length>0,function(){return t+" is unexpectedly an empty array."}),e.forEach(function(e,n){return assertPositiveInteger(e,"element "+(n+1)+" of "+t)})):st.assert(Number.isInteger(e)&&e>0,function(){return "Expected "+t+" to be a positive integer, but got "+formatAsFriendlyString(e)+"."});}function formatAsFriendlyString(e){return null===e?"null":Array.isArray(e)?"["+e.map(function(e){return formatAsFriendlyString(e)}).join(",")+"]":"string"==typeof e?'"'+e+'"':""+e}function debounce(e,t){var n,r=st.now();return function(){for(var i=[],a=0;a<arguments.length;a++)i[a]=arguments[a];var o=st.now();return o-r<t?n:(r=o,n=e.apply(void 0,i))}}function mapActivationToFusedKernel(e){return "relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function calcL2Norms(e,t){return Ze(function(){return vo(th(Do(e,e),t,!0))})}var Constraint=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.getConfig=function(){return {}},t}(qd.Serializable),MaxNorm=function(e){function t(t){var n=e.call(this)||this;return n.defaultMaxValue=2,n.defaultAxis=0,n.maxValue=null!=t.maxValue?t.maxValue:n.defaultMaxValue,n.axis=null!=t.axis?t.axis:n.defaultAxis,n}return __extends(t,e),t.prototype.apply=function(e){var t=this;return Ze(function(){var n=calcL2Norms(e,t.axis),r=Kr(n,0,t.maxValue);return To(e,Bo(r,Or(epsilon(),n)))})},t.prototype.getConfig=function(){return {maxValue:this.maxValue,axis:this.axis}},t.className="MaxNorm",t}(Constraint);qd.registerClass(MaxNorm);var UnitNorm=function(e){function t(t){var n=e.call(this)||this;return n.defaultAxis=0,n.axis=null!=t.axis?t.axis:n.defaultAxis,n}return __extends(t,e),t.prototype.apply=function(e){var t=this;return Ze(function(){return Bo(e,Or(epsilon(),calcL2Norms(e,t.axis)))})},t.prototype.getConfig=function(){return {axis:this.axis}},t.className="UnitNorm",t}(Constraint);qd.registerClass(UnitNorm);var NonNeg=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return ah(e)},t.className="NonNeg",t}(Constraint);qd.registerClass(NonNeg);var MinMaxNorm=function(e){function t(t){var n=e.call(this)||this;return n.defaultMinValue=0,n.defaultMaxValue=1,n.defaultRate=1,n.defaultAxis=0,n.minValue=null!=t.minValue?t.minValue:n.defaultMinValue,n.maxValue=null!=t.maxValue?t.maxValue:n.defaultMaxValue,n.rate=null!=t.rate?t.rate:n.defaultRate,n.axis=null!=t.axis?t.axis:n.defaultAxis,n}return __extends(t,e),t.prototype.apply=function(e){var t=this;return Ze(function(){var n=calcL2Norms(e,t.axis),r=Or(To(t.rate,Kr(n,t.minValue,t.maxValue)),To(1-t.rate,n));return To(e,Bo(r,Or(epsilon(),n)))})},t.prototype.getConfig=function(){return {minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}},t.className="MinMaxNorm",t}(Constraint);qd.registerClass(MinMaxNorm);var CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function serializeConstraint(e){return serializeKerasObject(e)}function deserializeConstraint(e,t){return void 0===t&&(t={}),deserializeKerasObject(e,qd.SerializationMap.getMap().classNameMap,t,"constraint")}function getConstraint(e){return null==e?null:"string"==typeof e?deserializeConstraint({className:e in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP?CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[e]:e,config:{}}):e instanceof Constraint?e:deserializeConstraint(e)}function maxNorm(e){return new MaxNorm(e)}function unitNorm(e){return new UnitNorm(e)}function nonNeg(){return new NonNeg}function minMaxNorm(e){return new MinMaxNorm(e)}var exports_constraints=Object.freeze({maxNorm:maxNorm,unitNorm:unitNorm,nonNeg:nonNeg,minMaxNorm:minMaxNorm}),VALID_DATA_FORMAT_VALUES=["channelsFirst","channelsLast"],VALID_PADDING_MODE_VALUES=["valid","same","causal"],VALID_POOL_MODE_VALUES=["max","avg"],VALID_BIDIRECTIONAL_MERGE_MODES=["sum","mul","concat","ave"],nameMap=new Map;function checkDataFormat(e){checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES,"DataFormat",e);}function checkPaddingMode(e){checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES,"PaddingMode",e);}function checkPoolMode(e){checkStringTypeUnionValue(VALID_POOL_MODE_VALUES,"PoolMode",e);}var _nameScopeStack=[],_nameScopeDivider="/";function nameScope(e,t){_nameScopeStack.push(e);try{var n=t();return _nameScopeStack.pop(),n}catch(e){throw _nameScopeStack.pop(),e}}function currentNameScopePrefix(){return 0===_nameScopeStack.length?"":_nameScopeStack.join(_nameScopeDivider)+_nameScopeDivider}function getScopedTensorName(e){if(!isValidTensorName(e))throw new Error("Not a valid tensor name: '"+e+"'");return currentNameScopePrefix()+e}function getUniqueTensorName(e){if(!isValidTensorName(e))throw new Error("Not a valid tensor name: '"+e+"'");nameMap.has(e)||nameMap.set(e,0);var t=nameMap.get(e);if(nameMap.set(e,nameMap.get(e)+1),t>0){var n=e+"_"+t;return nameMap.set(n,1),n}return e}var tensorNameRegex=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function isValidTensorName(e){return !!e.match(tensorNameRegex)}function isInteger(e){return e===parseInt(e.toString(),10)}function arrayProd(e,t,n){null==t&&(t=0),null==n&&(n=e.length);for(var r=1,i=t;i<n;++i)r*=e[i];return r}function toArray1D(e){return e=Array.isArray(e)?new Float32Array(e):e,Mn(e)}function min$1$1(e){return Jl(toArray1D(e)).dataSync()[0]}function max$1$1(e){return $l(toArray1D(e)).dataSync()[0]}function range$1(e,t){if(t<e)throw new ValueError("end ("+t+") < begin ("+e+") is forbidden.");for(var n=[],r=e;r<t;++r)n.push(r);return n}function cast$1(e,t){return e.asType(t)}function expandDims$1(e,t){void 0===t&&(t=-1);var n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function repeat(e,t){return Ze(function(){if(2!==e.shape.length)throw new ValueError("repeat() expects a rank-2 tensor, but received a rank-"+e.shape.length+" tensor.");return tile$1(expandDims$1(e,1),[1,t,1])})}function flatten(e){var t=[arrayProd(e.shape)];return e.reshape(t)}function batchFlatten(e){if(e.rank<=1)throw new ValueError("batchFlatten requires a minimum rank of 2. Got rank: "+e.rank+".");var t=[e.shape[0],arrayProd(e.shape,1)];return e.reshape(t)}function sliceAlongFirstAxis(e,t,n){return Ze(function(){switch(e.rank){case 1:return Ul(e,t,n);case 2:return Vl(e,[t,0],[n,e.shape[1]]);case 3:return zl(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Gl(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Wl(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Wl(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new ValueError("sliceAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}})}function sliceAlongLastAxis(e,t,n){return Ze(function(){switch(e.rank){case 1:return Ul(e,t,n);case 2:return Vl(e,[0,t],[e.shape[0],n]);case 3:return zl(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Gl(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}})}function sliceAlongAxis(e,t,n,r){return Ze(function(){switch(e.rank){case 1:return Ul(e,t,n);case 2:switch(r){case 1:return sliceAlongFirstAxis(e,t,n);case 2:return sliceAlongLastAxis(e,t,n);default:throw new ValueError("The axis is not within the rank of the tensor "+r)}case 3:switch(r){case 1:return sliceAlongFirstAxis(e,t,n);case 2:return zl(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return sliceAlongLastAxis(e,t,n);default:throw new ValueError("The axis is not within the rank of the tensor "+r)}case 4:switch(r){case 1:return sliceAlongFirstAxis(e,t,n);case 2:return Gl(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Gl(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return sliceAlongLastAxis(e,t,n);default:throw new ValueError("The axis is not within the rank of the tensor "+r)}default:throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: "+e.rank)}})}function concatenate(e,t){var n;return void 0===t&&(t=-1),t<0&&(t=0!==(n=e[0].rank)?n:0),t===e[0].rank&&(t=-1),Yn(e,t)}function concatAlongFirstAxis(e,t){switch(e.rank){case 1:return $n([e,t]);case 2:return Qn([e,t],0);case 3:return Jn([e,t],0);case 4:return Zn([e,t],0);default:throw new ValueError("concatAlongFirstAxis() received an unsupported tensor rank: "+e.rank)}}function tile$1(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new ValueError("The length of input n ("+t.length+") does not match the number of dimensions in input x ("+e.rank+")");return wc(e,t)}function randomNormal$1(e,t,n,r,i){return void 0===t&&(t=0),void 0===n&&(n=1),Vc(e,t,n,r,i)}function dot(e,t,n,r){if(e.rank<2||t.rank<2)throw new NotImplementedError("dot requires both inputs to be rank >= 2 but got x shape = "+e.shape+" and y shape = "+t.shape);if(t.rank>=3&&e.shape.slice(-1)[0]!==(c=t.shape.slice(-2)[0]))throw new NotImplementedError("If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = "+e.shape+" and  y shape = "+t.shape);if(2===e.rank&&2===t.rank){var i=!1,a=!1;return hf.matMul({a:e,b:t,transposeA:i,transposeB:a,bias:r?reshapeBias(e.rank,r,imageDataFormat()):null,activation:n})}var o=e.shape.slice(),s=o.pop();e=e.reshape([-1,s]);var l=t.shape.slice(),u=l.pop(),c=l.pop(),p=l.concat([u]),h=Array.from({length:t.rank},function(e,n){return 0===n?t.rank-2:n<=t.rank-2?n-1:n});t=t.transpose(h).reshape([c,-1]);var d=o.concat(p);i=!1,a=!1;return hf.matMul({a:e,b:t,transposeA:i,transposeB:a,bias:r?reshapeBias(e.rank,r,imageDataFormat()):null,activation:n}).reshape(d)}function gather$1(e,t,n){return Ze(function(){return t=Array.isArray(t)?Mn(t,"int32"):t.toInt(),il(e,t,n)})}function square(e){return Do(e,e)}function reshapeBias(e,t,n){var r=t.shape;if(1!==t.rank&&t.rank!==e)throw new ValueError("Unexpected bias dimensions: "+t.rank+"; expected it to be 1 or "+e);if(5===e){if("channelsFirst"===n)return 1===r.length?t.reshape([1,r[0],1,1,1]):t.reshape([1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?t.reshape([1,1,1,1,r[0]]):t.reshape([1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?t.reshape([1,r[0],1,1]):t.reshape([1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?t.reshape([1,1,1,r[0]]):t.reshape([1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?t.reshape([1,r[0],1]):t.reshape([1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?t.reshape([1,1,r[0]]):t.reshape([1].concat(r))}else if(e<3)return t;throw new ValueError("Unsupported input rank by biasAdd: "+t.rank)}function biasAdd(e,t,n){return Ze(function(){return null==n&&(n=imageDataFormat()),checkDataFormat(n),e.add(reshapeBias(e.rank,t,n))})}function elu$1(e,t){if(void 0===t&&(t=1),1!==t)throw new NotImplementedError("Support for alpha values other than 1 ("+t+") is not implemented yet.");return nh(e)}function softsign(e){return Ze(function(){return Bo(e,Lr(e).add(1))})}function dropout$1(e,t,n,r){return Ze(function(){return Rh(e,t,n,r)})}function hardSigmoid(e){return Ze(function(){var t=Or(.5,To(.2,e));return Kr(t,0,1)})}function inTrainPhase(e,t,n){return void 0===n&&(n=!1),n?e():t()}var VALID_FAN_MODE_VALUES=["fanIn","fanOut","fanAvg"],VALID_DISTRIBUTION_VALUES=["normal","uniform","truncatedNormal"];function checkFanMode(e){checkStringTypeUnionValue(VALID_FAN_MODE_VALUES,"FanMode",e);}function checkDistribution(e){checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES,"Distribution",e);}var Initializer=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.fromConfigUsesCustomObjects=function(){return !1},t.prototype.getConfig=function(){return {}},t}(qd.Serializable),Zeros=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e,t){return Gn(e,t)},t.className="Zeros",t}(Initializer);qd.registerClass(Zeros);var Ones=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e,t){return zn(e,t)},t.className="Ones",t}(Initializer);qd.registerClass(Ones);var Constant=function(e){function t(t){var n=e.call(this)||this;if("object"!=typeof t)throw new ValueError("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new ValueError("config must have value set but got "+t);return n.value=t.value,n}return __extends(t,e),t.prototype.apply=function(e,t){var n=this;return Ze(function(){return To(On(n.value),zn(e,t))})},t.prototype.getConfig=function(){return {value:this.value}},t.className="Constant",t}(Initializer);qd.registerClass(Constant);var RandomUniform=function(e){function t(t){var n=e.call(this)||this;return n.DEFAULT_MINVAL=-.05,n.DEFAULT_MAXVAL=.05,n.minval=t.minval||n.DEFAULT_MINVAL,n.maxval=t.maxval||n.DEFAULT_MAXVAL,n.seed=t.seed,n}return __extends(t,e),t.prototype.apply=function(e,t){return zc(e,this.minval,this.maxval,t)},t.prototype.getConfig=function(){return {minval:this.minval,maxval:this.maxval,seed:this.seed}},t.className="RandomUniform",t}(Initializer);qd.registerClass(RandomUniform);var RandomNormal=function(e){function t(t){var n=e.call(this)||this;return n.DEFAULT_MEAN=0,n.DEFAULT_STDDEV=.05,n.mean=t.mean||n.DEFAULT_MEAN,n.stddev=t.stddev||n.DEFAULT_STDDEV,n.seed=t.seed,n}return __extends(t,e),t.prototype.apply=function(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new NotImplementedError("randomNormal does not support dType "+t+".");return randomNormal$1(e,this.mean,this.stddev,t,this.seed)},t.prototype.getConfig=function(){return {mean:this.mean,stddev:this.stddev,seed:this.seed}},t.className="RandomNormal",t}(Initializer);qd.registerClass(RandomNormal);var TruncatedNormal=function(e){function t(t){var n=e.call(this)||this;return n.DEFAULT_MEAN=0,n.DEFAULT_STDDEV=.05,n.mean=t.mean||n.DEFAULT_MEAN,n.stddev=t.stddev||n.DEFAULT_STDDEV,n.seed=t.seed,n}return __extends(t,e),t.prototype.apply=function(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new NotImplementedError("truncatedNormal does not support dType "+t+".");return qc(e,this.mean,this.stddev,t,this.seed)},t.prototype.getConfig=function(){return {mean:this.mean,stddev:this.stddev,seed:this.seed}},t.className="TruncatedNormal",t}(Initializer);qd.registerClass(TruncatedNormal);var Identity=function(e){function t(t){var n=e.call(this)||this;return n.gain=null!=t.gain?t.gain:1,n}return __extends(t,e),t.prototype.apply=function(e,t){var n=this;return Ze(function(){if(2!==e.length||e[0]!==e[1])throw new ValueError("Identity matrix initializer can only be used for 2D square matrices.");return To(n.gain,Cc(e[0]))})},t.prototype.getConfig=function(){return {gain:this.gain}},t.className="Identity",t}(Initializer);function computeFans(e,t){var n,r;if(void 0===t&&(t="channelsLast"),checkDataFormat(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){var i=arrayProd(e,2);n=e[1]*i,r=e[0]*i;}else if("channelsLast"===t){i=arrayProd(e,0,e.length-2);n=e[e.length-2]*i,r=e[e.length-1]*i;}}else {var a=arrayProd(e);n=Math.sqrt(a),r=Math.sqrt(a);}return [n,r]}qd.registerClass(Identity);var VarianceScaling=function(e){function t(t){var n=e.call(this)||this;if(t.scale<0)throw new ValueError("scale must be a positive float. Got: "+t.scale);return n.scale=null==t.scale?1:t.scale,n.mode=null==t.mode?"fanIn":t.mode,checkFanMode(n.mode),n.distribution=null==t.distribution?"normal":t.distribution,checkDistribution(n.distribution),n.seed=t.seed,n}return __extends(t,e),t.prototype.apply=function(e,t){var n=computeFans(e),r=n[0],i=n[1],a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,i):a/=Math.max(1,(r+i)/2),"normal"===this.distribution){var o=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new NotImplementedError(this.getClassName()+" does not support dType "+t+".");return qc(e,0,o,t,this.seed)}var s=Math.sqrt(3*a);return zc(e,-s,s,t)},t.prototype.getConfig=function(){return {scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}},t.className="VarianceScaling",t}(Initializer);qd.registerClass(VarianceScaling);var GlorotUniform=function(e){function t(t){return e.call(this,{scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})||this}return __extends(t,e),t.prototype.getClassName=function(){return VarianceScaling.className},t.className="GlorotUniform",t}(VarianceScaling);qd.registerClass(GlorotUniform);var GlorotNormal=function(e){function t(t){return e.call(this,{scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})||this}return __extends(t,e),t.prototype.getClassName=function(){return VarianceScaling.className},t.className="GlorotNormal",t}(VarianceScaling);qd.registerClass(GlorotNormal);var HeNormal=function(e){function t(t){return e.call(this,{scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})||this}return __extends(t,e),t.prototype.getClassName=function(){return VarianceScaling.className},t.className="HeNormal",t}(VarianceScaling);qd.registerClass(HeNormal);var HeUniform=function(e){function t(t){return e.call(this,{scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})||this}return __extends(t,e),t.prototype.getClassName=function(){return VarianceScaling.className},t.className="HeUniform",t}(VarianceScaling);qd.registerClass(HeUniform);var LeCunNormal=function(e){function t(t){return e.call(this,{scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})||this}return __extends(t,e),t.prototype.getClassName=function(){return VarianceScaling.className},t.className="LeCunNormal",t}(VarianceScaling);qd.registerClass(LeCunNormal);var LeCunUniform=function(e){function t(t){return e.call(this,{scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})||this}return __extends(t,e),t.prototype.getClassName=function(){return VarianceScaling.className},t.className="LeCunNormal",t}(VarianceScaling);qd.registerClass(LeCunUniform);var Orthogonal=function(e){function t(t){var n=e.call(this)||this;if(n.DEFAULT_GAIN=1,n.gain=null==t.gain?n.DEFAULT_GAIN:t.gain,n.seed=t.seed,null!=n.seed)throw new NotImplementedError("Random seed is not implemented for Orthogonal Initializer yet.");return n}return __extends(t,e),t.prototype.apply=function(e,t){var n=this;return Ze(function(){if(2!==e.length)throw new NotImplementedError("The Orthogonal Initializer does not support non-2D shapes yet.");e[0]*e[1]>2e3&&console.warn("Orthogonal initializer is being called on a matrix with more than 2000 ("+e[0]*e[1]+") elements: Slowness may result.");var t=randomNormal$1(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32"),r=jh.gramSchmidt(t);return e[0]>e[1]&&(r=r.transpose()),To(n.gain,r)})},t.prototype.getConfig=function(){return {gain:this.gain,seed:this.seed}},t.className="Orthogonal",t}(Initializer);qd.registerClass(Orthogonal);var INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function deserializeInitializer(e,t){return void 0===t&&(t={}),deserializeKerasObject(e,qd.SerializationMap.getMap().classNameMap,t,"initializer")}function serializeInitializer(e){return serializeKerasObject(e)}function getInitializer(e){if("string"==typeof e){var t=e in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e]:e;if("GlorotNormal"===t)return new GlorotNormal;if("GlorotUniform"===t)return new GlorotUniform;if("HeNormal"===t)return new HeNormal;if("HeUniform"===t)return new HeUniform;if("LeCunNormal"===t)return new LeCunNormal;if("LeCunUniform"===t)return new LeCunUniform;var n={};return n.className=t,n.config={},deserializeInitializer(n)}return e instanceof Initializer?e:deserializeInitializer(e)}function zeros$1(){return new Zeros}function ones$1(){return new Ones}function constant(e){return new Constant(e)}function randomUniform$1(e){return new RandomUniform(e)}function randomNormal$2(e){return new RandomNormal(e)}function truncatedNormal$1(e){return new TruncatedNormal(e)}function identity(e){return new Identity(e)}function varianceScaling(e){return new VarianceScaling(e)}function glorotUniform(e){return new GlorotUniform(e)}function glorotNormal(e){return new GlorotNormal(e)}function heNormal(e){return new HeNormal(e)}function heUniform(e){return new HeUniform(e)}function leCunNormal(e){return new LeCunNormal(e)}function leCunUniform(e){return new LeCunUniform(e)}function orthogonal(e){return new Orthogonal(e)}var exports_initializers=Object.freeze({zeros:zeros$1,ones:ones$1,constant:constant,randomUniform:randomUniform$1,randomNormal:randomNormal$2,truncatedNormal:truncatedNormal$1,identity:identity,varianceScaling:varianceScaling,glorotUniform:glorotUniform,glorotNormal:glorotNormal,heNormal:heNormal,heUniform:heUniform,leCunNormal:leCunNormal,leCunUniform:leCunUniform,orthogonal:orthogonal}),_nextUniqueTensorId=0;function getNextUniqueTensorId(){return _nextUniqueTensorId++}var _uidPrefixes={};function getUid(e){return void 0===e&&(e=""),e in _uidPrefixes||(_uidPrefixes[e]=0),_uidPrefixes[e]+=1,e+_uidPrefixes[e].toString()}function isArrayOfShapes(e){return Array.isArray(e)&&Array.isArray(e[0])}function normalizeShapeList(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function getExactlyOneTensor(e){var t;if(Array.isArray(e)){if(1!==e.length)throw new ValueError("Expected Tensor length to be 1; got "+e.length);t=e[0];}else t=e;return t}function getExactlyOneShape(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return (e=e)[0];throw new ValueError("Expected exactly 1 Shape; got "+e.length)}return e}function countParamsInWeights(e){for(var t=0,n=0,r=e;n<r.length;n++){var i=r[n];0===i.shape.length?t+=1:t+=i.shape.reduce(function(e,t){return e*t});}return t}var DEFAULT_VARIABLE_NAME_PREFIX="Variable",LayerVariable=function(){function e(e,t,n,r,i){void 0===t&&(t="float32"),void 0===n&&(n=DEFAULT_VARIABLE_NAME_PREFIX),void 0===r&&(r=!0),void 0===i&&(i=null),this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=getNextUniqueTensorId(),n=null==n?DEFAULT_VARIABLE_NAME_PREFIX:n,this.originalName=getScopedTensorName(n),this.name=getUniqueTensorName(this.originalName),this.trainable_=r,this.constraint=i,this.val=Vn(e,this.trainable_,this.name,this.dtype);}return e.prototype.read=function(){return this.assertNotDisposed(),this.val},e.prototype.write=function(e){return this.assertNotDisposed(),checkShapesMatch(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this},e.prototype.dispose=function(){this.assertNotDisposed(),this.val.dispose();},e.prototype.assertNotDisposed=function(){if(this.val.isDisposed)throw new Error("LayersVariable "+this.name+" is already disposed.")},Object.defineProperty(e.prototype,"trainable",{get:function(){return this.trainable_},set:function(e){this.trainable_=e,this.val.trainable=e;},enumerable:!0,configurable:!0}),e}();function checkShapesMatch(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}function batchGetValue(e){return e.map(function(e){return e.read()})}function batchSetValue(e){e.forEach(function(e){e[0].write(e[1]);});}var InputSpec=function(){return function(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{};}}(),SymbolicTensor=function(){return function(e,t,n,r,i,a,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=i,this.outputTensorIndex=o,this.id=getNextUniqueTensorId(),null!=a&&(this.originalName=getScopedTensorName(a),this.name=getUniqueTensorName(this.originalName)),this.rank=t.length;}}(),_nextNodeID=0,Node=function(){function e(e,t){this.callArgs=t,this.id=_nextNodeID++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(var n=0,r=e.inboundLayers;n<r.length;n++){var i=r[n];null!=i&&i.outboundNodes.push(this);}e.outboundLayer.inboundNodes.push(this);}return e.prototype.getConfig=function(){for(var e=[],t=0,n=this.inboundLayers;t<n.length;t++){var r=n[t];null!=r?e.push(r.name):e.push(null);}return {outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}},e}(),_nextLayerID=0,Layer=function(e){function t(t){var n=e.call(this)||this;n._callHook=null,n._addedWeightNames=[],n._stateful=!1,n.id=_nextLayerID++,n.activityRegularizer=null,n.inputSpec=null,n.supportsMasking=!1,n._trainableWeights=[],n._nonTrainableWeights=[],n._losses=[],n._updates=[],n._built=!1,n.inboundNodes=[],n.outboundNodes=[];var r=t.name;if(!r){var i=n.getClassName();r=toSnakeCase(i)+"_"+getUid(i);}if(n.name=r,n.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){var a=void 0;if(null!=t.batchInputShape)a=t.batchInputShape;else if(null!=t.inputShape){var o=null;null!=t.batchSize&&(o=t.batchSize),a=[o].concat(t.inputShape);}n.batchInputShape=a;var s=t.dtype;null==s&&(s=t.inputDType),null==s&&(s="float32"),n.dtype=s;}return null!=t.weights?n.initialWeights=t.weights:n.initialWeights=null,n._refCount=null,n.fastWeightInitDuringBuild=!1,n}return __extends(t,e),t.nodeKey=function(e,t){return e.name+"_ib-"+t.toString()},t.prototype.getNodeAtIndex=function(e,t){if(0===this.inboundNodes.length)throw new RuntimeError("The layer has never been called and thus has no defined "+t+".");if(this.inboundNodes.length<=e)throw new ValueError("Asked to get "+t+" at node "+e+", but the layer has only "+this.inboundNodes.length+" inbound nodes.");return this.inboundNodes[e]},t.prototype.getInputAt=function(e){return singletonOrArray(this.getNodeAtIndex(e,"input").inputTensors)},t.prototype.getOutputAt=function(e){return singletonOrArray(this.getNodeAtIndex(e,"output").outputTensors)},Object.defineProperty(t.prototype,"input",{get:function(){if(this.inboundNodes.length>1)throw new AttributeError("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new AttributeError("Layer "+this.name+" is not connected, no input to return.");return singletonOrArray(this.getNodeAtIndex(0,"input").inputTensors)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"output",{get:function(){if(0===this.inboundNodes.length)throw new AttributeError("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new AttributeError("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return singletonOrArray(this.getNodeAtIndex(0,"output").outputTensors)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"losses",{get:function(){return this._losses},enumerable:!0,configurable:!0}),t.prototype.calculateLosses=function(){return this.losses.map(function(e){return e()})},Object.defineProperty(t.prototype,"updates",{get:function(){return this._updates},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"built",{get:function(){return this._built},set:function(e){this._built=e;},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"trainable",{get:function(){return this.trainable_},set:function(e){this._trainableWeights.forEach(function(t){return t.trainable=e}),this.trainable_=e;},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"trainableWeights",{get:function(){return this.trainable_?this._trainableWeights.filter(function(e){return e.trainable}):[]},set:function(e){this._trainableWeights=e;},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nonTrainableWeights",{get:function(){return this.trainable?this._trainableWeights.filter(function(e){return !e.trainable}).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)},set:function(e){this._nonTrainableWeights=e;},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"weights",{get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"stateful",{get:function(){return this._stateful},enumerable:!0,configurable:!0}),t.prototype.resetStates=function(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")},t.prototype.assertInputCompatibility=function(e){if(e=toList(e),null!=this.inputSpec&&0!==this.inputSpec.length){var t=toList(this.inputSpec);if(e.length!==t.length)throw new ValueError("Layer "+this.name+" expects "+t.length+" inputs, but it received "+e.length+" input tensors. Input received: "+e);for(var n=0;n<e.length;n++){var r=e[n],i=t[n];if(null!=i){var a=r.rank;if(null!=i.ndim&&a!==i.ndim)throw new ValueError("Input "+n+" is incompatible with layer "+this.name+": expected ndim="+i.ndim+", found ndim="+a);if(null!=i.maxNDim&&a>i.maxNDim)throw new ValueError("Input "+n+" is incompatible with layer "+this.name+": expected max_ndim="+i.maxNDim+", found ndim="+a);if(null!=i.minNDim&&a<i.minNDim)throw new ValueError("Input "+n+" is incompatible with layer "+this.name+": expected min_ndim="+i.minNDim+", found ndim="+a+".");if(null!=i.dtype&&r.dtype!==i.dtype)throw new ValueError("Input "+n+" is incompatible with layer "+this.name+" : expected dtype="+i.dtype+", found dtype="+r.dtype+".");if(i.axes){var o=r.shape;for(var s in i.axes){var l=Number(s),u=i.axes[s],c=l>=0?o[l]:o[o.length+l];if(null!=u&&-1===[u,null].indexOf(c))throw new ValueError("Input "+n+" is incompatible with layer "+this.name+": expected axis "+l+" of input shape to have value "+u+" but got shape "+o+".")}}if(null!=i.shape)for(var p=0;p<i.shape.length;++p){var h=i.shape[p],d=r.shape[p];if(null!=h&&null!=d&&h!==d)throw new ValueError("Input "+n+" is incompatible with layer "+this.name+": expected shape="+i.shape+", found shape="+r.shape+".")}}}}},t.prototype.call=function(e,t){return e},t.prototype.invokeCallHook=function(e,t){null!=this._callHook&&this._callHook(e,t);},t.prototype.setCallHook=function(e){this._callHook=e;},t.prototype.clearCallHook=function(){this._callHook=null;},t.prototype.apply=function(e,t){var n=this;t=t||{},this.assertNotDisposed();for(var r=toList(e),i=!0,a=0,o=r;a<o.length;a++){if(!(o[a]instanceof SymbolicTensor)){i=!1;break}}for(var s=!0,l=0,u=r;l<u.length;l++){if(u[l]instanceof SymbolicTensor){s=!1;break}}if(i===s)throw new ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");return nameScope(this.name,function(){if(!n.built){n.assertInputCompatibility(e);for(var i=[],a=0,o=toList(e);a<o.length;a++){var l=o[a];i.push(l.shape);}n.build(singletonOrArray(i)),n.built=!0,n.initialWeights&&n.setWeights(n.initialWeights),null===n._refCount&&s&&(n._refCount=1);}if(n.assertInputCompatibility(e),s){for(var u=[],c=0,p=toList(g=n.call(e,t));c<p.length;c++){var h=p[c];-1!==r.indexOf(h)&&(h=h.clone()),u.push(h);}if(g=singletonOrArray(u),null!=n.activityRegularizer)throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return g}var d=collectInputShape(e),f=n.computeOutputShape(d),g=void 0,m=guessOutputDType(e);if(n.warnOnIncompatibleInputShape(Array.isArray(e)?d[0]:d),g=null!=f&&f.length>0&&Array.isArray(f[0])?f.map(function(r,i){return new SymbolicTensor(m,r,n,toList(e),t,n.name,i)}):new SymbolicTensor(m,f,n,toList(e),t,n.name),n.addInboundNode(e,g,null,null,d,f,t),n._refCount++,null!=n.activityRegularizer)throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return g})},t.prototype.warnOnIncompatibleInputShape=function(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(e)+") does not match that of the batchInputShape ("+JSON.stringify(this.batchInputShape)+") of the layer "+this.name);else {var t=!1;this.batchInputShape.forEach(function(n,r){null!=n&&null!=e[r]&&e[r]!==n&&(t=!0);}),t&&console.warn("The shape of the input tensor ("+JSON.stringify(e)+") does not match the expectation of layer "+this.name+": "+JSON.stringify(this.batchInputShape));}},Object.defineProperty(t.prototype,"outputShape",{get:function(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new AttributeError("The layer "+this.name+" has never been called and thus has no defined output shape.");for(var e=[],t=0,n=this.inboundNodes;t<n.length;t++){var r=n[t],i=JSON.stringify(r.outputShapes);-1===e.indexOf(i)&&e.push(i);}if(1===e.length){var a=this.inboundNodes[0].outputShapes;return Array.isArray(a)&&Array.isArray(a[0])&&1===a.length?a[0]:a}throw new AttributeError("The layer "+this.name+' has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.')},enumerable:!0,configurable:!0}),t.prototype.countParams=function(){if(!this.built)throw new RuntimeError("You tried to call countParams() on "+this.name+", but the layer is not built yet. Build it first by calling build(batchInputShape).");return countParamsInWeights(this.weights)},t.prototype.build=function(e){this.built=!0;},t.prototype.getWeights=function(e){return void 0===e&&(e=!1),batchGetValue(e?this.trainableWeights:this.weights)},t.prototype.setWeights=function(e){var t=this;Ze(function(){var n=t.weights;if(n.length!==e.length)throw new ValueError('You called setWeights(weights) on layer "'+t.name+'" with a weight list of length '+e.length+", but the layer was expecting "+n.length+" weights. Provided weights: "+e+"...");if(0!==n.length){for(var r=[],i=batchGetValue(n),a=0;a<i.length;++a){var o=i[a],s=n[a],l=e[a];if(!st.arraysEqual(o.shape,l.shape))throw new ValueError("Layer weight shape "+o.shape+" not compatible with provided weight shape "+l.shape);r.push([s,l]);}batchSetValue(r);}});},t.prototype.addWeight=function(e,t,n,r,i,a,o){if(-1!==this._addedWeightNames.indexOf(e))throw new ValueError("Duplicate weight name "+e+" for layer "+this.name);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=getInitializer("zeros"));var s=r.apply(t,n),l=new LayerVariable(s,n,e,a,o);return s.dispose(),null!=i&&this.addLoss(function(){return i.apply(l.read())}),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l},t.prototype.setFastWeightInitDuringBuild=function(e){this.fastWeightInitDuringBuild=e;},t.prototype.addLoss=function(e){var t;null==e||Array.isArray(e)&&0===e.length||(e=toList(e),void 0!==this._losses&&null!==this._losses&&(t=this.losses).push.apply(t,e));},t.prototype.computeOutputShape=function(e){return e},t.prototype.computeMask=function(e,t){var n=this;if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError("Layer "+this.name+" does not support masking, but was passed an inputMask.");t.forEach(function(e){if(null!=e)throw new TypeError("Layer "+n.name+" does not support masking, but was passed an inputMask.")});}return null}return t},t.prototype.addInboundNode=function(e,t,n,r,i,a,o){void 0===o&&(o=null);var s=toList(e);t=toList(t),n=toList(n),r=toList(r),i=normalizeShapeList(i),a=normalizeShapeList(a);for(var l=[],u=[],c=[],p=0,h=s;p<h.length;p++){var d=h[p];l.push(d.sourceLayer),u.push(d.nodeIndex),c.push(d.tensorIndex);}new Node({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:s,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:i,outputShapes:a},o);for(var f=0;f<t.length;f++)t[f].sourceLayer=this,t[f].nodeIndex=this.inboundNodes.length-1,t[f].tensorIndex=f;},t.prototype.getConfig=function(){var e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e},t.prototype.disposeWeights=function(){return this.weights.forEach(function(e){return e.dispose()}),this.weights.length},t.prototype.assertNotDisposed=function(){if(0===this._refCount)throw new Error("Layer '"+this.name+"' is already disposed.")},t.prototype.dispose=function(){if(!this.built)throw new Error("Cannot dispose Layer "+this.name+" because it has not been built yet.");if(null===this._refCount)throw new Error("Cannot dispose Layer "+this.name+" because it has not been used yet.");this.assertNotDisposed();var e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}},t}(qd.Serializable);function collectInputShape(e){for(var t=[],n=0,r=e=toList(e);n<r.length;n++){var i=r[n];t.push(i.shape);}return singletonOrArray(t)}function guessOutputDType(e){return "float32"}function getSourceInputs(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return [e];var r=t.inboundNodes[n];if(0===r.inboundLayers.length)return r.inputTensors;for(var i=[],a=0;a<r.inboundLayers.length;a++)for(var o=0,s=getSourceInputs(r.inputTensors[a],r.inboundLayers[a],r.nodeIndices[a]);o<s.length;o++){var l=s[o];-1===i.indexOf(l)&&i.push(l);}return i}var ModelLoggingVerbosity,InputLayer=function(e){function t(t){var n=e.call(this,{dtype:t.dtype,name:null!=t.name?t.name:getUid("input").toString()})||this;if(null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),n.trainable=!1,n.built=!0,n.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");var r=t.batchInputShape;if(null==r){if(null==t.inputShape)throw new ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");r=[t.batchSize].concat(t.inputShape);}else if(null!=t.batchSize)throw new ValueError("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");var i=t.dtype||"float32";n.batchInputShape=r,n.dtype=i,n.inputSpec=[{shape:r}];var a=new SymbolicTensor(n.dtype,n.batchInputShape,n,[],{},n.name);return a.nodeIndex=0,a.tensorIndex=0,new Node({outboundLayer:n,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[a],outputTensors:[a],inputMasks:[null],outputMasks:[null],inputShapes:[r],outputShapes:[r]}),n}return __extends(t,e),t.prototype.apply=function(e,t){throw new ValueError("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)},t.prototype.dispose=function(){return {refCountAfterDispose:this._refCount,numDisposedVariables:0}},t.prototype.getConfig=function(){return {batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}},t.className="InputLayer",t}(Layer);function Input(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");var t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));var n=e.dtype;return null==n&&(n="float32"),new InputLayer({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}function resolveScalarsInLogs(e){return __awaiter(this,void 0,void 0,function(){var t,n,r,i,a,o,s,l;return __generator(this,function(u){switch(u.label){case 0:if(null==e)return [2];for(i in t=[],n=[],r=[],e)"number"!=typeof(a=e[i])&&(o=a,t.push(o.data()),n.push(i),r.push(o));return t.length>0?[4,Promise.all(t)]:[3,2];case 1:for(s=u.sent(),l=0;l<s.length;++l)e[n[l]]=s[l][0];tn(r),u.label=2;case 2:return [2]}})})}function disposeTensorsInLogs(e){if(null!=e)for(var t in e){var n=e[t];"number"!=typeof n&&n.dispose();}}qd.registerClass(InputLayer),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE";}(ModelLoggingVerbosity||(ModelLoggingVerbosity={}));var DEFAULT_YIELD_EVERY_MS=125,BaseCallback=function(){function e(){this.validationData=null;}return e.prototype.setParams=function(e){this.params=e;},e.prototype.onEpochBegin=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return [2]})})},e.prototype.onEpochEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return [2]})})},e.prototype.onBatchBegin=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return [2]})})},e.prototype.onBatchEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return [2]})})},e.prototype.onTrainBegin=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return [2]})})},e.prototype.onTrainEnd=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return [2]})})},e.prototype.setModel=function(e){},e}(),CallbackList=function(){function e(e,t){void 0===t&&(t=10),null==e&&(e=[]),this.callbacks=e,this.queueLength=t;}return e.prototype.append=function(e){this.callbacks.push(e);},e.prototype.setParams=function(e){for(var t=0,n=this.callbacks;t<n.length;t++){n[t].setParams(e);}},e.prototype.setModel=function(e){for(var t=0,n=this.callbacks;t<n.length;t++){n[t].setModel(e);}},e.prototype.onEpochBegin=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:null==t&&(t={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onEpochBegin(e,t)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return [2]}})})},e.prototype.onEpochEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:null==t&&(t={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onEpochEnd(e,t)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return [2]}})})},e.prototype.onBatchBegin=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:null==t&&(t={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onBatchBegin(e,t)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return [2]}})})},e.prototype.onBatchEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r;return __generator(this,function(i){switch(i.label){case 0:null==t&&(t={}),n=0,r=this.callbacks,i.label=1;case 1:return n<r.length?[4,r[n].onBatchEnd(e,t)]:[3,4];case 2:i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return [2]}})})},e.prototype.onTrainBegin=function(e){return __awaiter(this,void 0,void 0,function(){var t,n;return __generator(this,function(r){switch(r.label){case 0:null==e&&(e={}),t=0,n=this.callbacks,r.label=1;case 1:return t<n.length?[4,n[t].onTrainBegin(e)]:[3,4];case 2:r.sent(),r.label=3;case 3:return t++,[3,1];case 4:return [2]}})})},e.prototype.onTrainEnd=function(e){return __awaiter(this,void 0,void 0,function(){var t,n;return __generator(this,function(r){switch(r.label){case 0:null==e&&(e={}),t=0,n=this.callbacks,r.label=1;case 1:return t<n.length?[4,n[t].onTrainEnd(e)]:[3,4];case 2:r.sent(),r.label=3;case 3:return t++,[3,1];case 4:return [2]}})})},e}(),BaseLogger=function(e){function t(){return e.call(this)||this}return __extends(t,e),t.prototype.onEpochBegin=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return this.seen=0,this.totals={},[2]})})},t.prototype.onBatchEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){var e,n,r,i,a=this;return __generator(this,function(o){for(i in null==t&&(t={}),e=null==t.size?0:t.size,this.seen+=e,n=function(n){var i=t[n];if("number"==typeof i)r.totals.hasOwnProperty(n)||(r.totals[n]=0),r.totals[n]=r.totals[n]+i*e;else {var o=void 0;n in r.totals?o=r.totals[n]:r.totals[n]=0;var s=Ze(function(){return Or(a.totals[n],To(i,e))});r.totals[n]=s,null!=o&&o.dispose();}},r=this,t)n(i);return [2]})})},t.prototype.onEpochEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){var e,n,r,i,a,o=this;return __generator(this,function(s){if(null!=t)for(e=function(e){if(null==n.totals[e])return "continue";"number"==typeof n.totals[e]?t[e]=n.totals[e]/n.seen:Ze(function(){var n=To(Bo(1,o.seen),o.totals[e]);t[e]=n,o.totals[e].dispose(),en(t[e]);});},n=this,r=0,i=this.params.metrics;r<i.length;r++)a=i[r],e(a);return [2]})})},t}(BaseCallback),History=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.onTrainBegin=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return this.epoch=[],this.history={},[2]})})},t.prototype.onEpochEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){var n;return __generator(this,function(r){for(n in null==t&&(t={}),this.epoch.push(e),t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n]);return [2]})})},t.prototype.syncData=function(){return __awaiter(this,void 0,void 0,function(){var e,t,n,r,i,a,o,s,l;return __generator(this,function(u){switch(u.label){case 0:for(r in e=[],t=[],n=[],this.history)for(i=this.history[r],a=0;a<i.length;++a)"number"!=typeof i[a]&&(o=i[a],e.push(o.data()),t.push(r),n.push(a));return [4,Promise.all(e)];case 1:for(s=u.sent(),l=0;l<s.length;++l)this.history[t[l]][n[l]].dispose(),this.history[t[l]][n[l]]=s[l][0];return [2]}})})},t}(BaseCallback),CustomCallback=function(e){function t(t,n){var r=e.call(this)||this;if(r.currentEpoch=0,r.yieldEvery=n||"auto","auto"===r.yieldEvery&&(r.yieldEvery=DEFAULT_YIELD_EVERY_MS),"never"===r.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");return st.isNumber(r.yieldEvery)&&(r.maybeWait=debounce(r.maybeWait.bind(r),r.yieldEvery)),r.trainBegin=t.onTrainBegin,r.trainEnd=t.onTrainEnd,r.epochBegin=t.onEpochBegin,r.epochEnd=t.onEpochEnd,r.batchBegin=t.onBatchBegin,r.batchEnd=t.onBatchEnd,r.yield=t.onYield,r}return __extends(t,e),t.prototype.maybeWait=function(e,t,n){return __awaiter(this,void 0,void 0,function(){var r;return __generator(this,function(i){switch(i.label){case 0:return r=[],null==this.yield?[3,2]:[4,resolveScalarsInLogs(n)];case 1:i.sent(),r.push(this.yield(e,t,n)),i.label=2;case 2:return r.push(ap()),[4,Promise.all(r)];case 3:return i.sent(),[2]}})})},t.prototype.onEpochBegin=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){switch(n.label){case 0:return this.currentEpoch=e,null==this.epochBegin?[3,3]:[4,resolveScalarsInLogs(t)];case 1:return n.sent(),[4,this.epochBegin(e,t)];case 2:n.sent(),n.label=3;case 3:return [2]}})})},t.prototype.onEpochEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){var n;return __generator(this,function(r){switch(r.label){case 0:return n=[],null==this.epochEnd?[3,2]:[4,resolveScalarsInLogs(t)];case 1:r.sent(),n.push(this.epochEnd(e,t)),r.label=2;case 2:return "epoch"===this.yieldEvery&&n.push(ap()),[4,Promise.all(n)];case 3:return r.sent(),[2]}})})},t.prototype.onBatchBegin=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){switch(n.label){case 0:return null==this.batchBegin?[3,3]:[4,resolveScalarsInLogs(t)];case 1:return n.sent(),[4,this.batchBegin(e,t)];case 2:n.sent(),n.label=3;case 3:return [2]}})})},t.prototype.onBatchEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){var n;return __generator(this,function(r){switch(r.label){case 0:return n=[],null==this.batchEnd?[3,2]:[4,resolveScalarsInLogs(t)];case 1:r.sent(),n.push(this.batchEnd(e,t)),r.label=2;case 2:return "batch"===this.yieldEvery?n.push(ap()):st.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),[4,Promise.all(n)];case 3:return r.sent(),[2]}})})},t.prototype.onTrainBegin=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){switch(t.label){case 0:return null==this.trainBegin?[3,3]:[4,resolveScalarsInLogs(e)];case 1:return t.sent(),[4,this.trainBegin(e)];case 2:t.sent(),t.label=3;case 3:return [2]}})})},t.prototype.onTrainEnd=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(t){switch(t.label){case 0:return null==this.trainEnd?[3,3]:[4,resolveScalarsInLogs(e)];case 1:return t.sent(),[4,this.trainEnd(e)];case 2:t.sent(),t.label=3;case 3:return [2]}})})},t}(BaseCallback);function standardizeCallbacks(e,t){return null==e&&(e={}),e instanceof BaseCallback?[e]:Array.isArray(e)&&e[0]instanceof BaseCallback?e:toList(e).map(function(e){return new CustomCallback(e,t)})}var CallbackConstructorRegistry=function(){function e(){}return e.registerCallbackConstructor=function(t,n){st.assert(t>=0&&Number.isInteger(t),function(){return "Verbosity level is expected to be an integer >= 0, but got "+t}),e.checkForDuplicate(n),null==e.constructors[t]&&(e.constructors[t]=[]),e.constructors[t].push(n);},e.checkForDuplicate=function(t){for(var n in e.constructors){e.constructors[+n].forEach(function(e){if(e===t)throw new ValueError("Duplicate callback constructor.")});}},e.clear=function(){e.constructors={};},e.createCallbacks=function(t){var n=[];for(var r in e.constructors){var i=+r;t>=i&&n.push.apply(n,e.constructors[i]);}return n.map(function(e){return new e})},e.constructors={},e}();function configureCallbacks(e,t,n,r,i,a,o,s,l){var u=new History,c=[new BaseLogger].concat(CallbackConstructorRegistry.createCallbacks(t));null!=e&&c.push.apply(c,e),c.push(u);var p=new CallbackList(c);return p.setParams({epochs:n,initialEpoch:r,samples:i,steps:a,batchSize:o,verbose:t,doValidation:s,metrics:l}),{callbackList:p,history:u}}function deserialize(e,t,n){return void 0===t&&(t={}),void 0===n&&(n=!1),deserializeKerasObject(e,qd.SerializationMap.getMap().classNameMap,t,"layer",n)}function l2Normalize(e,t){return Ze(function(){"float32"!==e.dtype&&(e=e.asType("float32"));var n=th(square(e),t,!0),r=Hn(n.shape,epsilon()),i=vo(Eo(n,r));return Bo(e,i)})}function meanSquaredError$1(e,t){return Ze(function(){return Ql(square(Oo(t,e)),-1)})}function meanAbsoluteError(e,t){return Ze(function(){return Ql(Lr(Oo(t,e)),-1)})}function meanAbsolutePercentageError$1(e,t){return Ze(function(){var n=Oo(e,t),r=Kr(Lr(e),epsilon(),Number.MAX_VALUE),i=Lr(Bo(n,r));return To(100,Ql(i,-1))})}function meanSquaredLogarithmicError(e,t){return Ze(function(){var n=Kr(t,epsilon(),Number.MAX_VALUE),r=Zr(Or(1,n)),i=Kr(e,epsilon(),Number.MAX_VALUE),a=Zr(Or(1,i));return Ql(square(Oo(r,a)),-1)})}function squaredHinge(e,t){return Ze(function(){var n=Eo(0,Oo(1,To(e,t)));return Ql(square(n),-1)})}function hinge(e,t){return Ze(function(){var n=Eo(0,Oo(1,To(e,t)));return Ql(n,-1)})}function categoricalHinge(e,t){return Ze(function(){var n=th(To(e,t),-1),r=$l(To(Oo(1,e),t),-1);return Eo(0,Or(1,Oo(r,n)))})}function logcosh(e,t){return Ze(function(){var n=Math.log(2),r=Oo(t,e),i=Oo(Or(r,po(To(-2,r))),n);return Ql(i,-1)})}function categoricalCrossentropy(e,t,n){return void 0===n&&(n=!1),Ze(function(){if(n)t=ia(t);else {var r=th(t,t.shape.length-1,!0);t=Bo(t,r);}return t=Kr(t,epsilon(),1-epsilon()),no(th(To(e.toFloat(),Zr(t)),t.shape.length-1))})}function sparseCategoricalCrossentropy(e,t){return Ze(function(){var n=Jr(flatten(e)).toInt(),r=(t=Kr(t,epsilon(),1-epsilon())).shape;return categoricalCrossentropy(Rc(n,r[r.length-1]).reshape(r),t,!1)})}function sigmoidCrossEntropyWithLogits(e,t){if(!st.arraysEqual(e.shape,t.shape))throw new ValueError("logits and labels must have the same shape, but got shapes "+JSON.stringify(e.shape)+" and "+JSON.stringify(t.shape));return Ze(function(){var n=t.relu(),r=t.abs().neg();return n.sub(t.mul(e)).add(r.exp().log1p())})}function binaryCrossentropy(e,t){return Ze(function(){var n;return n=Kr(t,epsilon(),1-epsilon()),n=Zr(Bo(n,Oo(1,n))),Ql(sigmoidCrossEntropyWithLogits(e,n),-1)})}function kullbackLeiblerDivergence(e,t){return Ze(function(){var n=Kr(e,epsilon(),1),r=Kr(t,epsilon(),1);return th(To(e,Zr(Bo(n,r))),-1)})}function poisson(e,t){return Ze(function(){var n=Zr(Or(epsilon(),t));return Ql(Oo(t,To(e,n)),-1)})}function cosineProximity(e,t){return Ze(function(){var n=l2Normalize(e,-1),r=l2Normalize(t,-1),i=To(n,r);return no(th(i,-1))})}var lossesMap={meanSquaredError:meanSquaredError$1,meanAbsoluteError:meanAbsoluteError,meanAbsolutePercentageError:meanAbsolutePercentageError$1,meanSquaredLogarithmicError:meanSquaredLogarithmicError,squaredHinge:squaredHinge,hinge:hinge,categoricalHinge:categoricalHinge,logcosh:logcosh,categoricalCrossentropy:categoricalCrossentropy,sparseCategoricalCrossentropy:sparseCategoricalCrossentropy,binaryCrossentropy:binaryCrossentropy,kullbackLeiblerDivergence:kullbackLeiblerDivergence,poisson:poisson,cosineProximity:cosineProximity};function get$1(e){if("string"==typeof e){if(e in lossesMap)return lossesMap[e];var t="Unknown loss "+e;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t="Unknown loss "+e+'. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy'),new ValueError(t)}return e}function binaryAccuracy(e,t){return Ze(function(){var n=To(.5,jn(t)),r=cast$1(Xc(t,n),e.dtype);return Ql(Kc(e,r),-1)})}function categoricalAccuracy(e,t){return Ze(function(){return cast$1(Kc(jl(e,-1),jl(t,-1)),"float32")})}function truePositives(e,t){return Ze(function(){return pc(e.equal(1),t.equal(1)).sum().cast("float32")})}function falseNegatives(e,t){return Ze(function(){return pc(e.equal(1),t.equal(0)).sum().cast("float32")})}function falsePositives(e,t){return Ze(function(){return pc(e.equal(0),t.equal(1)).sum().cast("float32")})}function precision(e,t){return Ze(function(){var n=truePositives(e,t),r=falsePositives(e,t),i=n.add(r);return yc(Xc(i,0),n.div(i),0).cast("float32")})}function recall(e,t){return Ze(function(){var n=truePositives(e,t),r=falseNegatives(e,t),i=n.add(r);return yc(Xc(i,0),n.div(i),0).cast("float32")})}function binaryCrossentropy$1(e,t){return binaryCrossentropy(e,t)}function sparseCategoricalAccuracy(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),Kc(e,t).asType("float32")}var mse$1=meanSquaredError$1,MSE$1=meanSquaredError$1,mae$1=meanAbsoluteError,MAE$1=meanAbsoluteError,mape$1=meanAbsolutePercentageError$1,MAPE$1=meanAbsolutePercentageError$1,categoricalCrossentropy$1=categoricalCrossentropy,cosine$1=cosineProximity,sparseCategoricalCrossentropy$1=sparseCategoricalCrossentropy,metricsMap={binaryAccuracy:binaryAccuracy,categoricalAccuracy:categoricalAccuracy,precision:precision,categoricalCrossentropy:categoricalCrossentropy$1,sparseCategoricalCrossentropy:sparseCategoricalCrossentropy$1,mse:mse$1,MSE:MSE$1,mae:mae$1,MAE:MAE$1,mape:mape$1,MAPE:MAPE$1,cosine:cosine$1};function get$1$1(e){if("string"==typeof e&&e in metricsMap)return metricsMap[e];if("string"!=typeof e&&null!=e)return e;throw new ValueError("Unknown metric "+e)}function getLossOrMetricName(e){if(assert(null!==e,"Unknown LossOrMetricFn "+e),"string"==typeof e)return e;for(var t=void 0,n=0,r=Object.keys(lossesMap);n<r.length;n++){var i=r[n];if(lossesMap[i]===e){t=i;break}}if(void 0!==t)return t;for(var a=0,o=Object.keys(metricsMap);a<o.length;a++){i=o[a];if(metricsMap[i]===e){t=i;break}}return void 0!==t?t:e.name}function getOptimizer(e){var t={Adagrad:function(){return rp.adagrad(.01)},Adadelta:function(){return rp.adadelta(1,.95,epsilon())},Adam:function(){return rp.adam(.001,.9,.999,epsilon())},Adamax:function(){return rp.adamax(.002,.9,.999,epsilon(),0)},RMSProp:function(){return rp.rmsprop(.001,.9,0,epsilon())},SGD:function(){return rp.sgd(.01)}};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new ValueError("Unknown Optimizer "+e)}var MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH=1048576;function checkUserDefinedMetadata(e,t,n){if(void 0===n&&(n=!1),null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!plainObjectCheck(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){var r=JSON.stringify(e);r.length>MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH&&console.warn('User-defined metadata of model "'+t+'" is too large in size (length='+r.length+" when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= "+MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH+".");}}function plainObjectCheck(e){if(null===e)return !0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){for(var t=0,n=Object.keys(e);t<n.length;t++){var r=n[t];if("string"!=typeof r)return !1;if(!plainObjectCheck(e[r]))return !1}return !0}if(Array.isArray(e)){for(var i=0,a=e;i<a.length;i++){if(!plainObjectCheck(a[i]))return !1}return !0}return !1}var o=typeof e;return "string"===o||"number"===o||"boolean"===o}function printSummary(e,t,n,r){void 0===r&&(r=console.log);var i,a=isModelSequentialLike(e),o=["Layer (type)","Output shape","Param #"];if(a?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(function(e){return Math.floor(t*e)})),!a)for(var s in o.push("Receives inputs"),i=[],e.nodesByDepth)i.push.apply(i,e.nodesByDepth[s]);r("_".repeat(t)),printRow(o,n,r),r("=".repeat(t));for(var l=e.layers,u=0;u<l.length;++u)a?printLayerSummary(l[u],n,r):printLayerSummaryWithConnections(l[u],n,i,r),r((u===l.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();var c=countTrainableParams(e),p=countParamsInWeights(e.nonTrainableWeights);r("Total params: "+(c+p)),r("Trainable params: "+c),r("Non-trainable params: "+p),r("_".repeat(t));}function countTrainableParams(e){return null!=e.collectedTrainableWeights?countParamsInWeights(e.collectedTrainableWeights):countParamsInWeights(e.trainableWeights)}function isModelSequentialLike(e){var t=!0,n=[],r=[];for(var i in e.nodesByDepth)n.push(e.nodesByDepth[i]);for(var a=0,o=n;a<o.length;a++){var s=o[a];if(s.length>1||1===s.length&&s[0].inboundLayers.length>1){t=!1;break}r.push.apply(r,s);}if(t)for(var l=0,u=e.layers;l<u.length;l++){for(var c=!1,p=0,h=u[l].inboundNodes;p<h.length;p++){var d=h[p];if(-1!==r.indexOf(d)){if(c){t=!1;break}c=!0;}}if(!t)break}return t}function printRow(e,t,n){void 0===n&&(n=console.log);for(var r="",i=0;i<e.length;++i)i>0&&(r=r.slice(0,r.length-1)+" "),r=(r+=e[i]).slice(0,t[i]),r+=" ".repeat(t[i]-r.length);n(r);}function printLayerSummary(e,t,n){var r;try{r=JSON.stringify(e.outputShape);}catch(e){r="multiple";}printRow([e.name+" ("+e.getClassName()+")",r,e.countParams().toString()],t,n);}function printLayerSummaryWithConnections(e,t,n,r){var i;try{i=JSON.stringify(e.outputShape);}catch(e){i="multiple";}for(var a=[],o=0,s=e.inboundNodes;o<s.length;o++){var l=s[o];if(!(null!=n&&n.length>0&&-1===n.indexOf(l)))for(var u=0;u<l.inboundLayers.length;++u){var c=l.inboundLayers[u].name,p=l.nodeIndices[u],h=l.tensorIndices[u];a.push(c+"["+p+"]["+h+"]");}}var d=e.name,f=e.getClassName(),g=0===a.length?"":a[0];printRow([d+" ("+f+")",i,e.countParams().toString(),g],t,r);for(u=1;u<a.length;++u)printRow(["","","",a[u]],t,r);}function isArrayItemInputOrOutputName(e,t,n){return ("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function convertPythonicToTs(e,t){if(null===e)return null;if("string"==typeof e)return toCamelCase(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){for(var n=[],r=e.length,i=0;i<r;++i){var a=e[i];isArrayItemInputOrOutputName(t,i,a)?n.push(a):n.push(convertPythonicToTs(a,t));}return n}for(var o={},s=0,l=Object.keys(e);s<l.length;s++){var u=l[s],c=e[u];if("name"===u&&"string"==typeof c)o[u]=c;else {var p=toCamelCase(u);o[p]=convertPythonicToTs(c,p);}}return o}function convertTsToPythonic(e,t){if(null===e||void 0===e)return null;if("string"==typeof e)return toSnakeCase(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){for(var n=[],r=e.length,i=0;i<r;++i){var a=e[i];isArrayItemInputOrOutputName(t,i,a)?n.push(a):n.push(convertTsToPythonic(a,t));}return n}for(var o={},s=0,l=Object.keys(e);s<l.length;s++){var u=l[s],c=e[u],p=toSnakeCase(u);o[p]="name"!==u&&"className"!==u||"string"!=typeof c?convertTsToPythonic(c,u):c;}return o}var version$1="1.7.2";function assertFeedCompatibility(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return or(t,e.dtype)}catch(n){throw new ValueError("The dtype of the feed ("+t.dtype+") can not be cast to the dtype of the key '"+e.name+"' ("+e.dtype+").")}}var FeedDict=function(){function e(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof e)for(var n in t.id2Value)this.id2Value[n]=t.id2Value[n],n in t.id2Mask&&(this.id2Mask[n]=t.id2Mask[n]);else {if(null==t)return;for(var r=0,i=t;r<i.length;r++){var a=i[r];this.add(a.key,a.value);}}}return e.prototype.add=function(e,t,n){if(null!=this.id2Value[e.id])throw new ValueError("Duplicate key: name="+e.name+", id="+e.id);return this.id2Value[e.id]=assertFeedCompatibility(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this},e.prototype.addFeed=function(e){this.add(e.key,e.value);},e.prototype.hasKey=function(e){return null!=this.id2Value[e.id]},e.prototype.names=function(){return Object.keys(this.name2Id)},e.prototype.getValue=function(e){if(e instanceof SymbolicTensor){if(null==this.id2Value[e.id])throw new ValueError("Nonexistent key: "+e.name);return this.id2Value[e.id]}var t=this.name2Id[e];if(null==t)throw new ValueError("Feed dict has no SymbolicTensor name: "+e);return this.id2Value[t]},e.prototype.getMask=function(e){if(e instanceof SymbolicTensor){if(null==this.id2Value[e.id])throw new ValueError("Nonexistent key: "+e.name);return this.id2Mask[e.id]}var t=this.name2Id[e];if(null==t)throw new ValueError("Feed dict has no SymbolicTensor name: "+e);return this.id2Mask[t]},e.prototype.disposeMasks=function(){null!=this.id2Mask&&tn(this.id2Mask);},e}(),cachedSorted={},cachedRecipientCounts={};function execute(e,t,n,r){for(var i=null!=n&&n.training,a=Array.isArray(e),o=a?e:[e],s=o.map(function(e){return e.name}),l=[],u=t.names(),c=0,p=s;c<p.length;c++){var h=p[c];-1!==u.indexOf(h)?l.push(t.getValue(h)):l.push(null);}null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);var d,f,g=s.join(",")+"|"+t.names().join(",");if(null==cachedSorted[g]){var m=getTopologicalSortAndRecipientCounts(o,t);d=m.sorted,f=m.recipientCounts,cachedSorted[g]=d,cachedRecipientCounts[g]=f;}d=cachedSorted[g],f={},i||Object.assign(f,cachedRecipientCounts[g]);for(var y=new FeedDict(t),v=0;v<d.length;++v){if(null!=r){var b=Qe().numTensors;b>r.maxNumTensors&&(r.maxNumTensors=b),b<r.minNumTensors&&(r.minNumTensors=b);}var w=d[v],z=w.sourceLayer;if(!(z instanceof InputLayer)){for(var S=[],A=[],_=[],I=!1,C=0,E=w.inputs;C<E.length;C++){var N=E[C],k=y.getValue(N),x=y.getMask(N);S.push(k),A.push(x),null!=x&&(I=!0),i||(f[N.name]--,0!==f[N.name]||t.hasKey(N)||-1!==s.indexOf(N.name)||k.isDisposed||!0===N.sourceLayer.stateful||_.push(k));}I&&((n=n||{}).mask=A[0]);var L=toList(z.apply(S,n)),T=null;z.supportsMasking&&(T=z.computeMask(S,A));for(var D=getNodeOutputs(w),O=Array.isArray(D)?D:[D],R=0;R<O.length;++R){y.hasKey(O[R])||y.add(O[R],L[R],Array.isArray(T)?T[0]:T);var M=s.indexOf(O[R].name);-1!==M&&(l[M]=L[R]);}i||tn(_);}}return y.disposeMasks(),a?l:l[0]}function getTopologicalSortAndRecipientCounts(e,t){st.assert(null!=e&&e.length>0,function(){return "Expected at least one fetch, got none"});var n=[],r={};if(1===e.length){var i=getTopologicalSortAndRecipientCountsForOneFetch(e[0],t);n=i.sorted,r=i.recipientMap;}else for(var a=new Set,o=0,s=e;o<s.length;o++){for(var l=getTopologicalSortAndRecipientCountsForOneFetch(s[o],t),u=l.sorted,c=l.recipientMap,p=0,h=u;p<h.length;p++){var d=h[p];a.has(d.name)||(n.push(d),a.add(d.name));}var f=function(e){null==r[e]&&(r[e]=new Set),c[e].forEach(function(t){return r[e].add(t)});};for(var g in c)f(g);}return {sorted:n,recipientCounts:recipientMap2Counts(r)}}function recipientMap2Counts(e){var t={};for(var n in e)t[n]=e[n].size;return t}function getTopologicalSortAndRecipientCountsForOneFetch(e,t){for(var n=new Set,r=[],i={},a=0,o=t.names();a<o.length;a++){var s=o[a];n.add(s);}var l=[],u=[];for(l.push(e);l.length>0;){var c=l[l.length-1];if(n.has(c.name))l.pop();else {var p=u[u.length-1]===l.length-1;if(0===c.inputs.length||p)l.pop(),r.push(c),n.add(c.name),p&&u.pop();else {u.push(l.length-1);for(var h=0,d=c.inputs;h<d.length;h++){var f=d[h];null==i[f.name]&&(i[f.name]=new Set),i[f.name].add(c.name),n.has(f.name)||l.push(f);}}}}return {sorted:r,recipientMap:i}}function getNodeOutputs(e){var t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else {for(var n=null,r=0;r<e.sourceLayer.inboundNodes.length;++r)for(var i=0,a=e.sourceLayer.inboundNodes[r].outputTensors;i<a.length;i++){if(a[i].id===e.id){n=r;break}}t=e.sourceLayer.getOutputAt(n);}return t}var Container=function(e){function t(n){var r=e.call(this,{})||this;if(r.containerNodes=new Set,r.name=n.name,null==r.name){var i=r.getClassName().toLowerCase();r.name=getUid(i);}if(r.supportsMasking=!1,r.trainable_=!0,Array.isArray(n.inputs)?r.inputs=n.inputs.slice():r.inputs=[n.inputs],Array.isArray(n.outputs)?r.outputs=n.outputs.slice():r.outputs=[n.outputs],unique(r.inputs).length!==r.inputs.length)throw new ValueError("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+r.inputs.map(function(e){return e.name}));unique(r.outputs).length!==r.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+r.outputs.map(function(e){return e.name})),r.inputLayers=[],r.inputLayersNodeIndices=[],r.inputLayersTensorIndices=[],r.outputLayers=[],r.outputLayersNodeIndices=[],r.outputLayersTensorIndices=[],r.layers=[],r.internalContainerRefs=[];for(var a=0,o=r.outputs;a<o.length;a++){var s=(C=o[a]).sourceLayer,l=C.nodeIndex,u=C.tensorIndex;r.outputLayers.push(s),r.outputLayersNodeIndices.push(l),r.outputLayersTensorIndices.push(u);}for(var c=0,p=r.inputs;c<p.length;c++){s=(C=p[c]).sourceLayer,l=C.nodeIndex,u=C.tensorIndex;assert(0===l,"input layer has >1 nodes"),assert(0===u,"input layer has >1 tensors"),r.inputLayers.push(s),r.inputLayersNodeIndices.push(l),r.inputLayersTensorIndices.push(u);}r.inputNames=[],r.outputNames=[],r.feedInputShapes=[],r.feedInputNames=[],r.feedOutputNames=[];for(var h=0;h<r.inputLayers.length;h++){if(!((s=r.inputLayers[h])instanceof InputLayer))throw new TypeError("Input layers to a LayersModel must be InputLayer objects. Received inputs: "+n.inputs+". Input "+h+" (0-based) originates from layer type "+s.getClassName()+".");r.inputNames.push(s.name),r.feedInputShapes.push(s.batchInputShape),r.feedInputNames.push(s.name);}for(var d=0,f=r.outputLayers;d<f.length;d++){s=f[d];r.outputNames.push(s.name);}r.internalInputShapes=r.inputs.map(function(e){return e.shape}),r.internalOutputShapes=r.outputs.map(function(e){return e.shape});for(var g={},m={},y={},v={},b={},w=[],z=function(e,n,i,a,o,s){null!=a&&null!=o&&null!=s||(a=e.sourceLayer,o=e.nodeIndex,s=e.tensorIndex);var l=a.inboundNodes[o];if(-1!==i.indexOf(l))throw new RuntimeError("The tensor "+e.name+' at layer "'+a.name+'" is part of a cycle.');if(-1===n.indexOf(l)){r.containerNodes.add(t.nodeKey(a,o)),a.id in b||(b[a.id]=Object.keys(b).length),-1===i.indexOf(l)&&i.push(l);for(var u=l.inboundLayers.length,c=0;c<u;c++){var p=l.inputTensors[c],h=l.inboundLayers[c],d=l.nodeIndices[c],f=l.tensorIndices[c];z(p,n,i,h,d,f);}for(n.push(l);i.indexOf(l)>=0;)i.splice(i.indexOf(l),1);w.push(l);}},S=[],A=[],_=0,I=r.outputs;_<I.length;_++){var C=I[_];z(C,S,A);}for(var E=0,N=w.slice().reverse();E<N.length;E++){m[(K=N[E]).id]=K,K.id in g||(g[K.id]=0);var k=g[K.id],x=null==y[K.outboundLayer.id]?0:y[K.outboundLayer.id];k=Math.max(k,x),y[K.outboundLayer.id]=k,v[K.outboundLayer.id]=K.outboundLayer,g[K.id]=k;for(h=0;h<K.inboundLayers.length;h++){var L=K.inboundLayers[h],T=(l=K.nodeIndices[h],L.inboundNodes[l]),D=null==g[T.id]?0:g[T.id];g[T.id]=Math.max(k+1,D),m[T.id]=T;}}var O={};for(var R in g){(k=g[R])in O||(O[k]=[]),O[k].push(m[R]);}var M={};for(var P in y){(k=y[P])in M||(M[k]=[]),M[k].push(v[P]);}var F=Object.keys(M).map(function(e){return parseInt(e,10)}).sort(reverseNumberCompare);r.layers=[];for(var V=0,B=F;V<B.length;V++){var U=M[k=B[V]];U.sort(function(e,t){var n=b[e.id],r=b[t.id];return n<r?-1:n>r?1:0});for(var j=0,W=U;j<W.length;j++){(s=W[j])instanceof t&&r.internalContainerRefs.push(s),r.layers.push(s);}}r.layersByDepth=M,F=Object.keys(O).map(function(e){return parseInt(e,10)}).sort(reverseNumberCompare);for(var $=r.inputs.slice(),q=[],G=0,H=F;G<H.length;G++)for(var J=0,Z=O[k=H[G]];J<Z.length;J++){var K;if(null!=(s=(K=Z[J]).outboundLayer)){for(var Y=0,X=K.inputTensors;Y<X.length;Y++){C=X[Y];if(-1===$.indexOf(C))throw new RuntimeError("Graph disconnected: cannot obtain value for tensor "+C+' at layer "'+s.name+'". The following previous layers were accessed without issue: '+q)}for(var Q=0,ee=K.outputTensors;Q<ee.length;Q++){C=ee[Q];$.push(C);}q.push(s.name);}}r.nodesByDepth=O;for(var te=r.layers.map(function(e){return e.name}),ne=function(e){var t=te.filter(function(t){return t===e}).length;if(1!==t)throw new RuntimeError('The name "'+e+'" is used '+t+" times in the model. All layer names should be unique. Layer names: "+JSON.stringify(te))},re=0,ie=te;re<ie.length;re++){ne(ie[re]);}return r.outboundNodes=[],r.inboundNodes=[],new Node({outboundLayer:r,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:r.inputs,outputTensors:r.outputs,inputMasks:r.inputs.map(function(e){return null}),outputMasks:r.outputs.map(function(e){return null}),inputShapes:r.inputs.map(function(e){return e.shape}),outputShapes:r.outputs.map(function(e){return e.shape})}),r.built=!0,r._refCount=1,r}return __extends(t,e),t.prototype.assertNotDisposed=function(){if(0===this._refCount)throw new Error("Container '"+this.name+"' is already disposed.")},t.prototype.dispose=function(){this.assertNotDisposed();var e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(var t=0,n=this.layers;t<n.length;t++){var r=n[t];e.numDisposedVariables+=r.dispose().numDisposedVariables;}for(var i=0,a=this.internalContainerRefs;i<a.length;i++){var o=a[i];e.numDisposedVariables+=o.dispose().numDisposedVariables;}}return e.refCountAfterDispose=this._refCount,e},Object.defineProperty(t.prototype,"trainable",{get:function(){return this.trainable_},set:function(e){this.layers.forEach(function(t){t._trainableWeights.forEach(function(t){return t.trainable=e});}),this.trainable_=e;},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"trainableWeights",{get:function(){if(this._trainableWeights.length>0)throw new ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return [];for(var e=[],t=0,n=this.layers;t<n.length;t++){var r=n[t];e=e.concat(r.trainableWeights);}return e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nonTrainableWeights",{get:function(){for(var e=[],t=0,n=this.layers;t<n.length;t++){var r=n[t];e.push.apply(e,r.nonTrainableWeights);}if(!this.trainable){for(var i=[],a=0,o=this.layers;a<o.length;a++){r=o[a];i.push.apply(i,r.trainableWeights);}return i.concat(e)}return e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"weights",{get:function(){return this.trainableWeights.concat(this.nonTrainableWeights)},enumerable:!0,configurable:!0}),t.prototype.loadWeights=function(e,t){void 0===t&&(t=!0);for(var n={},r=0,i=0,a=this.layers;i<a.length;i++)for(var o=0,s=a[i].weights;o<s.length;o++){var l=s[o];if(null!=n[l.originalName])throw new ValueError("Duplicate weight name: "+l.originalName);n[l.originalName]=l,r++;}var u=[];for(var c in e){if(null!=n[c])u.push([n[c],e[c]]);else if(t)throw new ValueError("Provided weight data has no target variable: "+c);delete n[c];}if(t){var p=[];for(var h in n)p.push(h);if(p.length>0)throw new ValueError(p.length+" of "+r+" weights are not set: "+p)}batchSetValue(u);},t.prototype.updatedConfig=function(){var e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers "+version$1,t.backend="TensorFlow.js",t},t.prototype.toJSON=function(e,t){void 0===t&&(t=!0);var n=convertTsToPythonic(this.updatedConfig());return t?JSON.stringify(n):n},t.prototype.call=function(e,t){var n=this;return Ze(function(){e=toList(e);for(var r=new FeedDict,i=0;i<n.inputs.length;++i)r.add(n.inputs[i],e[i]);return execute(n.outputs,r,t)})},t.prototype.computeMask=function(e,t){var n=this;return Ze(function(){var r;return e=toList(e),r=null==t?pyListRepeat(null,e.length):toList(t),n.runInternalGraph(e,r)[1]})},t.prototype.computeOutputShape=function(e){var t=normalizeShapeList(e);if(t.length!==this.inputLayers.length)throw new ValueError("Invalid inputShape argument "+e+": model has "+this.inputLayers.length+" tensor inputs.");for(var n={},r=0;r<t.length;r++){var i=this.inputLayers[r],a=t[r];n[A=i.name+"_0_0"]=a;}var o=Object.keys(this.nodesByDepth).map(function(e){return parseInt(e,10)}).sort(reverseNumberCompare);if(o.length>1)for(var s=0,l=o;s<l.length;s++)for(var u=l[s],c=0,p=this.nodesByDepth[u];c<p.length;c++){var h=p[c];i=h.outboundLayer;if(-1===this.inputLayers.map(function(e){return e.id}).indexOf(i.id)){for(var d=[],f=0;f<h.inboundLayers.length;f++){var g=h.inboundLayers[f],m=h.nodeIndices[f],y=h.tensorIndices[f],v=n[A=g.name+"_"+m+"_"+y];d.push(v);}var b=normalizeShapeList(i.computeOutputShape(singletonOrArray(d))),w=i.inboundNodes.indexOf(h);for(f=0;f<b.length;f++){n[A=i.name+"_"+w+"_"+f]=b[f];}}}var z=[],S=[];for(r=0;r<this.outputLayers.length;r++){i=this.outputLayers[r],w=this.outputLayersNodeIndices[r],y=this.outputLayersTensorIndices[r];var A=i.name+"_"+w+"_"+y;S.push(A);}for(r=0;r<S.length;r++){var _=S[r];assert(_ in n),z.push(n[_]);}return singletonOrArray(z)},t.prototype.runInternalGraph=function(e,t){null==t&&(t=pyListRepeat(null,e.length));for(var n={},r=0;r<this.inputs.length;++r){var i=this.inputs[r],a=e[r],o=t[r];n[i.id]=[a,o];}for(var s=0,l=Object.keys(this.nodesByDepth).map(function(e){return parseInt(e,10)}).sort(reverseNumberCompare);s<l.length;s++)for(var u=l[s],c=0,p=this.nodesByDepth[u];c<p.length;c++){for(var h=p[c],d=h.outboundLayer,f=h.inputTensors,g=h.outputTensors,m=new Array,y=0,v=f;y<v.length;y++){(i=v[y]).id in n&&m.push(n[i.id]);}if(m.length===f.length){var b={},w=void 0,z=void 0,S=void 0,A=void 0;if(null!=h.callArgs&&(b=h.callArgs),1===m.length){var _=m[0],I=_[0],C=_[1];null==b.mask&&(b.mask=C),S=toList(d.call(I,b)),A=toList(d.computeMask(I,C)),w=[I],z=[C];}else w=m.map(function(e){return e[0]}),z=m.map(function(e){return e[1]}),null==b.mask&&(b.mask=z),S=toList(d.call(w,b)),A=toList(d.computeMask(w,z));if(d.activityRegularizer)throw new NotImplementedError("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(r=0;r<g.length;++r){i=g[r],a=S[r],o=A[r];n[i.id]=[a,o];}}}for(var E=[],N=[],k=[],x=0,L=this.outputs;x<L.length;x++){assert((i=L[x]).id in n,"Could not compute output "+i.name+" : "+i.id);var T=n[i.id],D=T[0];o=T[1];k.push(D.shape),E.push(D),N.push(o);}return [E,N,k]},t.prototype.buildNodeConversionMap=function(e){for(var n,r={},i=0,a=this.layers;i<a.length;i++){var o=a[i];n=o instanceof t?1:0;for(var s=0;s<o.inboundNodes.length;s++){var l=t.nodeKey(o,s);this.containerNodes.has(l)&&(r[l]=n,n+=1);}}return r},t.prototype.getLayer=function(e,t){if(null!=t){if(this.layers.length<=t)throw new ValueError("Was asked to retrieve layer at index "+t+", but model only has "+this.layers.length+" layer(s).");return this.layers[t]}if(null==e)throw new ValueError("Provide either a layer name or layer index");for(var n=0,r=this.layers;n<r.length;n++){var i=r[n];if(i.name===e)return i}throw new ValueError("No such layer: "+e)},t.prototype.calculateLosses=function(){var e=this;return Ze(function(){for(var n=[],r=0,i=e.layers;r<i.length;r++)for(var a=i[r],o=0;o<a.inboundNodes.length;++o){var s=t.nodeKey(a,o);e.containerNodes.has(s)&&n.push.apply(n,a.calculateLosses());}return n})},t.prototype.getConfig=function(){for(var e={name:this.name},n=this.buildNodeConversionMap(this.layers),r=[],i=0,a=this.layers;i<a.length;i++){for(var o=(w=a[i]).getClassName(),s=w.getConfig(),l=[],u=0;u<w.inboundNodes.length;u++){var c=w.inboundNodes[u],p=t.nodeKey(w,u),h={};if(this.containerNodes.has(p)){if(c.callArgs)try{JSON.stringify(c.callArgs),h=c.callArgs;}catch(e){console.warn("Layer "+w.name+" was passed non-serializable keyword arguments: "+c.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),h={};}if(c.inboundLayers.length>0){for(var d=[],f=0;f<c.inboundLayers.length;f++){var g=c.inboundLayers[f],m=c.nodeIndices[f],y=c.tensorIndices[f];null==(S=n[t.nodeKey(g,m)])&&(S=0),d.push([g.name,S,y,h]);}l.push(d);}}}var v={};v.name=w.name,v.className=o,v.config=s,v.inboundNodes=l,r.push(v);}e.layers=r;var b=[];for(f=0;f<this.inputLayers.length;f++){var w=this.inputLayers[f];m=this.inputLayersNodeIndices[f],p=t.nodeKey(w,m);if(this.containerNodes.has(p)){null!==(S=n[p])&&void 0!==S||(S=0);y=this.inputLayersTensorIndices[f];b.push([w.name,S,y]);}}e.inputLayers=b;var z=[];for(f=0;f<this.outputLayers.length;f++){w=this.outputLayers[f],m=this.outputLayersNodeIndices[f],p=t.nodeKey(w,m);if(this.containerNodes.has(p)){var S;null!==(S=n[p])&&void 0!==S||(S=0);y=this.outputLayersTensorIndices[f];z.push([w.name,S,y]);}}return e.outputLayers=z,e},t.fromConfig=function(e,t,n,r){void 0===r&&(r=!1);var i={},a={};function o(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t];}function s(e,t){for(var n,r=[],a=0,s=t;a<s.length;a++){var l=s[a],u=l[0],c=l[1],p=l[2];if(n=null==l[3]?{}:l[3],!(u in i))return void o(e,t);var h=i[u];if(h.inboundNodes.length<=c)return void o(e,t);var d=h.inboundNodes[c];r.push(d.outputTensors[p]);}r.length>0&&e.apply(singletonOrArray(r),n);}function l(e){var n=e.name,a=deserialize(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),i[n]=a,e.inboundNodes.forEach(function(e){if(!(e instanceof Array))throw new ValueError("Corrupted configuration, expected array for nodeData: "+e);o(a,e);});}for(var u=t.name,c=t.layers,p=0,h=c;p<h.length;p++){l(g=h[p]);}for(;!isObjectEmpty(a);)for(var d=0,f=c;d<f.length;d++){var g=f[d];if((k=i[g.name]).name in a){var m=a[k.name];delete a[k.name];for(var y=0,v=m;y<v.length;y++){s(k,v[y]);}}}for(var b=[],w=[],z=0,S=t.inputLayers;z<S.length;z++){var A=(g=S[z])[0],_=g[1],I=g[2];assert(A in i);var C=(k=i[A]).inboundNodes[_].outputTensors;b.push(C[I]);}for(var E=0,N=t.outputLayers;E<N.length;E++){A=(g=N[E])[0],_=g[1],I=g[2];assert(A in i);var k;C=(k=i[A]).inboundNodes[_].outputTensors;w.push(C[I]);}return new e({inputs:b,outputs:w,name:u})},Object.defineProperty(t.prototype,"stateful",{get:function(){if(this._stateful)throw new ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(var e=0,t=this.layers;e<t.length;e++){if(t[e].stateful)return !0}return !1},enumerable:!0,configurable:!0}),t.prototype.resetStates=function(){var e=this;Ze(function(){e.layers.forEach(function(e){e.stateful&&e.resetStates();});});},t}(Layer);function standardizeSampleOrClassWeights(e,t,n){var r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(function(e){return null});if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error("Provided "+n+" is an array of "+e.length+" element(s), but the model has "+r+" outputs. Make sure a set of weights is provided for each model output.");return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){var i=[];return t.forEach(function(t){t in e?i.push(e[t]):i.push(null);}),i}throw new Error("The model has multiple ("+r+") outputs, so "+n+" must be either an array with "+r+" elements or an object with "+t+" keys. Provided "+n+" not understood: "+JSON.stringify(e))}function standardizeClassWeights(e,t){return standardizeSampleOrClassWeights(e,t,"classWeight")}function standardizeWeights(e,t,n,r){return __awaiter(this,void 0,void 0,function(){var i,a,o,s,l;return __generator(this,function(u){switch(u.label){case 0:if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");return null==n?[3,2]:(i=Ze(function(){if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){return e.argMax(1)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error("Encountered unexpected last-dimension size ("+e.shape[1]+") during handling of class weights. The size is expected to be >= 1.")}throw new Error("Unexpected rank of target (y) tensor ("+e.rank+") during handling of class weights. The rank is expected to be 1 or 2.")}),s=(o=Array).from,[4,i.data()]);case 1:return a=s.apply(o,[u.sent()]),tn(i),l=[],a.forEach(function(e){if(null==n[e])throw new Error("classWeight must contain all classes in the training data. The class "+e+" exists in the data but not in classWeight");l.push(n[e]);}),[2,Mn(l,"float32")];case 2:return [2,null]}})})}function computeWeightedLoss(e,t){return To(e,t)}var DEFAULT_VALIDATION_BATCH_SIZE=32;function standardizeDataIteratorOutput(e,t){var n,r,i=t;n=i.xs,r=i.ys,st.assert(null!=n&&null!=r,function(){return "A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+t});var a=flattenTensorOrArrayOrMap("input",e.inputNames,n),o=flattenTensorOrArrayOrMap("output",e.outputNames,r),s=a[0].shape[0];st.assert(a.length===e.inputs.length,function(){return "LayersModel has "+e.inputs.length+" inputs, but the dataset provides "+a.length+" inputs.  (Expected input keys: "+JSON.stringify(e.inputNames)+")"}),st.assert(o.length===e.outputs.length,function(){return "LayersModel has "+e.outputs.length+" outputs, but the dataset provides "+o.length+" outputs.  (Expected output keys: "+JSON.stringify(e.outputNames)+")"});for(var l=function(t){st.assert(a[t].shape[0]===s,function(){return "Batch size mismatch: input "+e.inputNames[t]+" has "+a[t].shape[0]+"; expected  "+s+" based on input "+e.inputNames[0]+"."});},u=0;u<a.length;u++)l(u);for(var c=function(t){st.assert(o[t].shape[0]===s,function(){return "Batch size mismatch: output "+e.outputNames[t]+" has "+o[t].shape[0]+"; expected  "+s+" based on input "+e.inputNames[0]+"."});},p=0;p<o.length;p++)c(p);return {xs:a,ys:o}}function flattenTensorOrArrayOrMap(e,t,n){if(n instanceof wt)return [n];if(Array.isArray(n))return st.assert(n.length===t.length,function(){return "Received an array of "+n.length+" Tensors, but expected "+t.length+" to match the "+e+" keys "+t+"."}),n;for(var r=[],i=0,a=t;i<a.length;i++){var o=a[i];if(null==n[o])throw new ValueError("The feature data generated by the dataset lacks the required "+e+" key '"+o+"'.");r.push(n[o]);}return r}function standardizeTensorValidationData(e){if(3===e.length)throw new NotImplementedError("Validation with sample weights is not implemented yet.");return {xs:e[0],ys:e[1]}}function fitDataset(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,a,o,s,l,u,c,p,h,d,f,g,m,y,v,b,w,z,S,A,_,I,C,E,N,k,x,L,T,D,O,R,M;return __generator(this,function(P){switch(P.label){case 0:if(r=null!=n.batchesPerEpoch,st.assert(null!=e.optimizer,function(){return "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."}),st.assert(null!=n,function(){return "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."}),st.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),function(){return "For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs}),st.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),function(){return "For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch}),st.assert(null==n.validationSplit,function(){return "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."}),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0,P.label=1;case 1:return P.trys.push([1,,26,27]),i=null!=n.validationData,a=void 0,o=void 0,i&&(isDatasetObject(n.validationData)?st.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),function(){return "For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches}):(s=standardizeTensorValidationData(n.validationData),a=s.xs,o=s.ys)),l=e.makeTrainFunction(),u=e.getDedupedMetricsNames(),c=void 0,c=i?u.slice().concat(u.map(function(e){return "val_"+e})):u.slice(),p=standardizeCallbacks(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,d=configureCallbacks(p,h,n.epochs,null,null,getStepsPerEpoch(t,n),null,i,c),f=d.callbackList,g=d.history,f.setModel(e),e.history=g,[4,f.onTrainBegin()];case 2:return P.sent(),e.stopTraining_=!1,m=null==n.initialEpoch?0:n.initialEpoch,[4,t.iterator()];case 3:y=P.sent(),P.label=4;case 4:return m<n.epochs?(v={},[4,f.onEpochBegin(m)]):[3,23];case 5:return P.sent(),b=0,w=0,r?[3,7]:[4,t.iterator()];case 6:y=P.sent(),P.label=7;case 7:return !r||b<n.batchesPerEpoch?[4,y.next()]:[3,21];case 8:return z=P.sent(),r&&z.done?(console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+b+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset."),[3,21]):null==z.value?[3,15]:(S=standardizeDataIteratorOutput(e,z.value),A=S.xs,_=S.ys,(I={}).batch=w,I.size=A[0].shape[0],[4,f.onBatchBegin(w,I)]);case 9:if(P.sent(),C=[],null==n.classWeight)return [3,13];E=standardizeClassWeights(n.classWeight,e.outputNames),M=0,P.label=10;case 10:return M<E.length?(k=(N=C).push,[4,standardizeWeights(_[M],null,E[M])]):[3,13];case 11:k.apply(N,[P.sent()]),P.label=12;case 12:return ++M,[3,10];case 13:for(x=A.concat(_).concat(C),L=l(x),tn(x),M=0;M<u.length;++M)T=u[M],D=L[M],I[T]=D,en(D);return [4,f.onBatchEnd(w,I)];case 14:P.sent(),disposeTensorsInLogs(I),w++,b++,P.label=15;case 15:return (r?b>=n.batchesPerEpoch:z.done)?i?(O=void 0,isDatasetObject(n.validationData)?(R=toList,[4,e.evaluateDataset(n.validationData,{batches:n.validationBatches})]):[3,17]):[3,19]:[3,20];case 16:return O=R.apply(void 0,[P.sent()]),[3,18];case 17:O=toList(e.evaluate(a,o,{batchSize:null==n.validationBatchSize?DEFAULT_VALIDATION_BATCH_SIZE:n.validationBatchSize,verbose:0})),P.label=18;case 18:for(M=0;M<e.metricsNames.length;++M)v["val_"+e.metricsNames[M]]=O[M];P.label=19;case 19:return [3,21];case 20:return e.stopTraining_?[3,21]:[3,7];case 21:return [4,f.onEpochEnd(m,v)];case 22:return P.sent(),m++,e.stopTraining_?[3,23]:[3,4];case 23:return [4,f.onTrainEnd()];case 24:return P.sent(),[4,e.history.syncData()];case 25:return P.sent(),[2,e.history];case 26:return e.isTraining=!1,[7];case 27:return [2]}})})}function getStepsPerEpoch(e,t){var n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}function isDatasetObject(e){return "function"==typeof e.iterator}function isLazyIteratorObject(e){return "function"==typeof e.next}function evaluateDataset(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,a,o,s,l,u,c,p,h;return __generator(this,function(d){switch(d.label){case 0:if(r=null!=(n=n||{}).batches,i=e.testFunction,a=[],n.verbose>0)throw new NotImplementedError("Verbose mode is not implemented yet.");return st.assert(!r||n.batches>0&&Number.isInteger(n.batches),function(){return "Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches)}),isLazyIteratorObject(t)?(s=t,[3,3]):[3,1];case 1:return [4,t.iterator()];case 2:s=d.sent(),d.label=3;case 3:o=s,l=0,u=0,c=function(){var t;return __generator(this,function(s){switch(s.label){case 0:return [4,o.next()];case 1:return t=s.sent(),a=Ze(function(){if(t.value){var n=standardizeDataIteratorOutput(e,t.value),r=n.xs,o=n.ys,s=r.concat(o),c=Ze(function(){return i(s)});if(tn(s),0===u)for(var p=0;p<c.length;++p)a.push(On(0));var h=s[0].shape[0],d=function(e){var t=c[e],n=a[e];a[e]=Ze(function(){return Or(a[e],To(h,t))}),u>0&&tn(n);};for(p=0;p<c.length;++p)d(p);tn(c),l+=h,++u;}return a}),t.done?(r&&console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` batches (in this case, "+n.batches+" batches). You may need to use the repeat() function when building your dataset."),[2,"break"]):[2]}})},d.label=4;case 4:return !r||u<n.batches?[5,c()]:[3,6];case 5:return "break"===d.sent()?[3,6]:[3,4];case 6:for(p=0;p<a.length;++p)h=a[p],a[p]=Bo(a[p],l),tn(h);return [2,singletonOrArray(a)]}})})}function checkBatchSize(e){st.assert(e>0&&Number.isInteger(e),function(){return "batchSize is required to be a positive integer, but got "+e});}function sliceArrays(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(function(e){return sliceAlongFirstAxis(e,t,n-t)}):sliceAlongFirstAxis(e,t,n-t)}function sliceArraysByIndices(e,t){return Ze(function(){return null==e?null:Array.isArray(e)?e.map(function(e){return sliceArraysByIndices(e,t)}):gather$1(e,"int32"===t.dtype?t:t.toInt())})}function makeBatches(e,t){for(var n=[],r=0,i=null;r<e;)(i=r+t)>=e&&(i=e),n.push([r,i]),r=i;return n}function fitLoop(e,t,n,r,i,a,o,s,l,u,c,p,h,d,f){return __awaiter(this,void 0,void 0,function(){var g,m,y,v,b,w,z,S;return __generator(this,function(A){switch(A.label){case 0:if(null==i&&(i=32),null==a&&(a=1),null==c&&(c=!0),null==h&&(h=0),g=!1,null!=l&&null!=u&&(g=!0),null!=f&&(g=!0,null==d))throw new ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");return null!=(m=e.checkNumSamples(n,i,d,"steps_per_epoch"))&&(y=range$1(0,m)),null==o&&(o=1),v=configureCallbacks(s,o,a,h,m,d,i,g,p),b=v.callbackList,w=v.history,b.setModel(e),e.history=w,[4,b.onTrainBegin()];case 1:A.sent(),e.stopTraining_=!1,z=function(a){var o,s,p,h,f;return __generator(this,function(v){switch(v.label){case 0:return [4,b.onEpochBegin(a)];case 1:if(v.sent(),o={},null==d)return [3,2];throw new NotImplementedError("stepsPerEpoch mode is not implemented yet.");case 2:if("batch"===c)throw new NotImplementedError("batch shuffling is not implemneted yet");c&&st.shuffle(y),s=Mn(y),p=makeBatches(m,i),h=function(a){var c;return __generator(this,function(h){switch(h.label){case 0:return c={},[4,b.onBatchBegin(a,c)];case 1:return h.sent(),Ze(function(){var h=p[a][0],d=p[a][1],f=sliceAlongFirstAxis(s,h,d-h);c.batch=a,c.size=d-h;for(var m=sliceArraysByIndices(n,f),y=t(m),v=0;v<r.length;++v){var b=r[v],w=y[v];c[b]=w,en(w);}if(a===p.length-1&&g){var z=e.testLoop(l,u,i);for(v=0;v<r.length;++v){b=r[v],w=z[v];en(w),o["val_"+b]=w;}}}),[4,b.onBatchEnd(a,c)];case 2:return h.sent(),disposeTensorsInLogs(c),e.stopTraining_?[2,"break"]:[2]}})},f=0,v.label=3;case 3:return f<p.length?[5,h(f)]:[3,6];case 4:if("break"===v.sent())return [3,6];v.label=5;case 5:return ++f,[3,3];case 6:s.dispose(),v.label=7;case 7:return [4,b.onEpochEnd(a,o)];case 8:return v.sent(),e.stopTraining_?[2,"break"]:[2]}})},S=h,A.label=2;case 2:return S<a?[5,z(S)]:[3,5];case 3:if("break"===A.sent())return [3,5];A.label=4;case 4:return ++S,[3,2];case 5:return [4,b.onTrainEnd()];case 6:return A.sent(),[4,e.history.syncData()];case 7:return A.sent(),[2,e.history]}})})}function fitTensors(e,t,n,r){return void 0===r&&(r={}),__awaiter(this,void 0,void 0,function(){var i,a,o,s,l,u,c,p,h,d,f,g,m,y,v,b,w,z,S,A,_,I;return __generator(this,function(C){switch(C.label){case 0:if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0,C.label=1;case 1:return C.trys.push([1,,7,8]),checkBatchSize(p=null==r.batchSize?32:r.batchSize),h=!1,[4,e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,h,p)];case 2:if(d=C.sent(),i=d[0],a=d[1],c=d[2],f=!1,g=void 0,!(null!=r.validationData&&r.validationData.length>0))return [3,4];if(f=!0,2!==r.validationData.length)throw 3===r.validationData.length?new NotImplementedError("validationData including sample weights is not supported yet."):new ValueError("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+r.validationData+" is invalid.");return o=r.validationData[0],s=r.validationData[1],m=!0,[4,e.standardizeUserData(o,s,null,null,m,p)];case 3:return y=C.sent(),l=y[0],u=y[1],g=l.concat(u),[3,5];case 4:null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1?(f=!0,v=Math.floor(i[0].shape[0]*(1-r.validationSplit)),b=i[0].shape[0],l=sliceArrays(i,v,b),i=sliceArrays(i,0,v),u=sliceArrays(a,v,b),a=sliceArrays(a,0,v),g=l.concat(u)):null!=r.validationSteps&&(f=!0),C.label=5;case 5:return w=i.concat(a).concat(c),e.checkTrainableWeightsConsistency(),z=e.makeTrainFunction(),S=e.getDedupedMetricsNames(),A=void 0,_=void 0,f?(e.makeTestFunction(),A=e.testFunction,_=S.slice().concat(S.map(function(e){return "val_"+e}))):(A=null,g=[],_=S.slice()),I=standardizeCallbacks(r.callbacks,r.yieldEvery),[4,fitLoop(e,z,w,S,p,r.epochs,r.verbose,I,A,g,r.shuffle,_,r.initialEpoch,null,null)];case 6:return [2,C.sent()];case 7:return e.isTraining=!1,disposeNewTensors(i,t),disposeNewTensors(a,n),disposeNewTensors(l,o),disposeNewTensors(u,s),null!=c&&tn(c),[7];case 8:return [2]}})})}function ensureTensorsRank2OrHigher(e){var t=[];e instanceof wt&&(e=[e]);for(var n=0;n<e.length;++n){var r=e[n];if(1===r.rank)t.push(expandDims$1(r,1));else {if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r);}}return t}function disposeNewTensors(e,t){if(null!=e){var n=[];if(t instanceof wt)n.push(t.id);else if(Array.isArray(t))t.forEach(function(e){return n.push(e.id)});else if(null!=t)for(var r in t){var i=t[r];n.push(i.id);}var a=[];if(e instanceof wt)-1===n.indexOf(e.id)&&a.push(e);else if(Array.isArray(e))e.forEach(function(e){-1===n.indexOf(e.id)&&a.push(e);});else if(null!=e)for(var o in e){var s=e[o];-1===n.indexOf(s.id)&&a.push(s);}a.forEach(function(e){e.isDisposed||e.dispose();});}}function isDataTensor(e){return e instanceof wt}function isDataArray(e){return Array.isArray(e)}function isDataDict(e){return !isDataTensor(e)&&!isDataArray(e)}function standardizeInputData(e,t,n,r,i){if(void 0===r&&(r=!0),void 0===i&&(i=""),null==t||0===t.length){if(null!=e){var a=!1;if(isDataArray(e)&&e.length>0)a=!0;else if(isDataDict(e)){for(var o in e)if(e.hasOwnProperty(o)){a=!0;break}}else a=!0;if(a)throw new ValueError("Error when checking model "+i+" expected no data, but got "+e)}return []}if(null==e)return t.map(function(e){return null});var s;if(isDataDict(e)){e=e,s=[];for(var l=0,u=t;l<u.length;l++){var c=u[l];if(null==e[c])throw new ValueError('No data provided for "'+c+'". Need data for each key in: '+t);s.push(e[c]);}}else if(isDataArray(e)){if((e=e).length!==t.length)throw new ValueError("Error when checking model "+i+": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see "+t.length+" Tensor(s), but instead got the following list of Tensor(s): "+e);s=e;}else {if(e=e,t.length>1)throw new ValueError("The model "+i+" expects "+t.length+" Tensor(s), but only received one Tensor. Found: Tensor with shape "+e.shape);s=[e];}if(s=ensureTensorsRank2OrHigher(s),null!=n)for(var p=0;p<t.length;++p)if(null!=n[p]){var h=s[p];if(h.shape.length!==n[p].length)throw new ValueError("Error when checking "+i+": expected "+t[p]+" to have "+n[p].length+" dimension(s). but got array with shape "+h.shape);for(var d=0;d<n[p].length;++d)if(0!==d||r){var f=h.shape[d],g=n[p][d];if(null!=g&&g>=0&&f!==g)throw new ValueError("Error when checking "+i+": expected "+t[p]+" to have shape ["+n[p]+"], but got array with shape ["+h.shape+"].")}}return s}function checkArrayLengths(e,t,n){var r=unique(e.map(function(e){return e.shape[0]}));r.sort();var i=unique(t.map(function(e){return e.shape[0]}));if(i.sort(),r.length>1)throw new ValueError("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(function(e){return e.shape})));if(i.length>1)throw new ValueError("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(function(e){return e.shape})));if(r.length>0&&i.length>0&&!st.arraysEqual(r,i))throw new ValueError("Input Tensors should have the same number of samples as target Tensors. Found "+r[0]+" input sample(s) and "+i[0]+" target sample(s).")}function checkLossAndTargetCompatibility(e,t,n){for(var r=[meanSquaredError$1,binaryCrossentropy,categoricalCrossentropy],i=0;i<e.length;++i){var a=e[i],o=t[i],s=n[i];if(null!=o){if(o===categoricalCrossentropy&&1===a.shape[a.shape.length-1])throw new ValueError("You are passing a target array of shape "+a.shape+" while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");if(-1!==r.indexOf(o))for(var l=a.shape.slice(1),u=s.slice(1),c=0;c<l.length;++c){var p=l[c],h=u[c];if(null!=h&&p!==h)throw new ValueError("A target Tensor with shape "+a.shape+" was passed for an output of shape "+s+", while using a loss function that expects targets to have the same shape as the output.")}}}}function checkInputData(e,t,n,r,i){var a;if(void 0===r&&(r=!0),void 0===i&&(i=""),Array.isArray(e)){if(e.length!==t.length)throw new ValueError("Error when checking model "+i+": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see "+t.length+" Tensor(s), but instead got "+e.length+" Tensors(s).");a=e;}else {if(t.length>1)throw new ValueError("The model expects "+t.length+" "+i+" Tensors, but only received one Tensor. Found: array with shape "+JSON.stringify(e.shape)+".");a=[e];}if(null!=n)for(var o=0;o<t.length;++o)if(null!=n[o]){var s=a[o];if(s.shape.length!==n[o].length)throw new ValueError("Error when checking "+i+": expected "+t[o]+" to have "+n[o].length+" dimension(s), but got array with shape "+JSON.stringify(s.shape));for(var l=0;l<n[o].length;++l)if(0!==l||r){var u=s.shape[l],c=n[o][l];if(null!=c&&c!==u)throw new ValueError("Error when checking "+i+": expected "+t[o]+" to have shape "+JSON.stringify(n[o])+" but got array with shape "+JSON.stringify(s.shape)+".")}}}function collectMetrics(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map(function(e){return []});var n;if("string"==typeof e||"function"==typeof e)n=[e];else {if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+e);n=e;}if(Array.isArray(n))return t.map(function(e){return n});for(var r=[],i=0,a=t;i<a.length;i++){var o=a[i],s=n.hasOwnProperty(o)?n[o]:[];Array.isArray(s)||(s=[s]),r.push(s);}return r}var LAYERS_MODEL_FORMAT_NAME="layers-model",LayersModel=function(e){function t(t){var n=e.call(this,t)||this;return n.isTraining=!1,n}return __extends(t,e),t.prototype.summary=function(e,t,n){if(void 0===n&&(n=console.log),!this.built)throw new ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");printSummary(this,e,t,n);},t.prototype.compile=function(e){var t=this;if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=getOptimizer(e.optimizer),this.isOptimizerOwned=!0;else {if(!(e.optimizer instanceof Xd))throw new ValueError("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1;}var n=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new ValueError("When passing an Array as loss, it should have one entry per model output. The model has "+this.outputs.length+" output(s), but you passed loss="+e.loss+".");var r=e.loss;n=r.map(function(e){return get$1(e)});}else {var i=get$1(e.loss);this.outputs.forEach(function(e){n.push(i);});}else {for(var a in e.loss=e.loss,e.loss)if(-1===this.outputNames.indexOf(a))throw new ValueError('Unknown entry in loss dictionary: "'+a+'". Only expected the following keys: '+this.outputNames);for(var o=0,s=this.outputNames;o<s.length;o++){var l=s[o];null==e.loss[l]&&console.warn('Output "'+l+'" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to '+l+" during training"),n.push(get$1(e.loss[l]));}}this.lossFunctions=n,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(var u=0;u<this.outputs.length;++u){var c=this.internalOutputShapes[u],p=this.outputNames[u];this.feedOutputNames.push(p),this.feedOutputShapes.push(c),this.feedLossFns.push(this.lossFunctions[u]);}var h=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],nameScope("loss",function(){for(var e=0;e<t.outputs.length;++e)if(-1===h.indexOf(e)){var n=t.lossFunctions[e];t.outputs.length>1&&(t.metricsTensors.push([n,e]),t.metricsNames.push(t.outputNames[e]+"_loss"));}});var d=collectMetrics(e.metrics,this.outputNames);nameScope("metric",function(){for(var e=function(e){if(-1!==h.indexOf(e))return "continue";!function(n){for(var r,i,a,o=function(n){if("string"==typeof n&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(n)){var o=t.internalOutputShapes[e];1===o[o.length-1]||t.lossFunctions[e]===binaryCrossentropy?-1!==["accuracy","acc"].indexOf(n)?i=binaryAccuracy:-1!==["crossentropy","ce"].indexOf(n)&&(i=binaryCrossentropy$1):t.lossFunctions[e]===sparseCategoricalCrossentropy?-1!==["accuracy","acc"].indexOf(n)?i=sparseCategoricalAccuracy:-1!==["crossentropy","ce"].indexOf(n)&&(i=sparseCategoricalCrossentropy$1):-1!==["accuracy","acc"].indexOf(n)?i=categoricalAccuracy:-1!==["crossentropy","ce"].indexOf(n)&&(i=categoricalCrossentropy$1);var s=void 0;-1!==["accuracy","acc"].indexOf(n)?s="acc":-1!==["crossentropy","ce"].indexOf(n)&&(s="ce"),a=i,r=""+s;}else {var l=get$1$1(n);a=l,r=""+getLossOrMetricName(n);}var u;nameScope(r,function(){u=a;}),function(e,n,r){t.outputNames.length>1&&(n=t.outputNames[e]+"_"+n),t.metricsNames.push(n),t.metricsTensors.push([r,e]);}(e,r,u);},s=0,l=n;s<l.length;s++)o(l[s]);}(d[e]);},n=0;n<t.outputs.length;++n)e(n);}),this.collectedTrainableWeights=this.trainableWeights;},t.prototype.checkTrainableWeightsConsistency=function(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");},t.prototype.evaluate=function(e,t,n){void 0===n&&(n={});var r=null==n.batchSize?32:n.batchSize;checkBatchSize(r);var i=this.standardizeUserDataXY(e,t,!0,r);try{var a=i[0].concat(i[1]);this.makeTestFunction();var o=this.testFunction;return singletonOrArray(this.testLoop(o,a,r,n.verbose,n.steps))}finally{disposeNewTensors(i[0],e),disposeNewTensors(i[1],t);}},t.prototype.evaluateDataset=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){return this.makeTestFunction(),[2,evaluateDataset(this,e,t)]})})},t.prototype.checkNumSamples=function(e,t,n,r){var i;if(void 0===r&&(r="steps"),null!=n){if(i=null,null!=t)throw new ValueError("If "+r+" is set, batchSize must be null or undefined.Got batchSize = "+t)}else {if(null==e)throw new ValueError("Either the input data should have a defined shape, or "+r+" shoud be specified.");i=Array.isArray(e)?e[0].shape[0]:e.shape[0];}return i},t.prototype.execute=function(e,t){if(Array.isArray(t)&&0===t.length)throw new ValueError("`outputs` is an empty Array, which is not allowed.");var n=Array.isArray(t),r=n?t:[t],i=this.retrieveSymbolicTensors(r),a=new FeedDict;if(e instanceof wt&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new ValueError("The number of inputs provided ("+e.length+") does not match the number of inputs of this model ("+this.inputs.length+").");for(var o=0;o<this.inputs.length;++o)a.add(this.inputs[o],e[o]);}else for(var s=0,l=this.inputs;s<l.length;s++){var u=l[s],c=e[u.name];if(null==c)throw new ValueError("No value is provided for the model's input "+u.name);a.add(u,c);}var p=execute(i,a);return n?p:p[0]},t.prototype.retrieveSymbolicTensors=function(e){for(var t=pyListRepeat(null,e.length),n=e.length,r=0,i=this.layers;r<i.length;r++){for(var a=i[r],o=Array.isArray(a.output)?a.output:[a.output],s=o.map(function(e){return e.name}),l=0;l<e.length;++l){var u=s.indexOf(e[l]);if(-1!==u&&(t[l]=o[u],n--),0===n)break}if(0===n)break}if(n>0){var c=[];throw t.forEach(function(t,n){null==t&&c.push(e[n]);}),new ValueError("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(c))}return t},t.prototype.predictLoop=function(e,t,n){var r=this;return void 0===t&&(t=32),void 0===n&&(n=!1),Ze(function(){var i=r.checkNumSamples(e);if(n)throw new NotImplementedError("Verbose predictLoop() is not implemented yet.");for(var a=makeBatches(i,t),o=r.outputs.map(function(e){return []}),s=function(t){Ze(function(){var n=a[t][0],i=a[t][1],o=sliceArrays(e,n,i),s=[];if(Array.isArray(o))for(var l=0;l<o.length;++l)s.push({key:r.inputs[l],value:o[l]});else s.push({key:r.inputs[0],value:o});var u=new FeedDict(s);return execute(r.outputs,u)}).forEach(function(e,t){return o[t].push(e)});},l=0;l<a.length;++l)s(l);return singletonOrArray(o.map(function(e){return Yn(e,0)}))})},t.prototype.predict=function(e,t){void 0===t&&(t={});var n=ensureTensorsRank2OrHigher(e);checkInputData(n,this.inputNames,this.feedInputShapes,!1);try{var r=null==t.batchSize?32:t.batchSize;return checkBatchSize(r),this.predictLoop(n,r)}finally{disposeNewTensors(n,e);}},t.prototype.predictOnBatch=function(e){checkInputData(e,this.inputNames,this.feedInputShapes,!0);var t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)},t.prototype.standardizeUserDataXY=function(e,t,n,r){if(null==this.optimizer_)throw new RuntimeError("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");for(var i=[],a=0;a<this.feedOutputShapes.length;++a){var o=this.feedOutputShapes[a];this.feedLossFns[a]===sparseCategoricalCrossentropy?i.push(o.slice(0,o.length-1).concat([1])):i.push(o);}if(checkArrayLengths(e=standardizeInputData(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=standardizeInputData(t,this.feedOutputNames,i,!1,"target")),checkLossAndTargetCompatibility(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new ValueError("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size "+r+". Found: "+e[0].shape[0]+" sample(s).");return [e,t]},t.prototype.standardizeUserData=function(e,t,n,r,i,a){return void 0===i&&(i=!0),__awaiter(this,void 0,void 0,function(){var o,s,l,u,c,p,h,d;return __generator(this,function(f){switch(f.label){case 0:if(o=this.standardizeUserDataXY(e,t,i,a),s=o[0],l=o[1],null!=n)throw new Error("sample weight is not supported yet.");if(u=null,null==r)return [3,4];c=standardizeClassWeights(r,this.outputNames),u=[],p=0,f.label=1;case 1:return p<c.length?(d=(h=u).push,[4,standardizeWeights(l[p],null,c[p])]):[3,4];case 2:d.apply(h,[f.sent()]),f.label=3;case 3:return ++p,[3,1];case 4:return [2,[s,l,u]]}})})},t.prototype.testLoop=function(e,t,n,r,i){var a=this;return void 0===r&&(r=0),Ze(function(){var o=a.checkNumSamples(t,n,i,"steps"),s=[];if(r>0)throw new NotImplementedError("Verbose mode is not implemented yet.");if(null!=i)throw new NotImplementedError("steps mode in testLoop() is not implemented yet");for(var l=makeBatches(o,n),u=Mn(range$1(0,o)),c=0;c<l.length;++c){var p=l[c][0],h=l[c][1],d=sliceAlongFirstAxis(u,p,h-p),f=sliceArraysByIndices(t,d),g=e(f);if(0===c)for(var m=0;m<g.length;++m)s.push(On(0));for(m=0;m<g.length;++m){var y=g[m];s[m]=Or(s[m],To(h-p,y));}}for(m=0;m<s.length;++m)s[m]=Bo(s[m],o);return s})},t.prototype.getDedupedMetricsNames=function(){for(var e=this.metricsNames,t=[],n=0;n<e.length;++n){var r=e[n],i=r;if(count(e,r)>1)i+="_"+count(e.slice(0,n),r);t.push(i);}return t},t.prototype.makeTrainFunction=function(){var e=this;return function(t){var n=[],r=t.slice(0,e.inputs.length),i=t.slice(e.inputs.length,e.inputs.length+e.outputs.length),a=t.slice(e.inputs.length+e.outputs.length,e.inputs.length+2*e.outputs.length),o=[],s=e.collectedTrainableWeights.map(function(e){return e.read()});return [e.optimizer_.minimize(function(){for(var t=[],s=0;s<e.inputs.length;++s)t.push({key:e.inputs[s],value:r[s]});var l,u=new FeedDict(t),c=execute(e.outputs,u,{training:!0});for(s=0;s<e.lossFunctions.length;++s){var p=(0, e.lossFunctions[s])(i[s],c[s]);null!=a[s]&&(p=computeWeightedLoss(p,a[s]));var h=Ql(p);n.push(h),l=0===s?p:Or(l,p);}for(s=0;s<e.metricsTensors.length;++s){var d=void 0;if(e.outputs.length>1&&s<e.outputs.length)d=n[s];else {var f=e.metricsTensors[s][0],g=e.metricsTensors[s][1];d=Ql(f(i[g],c[g]));}en(d),o.push(d);}return l=Ql(l),e.calculateLosses().forEach(function(e){l=Or(l,e);}),l},!0,s)].concat(o)}},t.prototype.makeTestFunction=function(){var e=this;this.testFunction=function(t){return Ze(function(){for(var n,r=[],i=t.slice(0,e.inputs.length),a=t.slice(e.inputs.length,e.inputs.length+e.outputs.length),o=[],s=0;s<e.inputs.length;++s)o.push({key:e.inputs[s],value:i[s]});var l=new FeedDict(o),u=execute(e.outputs,l);for(s=0;s<e.lossFunctions.length;++s){var c=e.lossFunctions[s],p=Ql(c(a[s],u[s]));n=0===s?p:Or(n,p),r.push(n);}for(s=0;s<e.metricsTensors.length;++s){var h=e.metricsTensors[s][0],d=e.metricsTensors[s][1],f=Ql(h(a[d],u[d]));r.push(f);}return r})};},t.prototype.fit=function(e,t,n){return void 0===n&&(n={}),__awaiter(this,void 0,void 0,function(){return __generator(this,function(r){return [2,fitTensors(this,e,t,n)]})})},t.prototype.fitDataset=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){return [2,fitDataset(this,e,t)]})})},t.prototype.trainOnBatch=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,a,o,s,l,u,c;return __generator(this,function(p){switch(p.label){case 0:return [4,this.standardizeUserData(e,t)];case 1:n=p.sent(),r=n[0],i=n[1],a=this.makeTrainFunction(),o=a(r.concat(i)),s=[],l=0,u=o,p.label=2;case 2:return l<u.length?[4,u[l].data()]:[3,5];case 3:c=p.sent(),s.push(c[0]),p.label=4;case 4:return l++,[3,2];case 5:return tn(o),[2,singletonOrArray(s)]}})})},t.prototype.getNamedWeights=function(e){for(var t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,i=this.getWeights(n),a=0;a<r.length;++a)n&&!r[a].trainable||t.push({name:r[a].originalName,tensor:i[a]});return t},Object.defineProperty(t.prototype,"stopTraining",{get:function(){return this.stopTraining_},set:function(e){this.stopTraining_=e;},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"optimizer",{get:function(){return this.optimizer_},set:function(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1);},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=e.prototype.dispose.call(this);if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){var n=Qe().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=n-Qe().numTensors;}return t},t.prototype.getLossIdentifiers=function(){var e;if("string"==typeof this.loss)e=toSnakeCase(this.loss);else if(Array.isArray(this.loss)){for(var t=0,n=this.loss;t<n.length;t++){if("string"!=typeof n[t])throw new Error("Serialization of non-string loss is not supported.")}e=this.loss.map(function(e){return toSnakeCase(e)});}else {var r=Object.keys(this.loss);e={};for(var i=this.loss,a=0,o=r;a<o.length;a++){var s=o[a];if("string"!=typeof i[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=toSnakeCase(i[s]);}}return e},t.prototype.getMetricIdentifiers=function(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return [toSnakeCase(getLossOrMetricName(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(function(e){return toSnakeCase(getLossOrMetricName(e))});var e={};for(var t in this.metrics)e[t]=toSnakeCase(getLossOrMetricName(this.metrics[t]));return e},t.prototype.getTrainingConfig=function(){return {loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}},t.prototype.loadTrainingConfig=function(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");var t,n,r=deserialize(convertPythonicToTs(e.optimizer_config));if("string"==typeof e.loss)t=toCamelCase(e.loss);else if(Array.isArray(e.loss))t=e.loss.map(function(e){return toCamelCase(e)});else if(null!=e.loss)for(var i in t={},e.loss)t[i]=toCamelCase(e.loss[i]);if(Array.isArray(e.metrics))n=e.metrics.map(function(e){return toCamelCase(e)});else if(null!=e.metrics)for(var i in n={},e.metrics)n[i]=toCamelCase(e.metrics[i]);this.compile({loss:t,metrics:n,optimizer:r});},t.prototype.save=function(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,a,o,s,l,u,c,p,h,d,f,g;return __generator(this,function(m){switch(m.label){case 0:if("string"==typeof e){if(0===(n=Bd.getSaveHandlers(e)).length)throw new ValueError("Cannot find any save handlers for URL '"+e+"'");if(n.length>1)throw new ValueError("Found more than one ("+n.length+") save handlers for URL '"+e+"'");e=n[0];}if(null==e.save)throw new ValueError("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return [4,Bd.encodeWeights(this.getNamedWeights(t))];case 1:return r=m.sent(),i=!1,a=null,o=this.toJSON(a,i),s={modelTopology:o,format:LAYERS_MODEL_FORMAT_NAME,generatedBy:"TensorFlow.js tfjs-layers v"+version$1,convertedBy:null},null!=t&&t.includeOptimizer&&null!=this.optimizer?(s.trainingConfig=this.getTrainingConfig(),l="optimizer",d=(h=Bd).encodeWeights,[4,this.optimizer.getWeights()]):[3,4];case 2:return [4,d.apply(h,[m.sent(),l])];case 3:u=m.sent(),c=u.data,p=u.specs,(g=r.specs).push.apply(g,p),r.data=Bd.concatenateArrayBuffers([r.data,c]),m.label=4;case 4:return null!=this.userDefinedMetadata&&(f=!0,checkUserDefinedMetadata(this.userDefinedMetadata,this.name,f),s.userDefinedMetadata=this.userDefinedMetadata),s.weightData=r.data,s.weightSpecs=r.specs,[2,e.save(s)]}})})},t.prototype.setUserDefinedMetadata=function(e){checkUserDefinedMetadata(e,this.name),this.userDefinedMetadata=e;},t.prototype.getUserDefinedMetadata=function(){return this.userDefinedMetadata},t.className="Model",t}(Container);function modelFromJSON(e,t){return __awaiter(this,void 0,void 0,function(){var n,r,i,a,o,s,l,u;return __generator(this,function(c){switch(c.label){case 0:return "modelTopology"in e||(e={modelTopology:e}),null!=(n=(e=e).modelTopology).model_config&&(n=n.model_config),r=convertPythonicToTs(n),i=deserialize(r,t),null==e.weightsManifest?[3,2]:[4,Bd.loadWeights(e.weightsManifest,e.pathPrefix,i.weights.map(function(e){return e.originalName}))];case 1:for(a=c.sent(),o={},s=0,l=i.weights;s<l.length;s++)u=l[s],o[u.originalName]=a[u.originalName];i.loadWeights(o),tn(a),c.label=2;case 2:return [2,i]}})})}function loadLayersModelInternal(e,t){return __awaiter(this,void 0,void 0,function(){var n;return __generator(this,function(r){if(null==t&&(t={}),"string"==typeof e){if(0===(n=Bd.getLoadHandlers(e,t.onProgress)).length)n.push(Bd.browserHTTPRequest(e,t));else if(n.length>1)throw new ValueError("Found more than one ("+n.length+") load handlers for URL '"+e+"'");e=n[0];}return [2,loadLayersModelFromIOHandler(e,void 0,t)]})})}function loadLayersModelFromIOHandler(e,t,n){return __awaiter(this,void 0,void 0,function(){var r,i,a,o,s,l,u,c,p;return __generator(this,function(h){switch(h.label){case 0:if(null==n&&(n={}),null==e.load)throw new ValueError("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return [4,e.load()];case 1:if(r=h.sent(),null!=(i=r.modelTopology).model_config&&(i=i.model_config),a=null==n.strict||n.strict,o=null!=r.weightData&&null!=r.weightSpecs&&a,s=deserialize(convertPythonicToTs(i),t,o),null!=(l=r.trainingConfig)&&s.loadTrainingConfig(l),null!=r.userDefinedMetadata&&s.setUserDefinedMetadata(r.userDefinedMetadata),null==r.weightData)return [3,4];if(null==r.weightSpecs)throw new ValueError("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");return u=decodeModelAndOptimizerWeights(r.weightData,r.weightSpecs),c=u.modelWeights,p=u.optimizerWeights,s.loadWeights(c,a),null!=s.optimizer&&p.length>0?[4,s.optimizer.setWeights(p)]:[3,3];case 2:h.sent(),h.label=3;case 3:tn(c),tn(p.map(function(e){return e.tensor})),h.label=4;case 4:return [2,s]}})})}function decodeModelAndOptimizerWeights(e,t){var n=Bd.decodeWeights(e,t),r={},i=[];return t.forEach(function(e){"optimizer"===e.group?i.push({name:e.name,tensor:n[e.name]}):r[e.name]=n[e.name];}),{modelWeights:r,optimizerWeights:i}}qd.registerClass(LayersModel);var Sequential=function(e){function t(t){var n=e.call(this,{inputs:[],outputs:[]})||this;if(t=t||{},n.trainable=!0,n.built=!1,n.name=null!=t.name?t.name:getUid("sequential_"),null!=t.layers)for(var r=0,i=t.layers;r<i.length;r++){var a=i[r];n.add(a);}return n}return __extends(t,e),t.prototype.checkShape=function(e){if(e.inboundNodes[0].outputTensors[0].shape.some(function(e){return e<0}))throw new ValueError("Negative dimension size caused by adding layer "+e.name+" with input shape ["+e.inboundNodes[0].inputTensors[0].shape+"]")},t.prototype.add=function(e){var n,r=e instanceof t||e instanceof LayersModel;if(r){if(1!==(n=e).outputs.length)throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");var i=Input({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(i);}if(r)this.outputs=n.outputs,this.inputs=n.inputs;else {if(1!==e.inboundNodes.length)throw new ValueError("A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer "+e.name+" which has "+e.inboundNodes.length+" pre-existing inbound connections.");if(1!==e.inboundNodes[0].outputTensors.length)throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=getSourceInputs(this.outputs[0]);}this.inboundNodes=[],new Node({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:pyListRepeat(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(function(e){return e.shape}),outputShapes:this.outputs[0].shape});}else {var a=e.apply(this.outputs[0]);if(Array.isArray(a))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[a],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape];}this.layers.push(e),this.built=!1;},t.prototype.pop=function(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else {var e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape];}},t.prototype.call=function(e,t){return null==this.model&&this.build(),this.model.call(e,t)},t.prototype.build=function(e){if(getExactlyOneShape(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new LayersModel({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0;},t.prototype.countParams=function(){return this.built||this.build(),e.prototype.countParams.call(this)},t.prototype.summary=function(t,n,r){void 0===r&&(r=console.log),this.built||this.build(),e.prototype.summary.call(this,t,n,r);},t.prototype.setWeights=function(e){null==this.model&&this.build(),this.model.setWeights(e);},t.prototype.evaluate=function(e,t,n){if(void 0===n&&(n={}),!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)},t.prototype.evaluateDataset=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return [2,this.model.evaluateDataset(e,t)]})})},t.prototype.predict=function(e,t){return void 0===t&&(t={}),null==this.model&&this.build(),this.model.predict(e,t)},t.prototype.predictOnBatch=function(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)},t.prototype.compile=function(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames;},Object.defineProperty(t.prototype,"optimizer",{get:function(){return null==this.model?void 0:this.model.optimizer},set:function(e){this.model.optimizer=e;},enumerable:!0,configurable:!0}),t.prototype.fit=function(e,t,n){return void 0===n&&(n={}),__awaiter(this,void 0,void 0,function(){return __generator(this,function(r){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return [2,this.model.fit(e,t,n)]})})},t.prototype.fitDataset=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){if(!this.built)throw new RuntimeError("The model needs to be compiled before being used.");return [2,this.model.fitDataset(e,t)]})})},t.prototype.trainOnBatch=function(e,t){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(n){return [2,this.model.trainOnBatch(e,t)]})})},t.fromConfig=function(e,n,r,i){var a;void 0===i&&(i=!1);var o={};if(n instanceof Array){if(null==n[0].className||"Merge"===n[0].className)throw new ValueError("Legacy serialization format not supported yet.");a=n;}else st.assert(null!=n.layers,function(){return "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."}),a=n.layers,delete n.layers,o=n;var s=new e(o);if(!(s instanceof t))throw new NotImplementedError("Sequential.fromConfig called on non-Sequential input: "+s);for(var l=0,u=a;l<u.length;l++){var c=deserialize(u[l],void 0,i);i&&c.setFastWeightInitDuringBuild(!0),s.add(c);}return s},Object.defineProperty(t.prototype,"stopTraining",{get:function(){if(null==this.model)throw new ValueError("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining},set:function(e){if(null==this.model)throw new ValueError("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e;},enumerable:!0,configurable:!0}),t.prototype.getConfig=function(){for(var e=[],t=0,n=this.layers;t<n.length;t++){var r=n[t],i={};i.className=r.getClassName(),i.config=r.getConfig(),e.push(i);}return {name:this.name,layers:e}},t.className="Sequential",t}(LayersModel);function model(e){return new LayersModel(e)}function sequential(e){return new Sequential(e)}function loadLayersModel(e,t){return null==t&&(t={}),loadLayersModelInternal(e,t)}function input(e){return Input(e)}function registerCallbackConstructor(e,t){CallbackConstructorRegistry.registerCallbackConstructor(e,t);}qd.registerClass(Sequential);var Activation=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.getConfig=function(){return {}},t}(qd.Serializable),Elu=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e,t){return void 0===t&&(t=1),elu$1(e,t)},t.className="elu",t}(Activation);qd.registerClass(Elu);var Selu=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return sh(e)},t.className="selu",t}(Activation);qd.registerClass(Selu);var Relu=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return ah(e)},t.className="relu",t}(Activation);qd.registerClass(Relu);var Relu6=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return Ze(function(){return Io(6,ah(e))})},t.className="relu6",t}(Activation);qd.registerClass(Relu6);var Linear=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return e},t.className="linear",t}(Activation);qd.registerClass(Linear);var Sigmoid=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return io(e)},t.className="sigmoid",t}(Activation);qd.registerClass(Sigmoid);var HardSigmoid=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return hardSigmoid(e)},t.className="hardSigmoid",t}(Activation);qd.registerClass(HardSigmoid);var Softplus=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return po(e)},t.className="softplus",t}(Activation);qd.registerClass(Softplus);var Softsign=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return softsign(e)},t.className="softsign",t}(Activation);qd.registerClass(Softsign);var Tanh=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e){return yo(e)},t.className="tanh",t}(Activation);qd.registerClass(Tanh);var Softmax=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e,t){return void 0===t&&(t=-1),ia(e,t)},t.className="softmax",t}(Activation);qd.registerClass(Softmax);var LogSoftmax=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e,t){return void 0===t&&(t=-1),sa(e,t)},t.className="logSoftmax",t}(Activation);function serializeActivation(e){return e.getClassName()}function deserializeActivation(e,t){return void 0===t&&(t={}),deserializeKerasObject(e,qd.SerializationMap.getMap().classNameMap,t,"activation")}function getActivation(e){var t;return null==e?deserializeActivation(t={className:"linear",config:{}}):"string"==typeof e?((t={}).className=e,t.config={},deserializeActivation(t)):e instanceof Activation?e:deserializeActivation(e)}function assertObjectArgs(e){if(null!=e&&"object"!=typeof e)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+e)}qd.registerClass(LogSoftmax);var Regularizer=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t}(qd.Serializable),L1L2=function(e){function t(t){var n=e.call(this)||this;return assertObjectArgs(t),n.l1=null==t||null==t.l1?.01:t.l1,n.l2=null==t||null==t.l2?.01:t.l2,n.hasL1=0!==n.l1,n.hasL2=0!==n.l2,n}return __extends(t,e),t.prototype.apply=function(e){var t=this;return Ze(function(){var n=Gn([1]);return t.hasL1&&(n=Or(n,th(To(t.l1,Lr(e))))),t.hasL2&&(n=Or(n,th(To(t.l2,square(e))))),n.asScalar()})},t.prototype.getConfig=function(){return {l1:this.l1,l2:this.l2}},t.fromConfig=function(e,t){return new e({l1:t.l1,l2:t.l2})},t.className="L1L2",t}(Regularizer);function l1(e){return assertObjectArgs(e),new L1L2({l1:null!=e?e.l1:null,l2:0})}function l2(e){return assertObjectArgs(e),new L1L2({l2:null!=e?e.l2:null,l1:0})}qd.registerClass(L1L2);var REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP={l1l2:"L1L2"};function serializeRegularizer(e){return serializeKerasObject(e)}function deserializeRegularizer(e,t){return void 0===t&&(t={}),deserializeKerasObject(e,qd.SerializationMap.getMap().classNameMap,t,"regularizer")}function getRegularizer(e){return null==e?null:"string"==typeof e?deserializeRegularizer({className:e in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP?REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e]:e,config:{}}):e instanceof Regularizer?e:deserializeRegularizer(e)}var ReLU=function(e){function t(t){var n=e.call(this,null==t?{}:t)||this;return n.supportsMasking=!0,null!=t&&(n.maxValue=t.maxValue),n}return __extends(t,e),t.prototype.call=function(e,t){e=getExactlyOneTensor(e);var n=ah(e);return null!=this.maxValue&&(n=Kr(n,0,this.maxValue)),n},t.prototype.computeOutputShape=function(e){return e},t.prototype.getConfig=function(){var t={maxValue:this.maxValue},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="ReLU",t}(Layer);qd.registerClass(ReLU);var LeakyReLU=function(e){function t(t){var n=e.call(this,null==t?{}:t)||this;return n.DEFAULT_ALPHA=.3,null==t&&(t={}),n.alpha=null==t.alpha?n.DEFAULT_ALPHA:t.alpha,n}return __extends(t,e),t.prototype.call=function(e,t){var n=getExactlyOneTensor(e);return rh(n,this.alpha)},t.prototype.computeOutputShape=function(e){return e},t.prototype.getConfig=function(){var t={alpha:this.alpha},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="LeakyReLU",t}(Layer);qd.registerClass(LeakyReLU);var PReLU=function(e){function t(t){var n=e.call(this,null==t?{}:t)||this;if(n.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),n.supportsMasking=!0,n.alphaInitializer=getInitializer(t.alphaInitializer||n.DEFAULT_ALPHA_INITIALIZER),n.alphaRegularizer=getRegularizer(t.alphaRegularizer),n.alphaConstraint=getConstraint(t.alphaConstraint),null==t.sharedAxes)n.sharedAxes=null;else if(Array.isArray(t.sharedAxes))n.sharedAxes=t.sharedAxes;else {if("number"!=typeof t.sharedAxes)throw new ValueError("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);n.sharedAxes=[t.sharedAxes];}return n}return __extends(t,e),t.prototype.build=function(e){var t=(e=getExactlyOneShape(e)).slice(1);if(null!=this.sharedAxes)for(var n=0,r=this.sharedAxes;n<r.length;n++){t[(a=r[n])-1]=1;}this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);var i={};if(null!=this.sharedAxes)for(var a=1;a<e.length;++a)i[a]=e[a];this.inputSpec=[new InputSpec({ndim:e.length,axes:i})],this.built=!0;},t.prototype.call=function(e,t){return e=getExactlyOneTensor(e),oh(e,this.alpha.read())},t.prototype.getConfig=function(){var t={alphaInitializer:serializeInitializer(this.alphaInitializer),alphaRegularizer:serializeRegularizer(this.alphaRegularizer),alphaConstraint:serializeConstraint(this.alphaConstraint),sharedAxes:this.sharedAxes},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="PReLU",t}(Layer);qd.registerClass(PReLU);var ELU=function(e){function t(t){var n=e.call(this,null==t?{}:t)||this;if(n.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==n.DEFAULT_ALPHA)throw new NotImplementedError("Non-default alpha value ("+t.alpha+") is not supported by the ELU layer yet.");return n.alpha=null==t.alpha?n.DEFAULT_ALPHA:t.alpha,n}return __extends(t,e),t.prototype.call=function(e,t){var n=getExactlyOneTensor(e);return nh(n)},t.prototype.computeOutputShape=function(e){return e},t.prototype.getConfig=function(){var t={alpha:this.alpha},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="ELU",t}(Layer);qd.registerClass(ELU);var ThresholdedReLU=function(e){function t(t){var n=e.call(this,null==t?{}:t)||this;return n.DEFAULT_THETA=1,null==t&&(t={}),n.theta=null==t.theta?n.DEFAULT_THETA:t.theta,n}return __extends(t,e),t.prototype.call=function(e,t){var n=getExactlyOneTensor(e);return n.mul(cast$1(n.greater(this.theta),"float32"))},t.prototype.computeOutputShape=function(e){return e},t.prototype.getConfig=function(){var t={theta:this.theta},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="ThresholdedReLU",t}(Layer);qd.registerClass(ThresholdedReLU);var Softmax$1=function(e){function t(t){var n=e.call(this,null==t?{}:t)||this;return n.DEFAULT_AXIS=1,null==t&&(t={}),n.softmax=(new Softmax).apply,n.axis=null==t.axis?n.DEFAULT_AXIS:t.axis,n}return __extends(t,e),t.prototype.call=function(e,t){var n=getExactlyOneTensor(e);return this.softmax(n,this.axis)},t.prototype.computeOutputShape=function(e){return e},t.prototype.getConfig=function(){var t={axis:this.axis},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Softmax",t}(Layer);function normalizeArray(e,t,n){if("number"==typeof e)return pyListRepeat(e,t);if(e.length!==t)throw new ValueError("The "+n+" argument must be an integer or tuple of "+t+" integers. Received: "+e.length+" elements.");for(var r=0;r<t;++r){var i=e[r];if(!isInteger(i))throw new ValueError("The "+n+" argument must be an integer or tuple of "+t+" integers. Received: "+JSON.stringify(e)+" including a non-integer number "+i)}return e}function convOutputLength(e,t,n,r,i){return void 0===i&&(i=1),null==e?e:(a="same"===n?e:e-(t+(t-1)*(i-1))+1,Math.floor((a+r-1)/r));var a;}function deconvLength(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+max$1$1([n-t,0]);else {if("same"!==r)throw new ValueError("Unsupport padding mode: "+r+".");e*=t;}return e}function preprocessConv2DInput(e,t){return Ze(function(){return checkDataFormat(t),"channelsFirst"===t?ua(e,[0,2,3,1]):e})}function preprocessConv3DInput(e,t){return Ze(function(){return checkDataFormat(t),"channelsFirst"===t?ua(e,[0,2,3,4,1]):e})}function conv1dWithBias(e,t,n,r,i,a,o){return void 0===r&&(r=1),void 0===i&&(i="valid"),void 0===o&&(o=1),Ze(function(){if(null==a&&(a=imageDataFormat()),checkDataFormat(a),3!==e.shape.length)throw new ValueError("The input of a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead.");if(3!==t.shape.length)throw new ValueError("The kernel for a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new ValueError("The bias for a conv1dWithBias operation should be 1, but is "+t.shape.length+" instead");if("channelsFirst"===a&&(e=ua(e,[0,2,1])),"causal"===i)throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");var s=fl(e,t,r,"same"===i?"same":"valid","NWC",o);return null!=n&&(s=biasAdd(s,n)),s})}function conv2dWithBiasActivation(e,t,n,r,i,a,o,s){return void 0===r&&(r=[1,1]),void 0===i&&(i="valid"),void 0===s&&(s=null),Ze(function(){if(null==a&&(a=imageDataFormat()),checkDataFormat(a),3!==e.rank&&4!==e.rank)throw new ValueError("conv2dWithBiasActivation expects input to be of rank 3 or 4, but received "+e.rank+".");if(3!==t.rank&&4!==t.rank)throw new ValueError("conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received "+e.rank+".");var l=preprocessConv2DInput(e,a);if("causal"===i)throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=hf.conv2d({x:l,filter:t,strides:r,pad:"same"===i?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:s}),"channelsFirst"===a&&(l=ua(l,[0,3,1,2])),l})}function conv3dWithBias(e,t,n,r,i,a,o){return void 0===r&&(r=[1,1,1]),void 0===i&&(i="valid"),Ze(function(){if(null==a&&(a=imageDataFormat()),checkDataFormat(a),4!==e.rank&&5!==e.rank)throw new ValueError("conv3dWithBias expects input to be of rank 4 or 5, but received "+e.rank+".");if(4!==t.rank&&5!==t.rank)throw new ValueError("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+e.rank+".");var s=preprocessConv3DInput(e,a);if("causal"===i)throw new NotImplementedError("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return s=pl(s,t,r,"same"===i?"same":"valid","NDHWC",o),null!=n&&(s=biasAdd(s,n)),"channelsFirst"===a&&(s=ua(s,[0,4,1,2,3])),s})}qd.registerClass(Softmax$1);var BaseConv=function(e){function t(n,r){var i=e.call(this,r)||this;if(i.bias=null,i.DEFAULT_KERNEL_INITIALIZER="glorotNormal",i.DEFAULT_BIAS_INITIALIZER="zeros",t.verifyArgs(r),i.rank=n,assertPositiveInteger(i.rank,"rank"),1!==i.rank&&2!==i.rank&&3!==i.rank)throw new NotImplementedError("Convolution layer for rank other than 1, 2, or 3 ("+i.rank+") is not implemented yet.");if(i.kernelSize=normalizeArray(r.kernelSize,n,"kernelSize"),i.strides=normalizeArray(null==r.strides?1:r.strides,n,"strides"),i.padding=null==r.padding?"valid":r.padding,checkPaddingMode(i.padding),i.dataFormat=null==r.dataFormat?"channelsLast":r.dataFormat,checkDataFormat(i.dataFormat),i.activation=getActivation(r.activation),i.useBias=null==r.useBias||r.useBias,i.biasInitializer=getInitializer(r.biasInitializer||i.DEFAULT_BIAS_INITIALIZER),i.biasConstraint=getConstraint(r.biasConstraint),i.biasRegularizer=getRegularizer(r.biasRegularizer),i.activityRegularizer=getRegularizer(r.activityRegularizer),i.dilationRate=normalizeArray(null==r.dilationRate?1:r.dilationRate,n,"dilationRate"),1===i.rank&&Array.isArray(i.dilationRate)&&1!==i.dilationRate.length)throw new ValueError("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(i.dilationRate));if(2===i.rank){if("number"==typeof i.dilationRate)i.dilationRate=[i.dilationRate,i.dilationRate];else if(2!==i.dilationRate.length)throw new ValueError("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(i.dilationRate))}else if(3===i.rank)if("number"==typeof i.dilationRate)i.dilationRate=[i.dilationRate,i.dilationRate,i.dilationRate];else if(3!==i.dilationRate.length)throw new ValueError("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(i.dilationRate));return i}return __extends(t,e),t.verifyArgs=function(e){if(assert("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!checkArrayTypeAndLength(e.kernelSize,"number",1,3))throw new ValueError("BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received "+JSON.stringify(e.kernelSize)+".")},t.prototype.getConfig=function(){var t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:serializeActivation(this.activation),useBias:this.useBias,biasInitializer:serializeInitializer(this.biasInitializer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),biasConstraint:serializeConstraint(this.biasConstraint)},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t}(Layer),Conv=function(e){function t(n,r){var i=e.call(this,n,r)||this;return i.kernel=null,t.verifyArgs(r),i.filters=r.filters,assertPositiveInteger(i.filters,"filters"),i.kernelInitializer=getInitializer(r.kernelInitializer||i.DEFAULT_KERNEL_INITIALIZER),i.kernelConstraint=getConstraint(r.kernelConstraint),i.kernelRegularizer=getRegularizer(r.kernelRegularizer),i}return __extends(t,e),t.prototype.build=function(e){var t;e=getExactlyOneShape(e);var n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new ValueError("The channel dimension of the input should be defined. Found "+e[n]);var r=e[n],i=this.kernelSize.concat([r,this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:(t={},t[n]=r,t)}],this.built=!0;},t.prototype.call=function(e,t){var n=this;return Ze(function(){var t;e=getExactlyOneTensor(e);var r=null==n.bias?null:n.bias.read(),i=mapActivationToFusedKernel(n.activation.getClassName());if(null!=i&&2===n.rank)t=conv2dWithBiasActivation(e,n.kernel.read(),r,n.strides,n.padding,n.dataFormat,n.dilationRate,i);else {if(1===n.rank)t=conv1dWithBias(e,n.kernel.read(),r,n.strides[0],n.padding,n.dataFormat,n.dilationRate[0]);else if(2===n.rank)t=conv2dWithBiasActivation(e,n.kernel.read(),r,n.strides,n.padding,n.dataFormat,n.dilationRate);else {if(3!==n.rank)throw new NotImplementedError("convolutions greater than 3D are not implemented yet.");t=conv3dWithBias(e,n.kernel.read(),r,n.strides,n.padding,n.dataFormat,n.dilationRate);}null!=n.activation&&(t=n.activation.apply(t));}return t})},t.prototype.computeOutputShape=function(e){e=getExactlyOneShape(e);for(var t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2),r=0;r<n.length;++r){var i=convOutputLength(n[r],this.kernelSize[r],this.padding,this.strides[r],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[r]);t.push(i);}var a=[e[0]];return "channelsLast"===this.dataFormat?(a=a.concat(t)).push(this.filters):(a.push(this.filters),a=a.concat(t)),a},t.prototype.getConfig=function(){var t={filters:this.filters,kernelInitializer:serializeInitializer(this.kernelInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint)},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.verifyArgs=function(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new ValueError("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(e.filters))},t}(BaseConv),Conv2D=function(e){function t(n){var r=e.call(this,2,n)||this;return t.verifyArgs(n),r}return __extends(t,e),t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this);return delete t.rank,t},t.verifyArgs=function(e){if("number"!=typeof e.kernelSize&&!checkArrayTypeAndLength(e.kernelSize,"number",1,2))throw new ValueError("Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received "+JSON.stringify(e.kernelSize)+".")},t.className="Conv2D",t}(Conv);qd.registerClass(Conv2D);var Conv3D=function(e){function t(n){var r=e.call(this,3,n)||this;return t.verifyArgs(n),r}return __extends(t,e),t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this);return delete t.rank,t},t.verifyArgs=function(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new ValueError("Conv3D expects config.kernelSize to be number or [number, number, number], but received "+JSON.stringify(e.kernelSize)+".")},t.className="Conv3D",t}(Conv);qd.registerClass(Conv3D);var Conv2DTranspose=function(e){function t(t){var n=e.call(this,t)||this;if(n.inputSpec=[new InputSpec({ndim:4})],"same"!==n.padding&&"valid"!==n.padding)throw new ValueError("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+n.padding);return n}return __extends(t,e),t.prototype.build=function(e){var t;if(4!==(e=getExactlyOneShape(e)).length)throw new ValueError("Input should have rank 4; Received input shape: "+JSON.stringify(e));var n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");var r=e[n],i=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",i,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new InputSpec({ndim:4,axes:(t={},t[n]=r,t)})],this.built=!0;},t.prototype.call=function(e,t){var n=this;return Ze(function(){var t=getExactlyOneTensor(e);if(4!==t.shape.length)throw new ValueError("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+t.shape.length);var r,i,a=t.shape,o=a[0];"channelsFirst"===n.dataFormat?(r=2,i=3):(r=1,i=2);var s=a[r],l=a[i],u=n.kernelSize[0],c=n.kernelSize[1],p=n.strides[0],h=n.strides[1],d=[o,deconvLength(s,p,u,n.padding),deconvLength(l,h,c,n.padding),n.filters];"channelsLast"!==n.dataFormat&&(t=ua(t,[0,2,3,1]));var f=wl(t,n.kernel.read(),d,n.strides,n.padding);return "channelsLast"!==n.dataFormat&&(f=ua(f,[0,3,1,2])),null!=n.bias&&(f=biasAdd(f,n.bias.read(),n.dataFormat)),null!=n.activation&&(f=n.activation.apply(f)),f})},t.prototype.computeOutputShape=function(e){var t,n,r,i=(e=getExactlyOneShape(e)).slice();"channelsFirst"===this.dataFormat?(t=1,n=2,r=3):(t=3,n=1,r=2);var a=this.kernelSize[0],o=this.kernelSize[1],s=this.strides[0],l=this.strides[1];return i[t]=this.filters,i[n]=deconvLength(i[n],s,a,this.padding),i[r]=deconvLength(i[r],l,o,this.padding),i},t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this);return delete t.dilationRate,t},t.className="Conv2DTranspose",t}(Conv2D);qd.registerClass(Conv2DTranspose);var SeparableConv=function(e){function t(t,n){var r=e.call(this,t,n)||this;if(r.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",r.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",r.depthwiseKernel=null,r.pointwiseKernel=null,null==n.filters)throw new ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=n.kernelInitializer||null!=n.kernelRegularizer||null!=n.kernelConstraint)throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=n.padding&&"same"!==n.padding&&"valid"!==n.padding)throw new ValueError("SeparableConv"+r.rank+"D supports only padding modes: 'same' and 'valid', but received "+JSON.stringify(n.padding));return r.depthMultiplier=null==n.depthMultiplier?1:n.depthMultiplier,r.depthwiseInitializer=getInitializer(n.depthwiseInitializer||r.DEFAULT_DEPTHWISE_INITIALIZER),r.depthwiseRegularizer=getRegularizer(n.depthwiseRegularizer),r.depthwiseConstraint=getConstraint(n.depthwiseConstraint),r.pointwiseInitializer=getInitializer(n.depthwiseInitializer||r.DEFAULT_POINTWISE_INITIALIZER),r.pointwiseRegularizer=getRegularizer(n.pointwiseRegularizer),r.pointwiseConstraint=getConstraint(n.pointwiseConstraint),r}return __extends(t,e),t.prototype.build=function(e){var t;if((e=getExactlyOneShape(e)).length<this.rank+2)throw new ValueError("Inputs to SeparableConv"+this.rank+"D should have rank "+(this.rank+2)+", but received input shape: "+JSON.stringify(e));var n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n]||e[n]<0)throw new ValueError("The channel dimension of the inputs should be defined, but found "+JSON.stringify(e[n]));for(var r=e[n],i=this.kernelSize.concat([r,this.depthMultiplier]),a=[],o=0;o<this.rank;++o)a.push(1);a.push(r*this.depthMultiplier,this.filters);this.depthwiseKernel=this.addWeight("depthwise_kernel",i,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new InputSpec({ndim:this.rank+2,axes:(t={},t[n]=r,t)})],this.built=!0;},t.prototype.call=function(e,t){var n=this;return Ze(function(){var t;if(e=getExactlyOneTensor(e),1===n.rank)throw new NotImplementedError("1D separable convolution is not implemented yet.");return 2===n.rank&&("channelsFirst"===n.dataFormat&&(e=ua(e,[0,2,3,1])),t=bl(e,n.depthwiseKernel.read(),n.pointwiseKernel.read(),n.strides,n.padding,n.dilationRate,"NHWC")),n.useBias&&(t=biasAdd(t,n.bias.read(),n.dataFormat)),null!=n.activation&&(t=n.activation.apply(t)),"channelsFirst"===n.dataFormat&&(t=ua(t,[0,3,1,2])),t})},t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this);return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),t.pointwiseInitializer=serializeInitializer(this.pointwiseInitializer),t.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),t.pointwiseRegularizer=serializeRegularizer(this.pointwiseRegularizer),t.depthwiseConstraint=serializeConstraint(this.depthwiseConstraint),t.pointwiseConstraint=serializeConstraint(this.pointwiseConstraint),t},t.className="SeparableConv",t}(Conv),SeparableConv2D=function(e){function t(t){return e.call(this,2,t)||this}return __extends(t,e),t.className="SeparableConv2D",t}(SeparableConv);qd.registerClass(SeparableConv2D);var Conv1D=function(e){function t(n){var r=e.call(this,1,n)||this;return t.verifyArgs(n),r.inputSpec=[{ndim:3}],r}return __extends(t,e),t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this);return delete t.rank,delete t.dataFormat,t},t.verifyArgs=function(e){if("number"!=typeof e.kernelSize&&!checkArrayTypeAndLength(e.kernelSize,"number",1,1))throw new ValueError("Conv1D expects config.kernelSize to be number or number[] with length 1, but received "+JSON.stringify(e.kernelSize)+".")},t.className="Conv1D",t}(Conv);qd.registerClass(Conv1D);var Cropping2D=function(e){function t(t){var n=e.call(this,t)||this;return "number"==typeof t.cropping?n.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?n.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:n.cropping=t.cropping,n.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,n.inputSpec=[{ndim:4}],n}return __extends(t,e),t.prototype.computeOutputShape=function(e){return "channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]},t.prototype.call=function(e,t){var n=this;return Ze(function(){return e=getExactlyOneTensor(e),"channelsLast"===n.dataFormat?sliceAlongAxis(sliceAlongAxis(e,n.cropping[0][0],e.shape[1]-n.cropping[0][0]-n.cropping[0][1],2),n.cropping[1][0],e.shape[2]-n.cropping[1][1]-n.cropping[1][0],3):sliceAlongAxis(sliceAlongAxis(e,n.cropping[0][0],e.shape[2]-n.cropping[0][0]-n.cropping[0][1],3),n.cropping[1][0],e.shape[3]-n.cropping[1][1]-n.cropping[1][0],4)})},t.prototype.getConfig=function(){var t={cropping:this.cropping,dataFormat:this.dataFormat},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Cropping2D",t}(Layer);qd.registerClass(Cropping2D);var UpSampling2D=function(e){function t(t){var n=e.call(this,t)||this;return n.DEFAULT_SIZE=[2,2],n.inputSpec=[{ndim:4}],n.size=null==t.size?n.DEFAULT_SIZE:t.size,n.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,n}return __extends(t,e),t.prototype.computeOutputShape=function(e){if("channelsFirst"===this.dataFormat){var t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return [e[0],e[1],t,n]}t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return [e[0],t,n,e[3]]},t.prototype.call=function(e,t){var n=this;return Ze(function(){var t=getExactlyOneTensor(e),r=t.shape;if("channelsFirst"===n.dataFormat){t=ua(t,[0,2,3,1]);var i=n.size[0]*r[2],a=n.size[1]*r[3],o=t.resizeNearestNeighbor([i,a]);return ua(o,[0,3,1,2])}i=n.size[0]*r[1],a=n.size[1]*r[2];return t.resizeNearestNeighbor([i,a])})},t.prototype.getConfig=function(){var t={size:this.size,dataFormat:this.dataFormat},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="UpSampling2D",t}(Layer);function depthwiseConv2d$1(e,t,n,r,i,a){return void 0===n&&(n=[1,1]),void 0===r&&(r="valid"),Ze(function(){null==i&&(i=imageDataFormat()),checkDataFormat(i);var o=preprocessConv2DInput(e,i);if(4!==e.rank)throw new ValueError("Input for depthwiseConv2d is required to be 4-D, but is instead "+e.rank+"-D");if(4!==t.rank)throw new ValueError("depthwiseKernel is required to be 4-D, but is instead "+t.rank+"-D");return o=ml(o,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===i&&(o=ua(o,[0,3,1,2])),o})}qd.registerClass(UpSampling2D);var DepthwiseConv2D=function(e){function t(t){var n=e.call(this,2,t)||this;return n.depthwiseKernel=null,n.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,n.depthwiseInitializer=getInitializer(t.depthwiseInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.depthwiseConstraint=getConstraint(t.depthwiseConstraint),n.depthwiseRegularizer=getRegularizer(t.depthwiseRegularizer),n}return __extends(t,e),t.prototype.build=function(e){if((e=getExactlyOneShape(e)).length<4)throw new ValueError("Inputs to DepthwiseConv2D should have rank 4. Received input shape: "+JSON.stringify(e)+".");var t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new ValueError("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not ("+e[t]+").");var n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0;},t.prototype.call=function(e,t){var n=this;return Ze(function(){var t=depthwiseConv2d$1(e=getExactlyOneTensor(e),n.depthwiseKernel.read(),n.strides,n.padding,n.dataFormat,null);return n.useBias&&(t=biasAdd(t,n.bias.read(),n.dataFormat)),null!=n.activation&&(t=n.activation.apply(t)),t})},t.prototype.computeOutputShape=function(e){e=getExactlyOneShape(e);var t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,i=convOutputLength(t,this.kernelSize[0],this.padding,this.strides[0]),a=convOutputLength(n,this.kernelSize[1],this.padding,this.strides[1]);return "channelsFirst"===this.dataFormat?[e[0],r,i,a]:[e[0],i,a,r]},t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this);return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),t.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),t.depthwiseConstraint=serializeConstraint(this.depthwiseRegularizer),t},t.className="DepthwiseConv2D",t}(BaseConv);qd.registerClass(DepthwiseConv2D);var Dropout=function(e){function t(t){var n=e.call(this,t)||this;return n.rate=Math.max(Math.min(t.rate,1),0),n.noiseShape=t.noiseShape,n.seed=t.seed,n.supportsMasking=!0,n}return __extends(t,e),t.prototype.getNoiseShape=function(e){if(null==this.noiseShape)return this.noiseShape;for(var t=e.shape,n=[],r=0;r<this.noiseShape.length;++r)n.push(null==this.noiseShape[r]?t[r]:this.noiseShape[r]);return n},t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t);var r=getExactlyOneTensor(e);if(0<n.rate&&n.rate<1){var i=null!=t.training&&t.training,a=n.getNoiseShape(r);return inTrainPhase(function(){return dropout$1(r,n.rate,a,n.seed)},function(){return r},i)}return e})},t.prototype.getConfig=function(){var t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.prototype.dispose=function(){return e.prototype.dispose.call(this)},t.className="Dropout",t}(Layer);qd.registerClass(Dropout);var SpatialDropout1D=function(e){function t(t){var n=e.call(this,t)||this;return n.inputSpec=[{ndim:3}],n}return __extends(t,e),t.prototype.getNoiseShape=function(e){var t=e.shape;return [t[0],1,t[2]]},t.className="SpatialDropout1D",t}(Dropout);qd.registerClass(SpatialDropout1D);var Dense=function(e){function t(t){var n=e.call(this,t)||this;if(n.activation=null,n.useBias=!0,n.kernel=null,n.bias=null,n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){var r=null;null!=t.batchSize&&(r=t.batchSize),n.batchInputShape=[r,t.inputDim];}return n.units=t.units,assertPositiveInteger(n.units,"units"),n.activation=getActivation(t.activation),null!=t.useBias&&(n.useBias=t.useBias),n.kernelInitializer=getInitializer(t.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.biasInitializer=getInitializer(t.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelConstraint=getConstraint(t.kernelConstraint),n.biasConstraint=getConstraint(t.biasConstraint),n.kernelRegularizer=getRegularizer(t.kernelRegularizer),n.biasRegularizer=getRegularizer(t.biasRegularizer),n.activityRegularizer=getRegularizer(t.activityRegularizer),n.supportsMasking=!0,n.inputSpec=[{minNDim:2}],n}return __extends(t,e),t.prototype.build=function(e){var t,n=(e=getExactlyOneShape(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[n,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:(t={},t[-1]=n,t)}],this.built=!0;},t.prototype.computeOutputShape=function(e){var t=(e=getExactlyOneShape(e)).slice();return t[t.length-1]=this.units,t},t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t);var r,i=getExactlyOneTensor(e),a=mapActivationToFusedKernel(n.activation.getClassName());return null!=a?r=dot(i,n.kernel.read(),a,n.bias?n.bias.read():null):(r=dot(i,n.kernel.read()),null!=n.bias&&(r=biasAdd(r,n.bias.read())),null!=n.activation&&(r=n.activation.apply(r))),r})},t.prototype.getConfig=function(){var t={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),biasConstraint:serializeConstraint(this.biasConstraint)},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Dense",t}(Layer);qd.registerClass(Dense);var Flatten=function(e){function t(t){var n=this;return t=t||{},(n=e.call(this,t)||this).inputSpec=[{minNDim:3}],n.dataFormat=t.dataFormat,n}return __extends(t,e),t.prototype.computeOutputShape=function(e){for(var t=0,n=(e=getExactlyOneShape(e)).slice(1);t<n.length;t++){if(null==n[t])throw new ValueError('The shape of the input to "Flatten" is not fully defined (got '+e.slice(1)+'). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.')}return [e[0],arrayProd(e,1)]},t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t);var r=getExactlyOneTensor(e);if("channelsFirst"===n.dataFormat&&r.rank>1){for(var i=[0],a=2;a<r.rank;++a)i.push(a);i.push(1),r=r.transpose(i);}return batchFlatten(r)})},t.prototype.getConfig=function(){var t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);var n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Flatten",t}(Layer);qd.registerClass(Flatten);var Activation$1=function(e){function t(t){var n=e.call(this,t)||this;return n.supportsMasking=!0,n.activation=getActivation(t.activation),n}return __extends(t,e),t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t);var r=getExactlyOneTensor(e);return n.activation.apply(r)})},t.prototype.getConfig=function(){var t={activation:serializeActivation(this.activation)},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Activation",t}(Layer);qd.registerClass(Activation$1);var RepeatVector=function(e){function t(t){var n=e.call(this,t)||this;return n.n=t.n,n.inputSpec=[{ndim:2}],n}return __extends(t,e),t.prototype.computeOutputShape=function(e){return [e[0],this.n,e[1]]},t.prototype.call=function(e,t){var n=this;return Ze(function(){return repeat(e=getExactlyOneTensor(e),n.n)})},t.prototype.getConfig=function(){var t={n:this.n},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="RepeatVector",t}(Layer);qd.registerClass(RepeatVector);var Reshape=function(e){function t(t){var n=e.call(this,t)||this;n.targetShape=t.targetShape;for(var r=0;r<n.targetShape.length;++r)n.isUnknown(n.targetShape[r])&&(n.targetShape[r]=null);return n}return __extends(t,e),t.prototype.isUnknown=function(e){return e<0||null==e},t.prototype.fixUnknownDimension=function(e,t){for(var n="Total size of new array must be unchanged.",r=t.slice(),i=1,a=null,o=0;o<r.length;++o){var s=r[o];if(this.isUnknown(s)){if(null!==a)throw new ValueError("Can only specifiy one unknown dimension.");a=o;}else i*=s;}var l=arrayProd(e);if(null!==a){if(0===i||l%i!=0)throw new ValueError(n);r[a]=l/i;}else if(l!==i)throw new ValueError(n);return r},t.prototype.computeOutputShape=function(e){for(var t=!1,n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))},t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t);var r=getExactlyOneTensor(e),i=r.shape,a=i.slice(0,1).concat(n.fixUnknownDimension(i.slice(1),n.targetShape));return r.reshape(a)})},t.prototype.getConfig=function(){var t={targetShape:this.targetShape},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Reshape",t}(Layer);qd.registerClass(Reshape);var Permute=function(e){function t(t){var n=e.call(this,t)||this;if(null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");var r=range$1(1,t.dims.length+1);if(!st.arraysEqual(t.dims.slice().sort(),r))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");return n.dims=t.dims,n.dimsIncludingBatch=[0].concat(n.dims),n.inputSpec=[new InputSpec({ndim:n.dims.length+1})],n}return __extends(t,e),t.prototype.computeOutputShape=function(e){var t=(e=getExactlyOneShape(e)).slice();return this.dims.forEach(function(n,r){t[r+1]=e[n];}),t},t.prototype.call=function(e,t){return ua(getExactlyOneTensor(e),this.dimsIncludingBatch)},t.prototype.getConfig=function(){var t={dims:this.dims},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Permute",t}(Layer);qd.registerClass(Permute);var Masking=function(e){function t(t){var n=e.call(this,null==t?{}:t)||this;return n.supportsMasking=!0,n.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0,n}return __extends(t,e),t.prototype.computeOutputShape=function(e){return e},t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this),n={maskValue:this.maskValue};return Object.assign(n,t),n},t.prototype.computeMask=function(e,t){var n=getExactlyOneTensor(e);return Kl(nl(n,this.maskValue),-1)},t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t);var r=getExactlyOneTensor(e),i=Kl(nl(r,n.maskValue),-1,!0);return r.mul(i.asType(r.dtype))})},t.className="Masking",t}(Layer);qd.registerClass(Masking);var Embedding=function(e){function t(t){var n=e.call(this,t)||this;if(n.embeddings=null,n.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){var r=null;null!=t.batchSize&&(r=t.batchSize),null==t.inputLength?n.batchInputShape=[r,null]:n.batchInputShape=[r].concat(toList(t.inputLength));}return n.inputDim=t.inputDim,assertPositiveInteger(n.inputDim,"inputDim"),n.outputDim=t.outputDim,assertPositiveInteger(n.outputDim,"outputDim"),n.embeddingsInitializer=getInitializer(t.embeddingsInitializer||n.DEFAULT_EMBEDDINGS_INITIALIZER),n.embeddingsRegularizer=getRegularizer(t.embeddingsRegularizer),n.activityRegularizer=getRegularizer(t.activityRegularizer),n.embeddingsConstraint=getConstraint(t.embeddingsConstraint),n.maskZero=t.maskZero,n.supportsMasking=t.maskZero,n.inputLength=t.inputLength,n}return __extends(t,e),t.prototype.build=function(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0;},t.prototype.warnOnIncompatibleInputShape=function(e){},t.prototype.computeMask=function(e,t){var n=this;return Ze(function(){return n.maskZero?(e=getExactlyOneTensor(e),nl(e,Xn(e))):null})},t.prototype.computeOutputShape=function(e){if(e=getExactlyOneShape(e),null==this.inputLength)return e.concat([this.outputDim]);var t=toList(this.inputLength);if(t.length!==e.length-1)throw new ValueError('"inputLength" is '+this.inputLength+", but received input shape has shape "+e);for(var n=0,r=0;r<t.length;++r){var i=t[r],a=e[r+1];if(null!=i&&null!=a&&i!==a)throw new ValueError('"inputLength" is '+this.inputLength+", but received input shape has shape "+e);null==i&&(t[n]=a),n++;}return [e[0]].concat(t,[this.outputDim])},t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t);var r=getExactlyOneTensor(e);return "int32"!==r.dtype&&(r=cast$1(r,"int32")),gather$1(n.embeddings.read(),r.as1D()).reshape(getExactlyOneShape(n.computeOutputShape(r.shape)))})},t.prototype.getConfig=function(){var t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:serializeInitializer(this.embeddingsInitializer),embeddingsRegularizer:serializeRegularizer(this.embeddingsRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),embeddingsConstraint:serializeConstraint(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Embedding",t}(Layer);qd.registerClass(Embedding);var Merge=function(e){function t(t){var n=e.call(this,t||{})||this;return n.supportsMasking=!0,n}return __extends(t,e),t.prototype.mergeFunction=function(e){throw new NotImplementedError},t.prototype.computeElementwiseOpOutputShape=function(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;for(var n=e.slice(0,e.length-t.length),r=0;r<t.length;++r){var i=e[e.length-t.length+r],a=t[r];if(null==i||null==a||i<0||a<0)n.push(null);else if(1===i)n.push(a);else if(1===a)n.push(i);else {if(i!==a)throw new ValueError("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(i);}}return n},t.prototype.build=function(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[getExactlyOneShape(e)]),(e=e).length<2)throw new ValueError("A merge layer should be called on an Array of at least 2 inputs. Got "+e.length+" input(s).");for(var t=[],n=0,r=e;n<r.length;n++){null!=(o=r[n])&&null!==o[0]&&t.push(o[0]);}if((t=unique(t)).length>1)throw new ValueError("Can not merge tensors with different batch sizes. Got tensors with shapes: "+JSON.stringify(e)+".");for(var i=null==e[0]?null:e[0].slice(1),a=1;a<e.length;++a){var o=null==e[a]?null:e[a].slice(1);i=this.computeElementwiseOpOutputShape(i,o);}var s=e.map(function(e){return e.length});-1===e.indexOf(null)&&1===unique(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0;},t.prototype.call=function(e,t){var n=this;return Ze(function(){if(e=e,n.reshapeRequired){var t=[],r=e.map(function(e){return e.rank});if(-1===r.indexOf(null)){for(var i=max$1$1(r),a=0,o=e;a<o.length;a++){for(var s=(h=o[a]).rank,l=0;l<i-s;++l)h=expandDims$1(h,1);t.push(h);}return n.mergeFunction(t)}for(var u=!1,c=0,p=e;c<p.length;c++){var h;if(null==(s=(h=p[c]).rank)){var d=h.shape,f=d[0],g=d.slice(1).concat([f]),m=h.reshape([f].concat(arrayProd(d.slice(1))));m=(m=ua(m,[1,0])).reshape(g),t.push(m),u=!0;}else if(s>1){var y=range$1(1,s).concat([0]);t.push(ua(h,y)),u=!0;}else t.push(h);}var v=n.mergeFunction(t),b=v.rank;if(u)if(null==b){var w=v.shape;g=[f=w[w.length-1]].concat(w.slice(0,w.length-1));v=ua(v.reshape([-1,f]),[1,0]).reshape(g);}else if(b>1){y=[b-1].concat(range$1(0,b-1));v=ua(v,y);}return v}return n.mergeFunction(e)})},t.prototype.computeOutputShape=function(e){var t;t=null==(e=e)[0]?null:e[0].slice(1);for(var n=1;n<e.length;++n){var r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r);}for(var i=[],a=0,o=e;a<o.length;a++){null!=(r=o[a])&&null!==r[0]&&i.push(r[0]);}return t=1===(i=unique(i)).length?i.concat(t):[null].concat(t)},t.prototype.computeMask=function(e,t){return Ze(function(){if(null==t)return null;if(!Array.isArray(t))throw new ValueError("`mask` should be an Array");if(!Array.isArray(e))throw new ValueError("`inputs` should be an Array");if(t.length!==e.length)throw new ValueError("The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths ("+e.length+" vs "+t.length+")");if(t.every(function(e){return null==e}))return null;for(var n=(t=t.map(function(e){return null==e?e:sr(e,0)}))[0],r=1;r<t.length-1;++r)n=pc(n,t[r]);return n})},t}(Layer),Add=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.mergeFunction=function(e){return Ze(function(){for(var t=e[0].clone(),n=1;n<e.length;++n)t=Or(t,e[n]);return t})},t.className="Add",t}(Merge);qd.registerClass(Add);var Multiply=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.mergeFunction=function(e){return Ze(function(){for(var t=e[0].clone(),n=1;n<e.length;++n)t=To(t,e[n]);return t})},t.className="Multiply",t}(Merge);qd.registerClass(Multiply);var Average=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.mergeFunction=function(e){return Ze(function(){for(var t=e[0].clone(),n=1;n<e.length;++n)t=Or(t,e[n]);return To(1/e.length,t)})},t.className="Average",t}(Merge);qd.registerClass(Average);var Maximum=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.mergeFunction=function(e){return Ze(function(){for(var t=e[0],n=1;n<e.length;++n)t=Eo(t,e[n]);return t})},t.className="Maximum",t}(Merge);qd.registerClass(Maximum);var Minimum=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.mergeFunction=function(e){return Ze(function(){for(var t=e[0],n=1;n<e.length;++n)t=Io(t,e[n]);return t})},t.className="Minimum",t}(Merge);qd.registerClass(Minimum);var Concatenate=function(e){function t(t){var n=e.call(this,t)||this;return n.DEFAULT_AXIS=-1,null==t&&(t={}),n.axis=null==t.axis?n.DEFAULT_AXIS:t.axis,n.supportsMasking=!0,n.reshapeRequired=!1,n}return __extends(t,e),t.prototype.build=function(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");for(var t=!0,n=0,r=e=e;n<r.length;n++){if(null!=(c=r[n])){t=!1;break}}if(!t){for(var i=[],a=0;a<e.length;++a){var o=e[a].slice();o.splice(this.axis,1);for(var s=!1,l=0,u=i;l<u.length;l++){var c=u[l];if(st.arraysEqual(c,o)){s=!0;break}}s||i.push(o);}if(i.length>1)throw new ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}},t.prototype.mergeFunction=function(e){var t=this;return Ze(function(){return concatenate(e,t.axis)})},t.prototype.computeOutputShape=function(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new ValueError("A `Concatenate` layer should be called on a list of inputs.");for(var t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis,i=0,a=t.slice(1);i<a.length;i++){var o=a[i];if(null==n[r]||null==o[r]){n[r]=null;break}n[r]+=o[r];}return n},t.prototype.computeMask=function(e,t){var n=this;if(null==t)return null;if(!Array.isArray(t))throw new ValueError("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new ValueError("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new ValueError("Mismatch in the length of mask ("+t.length+") and the legnth of inputs ("+e.length+")");return Ze(function(){var r=!0;if(t.forEach(function(e){null==e||(r=!1);}),r)return null;for(var i=[],a=0;a<e.length;++a)null==t[a]?i.push(jn(e[a]).asType("bool")):t[a].rank<e[a].rank?i.push(sr(t[a],-1)):i.push(t[a]);var o=Yn(i,n.axis);return ql(o,-1,!1)})},t.prototype.getConfig=function(){var t={axis:this.axis},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Concatenate",t}(Merge);function interpretAxis(e,t){for(;e<0;)e+=t;return e}function batchDot(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new NotImplementedError("batchDot is not implemented for tensors of 4D or higher rank yet");if(st.assert(e.shape.length>=2,function(){return "batchDot requires the rank of x to be >= 2, but got "+e.shape.length}),st.assert(e.shape.length>=2,function(){return "batchDot requires the rank of y to be >= 2, but got "+t.shape.length}),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new NotImplementedError("batchDot is not implemented for complex64-type Tensors yet.");var r=e.shape.length,i=t.shape.length;null==n&&(n=[r-1,i-2]);var a=n;return Ze(function(){var n,o;if(r>i){n=r-i;for(var s=[],l=0;l<n;++l)s.push(1);t=t.reshape(t.shape.concat(s));}else if(i>r){n=i-r;for(s=[],l=0;l<n;++l)s.push(1);e=e.reshape(e.shape.concat(s));}else n=0;if(2===e.shape.length&&2===t.shape.length)o=a[0]===a[1]?e.mulStrict(t).sum(a[0]):e.transpose([1,0]).mulStrict(t).sum(a[1]);else {var u=a[0]!==e.shape.length-1,c=a[1]===t.shape.length-1;o=e.matMul(t,u,c);}if(n>0){var p=void 0,h=[];for(l=p=r>i?r+i-3:r-1;l<p+n;++l)h.push(l);o=o.squeeze(h);}return 1===o.shape.length&&(o=o.expandDims(1)),o})}qd.registerClass(Concatenate);var Dot=function(e){function t(t){var n=e.call(this,t)||this;return n.axes=t.axes,n.normalize=null!=t.normalize&&t.normalize,n.supportsMasking=!0,n.reshapeRequired=!1,n}return __extends(t,e),t.prototype.build=function(e){st.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),function(){return "A `Dot` layer should be called on a list of exactly 2 inputs."});var t=e[0],n=e[1];if(t.length>3||n.length>3)throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");var r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new ValueError("Dimension incompatibility: "+t[r[0]]+" !== "+n[r[1]])},t.prototype.mergeFunction=function(e){if(2!==e.length)throw new ValueError("A `Dot` layer must be called on exactly 2 inputs, but received "+e.length+" input(s).");var t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(function(t,n){return interpretAxis(t,e[n].shape.length)}):[interpretAxis(this.axes,n.shape.length),interpretAxis(this.axes,r.shape.length)],this.normalize&&(n=l2Normalize(n,t[0]),r=l2Normalize(r,t[1])),batchDot(n,r,t)},t.prototype.interpretAxes=function(e,t){return Array.isArray(this.axes)?this.axes:[interpretAxis(this.axes,e.length),interpretAxis(this.axes,t.length)]},t.prototype.computeOutputShape=function(e){st.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),function(){return "A `Dot` layer should be called on a list of exactly 2 inputs."});var t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");var r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);var i=t.concat(n);return 1===i.length&&i.push(1),i},t.prototype.computeMask=function(e,t){return null},t.prototype.getConfig=function(){var t={axes:this.axes,normalize:this.normalize},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="Dot",t}(Merge);qd.registerClass(Dot);var GaussianNoise=function(e){function t(t){var n=e.call(this,t)||this;return n.supportsMasking=!0,n.stddev=t.stddev,n}return __extends(t,e),t.prototype.computeOutputShape=function(e){return e},t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this),n={stddev:this.stddev};return Object.assign(n,t),n},t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t);var r=getExactlyOneTensor(e);return inTrainPhase(function(){return randomNormal$1(r.shape,0,n.stddev).add(r)},function(){return r},t.training||!1)})},t.className="GaussianNoise",t}(Layer);qd.registerClass(GaussianNoise);var GaussianDropout=function(e){function t(t){var n=e.call(this,t)||this;return n.supportsMasking=!0,n.rate=t.rate,n}return __extends(t,e),t.prototype.computeOutputShape=function(e){return e},t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this),n={rate:this.rate};return Object.assign(n,t),n},t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t);var r=getExactlyOneTensor(e);if(n.rate>0&&n.rate<1){return inTrainPhase(function(){var e=Math.sqrt(n.rate/(1-n.rate));return r.mul(randomNormal$1(r.shape,1,e))},function(){return r},t.training||!1)}return r})},t.className="GaussianDropout",t}(Layer);qd.registerClass(GaussianDropout);var AlphaDropout=function(e){function t(t){var n=e.call(this,t)||this;return n.supportsMasking=!0,n.rate=t.rate,n.noiseShape=t.noiseShape,n}return __extends(t,e),t.prototype._getNoiseShape=function(e){return this.noiseShape||getExactlyOneTensor(e).shape},t.prototype.computeOutputShape=function(e){return e},t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this),n={rate:this.rate};return Object.assign(n,t),n},t.prototype.call=function(e,t){var n=this;return Ze(function(){if(n.rate<1&&n.rate>0){var r=n._getNoiseShape(e);return inTrainPhase(function(){var t=getExactlyOneTensor(e),i=-1.7580993408473766,a=Yc(zc(r),n.rate);a=cast$1(a,"float32");var o=Math.pow((1-n.rate)*(1+n.rate*Math.pow(i,2)),-.5),s=-o*i*n.rate;return t.mul(a).add(a.add(-1).mul(i)).mul(o).add(s)},function(){return getExactlyOneTensor(e)},t.training||!1)}return e})},t.className="AlphaDropout",t}(Layer);function batchNormalization(e,t,n,r,i,a){var o;if(void 0===a&&(a=.001),2===e.rank)o=ac(e,t,n,r,i,a);else if(3===e.rank)o=uc(e,t,n,r,i,a);else {if(4!==e.rank)throw new NotImplementedError("batchNormalization is not implemented for array of rank "+e.rank+" yet");o=hc(e,t,n,r,i,a);}return o}function regularNormalizeBatchInTraining(e,t,n,r,i){return void 0===i&&(i=.001),Ze(function(){var a=Zl(e,r),o=a.mean,s=a.variance;return [batchNormalization(e,o,s,n,t,i),o,s]})}function broadcastNormalizeBatchInTraining(e,t,n,r,i){return void 0===i&&(i=.001),Ze(function(){for(var a=Zl(e,r),o=a.mean,s=a.variance,l=[],u=0,c=range$1(0,e.rank);u<c.length;u++){var p=c[u];-1!==r.indexOf(p)?l.push(1):l.push(e.shape[p]);}var h=o.reshape(l),d=s.reshape(l),f=null==t?null:t.reshape(l),g=null==n?null:n.reshape(l);return [batchNormalization(e,h,d,g,f,i),o,s]})}function normalizeBatchInTraining(e,t,n,r,i){return void 0===i&&(i=.001),st.arraysEqual(r.slice().sort(),range$1(0,e.rank-1))?regularNormalizeBatchInTraining(e,t,n,r,i):broadcastNormalizeBatchInTraining(e,t,n,r,i)}qd.registerClass(AlphaDropout);var BatchNormalization=function(e){function t(t){var n=this;return null==t&&(t={}),(n=e.call(this,t)||this).supportsMasking=!0,n.axis=null==t.axis?-1:t.axis,n.momentum=null==t.momentum?.99:t.momentum,n.epsilon=null==t.epsilon?.001:t.epsilon,n.center=null==t.center||t.center,n.scale=null==t.scale||t.scale,n.betaInitializer=getInitializer(t.betaInitializer||"zeros"),n.gammaInitializer=getInitializer(t.gammaInitializer||"ones"),n.movingMeanInitializer=getInitializer(t.movingMeanInitializer||"zeros"),n.movingVarianceInitializer=getInitializer(t.movingVarianceInitializer||"ones"),n.betaConstraint=getConstraint(t.betaConstraint),n.gammaConstraint=getConstraint(t.gammaConstraint),n.betaRegularizer=getRegularizer(t.betaRegularizer),n.gammaRegularizer=getRegularizer(t.gammaRegularizer),n}return __extends(t,e),t.prototype.build=function(e){var t;e=getExactlyOneShape(e);var n=this.axis>=0?this.axis:this.axis+e.length,r=e[n];if(null==r)throw new ValueError("Axis "+n+" of input tensor should have a defined dimension but the layer received an input with shape "+JSON.stringify(e)+".");this.inputSpec=[new InputSpec({ndim:e.length,axes:(t={},t[n]=r,t)})];var i=[r];this.scale&&(this.gamma=this.addWeight("gamma",i,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",i,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",i,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",i,null,this.movingVarianceInitializer,null,!1),this.built=!0;},t.prototype.call=function(e,t){var n=this;return Ze(function(){var r=null!=t.training&&t.training,i=getExactlyOneTensor(e),a=i.shape,o=a.length,s=range$1(0,o),l=n.axis>=0?n.axis:n.axis+o;s.splice(l,1);var u=pyListRepeat(1,o);u[l]=a[l];var c=s.slice();c.sort();var p=!st.arraysEqual(c,range$1(0,o).slice(0,o-1));if(!r)return function(){if(p){var e=n.movingMean.read().reshape(u),t=n.movingVariance.read().reshape(u),r=n.center?n.beta.read().reshape(u):null,a=n.scale?n.gamma.read().reshape(u):null;return batchNormalization(i,e,t,r,a,n.epsilon)}return batchNormalization(i,n.movingMean.read(),n.movingVariance.read(),null==n.beta?null:n.beta.read(),null==n.gamma?null:n.gamma.read(),n.epsilon)}();var h=normalizeBatchInTraining(i,n.gamma.read(),n.beta.read(),s,n.epsilon),d=h[0],f=h[1],g=h[2],m=function(e,t,n){Ze(function(){var r=1-n,i=e.read(),a=i.sub(t).mul(r);e.write(i.sub(a));});};return m(n.movingMean,f,n.momentum),m(n.movingVariance,g,n.momentum),d})},t.prototype.getConfig=function(){var t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),movingMeanInitializer:serializeInitializer(this.movingMeanInitializer),movingVarianceInitializer:serializeInitializer(this.movingVarianceInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer),betaConstraint:serializeConstraint(this.betaConstraint),gammaConstraint:serializeConstraint(this.gammaConstraint)},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="BatchNormalization",t}(Layer);qd.registerClass(BatchNormalization);var LayerNormalization=function(e){function t(t){var n=this;if(null==t&&(t={}),(n=e.call(this,t)||this).axis=null==t.axis?-1:t.axis,"number"==typeof n.axis){if(!Number.isInteger(n.axis))throw new Error("Expected axis to be an integer, but received "+n.axis)}else {if(!Array.isArray(n.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(n.axis));for(var r=0,i=n.axis;r<i.length;r++){var a=i[r];if(!Number.isInteger(a))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(n.axis))}}return n.epsilon=null==t.epsilon?.001:t.epsilon,n.center=null==t.center||t.center,n.scale=null==t.scale||t.scale,n.betaInitializer=getInitializer(t.betaInitializer||"zeros"),n.gammaInitializer=getInitializer(t.gammaInitializer||"ones"),n.betaRegularizer=getRegularizer(t.betaRegularizer),n.gammaRegularizer=getRegularizer(t.gammaRegularizer),n.supportsMasking=!0,n}return __extends(t,e),t.prototype.build=function(e){var t=(e=getExactlyOneShape(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(var n=0;n<this.axis.length;++n)this.axis[n]<0&&(this.axis[n]+=t);for(var r=0,i=this.axis;r<i.length;r++){var a=i[r];if(a<0||a>=t)throw new Error("Invalid axis: "+a)}if(this.axis.length!==unique(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);var o=this.axis.map(function(t){return e[t]});this.scale?this.gamma=this.addWeight("gamma",o,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",o,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0;},t.prototype.call=function(e,t){var n=this,r=getExactlyOneTensor(e),i=r.shape,a=i.length;return Ze(function(){for(var e=Zl(r,n.axis,!0),t=e.mean,o=e.variance,s=pyListRepeat(1,a),l=0,u=n.axis;l<u.length;l++){var c=u[l];s[c]=i[c];}for(var p=function(e){return null!=e&&e.shape.length!==a&&n.axis!==[a-1]?e.reshape(s):e},h=p(n.gamma.read()),d=p(n.beta.read()),f=[],g=[],m=0;m<a;++m)-1!==n.axis.indexOf(m)?(f.push(i[m]),g.push(1)):(f.push(1),g.push(i[m]));return t=t.tile(f),o=o.tile(f),h=h.tile(g),d=d.tile(g),batchNormalization(r,t,o,d,h,n.epsilon)})},t.prototype.getConfig=function(){var t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:serializeInitializer(this.betaInitializer),gammaInitializer:serializeInitializer(this.gammaInitializer),betaRegularizer:serializeRegularizer(this.betaRegularizer),gammaRegularizer:serializeRegularizer(this.gammaRegularizer)},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="LayerNormalization",t}(Layer);function spatial2dPadding(e,t,n){return Ze(function(){if(4!==e.rank)throw new ValueError("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==n&&(n=imageDataFormat()),"channelsLast"!==n&&"channelsFirst"!==n)throw new ValueError("Unknown data format: "+n+". Supported data formats are 'channelsLast' and 'channelsFirst.");var r;return r="channelsFirst"===n?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],Ic(e,r)})}qd.registerClass(LayerNormalization);var ZeroPadding2D=function(e){function t(t){var n=this;if(null==t&&(t={}),(n=e.call(this,t)||this).dataFormat=null==t.dataFormat?imageDataFormat():t.dataFormat,null==t.padding)n.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)n.padding=[[t.padding,t.padding],[t.padding,t.padding]];else {if(t.padding=t.padding,2!==t.padding.length)throw new ValueError("ZeroPadding2D expects padding to be a length-2 array, but received a length-"+t.padding.length+" array.");var r=void 0,i=void 0;if("number"==typeof t.padding[0])r=[t.padding[0],t.padding[0]],i=[t.padding[1],t.padding[1]];else {if(t.padding=t.padding,2!==t.padding[0].length)throw new ValueError("ZeroPadding2D expects height padding to be a length-2 array, but received a length-"+t.padding[0].length+" array.");if(r=t.padding[0],2!==t.padding[1].length)throw new ValueError("ZeroPadding2D expects width padding to be a length-2 array, but received a length-"+t.padding[1].length+" array.");i=t.padding[1];}n.padding=[r,i];}return n.inputSpec=[new InputSpec({ndim:4})],n}return __extends(t,e),t.prototype.computeOutputShape=function(e){var t,n;return e=getExactlyOneShape(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])},t.prototype.call=function(e,t){var n=this;return Ze(function(){return spatial2dPadding(getExactlyOneTensor(e),n.padding,n.dataFormat)})},t.prototype.getConfig=function(){var t={padding:this.padding,dataFormat:this.dataFormat},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="ZeroPadding2D",t}(Layer);function pool2d(e,t,n,r,i,a){return Ze(function(){var o;checkDataFormat(i),checkPoolMode(a),checkPaddingMode(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==i&&(i=imageDataFormat()),null==a&&(a="max"),e=preprocessConv2DInput(e,i);var s="same"===r?"same":"valid";return o="max"===a?_l(e,t,n,s):Ol(e,t,n,s),"channelsFirst"===i&&(o=ua(o,[0,3,1,2])),o})}function pool3d(e,t,n,r,i,a){return Ze(function(){var o;checkDataFormat(i),checkPoolMode(a),checkPaddingMode(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==i&&(i=imageDataFormat()),null==a&&(a="max"),e=preprocessConv3DInput(e,i);var s="same"===r?"same":"valid";return o="max"===a?Bl(e,t,n,s):Pl(e,t,n,s),"channelsFirst"===i&&(o=ua(o,[0,4,1,2,3])),o})}qd.registerClass(ZeroPadding2D);var Pooling1D=function(e){function t(t){var n=this;if(null==t.poolSize&&(t.poolSize=2),n=e.call(this,t)||this,"number"==typeof t.poolSize)n.poolSize=[t.poolSize];else {if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new ValueError("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));n.poolSize=t.poolSize;}if(assertPositiveInteger(n.poolSize,"poolSize"),null==t.strides)n.strides=n.poolSize;else if("number"==typeof t.strides)n.strides=[t.strides];else {if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new ValueError("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));n.strides=t.strides;}return assertPositiveInteger(n.strides,"strides"),n.padding=null==t.padding?"valid":t.padding,checkPaddingMode(n.padding),n.inputSpec=[new InputSpec({ndim:3})],n}return __extends(t,e),t.prototype.computeOutputShape=function(e){var t=convOutputLength((e=getExactlyOneShape(e))[1],this.poolSize[0],this.padding,this.strides[0]);return [e[0],t,e[2]]},t.prototype.call=function(e,t){var n=this;return Ze(function(){n.invokeCallHook(e,t),e=expandDims$1(getExactlyOneTensor(e),2);var r=n.poolingFunction(getExactlyOneTensor(e),[n.poolSize[0],1],[n.strides[0],1],n.padding,"channelsLast");return lr(r,[2])})},t.prototype.getConfig=function(){var t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t}(Layer),MaxPooling1D=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.poolingFunction=function(e,t,n,r,i){return checkDataFormat(i),checkPaddingMode(r),pool2d(e,t,n,r,i,"max")},t.className="MaxPooling1D",t}(Pooling1D);qd.registerClass(MaxPooling1D);var AveragePooling1D=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.poolingFunction=function(e,t,n,r,i){return checkDataFormat(i),checkPaddingMode(r),pool2d(e,t,n,r,i,"avg")},t.className="AveragePooling1D",t}(Pooling1D);qd.registerClass(AveragePooling1D);var Pooling2D=function(e){function t(t){var n=this;if(null==t.poolSize&&(t.poolSize=[2,2]),(n=e.call(this,t)||this).poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)n.strides=n.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new ValueError("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");n.strides=t.strides;}else n.strides=[t.strides,t.strides];return assertPositiveInteger(n.poolSize,"poolSize"),assertPositiveInteger(n.strides,"strides"),n.padding=null==t.padding?"valid":t.padding,n.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,checkDataFormat(n.dataFormat),checkPaddingMode(n.padding),n.inputSpec=[new InputSpec({ndim:4})],n}return __extends(t,e),t.prototype.computeOutputShape=function(e){e=getExactlyOneShape(e);var t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=convOutputLength(t,this.poolSize[0],this.padding,this.strides[0]),n=convOutputLength(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]},t.prototype.call=function(e,t){var n=this;return Ze(function(){return n.invokeCallHook(e,t),n.poolingFunction(getExactlyOneTensor(e),n.poolSize,n.strides,n.padding,n.dataFormat)})},t.prototype.getConfig=function(){var t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t}(Layer),MaxPooling2D=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.poolingFunction=function(e,t,n,r,i){return checkDataFormat(i),checkPaddingMode(r),pool2d(e,t,n,r,i,"max")},t.className="MaxPooling2D",t}(Pooling2D);qd.registerClass(MaxPooling2D);var AveragePooling2D=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.poolingFunction=function(e,t,n,r,i){return checkDataFormat(i),checkPaddingMode(r),pool2d(e,t,n,r,i,"avg")},t.className="AveragePooling2D",t}(Pooling2D);qd.registerClass(AveragePooling2D);var Pooling3D=function(e){function t(t){var n=this;if(null==t.poolSize&&(t.poolSize=[2,2,2]),(n=e.call(this,t)||this).poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)n.strides=n.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new ValueError("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");n.strides=t.strides;}else n.strides=[t.strides,t.strides,t.strides];return assertPositiveInteger(n.poolSize,"poolSize"),assertPositiveInteger(n.strides,"strides"),n.padding=null==t.padding?"valid":t.padding,n.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,checkDataFormat(n.dataFormat),checkPaddingMode(n.padding),n.inputSpec=[new InputSpec({ndim:5})],n}return __extends(t,e),t.prototype.computeOutputShape=function(e){e=getExactlyOneShape(e);var t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=convOutputLength(t,this.poolSize[0],this.padding,this.strides[0]),n=convOutputLength(n,this.poolSize[1],this.padding,this.strides[1]),r=convOutputLength(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]},t.prototype.call=function(e,t){var n=this;return Ze(function(){return n.invokeCallHook(e,t),n.poolingFunction(getExactlyOneTensor(e),n.poolSize,n.strides,n.padding,n.dataFormat)})},t.prototype.getConfig=function(){var t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t}(Layer),MaxPooling3D=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.poolingFunction=function(e,t,n,r,i){return checkDataFormat(i),checkPaddingMode(r),pool3d(e,t,n,r,i,"max")},t.className="MaxPooling3D",t}(Pooling3D);qd.registerClass(MaxPooling3D);var AveragePooling3D=function(e){function t(t){return e.call(this,t)||this}return __extends(t,e),t.prototype.poolingFunction=function(e,t,n,r,i){return checkDataFormat(i),checkPaddingMode(r),pool3d(e,t,n,r,i,"avg")},t.className="AveragePooling3D",t}(Pooling3D);qd.registerClass(AveragePooling3D);var GlobalPooling1D=function(e){function t(t){var n=e.call(this,t)||this;return n.inputSpec=[new InputSpec({ndim:3})],n}return __extends(t,e),t.prototype.computeOutputShape=function(e){return [e[0],e[2]]},t.prototype.call=function(e,t){throw new NotImplementedError},t}(Layer),GlobalAveragePooling1D=function(e){function t(t){return e.call(this,t||{})||this}return __extends(t,e),t.prototype.call=function(e,t){return Ze(function(){var t=getExactlyOneTensor(e);return Ql(t,1)})},t.className="GlobalAveragePooling1D",t}(GlobalPooling1D);qd.registerClass(GlobalAveragePooling1D);var GlobalMaxPooling1D=function(e){function t(t){return e.call(this,t||{})||this}return __extends(t,e),t.prototype.call=function(e,t){return Ze(function(){var t=getExactlyOneTensor(e);return $l(t,1)})},t.className="GlobalMaxPooling1D",t}(GlobalPooling1D);qd.registerClass(GlobalMaxPooling1D);var GlobalPooling2D=function(e){function t(t){var n=e.call(this,t)||this;return n.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,checkDataFormat(n.dataFormat),n.inputSpec=[new InputSpec({ndim:4})],n}return __extends(t,e),t.prototype.computeOutputShape=function(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]},t.prototype.call=function(e,t){throw new NotImplementedError},t.prototype.getConfig=function(){var t={dataFormat:this.dataFormat},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t}(Layer),GlobalAveragePooling2D=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.call=function(e,t){var n=this;return Ze(function(){var t=getExactlyOneTensor(e);return "channelsLast"===n.dataFormat?Ql(t,[1,2]):Ql(t,[2,3])})},t.className="GlobalAveragePooling2D",t}(GlobalPooling2D);qd.registerClass(GlobalAveragePooling2D);var GlobalMaxPooling2D=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.call=function(e,t){var n=this;return Ze(function(){var t=getExactlyOneTensor(e);return "channelsLast"===n.dataFormat?$l(t,[1,2]):$l(t,[2,3])})},t.className="GlobalMaxPooling2D",t}(GlobalPooling2D);function standardizeArgs(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new ValueError("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0];}function i(e){return null==e||Array.isArray(e)?e:[e]}return {inputs:e,initialState:t=i(t),constants:n=i(n)}}function rnn(e,t,n,r,i,a,o,s){return void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===s&&(s=!1),Ze(function(){var l=t.shape.length;if(l<3)throw new ValueError("Input should be at least 3D, but is "+l+"D.");var u=[1,0].concat(range$1(2,l));if(t=ua(t,u),null!=a)throw new NotImplementedError("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=i&&((i=i.asType("bool").asType("float32")).rank===l-1&&(i=sr(i,-1)),i=ua(i,u)),r&&(t=kl(t,0),null!=i&&(i=kl(i,0)));var c,p,h=[],d=n,f=t.shape[0],g=fr(t);null!=i&&(p=fr(i));for(var m,y=function(t){var n=g[t],r=Ze(function(){return e(n,d)});if(null==i)c=r[0],d=r[1];else {var a=Ze(function(){var e=p[t],n=jn(e).sub(e);return {output:r[0].mul(e).addStrict(d[0].mul(n)),newStates:d.map(function(t,i){return r[1][i].mul(e).addStrict(t.mul(n))})}});c=a.output,d=a.newStates;}s&&h.push(c);},v=0;v<f;++v)y(v);if(s){m=hr(h,1);}return [c,m,d]})}qd.registerClass(GlobalMaxPooling2D);var RNN=function(e){function t(t){var n,r=e.call(this,t)||this;if(null==t.cell)throw new ValueError("cell property is missing for the constructor of RNN.");if(null==(n=Array.isArray(t.cell)?new StackedRNNCells({cells:t.cell}):t.cell).stateSize)throw new ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");return r.cell=n,r.returnSequences=null!=t.returnSequences&&t.returnSequences,r.returnState=null!=t.returnState&&t.returnState,r.goBackwards=null!=t.goBackwards&&t.goBackwards,r._stateful=null!=t.stateful&&t.stateful,r.unroll=null!=t.unroll&&t.unroll,r.supportsMasking=!0,r.inputSpec=[new InputSpec({ndim:3})],r.stateSpec=null,r.states_=null,r.numConstants=null,r.keptStates=[],r}return __extends(t,e),t.prototype.getStates=function(){return null==this.states_?range$1(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(function(e){return null}):this.states_},t.prototype.setStates=function(e){this.states_=e;},t.prototype.computeOutputShape=function(e){isArrayOfShapes(e)&&(e=e[0]),e=e;var t=this.cell.stateSize;Array.isArray(t)||(t=[t]);var n,r=t[0];if(n=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){for(var i=[],a=0,o=t;a<o.length;a++){var s=o[a];i.push([e[0],s]);}return [n].concat(i)}return n},t.prototype.computeMask=function(e,t){var n=this;return Ze(function(){Array.isArray(t)&&(t=t[0]);var e=n.returnSequences?t:null;if(n.returnState){var r=n.states.map(function(e){return null});return [e].concat(r)}return e})},Object.defineProperty(t.prototype,"states",{get:function(){if(null==this.states_){for(var e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[],n=0;n<e;++n)t.push(null);return t}return this.states_},set:function(e){this.states_=e;},enumerable:!0,configurable:!0}),t.prototype.build=function(e){if(null!=this.numConstants)throw new NotImplementedError("Constants support is not implemented in RNN yet.");isArrayOfShapes(e)&&(e=e[0]),e=e;var t=this.stateful?e[0]:null,n=e[e.length-1];this.inputSpec[0]=new InputSpec({shape:[t,null,n]});var r,i=[e[0]].concat(e.slice(2));if(this.cell.build(i),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!st.arraysEqual(this.stateSpec.map(function(e){return e.shape[e.shape.length-1]}),r))throw new ValueError("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec="+this.stateSpec+"; However cell.stateSize is "+this.cell.stateSize)}else this.stateSpec=r.map(function(e){return new InputSpec({shape:[null,e]})});this.stateful&&this.resetStates();},t.prototype.resetStates=function(e,t){var n=this;void 0===t&&(t=!1),Ze(function(){if(!n.stateful)throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");var r=n.inputSpec[0].shape[0];if(null==r)throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==n.states_)Array.isArray(n.cell.stateSize)?n.states_=n.cell.stateSize.map(function(e){return Gn([r,e])}):n.states_=[Gn([r,n.cell.stateSize])];else if(null==e)tn(n.states_),null!=n.keptStates&&(tn(n.keptStates),n.keptStates=[]),Array.isArray(n.cell.stateSize)?n.states_=n.cell.stateSize.map(function(e){return Gn([r,e])}):n.states_[0]=Gn([r,n.cell.stateSize]);else {if(Array.isArray(e)||(e=[e]),e.length!==n.states_.length)throw new ValueError("Layer "+n.name+" expects "+n.states_.length+" state(s), but it received "+e.length+" state value(s). Input received: "+e);!0===t?n.keptStates.push(n.states_.slice()):tn(n.states_);for(var i=0;i<n.states_.length;++i){var a=e[i],o=Array.isArray(n.cell.stateSize)?n.cell.stateSize[i]:n.cell.stateSize,s=[r,o];if(!st.arraysEqual(a.shape,s))throw new ValueError("State "+i+" is incompatible with layer "+n.name+": expected shape="+s+", received shape="+a.shape);n.states_[i]=a;}}n.states_=n.states_.map(function(e){return en(e.clone())});});},t.prototype.apply=function(t,n){var r=null==n?null:n.initialState,i=null==n?null:n.constants;null==n&&(n={});var a=standardizeArgs(t,r,i,this.numConstants);t=a.inputs,r=a.initialState,i=a.constants;var o=[],s=[];if(null!=r){n.initialState=r,o=o.concat(r),this.stateSpec=[];for(var l=0,u=r;l<u.length;l++){var c=u[l];this.stateSpec.push(new InputSpec({shape:c.shape}));}s=s.concat(this.stateSpec);}if(null!=i&&(n.constants=i,o=o.concat(i),this.numConstants=i.length),o[0]instanceof SymbolicTensor){var p=[t].concat(o),h=this.inputSpec.concat(s),d=this.inputSpec;this.inputSpec=h;var f=e.prototype.apply.call(this,p,n);return this.inputSpec=d,f}return e.prototype.apply.call(this,t,n)},t.prototype.call=function(e,t){var n=this;return Ze(function(){var r=null==t?null:t.mask,i=null==t?null:t.training,a=null==t?null:t.initialState;e=getExactlyOneTensor(e),null==a&&(a=n.stateful?n.states_:n.getInitialState(e));var o=Array.isArray(n.cell.stateSize)?n.cell.stateSize.length:1;if(a.length!==o)throw new ValueError("RNN Layer has "+o+" state(s) but was passed "+a.length+" initial state(s).");n.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");var s={training:i},l=rnn(function(e,t){var r=n.cell.call([e].concat(t),s);return [r[0],r.slice(1)]},e,a,n.goBackwards,r,null,n.unroll,n.returnSequences),u=l[0],c=l[1],p=l[2];n.stateful&&n.resetStates(p,i);var h=n.returnSequences?c:u;return n.returnState?[h].concat(p):h})},t.prototype.getInitialState=function(e){var t=this;return Ze(function(){var n=Gn(e.shape);return n=expandDims$1(n=th(n,[1,2])),Array.isArray(t.cell.stateSize)?t.cell.stateSize.map(function(e){return e>1?tile$1(n,[1,e]):n}):t.cell.stateSize>1?[tile$1(n,[1,t.cell.stateSize])]:[n]})},Object.defineProperty(t.prototype,"trainableWeights",{get:function(){return this.trainable?this.cell.trainableWeights:[]},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nonTrainableWeights",{get:function(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights},enumerable:!0,configurable:!0}),t.prototype.setFastWeightInitDuringBuild=function(t){e.prototype.setFastWeightInitDuringBuild.call(this,t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t);},t.prototype.getConfig=function(){var t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);var n=this.cell.getConfig();t.cell={className:this.cell.getClassName(),config:n};var r=e.prototype.getConfig.call(this);return Object.assign(t,r),t},t.fromConfig=function(e,t,n){void 0===n&&(n={});var r=deserialize(t.cell,n);return new e(Object.assign(t,{cell:r}))},t.className="RNN",t}(Layer);qd.registerClass(RNN);var RNNCell=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t}(Layer),SimpleRNNCell=function(e){function t(t){var n=e.call(this,t)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=t.units,assertPositiveInteger(n.units,"units"),n.activation=getActivation(null==t.activation?n.DEFAULT_ACTIVATION:t.activation),n.useBias=null==t.useBias||t.useBias,n.kernelInitializer=getInitializer(t.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=getInitializer(t.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=getInitializer(t.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelRegularizer=getRegularizer(t.kernelRegularizer),n.recurrentRegularizer=getRegularizer(t.recurrentRegularizer),n.biasRegularizer=getRegularizer(t.biasRegularizer),n.kernelConstraint=getConstraint(t.kernelConstraint),n.recurrentConstraint=getConstraint(t.recurrentConstraint),n.biasConstraint=getConstraint(t.biasConstraint),n.dropout=min$1$1([1,max$1$1([0,null==t.dropout?0:t.dropout])]),n.recurrentDropout=min$1$1([1,max$1$1([0,null==t.recurrentDropout?0:t.recurrentDropout])]),n.stateSize=n.units,n.dropoutMask=null,n.recurrentDropoutMask=null,n}return __extends(t,e),t.prototype.build=function(e){e=getExactlyOneShape(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0;},t.prototype.call=function(e,t){var n=this;return Ze(function(){if(2!==(e=e).length)throw new ValueError("SimpleRNNCell expects 2 input Tensors, got "+e.length+".");var r=e[1];e=e[0];var i,a=null!=t.training&&t.training;0<n.dropout&&n.dropout<1&&null==n.dropoutMask&&(n.dropoutMask=generateDropoutMask(function(){return jn(e)},n.dropout,a)),0<n.recurrentDropout&&n.recurrentDropout<1&&null==n.recurrentDropoutMask&&(n.recurrentDropoutMask=generateDropoutMask(function(){return jn(r)},n.recurrentDropout,a));var o=n.dropoutMask,s=n.recurrentDropoutMask;i=dot(null!=o?To(e,o):e,n.kernel.read()),null!=n.bias&&(i=biasAdd(i,n.bias.read())),null!=s&&(r=To(r,s));var l=Or(i,dot(r,n.recurrentKernel.read()));return null!=n.activation&&(l=n.activation.apply(l)),[l,l]})},t.prototype.getConfig=function(){var t={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="SimpleRNNCell",t}(RNNCell);qd.registerClass(SimpleRNNCell);var SimpleRNN=function(e){function t(t){return t.cell=new SimpleRNNCell(t),e.call(this,t)||this}return __extends(t,e),t.prototype.call=function(t,n){var r=this;return Ze(function(){null!=r.cell.dropoutMask&&(tn(r.cell.dropoutMask),r.cell.dropoutMask=null),null!=r.cell.recurrentDropoutMask&&(tn(r.cell.recurrentDropoutMask),r.cell.recurrentDropoutMask=null);var i=null==n?null:n.mask,a=null==n?null:n.training,o=null==n?null:n.initialState;return e.prototype.call.call(r,t,{mask:i,training:a,initialState:o})})},Object.defineProperty(t.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),t.prototype.getConfig=function(){var t={units:this.units,activation:serializeActivation(this.activation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout},n=e.prototype.getConfig.call(this);return delete n.cell,Object.assign(t,n),t},t.fromConfig=function(e,t){return new e(t)},t.className="SimpleRNN",t}(RNN);qd.registerClass(SimpleRNN);var GRUCell=function(e){function t(t){var n=e.call(this,t)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=t.units,assertPositiveInteger(n.units,"units"),n.activation=getActivation(void 0===t.activation?n.DEFAULT_ACTIVATION:t.activation),n.recurrentActivation=getActivation(void 0===t.recurrentActivation?n.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),n.useBias=null==t.useBias||t.useBias,n.kernelInitializer=getInitializer(t.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=getInitializer(t.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=getInitializer(t.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.kernelRegularizer=getRegularizer(t.kernelRegularizer),n.recurrentRegularizer=getRegularizer(t.recurrentRegularizer),n.biasRegularizer=getRegularizer(t.biasRegularizer),n.kernelConstraint=getConstraint(t.kernelConstraint),n.recurrentConstraint=getConstraint(t.recurrentConstraint),n.biasConstraint=getConstraint(t.biasConstraint),n.dropout=min$1$1([1,max$1$1([0,null==t.dropout?0:t.dropout])]),n.recurrentDropout=min$1$1([1,max$1$1([0,null==t.recurrentDropout?0:t.recurrentDropout])]),n.implementation=t.implementation,n.stateSize=n.units,n.dropoutMask=null,n.recurrentDropoutMask=null,n}return __extends(t,e),t.prototype.build=function(e){var t=(e=getExactlyOneShape(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0;},t.prototype.call=function(e,t){var n=this;return Ze(function(){if(2!==(e=e).length)throw new ValueError("GRUCell expects 2 input Tensors (inputs, h, c), got "+e.length+".");var r=null!=t.training&&t.training,i=e[1];e=e[0],0<n.dropout&&n.dropout<1&&null==n.dropoutMask&&(n.dropoutMask=generateDropoutMask(function(){return jn(e)},n.dropout,r,3)),0<n.recurrentDropout&&n.recurrentDropout<1&&null==n.recurrentDropoutMask&&(n.recurrentDropoutMask=generateDropoutMask(function(){return jn(i)},n.recurrentDropout,r,3));var a,o,s,l=n.dropoutMask,u=n.recurrentDropoutMask;0<n.dropout&&n.dropout<1&&(e=To(e,l[0]));var c=dot(e,n.kernel.read());n.useBias&&(c=biasAdd(c,n.bias.read())),0<n.recurrentDropout&&n.recurrentDropout<1&&(i=To(i,u[0]));var p=n.recurrentKernel.read(),h=tr(p,[2*n.units,n.units],p.rank-1),d=h[0],f=h[1],g=dot(i,d),m=tr(c,3,c.rank-1),y=m[0],v=m[1],b=m[2],w=tr(g,2,g.rank-1),z=w[0],S=w[1];a=n.recurrentActivation.apply(Or(y,z)),o=n.recurrentActivation.apply(Or(v,S));var A=dot(To(o,i),f);s=n.activation.apply(Or(b,A));var _=Or(To(a,i),To(Or(1,no(a)),s));return [_,_]})},t.prototype.getConfig=function(){var t={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="GRUCell",t}(RNNCell);qd.registerClass(GRUCell);var GRU=function(e){function t(t){return 0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new GRUCell(t),e.call(this,t)||this}return __extends(t,e),t.prototype.call=function(t,n){var r=this;return Ze(function(){null!=r.cell.dropoutMask&&(tn(r.cell.dropoutMask),r.cell.dropoutMask=null),null!=r.cell.recurrentDropoutMask&&(tn(r.cell.recurrentDropoutMask),r.cell.recurrentDropoutMask=null);var i=null==n?null:n.mask,a=null==n?null:n.training,o=null==n?null:n.initialState;return e.prototype.call.call(r,t,{mask:i,training:a,initialState:o})})},Object.defineProperty(t.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentActivation",{get:function(){return this.cell.recurrentActivation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"implementation",{get:function(){return this.cell.implementation},enumerable:!0,configurable:!0}),t.prototype.getConfig=function(){var t={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=e.prototype.getConfig.call(this);return delete n.cell,Object.assign(t,n),t},t.fromConfig=function(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)},t.className="GRU",t}(RNN);qd.registerClass(GRU);var LSTMCell=function(e){function t(t){var n=e.call(this,t)||this;return n.DEFAULT_ACTIVATION="tanh",n.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",n.DEFAULT_KERNEL_INITIALIZER="glorotNormal",n.DEFAULT_RECURRENT_INITIALIZER="orthogonal",n.DEFAULT_BIAS_INITIALIZER="zeros",n.units=t.units,assertPositiveInteger(n.units,"units"),n.activation=getActivation(void 0===t.activation?n.DEFAULT_ACTIVATION:t.activation),n.recurrentActivation=getActivation(void 0===t.recurrentActivation?n.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),n.useBias=null==t.useBias||t.useBias,n.kernelInitializer=getInitializer(t.kernelInitializer||n.DEFAULT_KERNEL_INITIALIZER),n.recurrentInitializer=getInitializer(t.recurrentInitializer||n.DEFAULT_RECURRENT_INITIALIZER),n.biasInitializer=getInitializer(t.biasInitializer||n.DEFAULT_BIAS_INITIALIZER),n.unitForgetBias=t.unitForgetBias,n.kernelRegularizer=getRegularizer(t.kernelRegularizer),n.recurrentRegularizer=getRegularizer(t.recurrentRegularizer),n.biasRegularizer=getRegularizer(t.biasRegularizer),n.kernelConstraint=getConstraint(t.kernelConstraint),n.recurrentConstraint=getConstraint(t.recurrentConstraint),n.biasConstraint=getConstraint(t.biasConstraint),n.dropout=min$1$1([1,max$1$1([0,null==t.dropout?0:t.dropout])]),n.recurrentDropout=min$1$1([1,max$1$1([0,null==t.recurrentDropout?0:t.recurrentDropout])]),n.implementation=t.implementation,n.stateSize=[n.units,n.units],n.dropoutMask=null,n.recurrentDropoutMask=null,n}return __extends(t,e),t.prototype.build=function(e){var t,n,r=(e=getExactlyOneShape(e))[e.length-1];if(this.kernel=this.addWeight("kernel",[r,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){var i=this.biasInitializer,a=this.units;n=new((t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return __extends(t,e),t.prototype.apply=function(e,t){var n=i.apply([a]),r=(new Ones).apply([a]),o=i.apply([2*a]);return concatAlongFirstAxis(concatAlongFirstAxis(n,r),o)},t}(Initializer)).className="CustomInit",t);}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint);}else this.bias=null;this.built=!0;},t.prototype.call=function(e,t){var n=this;return Ze(function(){var r=null!=t.training&&t.training;if(3!==(e=e).length)throw new ValueError("LSTMCell expects 3 input Tensors (inputs, h, c), got "+e.length+".");var i=e[1],a=e[2];e=e[0],0<n.dropout&&n.dropout<1&&null==n.dropoutMask&&(n.dropoutMask=generateDropoutMask(function(){return jn(e)},n.dropout,r,4)),0<n.recurrentDropout&&n.recurrentDropout<1&&null==n.recurrentDropoutMask&&(n.recurrentDropoutMask=generateDropoutMask(function(){return jn(i)},n.recurrentDropout,r,4));var o,s,l,u,c=n.dropoutMask,p=n.recurrentDropoutMask;0<n.dropout&&n.dropout<1&&(e=To(e,c[0]));var h=dot(e,n.kernel.read());0<n.recurrentDropout&&n.recurrentDropout<1&&(i=To(i,p[0])),h=Or(h,dot(i,n.recurrentKernel.read())),n.useBias&&(h=biasAdd(h,n.bias.read()));var d=tr(h,4,h.rank-1),f=d[0],g=d[1],m=d[2],y=d[3];o=n.recurrentActivation.apply(f),s=n.recurrentActivation.apply(g),l=Or(To(s,a),To(o,n.activation.apply(m))),u=n.recurrentActivation.apply(y);var v=To(u,n.activation.apply(l));return [v,v,l]})},t.prototype.getConfig=function(){var t={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.className="LSTMCell",t}(RNNCell);qd.registerClass(LSTMCell);var LSTM=function(e){function t(t){return 0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new LSTMCell(t),e.call(this,t)||this}return __extends(t,e),t.prototype.call=function(t,n){var r=this;return Ze(function(){null!=r.cell.dropoutMask&&(tn(r.cell.dropoutMask),r.cell.dropoutMask=null),null!=r.cell.recurrentDropoutMask&&(tn(r.cell.recurrentDropoutMask),r.cell.recurrentDropoutMask=null);var i=null==n?null:n.mask,a=null==n?null:n.training,o=null==n?null:n.initialState;return e.prototype.call.call(r,t,{mask:i,training:a,initialState:o})})},Object.defineProperty(t.prototype,"units",{get:function(){return this.cell.units},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"activation",{get:function(){return this.cell.activation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentActivation",{get:function(){return this.cell.recurrentActivation},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"useBias",{get:function(){return this.cell.useBias},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"kernelInitializer",{get:function(){return this.cell.kernelInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentInitializer",{get:function(){return this.cell.recurrentInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"biasInitializer",{get:function(){return this.cell.biasInitializer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"unitForgetBias",{get:function(){return this.cell.unitForgetBias},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"kernelRegularizer",{get:function(){return this.cell.kernelRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentRegularizer",{get:function(){return this.cell.recurrentRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"biasRegularizer",{get:function(){return this.cell.biasRegularizer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"kernelConstraint",{get:function(){return this.cell.kernelConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentConstraint",{get:function(){return this.cell.recurrentConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"biasConstraint",{get:function(){return this.cell.biasConstraint},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"dropout",{get:function(){return this.cell.dropout},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"recurrentDropout",{get:function(){return this.cell.recurrentDropout},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"implementation",{get:function(){return this.cell.implementation},enumerable:!0,configurable:!0}),t.prototype.getConfig=function(){var t={units:this.units,activation:serializeActivation(this.activation),recurrentActivation:serializeActivation(this.recurrentActivation),useBias:this.useBias,kernelInitializer:serializeInitializer(this.kernelInitializer),recurrentInitializer:serializeInitializer(this.recurrentInitializer),biasInitializer:serializeInitializer(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:serializeRegularizer(this.kernelRegularizer),recurrentRegularizer:serializeRegularizer(this.recurrentRegularizer),biasRegularizer:serializeRegularizer(this.biasRegularizer),activityRegularizer:serializeRegularizer(this.activityRegularizer),kernelConstraint:serializeConstraint(this.kernelConstraint),recurrentConstraint:serializeConstraint(this.recurrentConstraint),biasConstraint:serializeConstraint(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation},n=e.prototype.getConfig.call(this);return delete n.cell,Object.assign(t,n),t},t.fromConfig=function(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)},t.className="LSTM",t}(RNN);qd.registerClass(LSTM);var StackedRNNCells=function(e){function t(t){var n=e.call(this,t)||this;return n.cells=t.cells,n}return __extends(t,e),Object.defineProperty(t.prototype,"stateSize",{get:function(){for(var e=[],t=0,n=this.cells.slice().reverse();t<n.length;t++){var r=n[t];Array.isArray(r.stateSize)?e.push.apply(e,r.stateSize):e.push(r.stateSize);}return e},enumerable:!0,configurable:!0}),t.prototype.call=function(e,t){var n=this;return Ze(function(){for(var r=(e=e).slice(1),i=[],a=0,o=n.cells.slice().reverse();a<o.length;a++){var s=o[a];Array.isArray(s.stateSize)?i.push(r.splice(0,s.stateSize.length)):i.push(r.splice(0,1));}i.reverse();for(var l,u=[],c=0;c<n.cells.length;++c){s=n.cells[c];r=i[c],l=0===c?[e[0]].concat(r):[l[0]].concat(r),l=s.call(l,t),u.push(l.slice(1));}r=[];for(var p=0,h=u.slice().reverse();p<h.length;p++){var d=h[p];r.push.apply(r,d);}return [l[0]].concat(r)})},t.prototype.build=function(e){var t;isArrayOfShapes(e)&&(e=e[0]),e=e,this.cells.forEach(function(n,r){nameScope("RNNCell_"+r,function(){n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t];});}),this.built=!0;},t.prototype.getConfig=function(){for(var t=[],n=0,r=this.cells;n<r.length;n++){var i=r[n];t.push({className:i.getClassName(),config:i.getConfig()});}var a={cells:t},o=e.prototype.getConfig.call(this);return Object.assign(a,o),a},t.fromConfig=function(e,t,n){void 0===n&&(n={});for(var r=[],i=0,a=t.cells;i<a.length;i++){var o=a[i];r.push(deserialize(o,n));}return new e({cells:r})},Object.defineProperty(t.prototype,"trainableWeights",{get:function(){if(!this.trainable)return [];for(var e=[],t=0,n=this.cells;t<n.length;t++){var r=n[t];e.push.apply(e,r.trainableWeights);}return e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nonTrainableWeights",{get:function(){for(var e=[],t=0,n=this.cells;t<n.length;t++){var r=n[t];e.push.apply(e,r.nonTrainableWeights);}if(!this.trainable){for(var i=[],a=0,o=this.cells;a<o.length;a++){r=o[a];i.push.apply(i,r.trainableWeights);}return i.concat(e)}return e},enumerable:!0,configurable:!0}),t.prototype.getWeights=function(){for(var e=[],t=0,n=this.cells;t<n.length;t++){var r=n[t];e.push.apply(e,r.weights);}return batchGetValue(e)},t.prototype.setWeights=function(e){for(var t=[],n=0,r=this.cells;n<r.length;n++)for(var i=r[n],a=i.weights.length,o=e.splice(a),s=0;s<i.weights.length;++s)t.push([i.weights[s],o[s]]);batchSetValue(t);},t.className="StackedRNNCells",t}(RNNCell);function generateDropoutMask(e,t,n,r){function i(){return dropout$1(e(),t)}if(void 0===n&&(n=null),void 0===r&&(r=1),r>1){for(var a=[],o=0;o<r;o++)a.push(inTrainPhase(i,e,n));return a.map(function(e){return en(e.clone())})}return en(inTrainPhase(i,e,n).clone())}qd.registerClass(StackedRNNCells);var Wrapper=function(e){function t(t){var n=e.call(this,t)||this;return n.layer=t.layer,n}return __extends(t,e),t.prototype.build=function(e){this.built=!0;},Object.defineProperty(t.prototype,"trainable",{get:function(){return null!=this.layer&&this.layer.trainable},set:function(e){null!=this.layer&&(this.layer.trainable=e);},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"trainableWeights",{get:function(){return this.layer.trainableWeights},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nonTrainableWeights",{get:function(){return this.layer.nonTrainableWeights},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"updates",{get:function(){return this.layer._updates},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"losses",{get:function(){return this.layer.losses},enumerable:!0,configurable:!0}),t.prototype.getWeights=function(){return this.layer.getWeights()},t.prototype.setWeights=function(e){this.layer.setWeights(e);},t.prototype.getConfig=function(){var t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.prototype.setFastWeightInitDuringBuild=function(t){e.prototype.setFastWeightInitDuringBuild.call(this,t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t);},t.fromConfig=function(e,t,n){void 0===n&&(n={});var r=deserialize(t.layer,n);delete t.layer;var i={layer:r};return Object.assign(i,t),new e(i)},t}(Layer),TimeDistributed=function(e){function t(t){var n=e.call(this,t)||this;return n.supportsMasking=!0,n}return __extends(t,e),t.prototype.build=function(t){if((t=getExactlyOneShape(t)).length<3)throw new ValueError("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];var n=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(n),this.layer.built=!0),e.prototype.build.call(this,t);},t.prototype.computeOutputShape=function(e){var t=[(e=getExactlyOneShape(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return [n[0],r].concat(n.slice(1))},t.prototype.call=function(e,t){var n=this;return Ze(function(){return rnn(function(e,r){return [getExactlyOneTensor(n.layer.call(e,t)),[]]},e=getExactlyOneTensor(e),[],!1,null,null,!1,!0)[1]})},t.className="TimeDistributed",t}(Wrapper);function checkBidirectionalMergeMode(e){checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES,"BidirectionalMergeMode",e);}qd.registerClass(TimeDistributed);var DEFAULT_BIDIRECTIONAL_MERGE_MODE="concat",Bidirectional=function(e){function t(t){var n=e.call(this,t)||this,r=t.layer.getConfig(),i={};i.className=t.layer.getClassName(),i.config=r,n.forwardLayer=deserialize(i),r.goBackwards=!0!==r.goBackwards;var a={};if(a.className=t.layer.getClassName(),a.config=r,n.backwardLayer=deserialize(a),n.forwardLayer.name="forward_"+n.forwardLayer.name,n.backwardLayer.name="backward_"+n.backwardLayer.name,n.mergeMode=void 0===t.mergeMode?DEFAULT_BIDIRECTIONAL_MERGE_MODE:t.mergeMode,checkBidirectionalMergeMode(n.mergeMode),t.weights)throw new NotImplementedError("weights support is not implemented for Bidirectional layer yet.");return n._stateful=t.layer.stateful,n.returnSequences=t.layer.returnSequences,n.returnState=t.layer.returnState,n.supportsMasking=!0,n._trainable=!0,n.inputSpec=t.layer.inputSpec,n.numConstants=null,n}return __extends(t,e),Object.defineProperty(t.prototype,"trainable",{get:function(){return this._trainable},set:function(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e);},enumerable:!0,configurable:!0}),t.prototype.getWeights=function(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())},t.prototype.setWeights=function(e){var t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n));},t.prototype.computeOutputShape=function(e){var t,n,r,i=this.forwardLayer.computeOutputShape(e);return Array.isArray(i)&&Array.isArray(i[0])||(i=[i]),i=i,this.returnState?(r=i.slice(1),t=i[0]):t=i[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):singletonOrArray(n)},t.prototype.apply=function(t,n){var r=null==n?null:n.initialState,i=null==n?null:n.constants;null==n&&(n={});var a=standardizeArgs(t,r,i,this.numConstants);if(t=a.inputs,r=a.initialState,i=a.constants,Array.isArray(t)&&(r=t.slice(1),t=t[0]),(null==r||0===r.length)&&null==i)return e.prototype.apply.call(this,t,n);var o=[],s=[];if(null!=r){var l=r.length;if(l%2>0)throw new ValueError("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");n.initialState=r,o.push.apply(o,r);var u=r.map(function(e){return new InputSpec({shape:e.shape})});this.forwardLayer.stateSpec=u.slice(0,l/2),this.backwardLayer.stateSpec=u.slice(l/2),s.push.apply(s,u);}if(null!=i)throw new NotImplementedError("Support for constants in Bidirectional layers is not implemented yet.");for(var c=o[0]instanceof SymbolicTensor,p=0,h=o;p<h.length;p++){if(h[p]instanceof SymbolicTensor!==c)throw new ValueError("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors")}if(c){var d=[t].concat(o),f=this.inputSpec.concat(s),g=this.inputSpec;this.inputSpec=f;var m=e.prototype.apply.call(this,d,n);return this.inputSpec=g,m}return e.prototype.apply.call(this,t,n)},t.prototype.call=function(e,t){var n=this;return Ze(function(){var r,i,a,o,s=t.initialState;if(null==s)r=n.forwardLayer.call(e,t),i=n.backwardLayer.call(e,t);else {var l=s.slice(0,s.length/2),u=s.slice(s.length/2);r=n.forwardLayer.call(e,Object.assign(t,{initialState:l})),i=n.backwardLayer.call(e,Object.assign(t,{initialState:u}));}return n.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(i.slice(1))),r=r[0],i=i[0]),n.returnSequences&&(i=kl(i,1)),"concat"===n.mergeMode?o=concatenate([r,i]):"sum"===n.mergeMode?o=Or(r,i):"ave"===n.mergeMode?o=To(.5,Or(r,i)):"mul"===n.mergeMode?o=To(r,i):null==n.mergeMode&&(o=[r,i]),n.returnState?null==n.mergeMode?o.concat(a):[o].concat(a):o})},t.prototype.resetStates=function(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates();},t.prototype.build=function(e){var t=this;nameScope(this.forwardLayer.name,function(){t.forwardLayer.build(e);}),nameScope(this.backwardLayer.name,function(){t.backwardLayer.build(e);}),this.built=!0;},t.prototype.computeMask=function(e,t){var n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){var r=this.forwardLayer.states.map(function(e){return null});return Array.isArray(n)?n.concat(r).concat(r):[n].concat(r).concat(r)}return n},Object.defineProperty(t.prototype,"trainableWeights",{get:function(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nonTrainableWeights",{get:function(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)},enumerable:!0,configurable:!0}),t.prototype.setFastWeightInitDuringBuild=function(t){e.prototype.setFastWeightInitDuringBuild.call(this,t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t);},t.prototype.getConfig=function(){var t={mergeMode:this.mergeMode},n=e.prototype.getConfig.call(this);return Object.assign(t,n),t},t.fromConfig=function(e,t){var n=deserialize(t.layer);if(delete t.layer,null!=t.numConstants)throw new NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");var r=t;return r.layer=n,new e(r)},t.className="Bidirectional",t}(Wrapper);function inputLayer(e){return new InputLayer(e)}function elu$2(e){return new ELU(e)}function reLU(e){return new ReLU(e)}function leakyReLU(e){return new LeakyReLU(e)}function prelu$1(e){return new PReLU(e)}function softmax$1(e){return new Softmax$1(e)}function thresholdedReLU(e){return new ThresholdedReLU(e)}function conv1d$2(e){return new Conv1D(e)}function conv2d$1(e){return new Conv2D(e)}function conv2dTranspose$1(e){return new Conv2DTranspose(e)}function conv3d$2(e){return new Conv3D(e)}function separableConv2d$1(e){return new SeparableConv2D(e)}function cropping2D(e){return new Cropping2D(e)}function upSampling2d(e){return new UpSampling2D(e)}function depthwiseConv2d$2(e){return new DepthwiseConv2D(e)}function activation(e){return new Activation$1(e)}function dense(e){return new Dense(e)}function dropout$2(e){return new Dropout(e)}function spatialDropout1d(e){return new SpatialDropout1D(e)}function flatten$1(e){return new Flatten(e)}function repeatVector(e){return new RepeatVector(e)}function reshape(e){return new Reshape(e)}function permute(e){return new Permute(e)}function embedding(e){return new Embedding(e)}function add$2(e){return new Add(e)}function average$1(e){return new Average(e)}function concatenate$2(e){return new Concatenate(e)}function maximum$2(e){return new Maximum(e)}function minimum$2(e){return new Minimum(e)}function multiply$1(e){return new Multiply(e)}function dot$1(e){return new Dot(e)}function batchNormalization$1(e){return new BatchNormalization(e)}function layerNormalization(e){return new LayerNormalization(e)}function zeroPadding2d(e){return new ZeroPadding2D(e)}function averagePooling1d(e){return new AveragePooling1D(e)}function avgPool1d(e){return averagePooling1d(e)}function avgPooling1d(e){return averagePooling1d(e)}function averagePooling2d(e){return new AveragePooling2D(e)}function avgPool2d(e){return averagePooling2d(e)}function avgPooling2d(e){return averagePooling2d(e)}function averagePooling3d(e){return new AveragePooling3D(e)}function avgPool3d$1(e){return averagePooling3d(e)}function avgPooling3d(e){return averagePooling3d(e)}function globalAveragePooling1d(e){return new GlobalAveragePooling1D(e)}function globalAveragePooling2d(e){return new GlobalAveragePooling2D(e)}function globalMaxPooling1d(e){return new GlobalMaxPooling1D(e)}function globalMaxPooling2d(e){return new GlobalMaxPooling2D(e)}function maxPooling1d(e){return new MaxPooling1D(e)}function maxPooling2d(e){return new MaxPooling2D(e)}function maxPooling3d(e){return new MaxPooling3D(e)}function gru(e){return new GRU(e)}function gruCell(e){return new GRUCell(e)}function lstm(e){return new LSTM(e)}function lstmCell(e){return new LSTMCell(e)}function simpleRNN(e){return new SimpleRNN(e)}function simpleRNNCell(e){return new SimpleRNNCell(e)}function rnn$1(e){return new RNN(e)}function stackedRNNCells(e){return new StackedRNNCells(e)}function bidirectional(e){return new Bidirectional(e)}function timeDistributed(e){return new TimeDistributed(e)}qd.registerClass(Bidirectional);var globalMaxPool1d=globalMaxPooling1d,globalMaxPool2d=globalMaxPooling2d,maxPool1d=maxPooling1d,maxPool2d=maxPooling2d;function gaussianNoise(e){return new GaussianNoise(e)}function gaussianDropout(e){return new GaussianDropout(e)}function alphaDropout(e){return new AlphaDropout(e)}function masking(e){return new Masking(e)}var exports_layers=Object.freeze({inputLayer:inputLayer,elu:elu$2,reLU:reLU,leakyReLU:leakyReLU,prelu:prelu$1,softmax:softmax$1,thresholdedReLU:thresholdedReLU,conv1d:conv1d$2,conv2d:conv2d$1,conv2dTranspose:conv2dTranspose$1,conv3d:conv3d$2,separableConv2d:separableConv2d$1,cropping2D:cropping2D,upSampling2d:upSampling2d,depthwiseConv2d:depthwiseConv2d$2,activation:activation,dense:dense,dropout:dropout$2,spatialDropout1d:spatialDropout1d,flatten:flatten$1,repeatVector:repeatVector,reshape:reshape,permute:permute,embedding:embedding,add:add$2,average:average$1,concatenate:concatenate$2,maximum:maximum$2,minimum:minimum$2,multiply:multiply$1,dot:dot$1,batchNormalization:batchNormalization$1,layerNormalization:layerNormalization,zeroPadding2d:zeroPadding2d,averagePooling1d:averagePooling1d,avgPool1d:avgPool1d,avgPooling1d:avgPooling1d,averagePooling2d:averagePooling2d,avgPool2d:avgPool2d,avgPooling2d:avgPooling2d,averagePooling3d:averagePooling3d,avgPool3d:avgPool3d$1,avgPooling3d:avgPooling3d,globalAveragePooling1d:globalAveragePooling1d,globalAveragePooling2d:globalAveragePooling2d,globalMaxPooling1d:globalMaxPooling1d,globalMaxPooling2d:globalMaxPooling2d,maxPooling1d:maxPooling1d,maxPooling2d:maxPooling2d,maxPooling3d:maxPooling3d,gru:gru,gruCell:gruCell,lstm:lstm,lstmCell:lstmCell,simpleRNN:simpleRNN,simpleRNNCell:simpleRNNCell,rnn:rnn$1,stackedRNNCells:stackedRNNCells,bidirectional:bidirectional,timeDistributed:timeDistributed,globalMaxPool1d:globalMaxPool1d,globalMaxPool2d:globalMaxPool2d,maxPool1d:maxPool1d,maxPool2d:maxPool2d,Layer:Layer,RNN:RNN,RNNCell:RNNCell,input:input,gaussianNoise:gaussianNoise,gaussianDropout:gaussianDropout,alphaDropout:alphaDropout,masking:masking});function binaryAccuracy$1(e,t){return binaryAccuracy(e,t)}function binaryCrossentropy$2(e,t){return binaryCrossentropy$1(e,t)}function sparseCategoricalAccuracy$1(e,t){return sparseCategoricalAccuracy(e,t)}function categoricalAccuracy$1(e,t){return categoricalAccuracy(e,t)}function categoricalCrossentropy$2(e,t){return categoricalCrossentropy$1(e,t)}function precision$1(e,t){return precision(e,t)}function recall$1(e,t){return recall(e,t)}function cosineProximity$1(e,t){return cosineProximity(e,t)}function meanAbsoluteError$1(e,t){return meanAbsoluteError(e,t)}function meanAbsolutePercentageError$1$1(e,t){return meanAbsolutePercentageError$1(e,t)}function MAPE$2(e,t){return meanAbsolutePercentageError$1(e,t)}function mape$2(e,t){return meanAbsolutePercentageError$1(e,t)}function meanSquaredError$1$1(e,t){return meanSquaredError$1(e,t)}function MSE$2(e,t){return meanSquaredError$1(e,t)}function mse$2(e,t){return meanSquaredError$1(e,t)}var exports_metrics=Object.freeze({binaryAccuracy:binaryAccuracy$1,binaryCrossentropy:binaryCrossentropy$2,sparseCategoricalAccuracy:sparseCategoricalAccuracy$1,categoricalAccuracy:categoricalAccuracy$1,categoricalCrossentropy:categoricalCrossentropy$2,precision:precision$1,recall:recall$1,cosineProximity:cosineProximity$1,meanAbsoluteError:meanAbsoluteError$1,meanAbsolutePercentageError:meanAbsolutePercentageError$1$1,MAPE:MAPE$2,mape:mape$2,meanSquaredError:meanSquaredError$1$1,MSE:MSE$2,mse:mse$2}),exports_models=Object.freeze({modelFromJSON:modelFromJSON});function l1l2(e){return new L1L2(e)}function l1$1(e){return l1(e)}function l2$1(e){return l2(e)}var exports_regularizers=Object.freeze({l1l2:l1l2,l1:l1$1,l2:l2$1}),Callback=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.model=null,t}return __extends(t,e),t.prototype.setModel=function(e){if(!(e instanceof LayersModel))throw new Error("model must be a LayersModel, not some other Container");this.model=e;},t}(BaseCallback);function less(e,t){return e<t}function greater$1(e,t){return e>t}var EarlyStopping=function(e){function t(t){var n=e.call(this)||this;if(null==t&&(t={}),t.restoreBestWeights)throw new NotImplementedError("restoreBestWeights = True is not implemented in EarlyStopping yet.");return n.monitor=t.monitor||"val_loss",n.minDelta=Math.abs(t.minDelta||0),n.patience=t.patience||0,n.verbose=t.verbose||0,n.mode=t.mode||"auto",n.baseline=t.baseline,-1===["auto","min","max"].indexOf(n.mode)&&(console.warn("EarlyStopping mode '"+n.mode+"' is invalid. Falling back to mode 'auto'."),n.mode="auto"),"min"===n.mode?n.monitorFunc=less:"max"===n.mode?n.monitorFunc=greater$1:-1!==n.monitor.indexOf("acc")?n.monitorFunc=greater$1:n.monitorFunc=less,n.monitorFunc===less&&(n.minDelta*=-1),n}return __extends(t,e),t.prototype.onTrainBegin=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===less?1/0:-1/0,[2]})})},t.prototype.onEpochEnd=function(e,t){return __awaiter(this,void 0,void 0,function(){var n;return __generator(this,function(r){switch(r.label){case 0:return [4,resolveScalarsInLogs(t)];case 1:return r.sent(),null==(n=this.getMonitorValue(t))?[2]:(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)),[2])}})})},t.prototype.onTrainEnd=function(e){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(e){return this.stoppedEpoch>0&&this.verbose&&console.log("Epoch "+this.stoppedEpoch+": early stopping."),[2]})})},t.prototype.getMonitorValue=function(e){null==e&&(e={});var t=e[this.monitor];return null==t&&console.warn("Metric for EarlyStopping "+this.monitor+" is not available. Available metrics are: "+Object.keys(e)),t},t}(Callback);function earlyStopping(e){return new EarlyStopping(e)}var callbacks={earlyStopping:earlyStopping};

            var DataType,SaverDef,__assign$1=function(){return (__assign$1=Object.assign||function(e){for(var t,a=1,r=arguments.length;a<r;a++)for(var n in t=arguments[a])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};function __awaiter$1(e,t,a,r){return new(a||(a=Promise))(function(n,s){function o(e){try{u(r.next(e));}catch(e){s(e);}}function p(e){try{u(r.throw(e));}catch(e){s(e);}}function u(e){e.done?n(e.value):new a(function(t){t(e.value);}).then(o,p);}u((r=r.apply(e,t||[])).next());})}function __generator$1(e,t){var a,r,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:p(0),throw:p(1),return:p(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function p(s){return function(p){return function(s){if(a)throw new TypeError("Generator is already executing.");for(;o;)try{if(a=1,r&&(n=2&s[0]?r.return:s[0]?r.throw||((n=r.return)&&n.call(r),0):r.next)&&!(n=n.call(r,s[1])).done)return n;switch(r=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o);}catch(e){s=[6,e],r=0;}finally{a=n=0;}if(5&s[0])throw s[1];return {value:s[0]?s[1]:void 0,done:!0}}([s,p])}}}!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF";}(DataType||(DataType={})),function(e){!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2";}(e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}));}(SaverDef||(SaverDef={}));var CUSTOM_OPS={};function registerOp(e,t){var a={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};CUSTOM_OPS[e]=a;}function getRegisteredOp(e){return CUSTOM_OPS[e]}function deregisterOp(e){delete CUSTOM_OPS[e];}function getParamValue(e,t,a,r){var n=t.inputParams[e];if(n&&void 0!==n.inputIndexStart){var s=n.inputIndexStart,o=0===n.inputIndexEnd?void 0:void 0===n.inputIndexEnd?s+1:n.inputIndexEnd;if("tensor"===n.type)return getTensor(t.inputNames[n.inputIndexStart],a,r);if("tensors"===n.type)return t.inputNames.slice(s,o).map(function(e){return getTensor(e,a,r)});var p=Array.prototype.slice.call(getTensor(t.inputNames.slice(s)[0],a,r).dataSync());return "number"===n.type?p[0]:p}var u=t.attrParams[e];return u&&u.value}function getTensor(e,t,a){var r=parseNodeName(e),n=r[0],s=r[1],o=a.currentContextIds.find(function(e){return !!t[getNodeNameWithContextId(n,e)]});return void 0!==o?t[getNodeNameWithContextId(n,o)][s]:void 0}function getTensorsForCurrentContenxt(e,t,a){return t[getNodeNameWithContextId(e,a.currentContextId)]}function getNodeNameAndIndex(e,t){var a=parseNodeName(e),r=a[0],n=a[1];return [getNodeNameWithContextId(r,t&&t.currentContextId),n]}function getNodeNameWithContextId(e,t){return t?e+"-"+t:e}function parseNodeName(e){var t=e.lastIndexOf(":");return -1===t?[e,0]:[e.substring(0,t),Number(e.substring(t+1))]}function split$1(e,t){for(var a=[],r=0;r<e.length;r+=t)a.push(e.slice(r,r+t));return a}var json=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],arithmetic=Object.freeze({json:json}),json$1=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],basicMath=Object.freeze({json:json$1}),json$2=[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"number"}]}],control=Object.freeze({json:json$2}),json$3=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]}],convolution=Object.freeze({json:json$3}),json$4=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],creation=Object.freeze({json:json$4}),json$5=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],dynamic=Object.freeze({json:json$5}),json$6=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}],evaluation=Object.freeze({json:json$6}),json$7=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],graph=Object.freeze({json:json$7}),json$8=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],image$1=Object.freeze({json:json$8}),json$9=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],logical=Object.freeze({json:json$9}),json$10=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],matrices=Object.freeze({json:json$10}),json$11=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],normalization=Object.freeze({json:json$11}),json$12=[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]}],reduction=Object.freeze({json:json$12}),json$13=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],sliceJoin=Object.freeze({json:json$13}),json$14=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],spectral=Object.freeze({json:json$14}),json$15=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]}],transformation=Object.freeze({json:json$15}),OperationMapper=function(){function e(){var e=[arithmetic,basicMath,control,convolution,creation,dynamic,evaluation,logical,image$1,graph,matrices,normalization,reduction,sliceJoin,spectral,transformation],t=[].concat.apply([],e.map(function(e){return e.json}));this.opMappers=t.reduce(function(e,t){return e[t.tfOpName]=t,e},{});}return Object.defineProperty(e,"Instance",{get:function(){return this._instance||(this._instance=new this)},enumerable:!0,configurable:!0}),e.prototype.transformGraph=function(e,t){var a=this;void 0===t&&(t={});var r=[],n=[],s=e.node.reduce(function(e,t){return e[t.name]=a.mapNode(t),t.op.startsWith("Placeholder")&&r.push(e[t.name]),"Const"===t.op&&n.push(e[t.name]),e},{}),o=[],p=[],u={},i={};null!=t&&(u=this.mapSignatureEntries(t.inputs),i=this.mapSignatureEntries(t.outputs));var m=Object.keys(s);return m.forEach(function(e){var t=s[e];t.inputNames.forEach(function(e){var a=getNodeNameAndIndex(e)[0];t.inputs.push(s[a]),s[a].children.push(t);});}),0===Object.keys(i).length?m.forEach(function(e){var t=s[e];0===t.children.length&&p.push(t);}):Object.keys(i).forEach(function(e){var t=getNodeNameAndIndex(e)[0],a=s[t];null!=a&&(a.signatureKey=i[e],p.push(a));}),Object.keys(u).length>0?Object.keys(u).forEach(function(e){var t=getNodeNameAndIndex(e)[0],a=s[t];a&&(a.signatureKey=u[e],o.push(a));}):o=r,{nodes:s,inputs:o,outputs:p,weights:n,placeholders:r,signature:t}},e.prototype.mapSignatureEntries=function(e){return Object.keys(e||{}).reduce(function(t,a){return t[e[a].name]=a,t},{})},e.prototype.mapNode=function(e){var t=getRegisteredOp(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});var a={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(function(e){return e.startsWith("^")?e.substr(1):e}),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(a.inputParams=t.inputs.reduce(function(e,t){return e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e},{})),null!=t.attrs&&(a.attrParams=t.attrs.reduce(function(t,a){var r=a.type,n=void 0;switch(a.type){case"string":void 0===(n=getStringParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getStringParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"string[]":void 0===(n=getStringArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getStringArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number":void 0===(n=getNumberParam(e.attr,a.tfName,a.defaultValue||0))&&a.tfDeprecatedName&&(n=getNumberParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"number[]":void 0===(n=getNumericArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getNumericArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool":void 0===(n=getBoolParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getBoolParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool[]":void 0===(n=getBoolArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getBoolArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape":void 0===(n=getTensorShapeParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getTensorShapeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape[]":void 0===(n=getTensorShapeArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getTensorShapeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype":void 0===(n=getDtypeParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getDtypeParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype[]":void 0===(n=getDtypeArrayParam(e.attr,a.tfName,a.defaultValue))&&a.tfDeprecatedName&&(n=getDtypeArrayParam(e.attr,a.tfDeprecatedName,a.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error("Unsupported param type: "+a.type+" for op: "+e.op)}return t[a.name]={value:n,type:r},t},{})),a},e}();function decodeBase64(e){var t=i().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function parseStringParam(e,t){var a=Array.isArray(e)?String.fromCharCode.apply(null,e):decodeBase64(e);return t?a:a.toLowerCase()}function getStringParam(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return null!=n?parseStringParam(n.s,r):a}function getBoolParam(e,t,a){var r=e[t];return r?r.b:a}function getNumberParam(e,t,a){var r=e[t]||{},n=null!=r.i?r.i:null!=r.f?r.f:a;return "number"==typeof n?n:parseInt(n,10)}function parseDtypeParam(e){switch("string"==typeof e&&(e=DataType[e]),e){case DataType.DT_FLOAT:return "float32";case DataType.DT_INT32:case DataType.DT_INT64:case DataType.DT_INT8:case DataType.DT_UINT8:return "int32";case DataType.DT_BOOL:return "bool";case DataType.DT_DOUBLE:return "float32";case DataType.DT_STRING:return "string";default:return null}}function getDtypeParam(e,t,a){var r=e[t];return r&&r.type?parseDtypeParam(r.type):a}function getDtypeArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.type?r.list.type.map(function(e){return parseDtypeParam(e)}):a}function parseTensorShapeParam(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(function(e){return "number"==typeof e.size?e.size:parseInt(e.size,10)}):[]}function getTensorShapeParam(e,t,a){var r=e[t];return r&&r.shape?parseTensorShapeParam(r.shape):a}function getNumericArrayParam(e,t,a){var r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(function(e){return "number"==typeof e?e:parseInt(e,10)}):a}function getStringArrayParam(e,t,a,r){void 0===r&&(r=!1);var n=e[t];return n&&n.list&&n.list.s?n.list.s.map(function(e){return parseStringParam(e,r)}):a}function getTensorShapeArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(function(e){return parseTensorShapeParam(e)}):a}function getBoolArrayParam(e,t,a){var r=e[t];return r&&r.list&&r.list.b?r.list.b:a}var NodeValueImpl=function(){function e(e,t,a){var r=this;this.node=e,this.tensorMap=t,this.context=a,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(function(e){return r.getInput(e)}),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(function(e,t){return e[t]=r.getAttr(t),e},{}));}return e.prototype.getInput=function(e){return getTensor(e,this.tensorMap,this.context)},e.prototype.getAttr=function(e,t){var a=this.node.rawAttrs[e];if(null!=a.tensor)return getTensor(e,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return getNumberParam(this.node.rawAttrs,e,t);if(null!=a.s)return getStringParam(this.node.rawAttrs,e,t);if(null!=a.b)return getBoolParam(this.node.rawAttrs,e,t);if(null!=a.shape)return getTensorShapeParam(this.node.rawAttrs,e,t);if(null!=a.type)return getDtypeParam(this.node.rawAttrs,e,t);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return getNumericArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.s)return getStringArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.shape)return getTensorShapeArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.b)return getBoolArrayParam(this.node.rawAttrs,e,t);if(null!=a.list.type)return getDtypeArrayParam(this.node.rawAttrs,e,t)}return t},e}(),executeOp=function(e,t,a){switch(e.op){case"BiasAdd":case"AddV2":case"Add":return [Or(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"AddN":return [$u(getParamValue("tensors",e,t,a))];case"FloorMod":case"Mod":return [So(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"Mul":return [To(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"RealDiv":case"Div":return [Bo(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"DivNoNan":return [bc(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"FloorDiv":return [Co(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"Sub":return [Oo(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"Minimum":return [Io(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"Maximum":return [Eo(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"Pow":return [No(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"SquaredDifference":return [Hc(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$1=function(e,t,a){switch(e.op){case"Abs":case"ComplexAbs":return [Lr(getParamValue("x",e,t,a))];case"Acos":return [Wr(getParamValue("x",e,t,a))];case"Acosh":return [Ur(getParamValue("x",e,t,a))];case"Asin":return [Vr(getParamValue("x",e,t,a))];case"Asinh":return [zr(getParamValue("x",e,t,a))];case"Atan":return [Gr(getParamValue("x",e,t,a))];case"Atan2":return [bo(getParamValue("x",e,t,a),getParamValue("y",e,t,a))];case"Atanh":return [Hr(getParamValue("x",e,t,a))];case"Ceil":return [qr(getParamValue("x",e,t,a))];case"Complex":return [Tn(getParamValue("real",e,t,a),getParamValue("imag",e,t,a))];case"Cos":return [jr(getParamValue("x",e,t,a))];case"Cosh":return [Xr(getParamValue("x",e,t,a))];case"Elu":return [nh(getParamValue("x",e,t,a))];case"Erf":return [Yr(getParamValue("x",e,t,a))];case"Exp":return [$r(getParamValue("x",e,t,a))];case"Expm1":return [Qr(getParamValue("x",e,t,a))];case"Floor":return [Jr(getParamValue("x",e,t,a))];case"Log":return [Zr(getParamValue("x",e,t,a))];case"Log1p":return [to(getParamValue("x",e,t,a))];case"Imag":return [Nn(getParamValue("x",e,t,a))];case"Neg":return [no(getParamValue("x",e,t,a))];case"Reciprocal":return [ro(getParamValue("x",e,t,a))];case"Real":return [Dn(getParamValue("x",e,t,a))];case"Relu":return [ah(getParamValue("x",e,t,a))];case"Round":return [oo(getParamValue("x",e,t,a))];case"Selu":return [sh(getParamValue("x",e,t,a))];case"Sigmoid":return [io(getParamValue("x",e,t,a))];case"Sin":return [ho(getParamValue("x",e,t,a))];case"Sign":return [so(getParamValue("x",e,t,a))];case"Sinh":return [fo(getParamValue("x",e,t,a))];case"Softplus":return [po(getParamValue("x",e,t,a))];case"Sqrt":return [vo(getParamValue("x",e,t,a))];case"Square":return [Gc(getParamValue("x",e,t,a))];case"Tanh":return [yo(getParamValue("x",e,t,a))];case"Tan":return [mo(getParamValue("x",e,t,a))];case"Relu6":case"ClipByValue":return [Kr(getParamValue("x",e,t,a),getParamValue("clipValueMin",e,t,a),getParamValue("clipValueMax",e,t,a))];case"Rsqrt":return [ao(getTensor(e.inputNames[0],t,a))];case"Prod":return [eh(getParamValue("x",e,t,a),getParamValue("axes",e,t,a))];case"LeakyRelu":return [rh(getParamValue("x",e,t,a),getParamValue("alpha",e,t,a))];case"Prelu":return [oh(getParamValue("x",e,t,a),getParamValue("alpha",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}},TensorArray=function(){function e(t,a,r,n,s,o,p){this.name=t,this.dtype=a,this.maxSize=r,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=o,this.clearAfterRead=p,this.tensors=[],this.closed_=!1,this.id=e.nextId++;}return Object.defineProperty(e.prototype,"closed",{get:function(){return this.closed_},enumerable:!0,configurable:!0}),e.prototype.clearAndClose=function(){this.tensors.forEach(function(e){return e.tensor.dispose()}),this.tensors=[],this.closed_=!0;},e.prototype.size=function(){return this.tensors.length},e.prototype.read=function(e){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(e<0||e>=this.tensors.length)throw new Error("Tried to read from index "+e+", but array size is: "+this.tensors.length);var t=this.tensors[e];if(t.cleared)throw new Error("TensorArray "+this.name+": Could not read index "+e+" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor},e.prototype.readMany=function(e){var t=this;return e.map(function(e){return t.read(e)})},e.prototype.write=function(e,t){if(this.closed_)throw new Error("TensorArray "+this.name+" has already been closed.");if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error("Tried to write to index "+e+", but array is not resizeable and size is: "+this.maxSize);var a=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+e+",\n          because the value dtype is "+t.dtype+", but TensorArray dtype is "+this.dtype+".");if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),this.assertShapesMatchAllowUndefinedSize(this.elementShape,t.shape,"TensorArray "+this.name+": Could not write to TensorArray index "+e+"."),a&&a.read)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+e+", because it has already been read.");if(a&&a.written)throw new Error("TensorArray "+this.name+": Could not write to TensorArray index "+e+", because it has already been written.");a.tensor=t,a.written=!0,this.tensors[e]=a;},e.prototype.writeMany=function(e,t){var a=this;if(e.length!==t.length)throw new Error("TensorArray "+this.name+": could not write multiple tensors,because the index size: "+e.length+" is not the same as tensors size: "+t.length+".");e.forEach(function(e,r){return a.write(e,t[r])});},e.prototype.gather=function(e,t){if(t&&t!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but gather requested dtype "+t);if(!e){e=[];for(var a=0;a<this.size();a++)e.push(a);}if(0===e.length)return Fn([],[0].concat(this.elementShape));var r=this.readMany(e);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,"TensorArray shape mismatch: "),hr(r,0)},e.prototype.concat=function(e){if(e&&e!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but concat requested dtype "+e);if(0===this.size())return Fn([],[0].concat(this.elementShape));for(var t=[],a=0;a<this.size();a++)t.push(a);var r=this.readMany(t);return this.assertShapesMatchAllowUndefinedSize(this.elementShape,r[0].shape,"TensorArray shape mismatch: tensor array shape ("+this.elementShape+") vs first tensor shape ("+r[0].shape+")"),Yn(r,0)},e.prototype.scatter=function(e,t){if(t.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+t.dtype);if(e.length!==t.shape[0])throw new Error("Expected len(indices) == tensor.shape[0], but saw: "+e.length+" vs. "+t.shape[0]);var a=Math.max.apply(Math,e);if(!this.dynamicSize&&a>=this.maxSize)throw new Error("Max index must be < array size ("+a+"  vs. "+this.maxSize+")");this.writeMany(e,fr(t,0));},e.prototype.split=function(e,t){var a=this;if(t.dtype!==this.dtype)throw new Error("TensorArray dtype is "+this.dtype+" but tensor has dtype "+t.dtype);var r=0,n=e.map(function(e){return r+=e});if(r!==t.shape[0])throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        "+r+", and tensor's shape is: "+t.shape);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error("TensorArray's size is not equal to the size of lengths ("+this.maxSize+" vs. "+e.length+"), and the TensorArray is not marked as dynamically resizeable");var s=0===r?0:t.size/r,o=[];Ze(function(){t=t.reshape([1,r,s]);for(var p=0;p<e.length;++p){var u=[0,0===p?0:n[p-1],0],i=[1,e[p],s];o[p]=Wl(t,u,i).reshape(a.elementShape);}return o});for(var p=[],u=0;u<e.length;u++)p[u]=u;this.writeMany(p,o);},e.prototype.assertShapesMatchAllowUndefinedSize=function(e,t,a){void 0===a&&(a=""),st.assert(this.shapesEqualAllowUndefinedSize(e,t),function(){return a+" Shapes "+e+" and "+t+" must match"});},e.prototype.shapesEqualAllowUndefinedSize=function(e,t){if(e.length!==t.length)return !1;for(var a=0;a<e.length;a++)if(-1!==e[a]&&-1!==t[a]&&e[a]!==t[a])return !1;return !0},e.nextId=0,e}(),_this=void 0,executeOp$2=function(e,t,a){return __awaiter$1(_this,void 0,void 0,function(){var r,n,s,o,p,u,i,m,l,c,d,y,f,g,h,N,x,V,b,P,T,v,O,S,_,w,A,D,E,I,M,C,k,z,F;return __generator$1(this,function(j){switch(j.label){case 0:switch(e.op){case"LoopCond":return [3,1];case"Switch":return [3,2];case"Merge":return [3,4];case"Enter":return [3,5];case"Exit":return [3,6];case"NextIteration":return [3,7];case"TensorArrayV3":return [3,8];case"TensorArrayWriteV3":return [3,9];case"TensorArrayReadV3":return [3,10];case"TensorArrayGatherV3":return [3,11];case"TensorArrayScatterV3":return [3,12];case"TensorArrayConcatV3":return [3,13];case"TensorArraySplitV3":return [3,14];case"TensorArraySizeV3":return [3,15];case"TensorArrayCloseV3":return [3,16]}return [3,17];case 1:return [2,[getParamValue("pred",e,t,a).clone()]];case 2:return r=getParamValue("pred",e,t,a),n=getParamValue("data",e,t,a),[4,r.data()];case 3:return [2,j.sent()[0]?[void 0,n.clone()]:[n.clone(),void 0]];case 4:return [2,(s=e.inputNames.find(function(e){return void 0!==getTensor(e,t,a)}))?[getTensor(s,t,a).clone()]:void 0];case 5:return o=getParamValue("frameName",e,t,a),p=getParamValue("tensor",e,t,a),a.enterFrame(o),[2,[p.clone()]];case 6:return u=getParamValue("tensor",e,t,a),a.exitFrame(),[2,[u.clone()]];case 7:return i=getParamValue("tensor",e,t,a),a.nextIteration(),[2,[i.clone()]];case 8:return m=getParamValue("size",e,t,a),l=getParamValue("dtype",e,t,a),c=getParamValue("elementShape",e,t,a),d=getParamValue("dynamicSize",e,t,a),y=getParamValue("clearAfterRead",e,t,a),f=getParamValue("identicalElementShapes",e,t,a),g=getParamValue("name",e,t,a),h=new TensorArray(g,l,m,c,f,d,y),a.addTensorArray(h),[2,[On(h.id),On(1)]];case 9:return N=getParamValue("tensorArrayId",e,t,a),x=getParamValue("index",e,t,a),V=getParamValue("tensor",e,t,a),a.getTensorArray(N).write(x,V),[2,[On(1)]];case 10:return b=getParamValue("tensorArrayId",e,t,a),P=getParamValue("index",e,t,a),[2,[a.getTensorArray(b).read(P)]];case 11:return T=getParamValue("tensorArrayId",e,t,a),v=getParamValue("indices",e,t,a),O=getParamValue("dtype",e,t,a),[2,[a.getTensorArray(T).gather(v,O)]];case 12:return S=getParamValue("tensorArrayId",e,t,a),_=getParamValue("indices",e,t,a),w=getParamValue("tensor",e,t,a),a.getTensorArray(S).scatter(_,w),[2,[On(1)]];case 13:return A=getParamValue("tensorArrayId",e,t,a),D=a.getTensorArray(A),E=getParamValue("dtype",e,t,a),[2,[D.concat(E)]];case 14:return I=getParamValue("tensorArrayId",e,t,a),M=getParamValue("tensor",e,t,a),C=getParamValue("lengths",e,t,a),a.getTensorArray(I).split(C,M),[2,[On(1)]];case 15:return k=getParamValue("tensorArrayId",e,t,a),z=a.getTensorArray(k),[2,[On(z.size(),"int32")]];case 16:return F=getParamValue("tensorArrayId",e,t,a),a.getTensorArray(F).clearAndClose(),[2,[On(0)]];case 17:throw TypeError("Node type "+e.op+" is not implemented")}})})},executeOp$3=function(e,t,a){switch(e.op){case"Conv1D":var r=getParamValue("stride",e,t,a),n=getParamValue("pad",e,t,a),s=getParamValue("dataFormat",e,t,a).toUpperCase(),o=getParamValue("dilation",e,t,a);return [fl(getParamValue("x",e,t,a),getParamValue("filter",e,t,a),r,n,s,o)];case"Conv2D":r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a),s=getParamValue("dataFormat",e,t,a).toUpperCase();var p=getParamValue("dilations",e,t,a);return [dl(getParamValue("x",e,t,a),getParamValue("filter",e,t,a),[r[1],r[2]],n,s,[p[1],p[2]])];case"_FusedConv2D":case"FusedDepthwiseConv2dNative":var u=getParamValue("fusedOps",e,t,a),i=u[0],m=u[1],l="biasadd"===i,c="prelu"===m,d="fusedbatchnorm"===i,y=getParamValue("numArgs",e,t,a);if(l){if(c&&2!==y)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!c&&1!==y)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(d)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a),s=getParamValue("dataFormat",e,t,a).toUpperCase(),p=getParamValue("dilations",e,t,a);var f=getParamValue("args",e,t,a),g=f[0],h=f[1];return [("_FusedConv2D"===e.op?hf.conv2d:hf.depthwiseConv2d)({x:getParamValue("x",e,t,a),filter:getParamValue("filter",e,t,a),strides:[r[1],r[2]],pad:n,dataFormat:s,dilations:[p[1],p[2]],bias:g,activation:m,preluActivationWeights:h})];case"Conv2DBackpropInput":case"Conv2dTranspose":var N=getParamValue("outputShape",e,t,a);r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a);return [wl(getParamValue("x",e,t,a),getParamValue("filter",e,t,a),N,[r[1],r[2]],n)];case"DepthwiseConv2dNative":case"DepthwiseConv2d":r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a),p=getParamValue("dilations",e,t,a),s=getParamValue("dataFormat",e,t,a).toUpperCase();return [ml(getParamValue("input",e,t,a),getParamValue("filter",e,t,a),[r[1],r[2]],n,s,[p[1],p[2]])];case"Conv3D":r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a),s=getParamValue("dataFormat",e,t,a).toUpperCase(),p=getParamValue("dilations",e,t,a);return [pl(getParamValue("x",e,t,a),getParamValue("filter",e,t,a),[r[1],r[2],r[3]],n,s,[p[1],p[2],p[3]])];case"AvgPool":r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a);var x=getParamValue("kernelSize",e,t,a);return [Ol(getParamValue("x",e,t,a),[x[1],x[2]],[r[1],r[2]],n)];case"MaxPool":r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a),x=getParamValue("kernelSize",e,t,a);return [_l(getParamValue("x",e,t,a),[x[1],x[2]],[r[1],r[2]],n)];case"MaxPoolWithArgmax":r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a),x=getParamValue("kernelSize",e,t,a);var V=getParamValue("includeBatchInIndex",e,t,a),b=Ll(getParamValue("x",e,t,a),[x[1],x[2]],[r[1],r[2]],n,V);return [b.result,b.indexes];case"AvgPool3D":r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a),x=getParamValue("kernelSize",e,t,a);return [Pl(getParamValue("x",e,t,a),[x[1],x[2],x[3]],[r[1],r[2],r[3]],n)];case"MaxPool3D":r=getParamValue("strides",e,t,a),n=getParamValue("pad",e,t,a),x=getParamValue("kernelSize",e,t,a);return [Bl(getParamValue("x",e,t,a),[x[1],x[2],x[3]],[r[1],r[2],r[3]],n)];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$4=function(e,t,a){switch(e.op){case"Fill":var r=getParamValue("shape",e,t,a),n=getParamValue("dtype",e,t,a),s=getParamValue("value",e,t,a);return [Hn(r,s,n)];case"LinSpace":var o=getParamValue("start",e,t,a),p=getParamValue("stop",e,t,a),u=getParamValue("num",e,t,a);return [qn(o,p,u)];case"Multinomial":var i=getParamValue("logits",e,t,a),m=getParamValue("numSamples",e,t,a),l=getParamValue("seed",e,t,a);return [Ec(i,m,l)];case"OneHot":var c=getParamValue("indices",e,t,a),d=getParamValue("depth",e,t,a),y=getParamValue("onValue",e,t,a),f=getParamValue("offValue",e,t,a);return [Rc(c,d,y,f)];case"Ones":return [zn(getParamValue("shape",e,t,a),getParamValue("dtype",e,t,a))];case"OnesLike":return [jn(getParamValue("x",e,t,a))];case"RandomUniform":return [zc(getParamValue("shape",e,t,a),getParamValue("minval",e,t,a),getParamValue("maxval",e,t,a),getParamValue("dtype",e,t,a))];case"Range":o=getParamValue("start",e,t,a);var g=getParamValue("stop",e,t,a),h=getParamValue("step",e,t,a);return [Kn(o,g,h,getParamValue("dtype",e,t,a))];case"TruncatedNormal":r=getParamValue("shape",e,t,a);var N=getParamValue("mean",e,t,a),x=getParamValue("stdDev",e,t,a);l=getParamValue("seed",e,t,a);return [qc(r,N,x,getParamValue("dtype",e,t,a),l)];case"Zeros":return [Gn(getParamValue("shape",e,t,a),getParamValue("dtype",e,t,a))];case"ZerosLike":return [Xn(getParamValue("x",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}},_this$1=void 0,executeOp$5=function(e,t,a){return __awaiter$1(_this$1,void 0,void 0,function(){var r,n,s,o,p,u,i,m;return __generator$1(this,function(l){switch(l.label){case 0:switch(e.op){case"NonMaxSuppressionV5":case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":return [3,1];case"Where":return [3,5];case"ListDiff":return [3,7]}return [3,8];case 1:return r=getParamValue("boxes",e,t,a),n=getParamValue("scores",e,t,a),s=getParamValue("maxOutputSize",e,t,a),o=getParamValue("iouThreshold",e,t,a),p=getParamValue("scoreThreshold",e,t,a),"NonMaxSuppressionV5"!==e.op?[3,3]:(u=getParamValue("softNmsSigma",e,t,a),[4,nf.nonMaxSuppressionWithScoreAsync(r,n,s,o,p,u)]);case 2:return [2,[(m=l.sent()).selectedIndices,m.selectedScores]];case 3:return [4,nf.nonMaxSuppressionAsync(r,n,s,o,p)];case 4:return [2,[l.sent()]];case 5:return i=getParamValue("condition",e,t,a).asType("bool"),[4,xc(i)];case 6:return m=[l.sent()],i.dispose(),[2,m];case 7:return [2,dr(getParamValue("x",e,t,a),getParamValue("y",e,t,a))];case 8:throw TypeError("Node type "+e.op+" is not implemented")}})})},executeOp$6=function(e,t,a){switch(e.op){case"TopKV2":var r=getParamValue("x",e,t,a),n=getParamValue("k",e,t,a),s=getParamValue("sorted",e,t,a),o=ph(r,n,s);return [o.values,o.indices];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$7=function(e,t,a){switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":var r=getParamValue("default",e,t,a);return [getTensor(e.name,t,a)||r];case"Placeholder":return [getTensor(e.name,t,a)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return [getParamValue("x",e,t,a).clone()];case"IdentityN":return getParamValue("x",e,t,a).map(function(e){return e.clone()});case"Snapshot":return [getParamValue("x",e,t,a).clone()];case"Shape":return [Mn(getParamValue("x",e,t,a).shape,"int32")];case"ShapeN":return getParamValue("x",e,t,a).map(function(e){return Mn(e.shape)});case"Size":return [On(getParamValue("x",e,t,a).size,"int32")];case"Rank":return [On(getParamValue("x",e,t,a).rank,"int32")];case"NoOp":return [On(1)];case"Print":var n=getParamValue("x",e,t,a),s=getParamValue("data",e,t,a),o=getParamValue("message",e,t,a),p=getParamValue("summarize",e,t,a);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(var u=0;u<s.length;u++)console.log(Array.prototype.slice.call(s[u].dataSync()).slice(0,p));return [n];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$8=function(e,t,a){switch(e.op){case"ResizeBilinear":var r=getParamValue("images",e,t,a),n=getParamValue("size",e,t,a),s=getParamValue("alignCorners",e,t,a);return [nf.resizeBilinear(r,[n[0],n[1]],s)];case"ResizeNearestNeighbor":r=getParamValue("images",e,t,a),n=getParamValue("size",e,t,a),s=getParamValue("alignCorners",e,t,a);return [nf.resizeNearestNeighbor(r,[n[0],n[1]],s)];case"CropAndResize":var o=getParamValue("image",e,t,a),p=getParamValue("boxes",e,t,a),u=getParamValue("boxInd",e,t,a),i=getParamValue("cropSize",e,t,a),m=getParamValue("method",e,t,a),l=getParamValue("extrapolationValue",e,t,a);return [nf.cropAndResize(o,p,u,i,m,l)];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$9=function(e,t,a){switch(e.op){case"Equal":return [Kc(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"NotEqual":return [nl(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"Greater":return [Xc(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"GreaterEqual":return [Yc(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"Less":return [Jc(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"LessEqual":return [Zc(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"LogicalAnd":return [pc(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"LogicalNot":return [vc(getParamValue("a",e,t,a))];case"LogicalOr":return [gc(getParamValue("a",e,t,a),getParamValue("b",e,t,a))];case"Select":return [yc(getParamValue("condition",e,t,a),getParamValue("a",e,t,a),getParamValue("b",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$10=function(e,t,a){switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return [El(getParamValue("a",e,t,a),getParamValue("b",e,t,a),getParamValue("transposeA",e,t,a),getParamValue("transposeB",e,t,a))];case"Transpose":return [ua(getParamValue("x",e,t,a),getParamValue("perm",e,t,a))];case"_FusedMatMul":var r=getParamValue("fusedOps",e,t,a),n=r[0],s=r[1],o="biasadd"===n,p="prelu"===s,u=getParamValue("numArgs",e,t,a);if(o){if(p&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!p&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}var i=getParamValue("args",e,t,a),m=i[0],l=i[1];return [hf.matMul({a:getParamValue("a",e,t,a),b:getParamValue("b",e,t,a),transposeA:getParamValue("transposeA",e,t,a),transposeB:getParamValue("transposeB",e,t,a),bias:m,activation:s,preluActivationWeights:l})];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$11=function(e,t,a){switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return [nc(getParamValue("x",e,t,a),getParamValue("mean",e,t,a),getParamValue("variance",e,t,a),getParamValue("offset",e,t,a),getParamValue("scale",e,t,a),getParamValue("epsilon",e,t,a))];case"LRN":return [uh(getParamValue("x",e,t,a),getParamValue("radius",e,t,a),getParamValue("bias",e,t,a),getParamValue("alpha",e,t,a),getParamValue("beta",e,t,a))];case"Softmax":return [ia(getParamValue("x",e,t,a))];case"LogSoftmax":return [sa(getParamValue("x",e,t,a))];case"SparseToDense":return [wh(getParamValue("sparseIndices",e,t,a),getParamValue("outputShape",e,t,a),getParamValue("sparseValues",e,t,a),getParamValue("defaultValue",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$12=function(e,t,a){switch(e.op){case"Max":var r=getParamValue("axis",e,t,a),n=getParamValue("keepDims",e,t,a);return [$l(getParamValue("x",e,t,a),r,n)];case"Mean":r=getParamValue("axis",e,t,a),n=getParamValue("keepDims",e,t,a);return [Ql(getParamValue("x",e,t,a),r,n)];case"Min":r=getParamValue("axis",e,t,a),n=getParamValue("keepDims",e,t,a);return [Jl(getParamValue("x",e,t,a),r,n)];case"Sum":r=getParamValue("axis",e,t,a),n=getParamValue("keepDims",e,t,a);return [th(getParamValue("x",e,t,a),r,n)];case"All":r=getParamValue("axis",e,t,a),n=getParamValue("keepDims",e,t,a);return [ql(getParamValue("x",e,t,a),r,n)];case"Any":r=getParamValue("axis",e,t,a),n=getParamValue("keepDims",e,t,a);return [Kl(getParamValue("x",e,t,a),r,n)];case"ArgMax":r=getParamValue("axis",e,t,a);return [jl(getParamValue("x",e,t,a),r)];case"ArgMin":r=getParamValue("axis",e,t,a);return [Xl(getParamValue("x",e,t,a),r)];case"Prod":r=getParamValue("axis",e,t,a),n=getParamValue("keepDims",e,t,a);return [eh(getParamValue("x",e,t,a),r,n)];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$13=function(e,t,a){switch(e.op){case"ConcatV2":case"Concat":var r=getParamValue("n",e,t,a),n=getParamValue("axis",e,t,a),s=getParamValue("tensors",e,t,a);return s=s.slice(0,r),[Yn(s,n)];case"GatherV2":case"Gather":n=getParamValue("axis",e,t,a);var o=getParamValue("x",e,t,a),p=getParamValue("indices",e,t,a);return [il(o,p.asType("int32"),n)];case"ReverseV2":case"Reverse":n=getParamValue("axis",e,t,a),o=getParamValue("x",e,t,a);return [kl(o,n)];case"Slice":var u=getParamValue("begin",e,t,a),i=getParamValue("size",e,t,a);return [Wl(getParamValue("x",e,t,a),u,i)];case"StridedSlice":u=getParamValue("begin",e,t,a);var m=getParamValue("end",e,t,a),l=getParamValue("strides",e,t,a),c=getParamValue("beginMask",e,t,a),d=getParamValue("endMask",e,t,a),y=getParamValue("ellipsisMask",e,t,a),f=getParamValue("newAxisMask",e,t,a),g=getParamValue("shrinkAxisMask",e,t,a),h=getParamValue("x",e,t,a);if(1===u.length&&h.shape.length>1)for(var N=1;N<h.shape.length;N++)u.push(0),m.push(h.shape[N]),l.push(l[0]);return [dh(h,u,m,l,c,d,y,f,g)];case"Pack":return Ze(function(){var r=getParamValue("axis",e,t,a),n=getParamValue("tensors",e,t,a),s=n[0].shape,o=n[0].squeeze().shape,p=n.map(function(e){var t=st.arraysEqual(e.shape,s);if(!t&&!st.arraysEqual(e.squeeze().shape,o))throw new Error("the input tensors shape does not match");return t?e:e.reshape(s)});return [hr(p,r)]});case"Unpack":return Ze(function(){var r=getParamValue("axis",e,t,a),n=getParamValue("tensor",e,t,a);return fr(n,r)});case"Tile":var x=getParamValue("reps",e,t,a);return [wc(getParamValue("x",e,t,a),x)];case"Split":case"SplitV":n=getParamValue("axis",e,t,a);var V=getParamValue("numOrSizeSplits",e,t,a);return tr(getParamValue("x",e,t,a),V,n);case"ScatterNd":p=getParamValue("indices",e,t,a);var b=getParamValue("values",e,t,a),P=getParamValue("shape",e,t,a);return [vh(p,b,P)];case"GatherNd":var T=getParamValue("x",e,t,a);p=getParamValue("indices",e,t,a);return [Ch(T,p)];case"SparseToDense":p=getParamValue("sparseIndices",e,t,a),P=getParamValue("outputShape",e,t,a);var v=getParamValue("sparseValues",e,t,a),O=getParamValue("defaultValue",e,t,a);return [wh(p,v,P,v.dtype===O.dtype?O:O.asType(v.dtype))];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$14=function(e,t,a){switch(e.op){case"FFT":return [gh(getParamValue("x",e,t,a))];case"IFFT":return [mh(getParamValue("x",e,t,a))];case"RFFT":return [yh(getParamValue("x",e,t,a))];case"IRFFT":return [xh(getParamValue("x",e,t,a))];default:throw TypeError("Node type "+e.op+" is not implemented")}},executeOp$15=function(e,t,a){switch(e.op){case"Cast":return [or(getParamValue("x",e,t,a),getParamValue("dtype",e,t,a))];case"ExpandDims":var r=getParamValue("axis",e,t,a);return [sr(getParamValue("x",e,t,a),r)];case"Squeeze":r=getParamValue("axis",e,t,a);return [lr(getParamValue("x",e,t,a),r)];case"Reshape":return [ur(getParamValue("x",e,t,a),getParamValue("shape",e,t,a))];case"PadV2":case"Pad":return [Ic(getParamValue("x",e,t,a),split$1(getParamValue("padding",e,t,a),2),getParamValue("constantValue",e,t,a))];case"SpaceToBatchND":var n=getParamValue("blockShape",e,t,a),s=split$1(getParamValue("paddings",e,t,a),2);return [cr(getParamValue("x",e,t,a),n,s)];case"BatchToSpaceND":n=getParamValue("blockShape",e,t,a);var o=split$1(getParamValue("crops",e,t,a),2);return [rr(getParamValue("x",e,t,a),n,o)];case"DepthToSpace":var p=getParamValue("blockSize",e,t,a),u=getParamValue("dataFormat",e,t,a).toUpperCase();return [ir(getParamValue("x",e,t,a),p,u)];default:throw TypeError("Node type "+e.op+" is not implemented")}};function executeOp$16(e,t,a){var r=function(e,t,a){switch(e.category){case"arithmetic":return Ze(function(){return executeOp(e,t,a)});case"basic_math":return Ze(function(){return executeOp$1(e,t,a)});case"control":return executeOp$2(e,t,a);case"convolution":return Ze(function(){return executeOp$3(e,t,a)});case"creation":return Ze(function(){return executeOp$4(e,t,a)});case"dynamic":return executeOp$5(e,t,a);case"evaluation":return Ze(function(){return executeOp$6(e,t,a)});case"image":return Ze(function(){return executeOp$8(e,t,a)});case"graph":return Ze(function(){return executeOp$7(e,t,a)});case"logical":return Ze(function(){return executeOp$9(e,t,a)});case"matrices":return Ze(function(){return executeOp$10(e,t,a)});case"normalization":return Ze(function(){return executeOp$11(e,t,a)});case"reduction":return Ze(function(){return executeOp$12(e,t,a)});case"slice_join":return Ze(function(){return executeOp$13(e,t,a)});case"spectral":return Ze(function(){return executeOp$14(e,t,a)});case"transformation":return Ze(function(){return executeOp$15(e,t,a)});case"custom":var r=getRegisteredOp(e.op);if(r&&r.customExecutor)return r.customExecutor(new NodeValueImpl(e,t,a));throw TypeError("Custom op "+e.op+" is not registered.");default:throw TypeError("Unknown op '"+e.op+"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()")}}(e,t,a);return r instanceof Promise?r.then(function(e){return [].concat(e)}):[].concat(r)}var ExecutionContext=function(){function e(e,t){this.weightMap=e,this.tensorArrayMap=t,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds();}return e.prototype.newFrame=function(e,t){return {id:e,frameName:t,iterationId:0}},Object.defineProperty(e.prototype,"currentContext",{get:function(){return this.contexts},set:function(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds());},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentContextId",{get:function(){return this._currentContextIds[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentContextIds",{get:function(){return this._currentContextIds},enumerable:!0,configurable:!0}),e.prototype.generateCurrentContextIds=function(){for(var e=[],t=0;t<this.contexts.length-1;t++){var a=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(a));}e.push(""),this._currentContextIds=e;},e.prototype.contextIdforContexts=function(e){return e?e.map(function(e){return 0===e.id&&0===e.iterationId?"":e.frameName+"-"+e.iterationId}).join("/"):""},e.prototype.enterFrame=function(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));},e.prototype.exitFrame=function(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();},e.prototype.nextIteration=function(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");this.contexts=this.contexts.slice(),this.lastId++;var e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts));},e.prototype.getWeight=function(e){return this.weightMap[e]},e.prototype.addTensorArray=function(e){this.tensorArrayMap[e.id]=e;},e.prototype.getTensorArray=function(e){return this.tensorArrayMap[e]},e}();function getExecutionSubgraph(e,t,a){for(var r=new Set,n=[],s=null,o=null,p=new Set,u=Object.keys(e).map(function(e){return parseNodeName(e)[0]}),i=t.slice();i.length>0;){var m=i.pop();(isControlFlow(m)||isDynamicShape(m))&&null==s&&(o=(s=m).children.map(function(e){return e.name}).filter(function(e){return r.has(e)})),r.add(m.name),null==a[m.name]&&(-1===u.indexOf(m.name)&&(0!==m.inputs.length?m.inputs.forEach(function(e){p.has(e.name)||(p.add(e.name),i.push(e));}):n.push(m.name)));}return {inputs:e,outputs:t,usedNodes:r,missingInputs:n,dynamicNode:s,syncInputs:o}}function getNodesInTopologicalOrder(e,t,a){var r=a.usedNodes,n=a.inputs,s=[];Object.keys(n).map(function(e){return parseNodeName(e)[0]}).map(function(t){return e.nodes[t]}).forEach(function(e){r.has(e.name)&&s.push(e);}),e.weights.forEach(function(e){r.has(e.name)&&s.push(e);});for(var o=new Set,p=[];s.length>0;){var u=s.pop();o.add(u.name),t[u.name]||p.push(u),u.children.forEach(function(e){!o.has(e.name)&&r.has(e.name)&&e.inputs.every(function(e){return o.has(e.name)})&&s.push(e);});}return p}var CONTROL_FLOW_OPS=["Switch","Merge","Enter","Exit","NextIteration"],DYNAMIC_SHAPE_OPS=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function isControlFlow(e){return CONTROL_FLOW_OPS.indexOf(e.op)>=0}function isDynamicShape(e){return DYNAMIC_SHAPE_OPS.indexOf(e.op)>=0}var GraphExecutor=function(){function e(e){this.graph=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._outputs=e.outputs,this._inputs=e.inputs,this._signature=e.signature;}return Object.defineProperty(e.prototype,"weightMap",{get:function(){return this._weightMap},set:function(e){var t=Object.keys(e).map(function(t){return e[t].map(function(e){return e.id})});this.weightIds=[].concat.apply([],t),this._weightMap=e;},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputs",{get:function(){return this._inputs.map(function(e){return {name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"outputs",{get:function(){return this._outputs.map(function(e){return {name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputNodes",{get:function(){return this._inputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"outputNodes",{get:function(){return this._outputs.map(function(e){return e.signatureKey||e.name})},enumerable:!0,configurable:!0}),e.prototype.getCompilationKey=function(e,t){var a=e.map(function(e){return e.name}).sort(),r=t.map(function(e){return e.name}).sort();return a.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)},e.prototype.compile=function(e,t){var a=getExecutionSubgraph(e,t,this.weightMap),r=a.missingInputs,n=a.dynamicNode,s=a.syncInputs;if(null!=n)throw new Error("This execution contains the node '"+n.name+"', which has the dynamic op '"+n.op+"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs ["+s+"]");if(r.length>0){var o=t.map(function(e){return e.name}),p=Object.keys(e);throw new Error("Cannot compute the outputs ["+o+"] from the provided inputs ["+p+"]. Missing the following inputs: ["+r+"]")}return getNodesInTopologicalOrder(this.graph,this.weightMap,a)},e.prototype.execute=function(e,t){var a=this;e=this.mapInputs(e);var r=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);var n=r.map(function(e){return a.graph.nodes[parseNodeName(e)[0]]}),s=t.map(function(e){return a.graph.nodes[parseNodeName(e)[0]]}),o=this.getCompilationKey(n,s),p=this.compiledMap.get(o);null==p&&(p=this.compile(e,s),this.compiledMap.set(o,p));var u={};return Ze(function(){var r=new ExecutionContext(a._weightMap,u),n=__assign$1({},a.weightMap);Object.keys(e).forEach(function(t){var a=parseNodeName(t),r=a[0],s=[];s[a[1]]=e[t],n[r]=s;});for(var s=a.getFrozenTensorIds(n),o={},i=0;i<p.length;i++){var m=p[i];if(!n[m.name]){var l=executeOp$16(m,n,r);if(l instanceof Promise)throw new Error("The execution of the op '"+m.op+"' returned a promise. Please use model.executeAsync() instead.");n[m.name]=l,a.checkTensorForDisposal(m.name,m,n,r,s,t,o);}}return t.map(function(e){return getTensor(e,n,r)})})},e.prototype.getFrozenTensorIds=function(e){var t=[].concat.apply([],Object.keys(e).map(function(t){return e[t]}).map(function(e){return e.map(function(e){return e.id})}));return new Set(t)},e.prototype.checkTensorForDisposal=function(e,t,a,r,n,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(a[e].forEach(function(e){null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length);}),t.inputs.forEach(function(e){if("control"!==e.category){var t=getTensorsForCurrentContenxt(e.name,a,r);null!=t&&t.forEach(function(e){if(e&&!n.has(e.id)){var t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--;}});}}));},e.prototype.executeAsync=function(e,t){return __awaiter$1(this,void 0,void 0,function(){var a,r,n,s,o,p,u=this;return __generator$1(this,function(i){switch(i.label){case 0:return e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t),a={},r=new ExecutionContext(this._weightMap,a),[4,this.executeWithControlFlow(e,r,t)];case 1:return n=i.sent(),s=t.map(function(e){return getTensor(e,n,r)}),o=new Set(s.map(function(e){return e.id})),p=new Set(Object.keys(e).map(function(t){return e[t].id})),Object.keys(n).forEach(function(e){n[e].forEach(function(e){!e||e.isDisposed||o.has(e.id)||p.has(e.id)||-1!==u.weightIds.indexOf(e.id)||e.dispose();});}),[2,s]}})})},e.prototype.executeWithControlFlow=function(e,t,a){return __awaiter$1(this,void 0,void 0,function(){var r,n,s,o,p,u,i,m,l,c,d,y,f,g,h,N,x=this;return __generator$1(this,function(V){switch(V.label){case 0:r=Object.keys(e),n=r.map(function(e){return x.graph.nodes[parseNodeName(e)[0]]}),s=a.map(function(e){return x.graph.nodes[parseNodeName(e)[0]]}),o=getExecutionSubgraph(e,s,this.weightMap),p=o.usedNodes,u=o.missingInputs,i=o.dynamicNode,m=o.syncInputs,l=n.concat(this.graph.weights).map(function(e){return {node:e,contexts:t.currentContext}}),c=__assign$1({},this.weightMap),Object.keys(e).forEach(function(t){var a=parseNodeName(t),r=a[0],n=[];n[a[1]]=e[t],c[r]=n;}),d={},y=this.getFrozenTensorIds(c),f={},V.label=1;case 1:return l.length>0?(g=this.processStack(n,l,t,c,f,y,a,d,p),[4,Promise.all(g)]):[3,3];case 2:return V.sent(),[3,1];case 3:if(null==i&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."),(h=s.filter(function(e){return !isControlFlow(e)&&!getTensor(e.name,c,t)}).map(function(e){return e.name})).length>0)throw N="",null!=i&&(N="Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs ["+m+"]"),new Error("Cannot compute the outputs ["+h+"] from the provided inputs ["+r+"]. Consider providing the following inputs: ["+u+"]. "+N);return [2,c]}})})},e.prototype.processStack=function(e,t,a,r,n,s,o,p,u){for(var i=this,m=[],l=function(){var l=t.pop();a.currentContext=l.contexts;var d="";if("Enter"===l.node.op&&getParamValue("isConstant",l.node,r,a)&&(d=getNodeNameAndIndex(l.node.name,a)[0]),-1===e.indexOf(l.node)){var y=executeOp$16(l.node,r,a);d||(d=getNodeNameAndIndex(l.node.name,a)[0]);var f=a.currentContext;y instanceof Promise?m.push(y.then(function(e){return r[d]=e,a.currentContext=f,i.checkTensorForDisposal(d,l.node,r,a,s,o,p),i.processChildNodes(l.node,t,a,r,n,u),e})):(r[d]=y,c.checkTensorForDisposal(d,l.node,r,a,s,o,p),c.processChildNodes(l.node,t,a,r,n,u));}else c.processChildNodes(l.node,t,a,r,n,u);},c=this;t.length>0;)l();return m},e.prototype.processChildNodes=function(e,t,a,r,n,s){e.children.forEach(function(e){var o=getNodeNameAndIndex(e.name,a)[0];!n[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some(function(e){return !!getTensor(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})):e.inputNames.every(function(e){return !!getTensor(e,r,a)})&&(n[o]=!0,t.push({contexts:a.currentContext,node:e})));});},e.prototype.dispose=function(){var e=this;Object.keys(this.weightMap).forEach(function(t){return e.weightMap[t].forEach(function(e){return e.dispose()})});},e.prototype.checkInputShapeAndType=function(e){var t=this;Object.keys(e).forEach(function(a){var r=e[a],n=parseNodeName(a)[0],s=t.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){var o=s.attrParams.shape.value,p=o.length===r.shape.length&&r.shape.every(function(e,t){return -1===o[t]||o[t]===e});st.assert(p,function(){return "The shape of dict['"+s.name+"'] provided in model.execute(dict) must be ["+o+"], but was ["+r.shape+"]"});}s.attrParams.dtype&&s.attrParams.dtype.value&&st.assert(r.dtype===s.attrParams.dtype.value,function(){return "The dtype of dict['"+s.name+"'] provided in model.execute(dict) must be "+s.attrParams.dtype.value+", but was "+r.dtype});});},e.prototype.mapInputs=function(e){var t={};for(var a in e){if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[a])t[this._signature.inputs[a].name]=e[a];else t[a]=e[a];}return t},e.prototype.checkInputs=function(e){var t=this,a=Object.keys(e).filter(function(e){var a=parseNodeName(e)[0];return null==t.graph.nodes[a]});if(a.length>0)throw new Error("The dict provided in model.execute(dict) has keys: ["+a+"] that are not part of graph")},e.prototype.mapOutputs=function(e){var t=this;return e.map(function(e){return null!=t._signature&&null!=t._signature.outputs&&null!=t._signature.outputs[e]?t._signature.outputs[e].name:e},{})},e.prototype.checkOutputs=function(e){var t=this;e.forEach(function(e){var a=parseNodeName(e)[0];if(!t.graph.nodes[a])throw new Error("The output '"+e+"' is not found in the graph")});},e}(),TFHUB_SEARCH_PARAM="?tfjs-format=file",DEFAULT_MODEL_NAME="model.json",GraphModel=function(){function e(e,t){void 0===t&&(t={}),this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={});}return Object.defineProperty(e.prototype,"modelVersion",{get:function(){return this.version},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputNodes",{get:function(){return this.executor.inputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"outputNodes",{get:function(){return this.executor.outputNodes},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputs",{get:function(){return this.executor.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"outputs",{get:function(){return this.executor.outputs},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"weights",{get:function(){return this.executor.weightMap},enumerable:!0,configurable:!0}),e.prototype.findIOHandler=function(){var e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=Bd.browserHTTPRequest(e,this.loadOptions);else {var t=Bd.getLoadHandlers(e,this.loadOptions.onProgress);if(0===t.length)t.push(Bd.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error("Found more than one ("+t.length+") load handlers for URL '"+[e]+"'");this.handler=t[0];}},e.prototype.load=function(){return __awaiter$1(this,void 0,void 0,function(){var e,t,a,r;return __generator$1(this,function(n){switch(n.label){case 0:if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");return e=this,[4,this.handler.load()];case 1:return e.artifacts=n.sent(),t=this.artifacts.modelTopology,a={},null!=this.artifacts.userDefinedMetadata&&(a=this.artifacts.userDefinedMetadata.signature),this.version=t.versions.producer+"."+t.versions.minConsumer,r=Bd.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs),this.executor=new GraphExecutor(OperationMapper.Instance.transformGraph(t,a)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),[2,!0]}})})},e.prototype.save=function(e,t){return __awaiter$1(this,void 0,void 0,function(){var t;return __generator$1(this,function(a){if("string"==typeof e){if(0===(t=Bd.getSaveHandlers(e)).length)throw new Error("Cannot find any save handlers for URL '"+e+"'");if(t.length>1)throw new Error("Found more than one ("+t.length+") save handlers for URL '"+e+"'");e=t[0];}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return [2,e.save(this.artifacts)]})})},e.prototype.predict=function(e,t){return this.execute(e,this.outputNodes)},e.prototype.normalizeInputs=function(e){if(!(e instanceof wt||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error("Input tensor count mismatch,the graph model has "+this.inputNodes.length+" placeholders, while there are "+e.length+" input tensors.");return this.inputNodes.reduce(function(t,a,r){return t[a]=e[r],t},{})},e.prototype.normalizeOutputs=function(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]},e.prototype.execute=function(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);var a=this.executor.execute(e,t);return a.length>1?a:a[0]},e.prototype.executeAsync=function(e,t){return __awaiter$1(this,void 0,void 0,function(){var a;return __generator$1(this,function(r){switch(r.label){case 0:return e=this.normalizeInputs(e),t=this.normalizeOutputs(t),[4,this.executor.executeAsync(e,t)];case 1:return [2,(a=r.sent()).length>1?a:a[0]]}})})},e.prototype.convertTensorMapToTensorsMap=function(e){return Object.keys(e).reduce(function(t,a){return t[a]=[e[a]],t},{})},e.prototype.dispose=function(){this.executor.dispose();},e}();function loadGraphModel(e,t){return void 0===t&&(t={}),__awaiter$1(this,void 0,void 0,function(){var a;return __generator$1(this,function(r){switch(r.label){case 0:if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");return null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=""+e+DEFAULT_MODEL_NAME+TFHUB_SEARCH_PARAM),[4,(a=new GraphModel(e,t)).load()];case 1:return r.sent(),[2,a]}})})}var version$2="1.7.2";

            var extendStatics$1=function(t,e){return (extendStatics$1=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e;}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);})(t,e)};function __extends$1(t,e){function r(){this.constructor=t;}extendStatics$1(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r);}function __awaiter$2(t,e,r,n){return new(r||(r=Promise))(function(i,o){function a(t){try{u(n.next(t));}catch(t){o(t);}}function s(t){try{u(n.throw(t));}catch(t){o(t);}}function u(t){t.done?i(t.value):new r(function(e){e(t.value);}).then(a,s);}u((n=n.apply(t,e||[])).next());})}function __generator$2(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a);}catch(t){o=[6,t],n=0;}finally{r=i=0;}if(5&o[0])throw o[1];return {value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function createCommonjsModule$1(t,e){return t(e={exports:{}},e.exports),e.exports}var alea=createCommonjsModule$1(function(t){!function(t,e,r){function n(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function i(t,e){var r=new function(t){var e,r=this,n=(e=4022871197,function(t){t=t.toString();for(var r=0;r<t.length;r++){var n=.02519603282416938*(e+=t.charCodeAt(r));n-=e=n>>>0,e=(n*=e)>>>0,e+=4294967296*(n-=e);}return 2.3283064365386963e-10*(e>>>0)});r.next=function(){var t=2091639*r.s0+2.3283064365386963e-10*r.c;return r.s0=r.s1,r.s1=r.s2,r.s2=t-(r.c=0|t)},r.c=1,r.s0=n(" "),r.s1=n(" "),r.s2=n(" "),r.s0-=n(t),r.s0<0&&(r.s0+=1),r.s1-=n(t),r.s1<0&&(r.s1+=1),r.s2-=n(t),r.s2<0&&(r.s2+=1),n=null;}(t),i=e&&e.state,o=r.next;return o.int32=function(){return 4294967296*r.next()|0},o.double=function(){return o()+1.1102230246251565e-16*(2097152*o()|0)},o.quick=o,i&&("object"==typeof i&&n(i,r),o.state=function(){return n(r,{})}),o}e&&e.exports?e.exports=i:r&&r.amd?r(function(){return i}):this.alea=i;}(0,t,!1);}),xor128=createCommonjsModule$1(function(t){!function(t,e,r){function n(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function i(t,e){var r=new function(t){var e=this,r="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:r+=t;for(var n=0;n<r.length+64;n++)e.x^=0|r.charCodeAt(n),e.next();}(t),i=e&&e.state,o=function(){return (r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},o.int32=r.next,o.quick=o,i&&("object"==typeof i&&n(i,r),o.state=function(){return n(r,{})}),o}e&&e.exports?e.exports=i:r&&r.amd?r(function(){return i}):this.xor128=i;}(0,t,!1);}),xorwow=createCommonjsModule$1(function(t){!function(t,e,r){function n(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function i(t,e){var r=new function(t){var e=this,r="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:r+=t;for(var n=0;n<r.length+64;n++)e.x^=0|r.charCodeAt(n),n==r.length&&(e.d=e.x<<10^e.x>>>4),e.next();}(t),i=e&&e.state,o=function(){return (r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},o.int32=r.next,o.quick=o,i&&("object"==typeof i&&n(i,r),o.state=function(){return n(r,{})}),o}e&&e.exports?e.exports=i:r&&r.amd?r(function(){return i}):this.xorwow=i;}(0,t,!1);}),xorshift7=createCommonjsModule$1(function(t){!function(t,e,r){function n(t,e){return e.x=t.x.slice(),e.i=t.i,e}function i(t,e){null==t&&(t=+new Date);var r=new function(t){var e=this;e.next=function(){var t,r,n=e.x,i=e.i;return t=n[i],r=(t^=t>>>7)^t<<24,r^=(t=n[i+1&7])^t>>>10,r^=(t=n[i+3&7])^t>>>3,r^=(t=n[i+4&7])^t<<7,t=n[i+7&7],r^=(t^=t<<13)^t<<9,n[i]=r,e.i=i+1&7,r},function(t,e){var r,n=[];if(e===(0|e))n[0]=e;else for(e=""+e,r=0;r<e.length;++r)n[7&r]=n[7&r]<<15^e.charCodeAt(r)+n[r+1&7]<<13;for(;n.length<8;)n.push(0);for(r=0;r<8&&0===n[r];++r);for(8==r?n[7]=-1:n[r],t.x=n,t.i=0,r=256;r>0;--r)t.next();}(e,t);}(t),i=e&&e.state,o=function(){return (r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},o.int32=r.next,o.quick=o,i&&(i.x&&n(i,r),o.state=function(){return n(r,{})}),o}e&&e.exports?e.exports=i:r&&r.amd?r(function(){return i}):this.xorshift7=i;}(0,t,!1);}),xor4096=createCommonjsModule$1(function(t){!function(t,e,r){function n(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function i(t,e){null==t&&(t=+new Date);var r=new function(t){var e=this;e.next=function(){var t,r,n=e.w,i=e.X,o=e.i;return e.w=n=n+1640531527|0,r=i[o+34&127],t=i[o=o+1&127],r^=r<<13,t^=t<<17,r^=r>>>15,t^=t>>>12,r=i[o]=r^t,e.i=o,r+(n^n>>>16)|0},function(t,e){var r,n,i,o,a,s=[],u=128;for(e===(0|e)?(n=e,e=null):(e+="\0",n=0,u=Math.max(u,e.length)),i=0,o=-32;o<u;++o)e&&(n^=e.charCodeAt((o+32)%e.length)),0===o&&(a=n),n^=n<<10,n^=n>>>15,n^=n<<4,n^=n>>>13,o>=0&&(a=a+1640531527|0,i=0==(r=s[127&o]^=n+a)?i+1:0);for(i>=128&&(s[127&(e&&e.length||0)]=-1),i=127,o=512;o>0;--o)n=s[i+34&127],r=s[i=i+1&127],n^=n<<13,r^=r<<17,n^=n>>>15,r^=r>>>12,s[i]=n^r;t.w=a,t.X=s,t.i=i;}(e,t);}(t),i=e&&e.state,o=function(){return (r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},o.int32=r.next,o.quick=o,i&&(i.X&&n(i,r),o.state=function(){return n(r,{})}),o}e&&e.exports?e.exports=i:r&&r.amd?r(function(){return i}):this.xor4096=i;}(0,t,!1);}),tychei=createCommonjsModule$1(function(t){!function(t,e,r){function n(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function i(t,e){var r=new function(t){var e=this,r="";e.next=function(){var t=e.b,r=e.c,n=e.d,i=e.a;return t=t<<25^t>>>7^r,r=r-n|0,n=n<<24^n>>>8^i,i=i-t|0,e.b=t=t<<20^t>>>12^r,e.c=r=r-n|0,e.d=n<<16^r>>>16^i,e.a=i-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):r+=t;for(var n=0;n<r.length+20;n++)e.b^=0|r.charCodeAt(n),e.next();}(t),i=e&&e.state,o=function(){return (r.next()>>>0)/4294967296};return o.double=function(){do{var t=((r.next()>>>11)+(r.next()>>>0)/4294967296)/(1<<21);}while(0===t);return t},o.int32=r.next,o.quick=o,i&&("object"==typeof i&&n(i,r),o.state=function(){return n(r,{})}),o}e&&e.exports?e.exports=i:r&&r.amd?r(function(){return i}):this.tychei=i;}(0,t,!1);}),seedrandom=createCommonjsModule$1(function(t){!function(e,r){var n,i=this,o=256,a=6,s="random",u=r.pow(o,a),c=r.pow(2,52),l=2*c,h=o-1;function f(t,f,v){var _=[],w=p(function t(e,r){var n,i=[],o=typeof e;if(r&&"object"==o)for(n in e)try{i.push(t(e[n],r-1));}catch(t){}return i.length?i:"string"==o?e:e+"\0"}((f=1==f?{entropy:!0}:f||{}).entropy?[t,m(e)]:null==t?function(){try{var t;return n&&(t=n.randomBytes)?t=t(o):(t=new Uint8Array(o),(i.crypto||i.msCrypto).getRandomValues(t)),m(t)}catch(t){var r=i.navigator,a=r&&r.plugins;return [+new Date,i,a,i.screen,m(e)]}}():t,3),_),y=new function(t){var e,r=t.length,n=this,i=0,a=n.i=n.j=0,s=n.S=[];r||(t=[r++]);for(;i<o;)s[i]=i++;for(i=0;i<o;i++)s[i]=s[a=h&a+t[i%r]+(e=s[i])],s[a]=e;(n.g=function(t){for(var e,r=0,i=n.i,a=n.j,s=n.S;t--;)e=s[i=h&i+1],r=r*o+s[h&(s[i]=s[a=h&a+e])+(s[a]=e)];return n.i=i,n.j=a,r})(o);}(_),g=function(){for(var t=y.g(a),e=u,r=0;t<c;)t=(t+r)*o,e*=o,r=y.g(1);for(;t>=l;)t/=2,e/=2,r>>>=1;return (t+r)/e};return g.int32=function(){return 0|y.g(4)},g.quick=function(){return y.g(4)/4294967296},g.double=g,p(m(y.S),e),(f.pass||v||function(t,e,n,i){return i&&(i.S&&d(i,y),t.state=function(){return d(y,{})}),n?(r[s]=t,e):t})(g,w,"global"in f?f.global:this==r,f.state)}function d(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function p(t,e){for(var r,n=t+"",i=0;i<n.length;)e[h&i]=h&(r^=19*e[h&i])+n.charCodeAt(i++);return m(e)}function m(t){return String.fromCharCode.apply(0,t)}if(r["seed"+s]=f,p(r.random(),e),t.exports){t.exports=f;try{n=require("crypto");}catch(t){}}}([],Math);});seedrandom.alea=alea,seedrandom.xor128=xor128,seedrandom.xorwow=xorwow,seedrandom.xorshift7=xorshift7,seedrandom.xor4096=xor4096,seedrandom.tychei=tychei;var seedrandom$1=seedrandom,seedrandom_1=seedrandom$1.alea;function deepMap(t,e){return deepMapInternal(t,e)}function deepMapInternal(t,e,r,n){if(void 0===r&&(r=new Map),void 0===n&&(n=new Set),null==t)return null;if(n.has(t))throw new Error("Circular references are not supported.");if(r.has(t))return r.get(t);var i=e(t);if(i.recurse&&null!==i.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(i.recurse){if(isIterable(t)){var o=Array.isArray(t)?[]:{};for(var a in n.add(t),t){var s=deepMapInternal(t[a],e,r,n);o[a]=s;}return n.delete(t),o}throw new Error("Can't recurse into non-iterable type: "+t)}return r.set(t,i.value),i.value}function deepZip(t,e){return void 0===e&&(e=zipToList),deepZipInternal(t,e)}function deepZipInternal(t,e,r){void 0===r&&(r=new Set);var n=t[0];if(r.has(n))throw new Error("Circular references are not supported.");var i=e(t);if(i.recurse&&null!==i.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(i.recurse){if(isIterable(n)){var o=Array.isArray(n)?[]:{};r.add(n);var a=function(n){var i=deepZipInternal(t.map(function(t){return t[n]}),e,r);o[n]=i;};for(var s in n)a(s);return r.delete(n),o}throw new Error("Can't recurse into non-iterable type: "+n)}return i.value}function zipToList(t){return null===t?null:isIterable(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}function deepMapAndAwaitAll(t,e){return __awaiter$2(this,void 0,void 0,function(){var r,n,i,o,a,s;return __generator$2(this,function(u){switch(u.label){case 0:r=new Map,deepMapInternal(t,e,r),n=0,i=Array.from(r.keys()),u.label=1;case 1:return n<i.length?(o=i[n],(a=r.get(o))instanceof Promise?[4,a]:[3,3]):[3,4];case 2:s=u.sent(),r.set(o,s),u.label=3;case 3:return n++,[3,1];case 4:return [2,deepMapInternal(t,e,r)]}})})}function isIterable(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof wt))}function canTensorify(t){return null==t||isPrimitive$1(t)||Array.isArray(t)||"object"==typeof t&&t instanceof wt||st.isTypedArray(t)}function isPrimitive$1(t){return null===t||"object"!=typeof t&&"function"!=typeof t}function deepClone(t){return deepMap(t,cloneIfTensor)}function cloneIfTensor(t){return t instanceof wt?{value:t.clone(),recurse:!1}:isIterable(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}var RingBuffer=function(){function t(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t;}return t.prototype.wrap=function(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity},t.prototype.get=function(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]},t.prototype.set=function(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e;},t.prototype.length=function(){var t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t},t.prototype.isFull=function(){return this.length()===this.capacity},t.prototype.isEmpty=function(){return 0===this.length()},t.prototype.push=function(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1);},t.prototype.pushAll=function(t){for(var e=0,r=t;e<r.length;e++){var n=r[e];this.push(n);}},t.prototype.pop=function(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);var t=this.get(this.end);return this.set(this.end,void 0),t},t.prototype.unshift=function(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t);},t.prototype.shift=function(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");var t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t},t.prototype.shuffleExcise=function(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");var e=this.wrap(this.begin+t),r=this.get(e);return this.set(e,this.pop()),r},t}(),GrowingRingBuffer=function(t){function e(){return t.call(this,e.INITIAL_CAPACITY)||this}return __extends$1(e,t),e.prototype.isFull=function(){return !1},e.prototype.push=function(e){t.prototype.isFull.call(this)&&this.expand(),t.prototype.push.call(this,e);},e.prototype.unshift=function(e){t.prototype.isFull.call(this)&&this.expand(),t.prototype.unshift.call(this,e);},e.prototype.expand=function(){for(var t=2*this.capacity,e=new Array(t),r=this.length(),n=0;n<r;n++)e[n]=this.get(this.wrap(this.begin+n));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=r;},e.INITIAL_CAPACITY=32,e}(RingBuffer);function iteratorFromItems(t){return new ArrayIterator(t)}function iteratorFromFunction(t){return new FunctionCallIterator(t)}function iteratorFromConcatenated(t,e){return new ChainedIterator(t,e)}function iteratorFromZipped(t,e){return void 0===e&&(e=ZipMismatchMode.FAIL),new ZipIterator(t,e)}var ZipMismatchMode,LazyIterator=function(){function t(){}return t.prototype.toArray=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e;return __generator$2(this,function(r){switch(r.label){case 0:return t=[],[4,this.next()];case 1:e=r.sent(),r.label=2;case 2:return e.done?[3,4]:(t.push(e.value),[4,this.next()]);case 3:return e=r.sent(),[3,2];case 4:return [2,t]}})})},t.prototype.toArrayForTest=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r;return __generator$2(this,function(n){switch(n.label){case 0:return t=this.prefetch(100),e=[],[4,t.next()];case 1:r=n.sent(),n.label=2;case 2:return r.done?[3,4]:(e.push(r.value),[4,t.next()]);case 3:return r=n.sent(),[3,2];case 4:return [2,e]}})})},t.prototype.resolveFully=function(){return __awaiter$2(this,void 0,void 0,function(){var t;return __generator$2(this,function(e){switch(e.label){case 0:return [4,this.next()];case 1:t=e.sent(),e.label=2;case 2:return t.done?[3,4]:[4,this.next()];case 3:return t=e.sent(),[3,2];case 4:return [2]}})})},t.prototype.resolveWhile=function(t){return __awaiter$2(this,void 0,void 0,function(){var e,r;return __generator$2(this,function(n){switch(n.label){case 0:return [4,this.next()];case 1:e=n.sent(),r=t(e.value),n.label=2;case 2:return e.done||!r?[3,4]:[4,this.next()];case 3:return e=n.sent(),r=t(e.value),[3,2];case 4:return [2]}})})},t.prototype.handleErrors=function(t){return new ErrorHandlingLazyIterator(this,t)},t.prototype.filter=function(t){return new FilterIterator(this,t)},t.prototype.map=function(t){return new MapIterator(this,t)},t.prototype.mapAsync=function(t){return new AsyncMapIterator(this,t)},t.prototype.serialMapAsync=function(t){return new AsyncMapIterator(this,t).serial()},t.prototype.flatmap=function(t){return new FlatmapIterator(this,t)},t.prototype.forEachAsync=function(t){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(e){return [2,this.map(t).resolveFully()]})})},t.prototype.serialForEach=function(t){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(e){return [2,this.serialMapAsync(t).resolveWhile(function(t){return !0===t})]})})},t.prototype.rowMajorBatch=function(t,e){return void 0===e&&(e=!0),new RowMajorBatchIterator(this,t,e)},t.prototype.columnMajorBatch=function(t,e,r){return void 0===e&&(e=!0),void 0===r&&(r=zipToList),this.rowMajorBatch(t,e).map(function(t){return deepZip(t,r)})},t.prototype.concatenate=function(t,e){return new ChainedIterator(iteratorFromItems([this,t]),e)},t.prototype.take=function(t){return t<0||null==t?this:new TakeIterator(this,t)},t.prototype.skip=function(t){return t<0||null==t?this:new SkipIterator(this,t)},t.prototype.prefetch=function(t){return new PrefetchIterator(this,t)},t.prototype.shuffle=function(t,e){return new ShuffleIterator(this,t,e)},t.prototype.serial=function(){return new SerialIterator(this)},t}(),ArrayIterator=function(t){function e(e){var r=t.call(this)||this;return r.items=e,r.trav=0,r}return __extends$1(e,t),e.prototype.summary=function(){return "Array of "+this.items.length+" items"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t;return __generator$2(this,function(e){return this.trav>=this.items.length?[2,{value:null,done:!0}]:(t=this.items[this.trav],this.trav++,[2,{value:deepClone(t),done:!1}])})})},e}(LazyIterator),FunctionCallIterator=function(t){function e(e){var r=t.call(this)||this;return r.nextFn=e,r}return __extends$1(e,t),e.prototype.summary=function(){return "Function call"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){try{return [2,this.nextFn()]}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}return [2]})})},e}(LazyIterator),SerialIterator=function(t){function e(e){var r=t.call(this)||this;return r.upstream=e,r.lastRead=Promise.resolve({value:null,done:!1}),r}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Serial"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t=this;return __generator$2(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){return [2,this.upstream.next()]})})},e}(LazyIterator),SkipIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.maxCount=r,n.count=0,n.lastRead=Promise.resolve({value:null,done:!1}),n}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Skip"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t=this;return __generator$2(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return __awaiter$2(this,void 0,void 0,function(){var t;return __generator$2(this,function(e){switch(e.label){case 0:return this.count++<this.maxCount?[4,this.upstream.next()]:[3,2];case 1:return (t=e.sent()).done?[2,t]:(tn(t.value),[3,0]);case 2:return [2,this.upstream.next()]}})})},e}(LazyIterator),TakeIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.maxCount=r,n.count=0,n}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Take"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){return this.count++>=this.maxCount?[2,{value:null,done:!0}]:[2,this.upstream.next()]})})},e}(LazyIterator),RowMajorBatchIterator=function(t){function e(e,r,n){void 0===n&&(n=!0);var i=t.call(this)||this;return i.upstream=e,i.batchSize=r,i.enableSmallLastBatch=n,i.lastRead=Promise.resolve({value:null,done:!1}),i}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> RowMajorBatch"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t=this;return __generator$2(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e;return __generator$2(this,function(r){switch(r.label){case 0:t=[],r.label=1;case 1:return t.length<this.batchSize?[4,this.upstream.next()]:[3,3];case 2:return (e=r.sent()).done?this.enableSmallLastBatch&&t.length>0?[2,{value:t,done:!1}]:[2,{value:null,done:!0}]:(t.push(e.value),[3,1]);case 3:return [2,{value:t,done:!1}]}})})},e}(LazyIterator),FilterIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.predicate=r,n.lastRead=Promise.resolve({value:null,done:!1}),n}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Filter"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t=this;return __generator$2(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return __awaiter$2(this,void 0,void 0,function(){var t;return __generator$2(this,function(e){switch(e.label){case 0:return [4,this.upstream.next()];case 1:return (t=e.sent()).done||this.predicate(t.value)?[2,t]:(tn(t.value),[3,0]);case 2:return [2]}})})},e}(LazyIterator),MapIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.transform=r,n}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Map"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r,n,i,o,a;return __generator$2(this,function(s){switch(s.label){case 0:return [4,this.upstream.next()];case 1:if((t=s.sent()).done)return [2,{value:null,done:!0}];for(e=Mt.getTensorsInContainer(t.value),r=this.transform(t.value),n=Mt.getTensorsInContainer(r),i=0,o=e;i<o.length;i++)a=o[i],Mt.isTensorInList(a,n)||a.dispose();return [2,{value:r,done:!1}]}})})},e}(LazyIterator),ErrorHandlingLazyIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.handler=r,n.count=0,n.lastRead=Promise.resolve({value:null,done:!1}),n}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> handleErrors"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t=this;return __generator$2(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return __awaiter$2(this,void 0,void 0,function(){var t;return __generator$2(this,function(e){switch(e.label){case 0:e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.upstream.next()];case 2:return [2,e.sent()];case 3:return t=e.sent(),this.handler(t)?[3,4]:[2,{value:null,done:!0}];case 4:return [3,0];case 5:return [2]}})})},e}(LazyIterator),AsyncMapIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.transform=r,n}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> AsyncMap"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r,n,i,o,a;return __generator$2(this,function(s){switch(s.label){case 0:return [4,this.upstream.next()];case 1:return (t=s.sent()).done?[2,{value:null,done:!0}]:(e=Mt.getTensorsInContainer(t.value),[4,this.transform(t.value)]);case 2:for(r=s.sent(),n=Mt.getTensorsInContainer(r),i=0,o=e;i<o.length;i++)a=o[i],Mt.isTensorInList(a,n)||a.dispose();return [2,{value:r,done:!1}]}})})},e}(LazyIterator),OneToManyIterator=function(t){function e(){var e=t.call(this)||this;return e.outputQueue=new GrowingRingBuffer,e.lastRead=Promise.resolve({value:null,done:!1}),e}return __extends$1(e,t),e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t=this;return __generator$2(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.serialNext=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){switch(t.label){case 0:return 0!==this.outputQueue.length()?[3,2]:[4,this.pump()];case 1:return t.sent()?[3,0]:[2,{value:null,done:!0}];case 2:return [2,{value:this.outputQueue.shift(),done:!1}]}})})},e}(LazyIterator),FlatmapIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.transform=r,n}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Flatmap"},e.prototype.pump=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r,n,i,o,a;return __generator$2(this,function(s){switch(s.label){case 0:return [4,this.upstream.next()];case 1:if((t=s.sent()).done)return [2,!1];for(e=Mt.getTensorsInContainer(t.value),r=this.transform(t.value),n=Mt.getTensorsInContainer(r),this.outputQueue.pushAll(r),i=0,o=e;i<o.length;i++)a=o[i],Mt.isTensorInList(a,n)||a.dispose();return [2,!0]}})})},e}(OneToManyIterator),ChainedIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.baseErrorHandler=r,n.lastRead=null,n.iterator=null,n.moreIterators=e,n}return __extends$1(e,t),e.prototype.summary=function(){return "TODO: fill in upstream of chained summaries -> Chained"},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){return this.lastRead=this.readFromChain(this.lastRead),[2,this.lastRead]})})},e.prototype.readFromChain=function(t){return __awaiter$2(this,void 0,void 0,function(){var e,r;return __generator$2(this,function(n){switch(n.label){case 0:return [4,t];case 1:return n.sent(),null!=this.iterator?[3,3]:[4,this.moreIterators.next()];case 2:if((e=n.sent()).done)return [2,{value:null,done:!0}];this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler)),n.label=3;case 3:return [4,this.iterator.next()];case 4:return (r=n.sent()).done?(this.iterator=null,[2,this.readFromChain(t)]):[2,r]}})})},e}(LazyIterator);!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST";}(ZipMismatchMode||(ZipMismatchMode={}));var ZipIterator=function(t){function e(e,r){void 0===r&&(r=ZipMismatchMode.FAIL);var n=t.call(this)||this;return n.iterators=e,n.mismatchMode=r,n.count=0,n.currentPromise=null,n}return __extends$1(e,t),e.prototype.summary=function(){return "{TODO: fill in upstream of zip summaries} -> Zip"},e.prototype.nextState=function(t){return __awaiter$2(this,void 0,void 0,function(){function e(t){return t instanceof LazyIterator?{value:t.next().then(function(t){return r++,t.done&&n++,t.value}),recurse:!1}:{value:null,recurse:!0}}var r,n,i;return __generator$2(this,function(o){switch(o.label){case 0:return [4,t];case 1:return o.sent(),r=0,n=0,[4,deepMapAndAwaitAll(this.iterators,e)];case 2:if(i=o.sent(),r===n)return [2,{value:null,done:!0}];if(n>0)switch(this.mismatchMode){case ZipMismatchMode.FAIL:throw new Error("Zipped streams should have the same length. Mismatched at element "+this.count+".");case ZipMismatchMode.SHORTEST:return [2,{value:null,done:!0}];case ZipMismatchMode.LONGEST:}return this.count++,[2,{value:i,done:!1}]}})})},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){return this.currentPromise=this.nextState(this.currentPromise),[2,this.currentPromise]})})},e}(LazyIterator),PrefetchIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.bufferSize=r,n.buffer=new RingBuffer(r),n}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Prefetch"},e.prototype.refill=function(){for(;!this.buffer.isFull();){var t=this.upstream.next();this.buffer.push(t);}},e.prototype.next=function(){return this.refill(),this.buffer.shift()},e}(LazyIterator),ShuffleIterator=function(t){function e(e,r,n){var i=t.call(this,e,r)||this;return i.upstream=e,i.windowSize=r,i.upstreamExhausted=!1,i.random=seedrandom_1(n||st.now().toString()),i.lastRead=Promise.resolve({value:null,done:!1}),i}return __extends$1(e,t),e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t=this;return __generator$2(this,function(e){return this.lastRead=this.lastRead.then(function(){return t.serialNext()}),[2,this.lastRead]})})},e.prototype.randomInt=function(t){return Math.floor(this.random()*t)},e.prototype.chooseIndex=function(){return this.randomInt(this.buffer.length())},e.prototype.serialNext=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e;return __generator$2(this,function(r){switch(r.label){case 0:this.upstreamExhausted||this.refill(),r.label=1;case 1:return this.buffer.isEmpty()?[3,3]:(t=this.chooseIndex(),[4,this.buffer.shuffleExcise(t)]);case 2:return (e=r.sent()).done?(this.upstreamExhausted=!0,[3,1]):(this.refill(),[2,e]);case 3:return [2,{value:null,done:!0}]}})})},e}(PrefetchIterator),Dataset=function(){function t(){this.size=null;}return t.prototype.batch=function(t,e){var r=this;void 0===e&&(e=!0);var n=this;return st.assert(t>0,function(){return "batchSize needs to be positive, but it is\n      "+t}),datasetFromIteratorFn(function(){return __awaiter$2(r,void 0,void 0,function(){return __generator$2(this,function(r){switch(r.label){case 0:return [4,n.iterator()];case 1:return [2,r.sent().columnMajorBatch(t,e,deepBatchConcat)]}})})},this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t))},t.prototype.concatenate=function(t){var e=this,r=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){var e,n;return __generator$2(this,function(i){switch(i.label){case 0:return [4,r.iterator()];case 1:return n=(e=i.sent()).concatenate,[4,t.iterator()];case 2:return [2,n.apply(e,[i.sent()])]}})})},this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null)},t.prototype.filter=function(t){var e=this,r=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){return __generator$2(this,function(e){switch(e.label){case 0:return [4,r.iterator()];case 1:return [2,e.sent().filter(function(e){return Ze(function(){return t(e)})})]}})})},this.size===1/0?1/0:null)},t.prototype.forEachAsync=function(t){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(e){switch(e.label){case 0:return [4,this.iterator()];case 1:return [2,e.sent().forEachAsync(t)]}})})},t.prototype.forEach=function(t){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(e){return Xe("dataset.forEach() is deprecated and will be removed. Please use dataset.forEachAsync() instead"),[2,this.forEachAsync(t)]})})},t.prototype.map=function(t){var e=this,r=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){return __generator$2(this,function(e){switch(e.label){case 0:return [4,r.iterator()];case 1:return [2,e.sent().map(function(e){return Ze(function(){return t(e)})})]}})})},this.size)},t.prototype.mapAsync=function(t){var e=this,r=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){return __generator$2(this,function(e){switch(e.label){case 0:return [4,r.iterator()];case 1:return [2,e.sent().mapAsync(t)]}})})},this.size)},t.prototype.prefetch=function(t){var e=this;if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");var r=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){return __generator$2(this,function(e){switch(e.label){case 0:return [4,r.iterator()];case 1:return [2,e.sent().prefetch(t)]}})})},this.size)},t.prototype.repeat=function(t){var e=this,r=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){var e=this;return __generator$2(this,function(n){return [2,iteratorFromConcatenated(iteratorFromFunction(function(){return __awaiter$2(e,void 0,void 0,function(){var t;return __generator$2(this,function(e){switch(e.label){case 0:return t={},[4,r.iterator()];case 1:return [2,(t.value=e.sent(),t.done=!1,t)]}})})}).take(t))]})})},null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null)},t.prototype.skip=function(t){var e=this,r=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){return __generator$2(this,function(e){switch(e.label){case 0:return [4,r.iterator()];case 1:return [2,e.sent().skip(t)]}})})},null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null)},t.prototype.shuffle=function(t,e,r){var n=this;if(void 0===r&&(r=!0),null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for `tf.Tensor`s), consider setting bufferSize to the dataset size ("+this.size+" elements)");var i=this,o=seedrandom_1(e||st.now().toString());return datasetFromIteratorFn(function(){return __awaiter$2(n,void 0,void 0,function(){var e;return __generator$2(this,function(n){switch(n.label){case 0:return e=o.int32(),r&&(e+=o.int32()),[4,i.iterator()];case 1:return [2,n.sent().shuffle(t,e.toString())]}})})},this.size)},t.prototype.take=function(t){var e=this,r=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){return __generator$2(this,function(e){switch(e.label){case 0:return [4,r.iterator()];case 1:return [2,e.sent().take(t)]}})})},null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null)},t.prototype.toArray=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){switch(t.label){case 0:if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return [4,this.iterator()];case 1:return [2,t.sent().toArray()]}})})},t.prototype.toArrayForTest=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){switch(t.label){case 0:if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return [4,this.iterator()];case 1:return [2,t.sent().toArrayForTest()]}})})},t.MAX_BUFFER_SIZE=1e4,t}();function datasetFromIteratorFn(t,e){return void 0===e&&(e=null),new(function(r){function n(){var t=null!==r&&r.apply(this,arguments)||this;return t.size=e,t}return __extends$1(n,r),n.prototype.iterator=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(e){return [2,t()]})})},n}(Dataset))}function array$2(t){var e=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){return __generator$2(this,function(e){return [2,iteratorFromItems(t)]})})},t.length)}function zip(t){var e,r=this;if(!isIterable(t))throw new Error("The argument to zip() must be an object or array.");if(Array.isArray(t))for(var n=0;n<t.length;n++)e=null==e?t[n].size:Math.min(e,t[n].size);else if(t instanceof Object)for(var i in t)e=null==e?t[i].size:Math.min(e,t[i].size);return datasetFromIteratorFn(function(){return __awaiter$2(r,void 0,void 0,function(){return __generator$2(this,function(e){switch(e.label){case 0:return [4,deepMapAndAwaitAll(t,function(t){if(t instanceof Dataset)return {value:t.iterator(),recurse:!1};if(isIterable(t))return {value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})];case 1:return [2,iteratorFromZipped(e.sent(),ZipMismatchMode.SHORTEST)]}})})},e)}function deepBatchConcat(t){return null===t?null:canTensorify(t[0])?{value:batchConcat(t),recurse:!1}:{value:null,recurse:!0}}function batchConcat(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof wt?hr(t):Fn(t)}var TextLineDataset=function(t){function e(e){var r=t.call(this)||this;return r.input=e,r}return __extends$1(e,t),e.prototype.iterator=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e;return __generator$2(this,function(r){switch(r.label){case 0:return [4,this.input.iterator()];case 1:return t=r.sent(),e=t.decodeUTF8(),[2,e.split("\n").map(function(t){return t.endsWith("\r")&&(t=t.slice(0,-1)),t})]}})})},e}(Dataset),CODE_QUOTE='"',STATE_OUT=Symbol("out"),STATE_FIELD=Symbol("field"),STATE_QUOTE=Symbol("quote"),STATE_QUOTE_AFTER_QUOTE=Symbol("quoteafterquote"),STATE_WITHIN_QUOTE_IN_QUOTE=Symbol("quoteinquote"),CSVDataset=function(t){function e(e,r){var n=t.call(this)||this;return n.input=e,n.hasHeader=!0,n.fullColumnNames=null,n.columnNamesValidated=!1,n.columnConfigs=null,n.configuredColumnsOnly=!1,n.delimiter=",",n.delimWhitespace=!1,n.base=new TextLineDataset(e),r||(r={}),n.hasHeader=!1!==r.hasHeader,n.fullColumnNames=r.columnNames,n.columnConfigs=r.columnConfigs,n.configuredColumnsOnly=r.configuredColumnsOnly,r.delimWhitespace?(st.assert(null==r.delimiter,function(){return "Delimiter should not be provided when delimWhitespace is true."}),n.delimWhitespace=!0,n.delimiter=" "):n.delimiter=r.delimiter?r.delimiter:",",n}return __extends$1(e,t),e.prototype.columnNames=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){switch(t.label){case 0:return this.columnNamesValidated?[3,2]:[4,this.setColumnNames()];case 1:t.sent(),t.label=2;case 2:return [2,this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames]}})})},e.prototype.setColumnNames=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r,n,i,o,a=this;return __generator$2(this,function(s){switch(s.label){case 0:return [4,this.maybeReadHeaderLine()];case 1:if(t=s.sent(),!this.fullColumnNames&&!t)throw new Error("Column names must be provided if there is no header line.");if(this.fullColumnNames&&t&&st.assert(t.length===this.fullColumnNames.length,function(){return "The length of provided columnNames ("+a.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+t.length.toString()+")."}),this.fullColumnNames||(this.fullColumnNames=t),e=this.fullColumnNames.reduce(function(t,e){return t[e]=t[e]+1||1,t},{}),r=Object.keys(e).filter(function(t){return e[t]>1}),st.assert(0===r.length,function(){return "Duplicate column names found: "+r.toString()}),this.columnConfigs)for(n=0,i=Object.keys(this.columnConfigs);n<i.length;n++)if(o=i[n],-1===this.fullColumnNames.indexOf(o))throw new Error('The key "'+o+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");return this.columnNamesValidated=!0,[2]}})})},e.prototype.maybeReadHeaderLine=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e;return __generator$2(this,function(r){switch(r.label){case 0:return this.hasHeader?[4,this.base.iterator()]:[3,3];case 1:return [4,r.sent().next()];case 2:if((t=r.sent()).done)throw new Error("No data was found for CSV parsing.");return e=t.value,[2,this.parseRow(e,!1)];case 3:return [2,null]}})})},e.prototype.iterator=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e=this;return __generator$2(this,function(r){switch(r.label){case 0:return this.columnNamesValidated?[3,2]:[4,this.setColumnNames()];case 1:r.sent(),r.label=2;case 2:return [4,this.base.iterator()];case 3:return t=r.sent(),this.hasHeader&&(t=t.skip(1)),[2,t.map(function(t){return e.makeDataElement(t)})]}})})},e.prototype.makeDataElement=function(t){for(var e=this.parseRow(t),r={},n={},i=0;i<this.fullColumnNames.length;i++){var o=this.fullColumnNames[i],a=this.columnConfigs?this.columnConfigs[o]:null;if(!this.configuredColumnsOnly||a){var s=e[i],u=null;if(""===s)if(a&&void 0!==a.default)u=a.default;else {if(a&&(a.required||a.isLabel))throw new Error("Required column "+o+" is empty in this line: "+t);u=void 0;}else {var c=Number(s);if(isNaN(c))u=a&&"bool"===a.dtype?this.getBoolean(s):s;else if(a&&a.dtype)switch(a.dtype){case"float32":u=c;break;case"int32":u=Math.floor(c);break;case"bool":u=this.getBoolean(s);break;default:u=c;}else u=c;}a&&a.isLabel?n[o]=u:r[o]=u;}}return 0===Object.keys(n).length?r:{xs:r,ys:n}},e.prototype.getBoolean=function(t){return "1"===t||"true"===t.toLowerCase()?1:0},e.prototype.parseRow=function(t,e){void 0===e&&(e=!0);for(var r=[],n=0,i=t.length,o=STATE_OUT,a=0;a<i;a++)switch(o){case STATE_OUT:switch(t.charAt(a)){case CODE_QUOTE:n=a+1,o=STATE_QUOTE;break;case this.delimiter:if(n=a+1," "===this.delimiter&&this.delimWhitespace)break;r.push(""),o=STATE_OUT;break;default:o=STATE_FIELD,n=a;}break;case STATE_FIELD:switch(t.charAt(a)){case this.delimiter:r.push(t.substring(n,a)),o=STATE_OUT,n=a+1;}break;case STATE_QUOTE:switch(t.charAt(a)){case CODE_QUOTE:o=STATE_QUOTE_AFTER_QUOTE;}break;case STATE_QUOTE_AFTER_QUOTE:switch(t.charAt(a)){case this.delimiter:r.push(t.substring(n,a-1)),o=STATE_OUT,n=a+1;break;case CODE_QUOTE:o=STATE_QUOTE;break;default:o=STATE_WITHIN_QUOTE_IN_QUOTE;}break;case STATE_WITHIN_QUOTE_IN_QUOTE:switch(t.charAt(a)){case CODE_QUOTE:o=STATE_QUOTE;}}if(o===STATE_QUOTE_AFTER_QUOTE?r.push(t.substring(n,i-1)):r.push(t.substring(n)),e&&r.length!==this.fullColumnNames.length)throw new Error("Invalid row in csv file. Should have "+this.fullColumnNames.length+" elements in a row, but got "+r);return r},e}(Dataset),MicrophoneIterator=function(t){function e(e){var r=t.call(this)||this;r.microphoneConfig=e,r.isClosed=!1,r.fftSize=e.fftSize||1024;var n=Math.log2(r.fftSize);if(r.fftSize<0||n<4||n>14||!Number.isInteger(n))throw new Error("Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got "+r.fftSize);if(r.numFrames=e.numFramesPerSpectrogram||43,r.sampleRateHz=e.sampleRateHz,r.columnTruncateLength=e.columnTruncateLength||r.fftSize,r.audioTrackConstraints=e.audioTrackConstraints,r.smoothingTimeConstant=e.smoothingTimeConstant||0,r.includeSpectrogram=!1!==e.includeSpectrogram,r.includeWaveform=!0===e.includeWaveform,!r.includeSpectrogram&&!r.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.");return r}return __extends$1(e,t),e.prototype.summary=function(){return "microphone"},e.create=function(t){return void 0===t&&(t={}),__awaiter$2(this,void 0,void 0,function(){var r;return __generator$2(this,function(n){switch(n.label){case 0:if(i().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");return [4,(r=new e(t)).start()];case 1:return n.sent(),[2,r]}})})},e.prototype.start=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r,n;return __generator$2(this,function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),t=this,[4,navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})];case 1:return t.stream=i.sent(),[3,3];case 2:throw e=i.sent(),new Error("Error thrown while initializing video stream: "+e.message);case 3:if(!this.stream)throw new Error("Could not obtain audio from microphone.");if(r=window.AudioContext||window.webkitAudioContext,this.audioContext=new r,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error("Mismatch in sampling rate: Expected: "+this.sampleRateHz+"; Actual: "+this.audioContext.sampleRate)}else this.sampleRateHz=this.audioContext.sampleRate;return n=this.audioContext.createMediaStreamSource(this.stream),this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,n.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize),[2]}})})},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r,n,i;return __generator$2(this,function(o){switch(o.label){case 0:return this.isClosed?[2,{value:null,done:!0}]:[4,this.getAudioData()];case 1:return r=o.sent(),this.includeSpectrogram&&(n=this.flattenQueue(r.freqDataQueue),t=this.getTensorFromAudioDataArray(n,[this.numFrames,this.columnTruncateLength,1])),this.includeWaveform&&(i=this.flattenQueue(r.timeDataQueue),e=this.getTensorFromAudioDataArray(i,[this.numFrames*this.fftSize,1])),[2,{value:{spectrogram:t,waveform:e},done:!1}]}})})},e.prototype.capture=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){switch(t.label){case 0:return [4,this.next()];case 1:return [2,t.sent().value]}})})},e.prototype.getAudioData=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r,n=this;return __generator$2(this,function(i){return t=[],e=[],r=0,[2,new Promise(function(i){var o=setInterval(function(){n.includeSpectrogram&&(n.analyser.getFloatFrequencyData(n.freqData),n.freqData[0]===-1/0&&i({freqDataQueue:t,timeDataQueue:e}),t.push(n.freqData.slice(0,n.columnTruncateLength))),n.includeWaveform&&(n.analyser.getFloatTimeDomainData(n.timeData),e.push(n.timeData.slice())),++r===n.numFrames&&(clearInterval(o),i({freqDataQueue:t,timeDataQueue:e}));},n.fftSize/n.sampleRateHz*1e3);})]})})},e.prototype.stop=function(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop());},e.prototype.toArray=function(){throw new Error("Can not convert infinite audio stream to array.")},e.prototype.getSampleRate=function(){return this.sampleRateHz},e.prototype.flattenQueue=function(t){var e=t[0].length,r=new Float32Array(t.length*e);return t.forEach(function(t,n){return r.set(t,n*e)}),r},e.prototype.getTensorFromAudioDataArray=function(t,e){var r=new Float32Array(st.sizeFromShape(e));return r.set(t,r.length-t.length),Fn(r,e)},e}(LazyIterator),WebcamIterator=function(t){function e(e,r){var n=t.call(this)||this;if(n.webcamVideoElement=e,n.webcamConfig=r,n.isClosed=!0,n.resize=!1,n.needToResize())if(n.resize=!0,n.cropSize=[n.webcamConfig.resizeHeight,n.webcamConfig.resizeWidth],n.cropBoxInd=Mn([0],"int32"),n.webcamConfig.centerCrop){var i=1*n.webcamConfig.resizeWidth/n.webcamVideoElement.width,o=1*n.webcamConfig.resizeHeight/n.webcamVideoElement.height,a=(1-i)/2,s=(1-o)/2,u=a+i,c=o+s;n.cropBox=Bn([s,a,c,u],[1,4]);}else n.cropBox=Bn([0,0,1,1],[1,4]);return n}return __extends$1(e,t),e.prototype.summary=function(){return "webcam"},e.create=function(t,r){return void 0===r&&(r={}),__awaiter$2(this,void 0,void 0,function(){var n;return __generator$2(this,function(i$1){switch(i$1.label){case 0:if(i().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!t){if(t=document.createElement("video"),!r.resizeWidth||!r.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");t.width=r.resizeWidth,t.height=r.resizeHeight;}return [4,(n=new e(t,r)).start()];case 1:return i$1.sent(),[2,n]}})})},e.prototype.start=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r=this;return __generator$2(this,function(n){switch(n.label){case 0:this.webcamConfig.facingMode&&st.assert("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,function(){return "Invalid webcam facing mode: "+r.webcamConfig.facingMode+". Please provide 'user' or 'environment'"}),n.label=1;case 1:return n.trys.push([1,3,,4]),t=this,[4,navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})];case 2:return t.stream=n.sent(),[3,4];case 3:throw (e=n.sent()).message="Error thrown while initializing video stream: "+e.message,e;case 4:if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream;}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream);}return this.webcamVideoElement.play(),this.isClosed=!1,[2,new Promise(function(t){r.webcamVideoElement.onloadedmetadata=function(){t();};})]}})})},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t;return __generator$2(this,function(e){if(this.isClosed)return [2,{value:null,done:!0}];try{t=Vd.fromPixels(this.webcamVideoElement);}catch(t){throw new Error("Error thrown converting video to pixels: "+JSON.stringify(t))}if(!this.resize)return [2,{value:t,done:!1}];try{return [2,{value:this.cropAndResizeFrame(t),done:!1}]}catch(t){throw new Error("Error thrown cropping the video: "+t.message)}finally{t.dispose();}return [2]})})},e.prototype.needToResize=function(){return !(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)},e.prototype.cropAndResizeFrame=function(t){var e=this;return Ze(function(){var r,n=t.toFloat().expandDims(0),i=(r=nf.cropAndResize(n,e.cropBox,e.cropBoxInd,e.cropSize,"bilinear")).shape;return r.reshape(i.slice(1))})},e.prototype.capture=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){switch(t.label){case 0:return [4,this.next()];case 1:return [2,t.sent().value]}})})},e.prototype.stop=function(){this.stream.getTracks().forEach(function(t){return t.stop()});try{this.webcamVideoElement.srcObject=null;}catch(t){console.log(t),this.webcamVideoElement.src=null;}this.isClosed=!0;},e.prototype.toArray=function(){throw new Error("Can not convert infinite video stream to array.")},e}(LazyIterator),DataSource=function(){return function(){}}(),StringIterator=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return __extends$1(e,t),e.prototype.split=function(t){return new SplitIterator(this,t)},e}(LazyIterator),SplitIterator=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.impl=new SplitIteratorImpl(e,r),n}return __extends$1(e,t),e.prototype.summary=function(){return this.impl.summary()},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){return [2,this.impl.next()]})})},e}(StringIterator),SplitIteratorImpl=function(t){function e(e,r){var n=t.call(this)||this;return n.upstream=e,n.separator=r,n.carryover="",n}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Split('"+this.separator+"')"},e.prototype.pump=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r,n,i;return __generator$2(this,function(o){switch(o.label){case 0:return [4,this.upstream.next()];case 1:if((t=o.sent()).done)return ""===this.carryover?[2,!1]:(this.outputQueue.push(this.carryover),this.carryover="",[2,!0]);for((e=t.value.split(this.separator))[0]=this.carryover+e[0],r=0,n=e.slice(0,-1);r<n.length;r++)i=n[r],this.outputQueue.push(i);return this.carryover=e[e.length-1],[2,!0]}})})},e}(OneToManyIterator),ByteChunkIterator=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return __extends$1(e,t),e.prototype.decodeUTF8=function(){return new Utf8Iterator(this)},e}(LazyIterator),Utf8Iterator=function(t){function e(e){var r=t.call(this)||this;return r.upstream=e,r.impl=new Utf8IteratorImpl(e),r}return __extends$1(e,t),e.prototype.summary=function(){return this.impl.summary()},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){return [2,this.impl.next()]})})},e}(StringIterator),Utf8IteratorImpl=function(t){function e(e){var r=t.call(this)||this;if(r.upstream=e,i().get("IS_BROWSER"))r.decoder=new TextDecoder("utf-8");else {var n=require("string_decoder").StringDecoder;r.decoder=new n("utf8");}return r}return __extends$1(e,t),e.prototype.summary=function(){return this.upstream.summary()+" -> Utf8"},e.prototype.pump=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r;return __generator$2(this,function(n){switch(n.label){case 0:return [4,this.upstream.next()];case 1:return (t=n.sent()).done?[2,!1]:(e=t.value,r=i().get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(Buffer.from(e.buffer)),this.outputQueue.push(r),[2,!0])}})})},e}(OneToManyIterator),FileChunkIterator=function(t){function e(e,r){void 0===r&&(r={});var n=t.call(this)||this;return n.file=e,n.options=r,st.assert(e instanceof Uint8Array||!!i().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),function(){return "FileChunkIterator only supports File, Blob and Uint8Array right now."}),n.offset=r.offset||0,n.chunkSize=r.chunkSize||1048576,n}return __extends$1(e,t),e.prototype.summary=function(){return "FileChunks "+this.file},e.prototype.next=function(){return __awaiter$2(this,void 0,void 0,function(){var t,e,r=this;return __generator$2(this,function(n){switch(n.label){case 0:return this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size)?[2,{value:null,done:!0}]:(t=new Promise(function(t,e){var n=r.offset+r.chunkSize;if(r.file instanceof Uint8Array)t(new Uint8Array(r.file.slice(r.offset,n)));else {var i=new FileReader;i.onload=function(r){var n=i.result;if(n instanceof ArrayBuffer&&(n=new Uint8Array(n)),!(n instanceof Uint8Array))return e(new TypeError("FileReader returned unknown type."));t(n);},i.onabort=function(t){return e(new Error("Aborted"))},i.onerror=function(t){return e(new Error(t.type))};var o=r.file.slice(r.offset,n);i.readAsArrayBuffer(o);}r.offset=n;}),e={},[4,t]);case 1:return [2,(e.value=n.sent(),e.done=!1,e)]}})})},e}(ByteChunkIterator);function urlChunkIterator(t,e){return void 0===e&&(e={}),__awaiter$2(this,void 0,void 0,function(){var r,n,i,o,a;return __generator$2(this,function(s){switch(s.label){case 0:return "string"==typeof t?r=t:(r=t.url,n=getRequestInitFromRequest(t)),[4,st.fetch(r,n)];case 1:return (i=s.sent()).ok?(a=Uint8Array.bind,[4,i.arrayBuffer()]):[3,3];case 2:return o=new(a.apply(Uint8Array,[void 0,s.sent()])),[2,new FileChunkIterator(o,e)];case 3:throw new Error(i.statusText)}})})}var getRequestInitFromRequest=function(t){return {method:t.method,headers:t.headers,body:t.body,mode:t.mode,credentials:t.credentials,cache:t.cache,redirect:t.redirect,referrer:t.referrer,integrity:t.integrity}};function isLocalPath(t){return "string"==typeof t&&"file://"===t.substr(0,7)}var FileDataSource=function(t){function e(e,r){void 0===r&&(r={});var n=t.call(this)||this;return n.input=e,n.options=r,n}return __extends$1(e,t),e.prototype.iterator=function(){return __awaiter$2(this,void 0,void 0,function(){var t;return __generator$2(this,function(e){return isLocalPath(this.input)&&i().get("IS_NODE")&&(t=require("fs"),this.input=t.readFileSync(this.input.substr(7))),[2,new FileChunkIterator(this.input,this.options)]})})},e}(DataSource),URLDataSource=function(t){function e(e,r){void 0===r&&(r={});var n=t.call(this)||this;return n.url=e,n.fileOptions=r,n}return __extends$1(e,t),e.prototype.iterator=function(){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(t){return isLocalPath(this.url)?[2,new FileDataSource(this.url,this.fileOptions).iterator()]:[2,urlChunkIterator(this.url,this.fileOptions)]})})},e}(DataSource);function csv$1(t,e){return void 0===e&&(e={}),new CSVDataset(new URLDataSource(t),e)}function func(t){var e=this,r=iteratorFromFunction(t);return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){return __generator$2(this,function(t){return [2,r]})})})}function generator(t){var e=this;return datasetFromIteratorFn(function(){return __awaiter$2(e,void 0,void 0,function(){var e;return __generator$2(this,function(r){switch(r.label){case 0:return [4,t()];case 1:return e=r.sent(),[2,iteratorFromFunction(function(){return e.next()})]}})})})}function webcam(t,e){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(r){return [2,WebcamIterator.create(t,e)]})})}function microphone(t){return __awaiter$2(this,void 0,void 0,function(){return __generator$2(this,function(e){return [2,MicrophoneIterator.create(t)]})})}var version$3="1.7.2";

            var tfData_esm = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        array: array$2,
                        Dataset: Dataset,
                        zip: zip,
                        CSVDataset: CSVDataset,
                        TextLineDataset: TextLineDataset,
                        csv: csv$1,
                        func: func,
                        generator: generator,
                        microphone: microphone,
                        webcam: webcam,
                        FileDataSource: FileDataSource,
                        URLDataSource: URLDataSource,
                        version_data: version$3
            });

            // @tensorflow/tfjs Copyright 2020 Google
            var version$4="1.7.2",version$1$1={"tfjs-core":Kd,"tfjs-data":version$3,"tfjs-layers":version$1,"tfjs-converter":version$2,tfjs:version$4};

            var tf$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        data: tfData_esm,
                        version: version$1$1,
                        AdadeltaOptimizer: Yd,
                        AdagradOptimizer: $d,
                        AdamOptimizer: Qd,
                        AdamaxOptimizer: Jd,
                        Add: xr,
                        AddN: br,
                        BroadcastTo: Sr,
                        DataStorage: ca,
                        Div: wr,
                        get ENV () { return s; },
                        Environment: o,
                        FromPixels: Fr,
                        FusedBatchNorm: Cr,
                        Identity: Tr,
                        KernelBackend: la,
                        MaxPoolWithArgmax: _r,
                        MomentumOptimizer: tp,
                        NonMaxSuppressionV5: kr,
                        OneHot: Ar,
                        Optimizer: Xd,
                        PadV2: Nr,
                        RMSPropOptimizer: ep,
                        get Rank () { return Ct; },
                        get Reduction () { return Nh; },
                        SGDOptimizer: Zd,
                        Square: Rr,
                        SquaredDifference: Er,
                        Tensor: wt,
                        TensorBuffer: mt,
                        Tile: Dr,
                        Transpose: Ir,
                        Variable: St,
                        abs: Lr,
                        acos: Wr,
                        acosh: Ur,
                        add: Or,
                        addN: $u,
                        addStrict: xo,
                        all: ql,
                        any: Kl,
                        argMax: jl,
                        argMin: Xl,
                        asin: Vr,
                        asinh: zr,
                        atan: Gr,
                        atan2: bo,
                        atanh: Hr,
                        avgPool: Ol,
                        avgPool3d: Pl,
                        backend: hn,
                        backend_util: Sa,
                        basicLSTMCell: lh,
                        batchNorm: nc,
                        batchNorm2d: ac,
                        batchNorm3d: uc,
                        batchNorm4d: hc,
                        batchNormalization: ec,
                        batchNormalization2d: oc,
                        batchNormalization3d: sc,
                        batchNormalization4d: lc,
                        batchToSpaceND: rr,
                        booleanMaskAsync: ul,
                        broadcastTo: fc,
                        browser: Vd,
                        buffer: er,
                        cast: or,
                        ceil: qr,
                        clipByValue: Kr,
                        clone: dc,
                        complex: Tn,
                        concat: Yn,
                        concat1d: $n,
                        concat2d: Qn,
                        concat3d: Jn,
                        concat4d: Zn,
                        conv1d: fl,
                        conv2d: dl,
                        conv2dTranspose: wl,
                        conv3d: pl,
                        conv3dTranspose: Cl,
                        cos: jr,
                        cosh: Xr,
                        cumsum: ar,
                        customGrad: oa,
                        deprecationWarn: Xe,
                        depthToSpace: ir,
                        depthwiseConv2d: ml,
                        diag: Eh,
                        disableDeprecationWarnings: je,
                        dispose: tn,
                        disposeVariables: Ye,
                        div: Bo,
                        divNoNan: bc,
                        divStrict: wo,
                        dot: Rl,
                        dropout: Rh,
                        elu: nh,
                        enableDebugMode: Ke,
                        enableProdMode: qe,
                        engine: $e,
                        env: i,
                        equal: Kc,
                        equalStrict: jc,
                        erf: Yr,
                        exp: $r,
                        expandDims: sr,
                        expm1: Qr,
                        eye: Cc,
                        fft: gh,
                        fill: Hn,
                        findBackend: un,
                        findBackendFactory: cn,
                        floor: Jr,
                        floorDiv: Co,
                        frame: Ah,
                        fused: hf,
                        gather: il,
                        gatherND: Ch,
                        gather_util: Lo,
                        getBackend: an,
                        getGradient: h,
                        getKernel: l,
                        getKernelsForBackend: f,
                        grad: Zo,
                        grads: ta,
                        greater: Xc,
                        greaterEqual: Yc,
                        greaterEqualStrict: $c,
                        greaterStrict: Qc,
                        hammingWindow: Sh,
                        hannWindow: kh,
                        ifft: mh,
                        imag: Nn,
                        image: nf,
                        inTopKAsync: Fh,
                        io: Bd,
                        irfft: xh,
                        isFinite: lo,
                        isInf: co,
                        isNaN: uo,
                        keep: en,
                        leakyRelu: rh,
                        less: Jc,
                        lessEqual: Zc,
                        lessEqualStrict: tl,
                        lessStrict: el,
                        linalg: jh,
                        linspace: qn,
                        localResponseNormalization: uh,
                        log: Zr,
                        log1p: to,
                        logSigmoid: eo,
                        logSoftmax: sa,
                        logSumExp: Yl,
                        logicalAnd: pc,
                        logicalNot: vc,
                        logicalOr: gc,
                        logicalXor: mc,
                        losses: zh,
                        matMul: El,
                        math: Wd,
                        max: $l,
                        maxPool: _l,
                        maxPool3d: Bl,
                        maxPoolWithArgmax: Ll,
                        maximum: Eo,
                        maximumStrict: Ro,
                        mean: Ql,
                        memory: Qe,
                        min: Jl,
                        minimum: Io,
                        minimumStrict: ko,
                        mod: So,
                        modStrict: Ao,
                        moments: Zl,
                        movingAverage: fh,
                        mul: To,
                        mulStrict: Do,
                        multiRNNCell: hh,
                        multinomial: Ec,
                        neg: no,
                        nextFrame: ap,
                        norm: ch,
                        notEqual: nl,
                        notEqualStrict: rl,
                        oneHot: Rc,
                        ones: zn,
                        onesLike: jn,
                        op: An,
                        outerProduct: Il,
                        pad: Ic,
                        pad1d: kc,
                        pad2d: Sc,
                        pad3d: Ac,
                        pad4d: Tc,
                        pool: Ml,
                        pow: No,
                        powStrict: Fo,
                        prelu: oh,
                        print: nr,
                        prod: eh,
                        profile: Je,
                        rand: Dc,
                        randomGamma: Uc,
                        randomNormal: Vc,
                        randomUniform: zc,
                        range: Kn,
                        ready: on$1,
                        real: Dn,
                        reciprocal: ro,
                        registerBackend: ln$1,
                        registerGradient: p,
                        registerKernel: d,
                        relu: ah,
                        relu6: ih,
                        removeBackend: sn,
                        reshape: ur,
                        reverse: kl,
                        reverse1d: Sl,
                        reverse2d: Al,
                        reverse3d: Tl,
                        reverse4d: Dl,
                        rfft: yh,
                        round: oo,
                        rsqrt: ao,
                        scalar: On,
                        scatterND: vh,
                        scatter_util: Ho,
                        selu: sh,
                        separableConv2d: bl,
                        serialization: qd,
                        setBackend: rn,
                        setPlatform: fn,
                        setdiff1dAsync: dr,
                        sigmoid: io,
                        sign: so,
                        signal: Dh,
                        sin: ho,
                        sinh: fo,
                        slice: Wl,
                        slice1d: Ul,
                        slice2d: Vl,
                        slice3d: zl,
                        slice4d: Gl,
                        slice_util: Jo,
                        softmax: ia,
                        softplus: po,
                        spaceToBatchND: cr,
                        sparseToDense: wh,
                        spectral: bh,
                        split: tr,
                        sqrt: vo,
                        square: Gc,
                        squaredDifference: Hc,
                        squaredDifferenceStrict: _o,
                        squeeze: lr,
                        stack: hr,
                        step: go,
                        stft: Th,
                        stridedSlice: dh,
                        sub: Oo,
                        subStrict: Mo,
                        sum: th,
                        sumOutType: Dt,
                        tan: mo,
                        tanh: yo,
                        tensor: Fn,
                        tensor1d: Mn,
                        tensor2d: Bn,
                        tensor3d: Pn,
                        tensor4d: Ln,
                        tensor5d: Wn,
                        tensor6d: Un,
                        tensor_util: Mt,
                        test_util: Bc,
                        tidy: Ze,
                        tile: wc,
                        time: nn,
                        topk: ph,
                        train: rp,
                        transpose: ua,
                        truncatedNormal: qc,
                        unregisterGradient: g,
                        unregisterKernel: v$1,
                        unsortedSegmentSum: sl,
                        unstack: fr,
                        util: st,
                        valueAndGrad: ea,
                        valueAndGrads: na,
                        variable: Vn,
                        variableGrads: ra,
                        version_core: Kd,
                        webgl: jd,
                        where: yc,
                        whereAsync: xc,
                        zeros: Gn,
                        zerosLike: Xn,
                        constraints: exports_constraints,
                        initializers: exports_initializers,
                        layers: exports_layers,
                        metrics: exports_metrics,
                        models: exports_models,
                        regularizers: exports_regularizers,
                        CallbackList: CallbackList,
                        CustomCallback: CustomCallback,
                        History: History,
                        Callback: Callback,
                        callbacks: callbacks,
                        EarlyStopping: EarlyStopping,
                        InputSpec: InputSpec,
                        SymbolicTensor: SymbolicTensor,
                        LayersModel: LayersModel,
                        input: input,
                        loadLayersModel: loadLayersModel,
                        model: model,
                        registerCallbackConstructor: registerCallbackConstructor,
                        sequential: sequential,
                        RNN: RNN,
                        Sequential: Sequential,
                        LayerVariable: LayerVariable,
                        version_layers: version$1,
                        GraphModel: GraphModel,
                        loadGraphModel: loadGraphModel,
                        deregisterOp: deregisterOp,
                        registerOp: registerOp,
                        version_converter: version$2
            });

            // import * as tensorflow from '@tensorflow/tfjs';































































































            /**
             * Base class for tensorscript models
             * @interface TensorScriptModelInterface
             * @property {Object} settings - tensorflow model hyperparameters
             * @property {Object} model - tensorflow model
             * @property {Object} tf - tensorflow / tensorflow-node / tensorflow-node-gpu
             * @property {Function} reshape - static reshape array function
             * @property {Function} getInputShape - static TensorScriptModelInterface
             */
            class TensorScriptModelInterface  {
              
              
              
              
              
              
              
              
              
              
              
              

              /**
               * @param {Object} options - tensorflow model hyperparameters
               * @param {Object} customTF - custom, overridale tensorflow / tensorflow-node / tensorflow-node-gpu
               * @param {{model:Object,tf:Object,}} properties - extra instance properties
               */
              constructor(options = {}, properties = {}) {
                // tf.setBackend('cpu');
                this.type = 'ModelInterface';
                /** @type {Object} */
                this.settings = Object.assign({  }, options);
                /** @type {Object} */
                this.model = properties.model;
                /** @type {Object} */
                this.tf = properties.tf || tf$1;
                /** @type {Boolean} */
                this.trained = false;
                this.compiled = false;
                /** @type {Function} */
                this.reshape = TensorScriptModelInterface.reshape;
                /** @type {Function} */
                this.getInputShape = TensorScriptModelInterface.getInputShape;
                return this;
              }
              /**
               * Reshapes an array
               * @function
               * @example 
               * const array = [ 0, 1, 1, 0, ];
               * const shape = [2,2];
               * TensorScriptModelInterface.reshape(array,shape) // => 
               * [
               *   [ 0, 1, ],
               *   [ 1, 0, ],
               * ];
               * @param {Array<number>} array - input array 
               * @param {Array<number>} shape - shape array 
               * @return {Array<Array<number>>} returns a matrix with the defined shape
               */
              /* istanbul ignore next */
              static reshape(array, shape) {
                const flatArray = flatten$2(array);
               

                function product (arr) {
                  return arr.reduce((prev, curr) => prev * curr);
                }
              
                if (!Array.isArray(array) || !Array.isArray(shape)) {
                  throw new TypeError('Array expected');
                }
              
                if (shape.length === 0) {
                  //@ts-ignore
                  throw new DimensionError(0, product(size(array)), '!=');
                }
                let newArray;
                let totalSize = 1;
                const rows = shape[ 0 ];
                for (let sizeIndex = 0; sizeIndex < shape.length; sizeIndex++) {
                  totalSize *= shape[sizeIndex];
                }
              
                if (flatArray.length !== totalSize) {
                  throw new DimensionError(
                    product(shape),
                    //@ts-ignore
                    product(size(array)),
                    '!='
                  );
                }
              
                try {
                  newArray = _reshape(flatArray, shape);
                } catch (e) {
                  if (e instanceof DimensionError) {
                    throw new DimensionError(
                      product(shape),
                      //@ts-ignore
                      product(size(array)),
                      '!='
                    );
                  }
                  throw e;
                }
                if (newArray.length !== rows) throw new SyntaxError(`specified shape (${shape}) is compatible with input array or length (${array.length})`);

                // console.log({ newArray ,});
                //@ts-ignore
                return newArray;
              }
              /**
               * Returns the shape of an input matrix
               * @function
               * @example 
               * const input = [
               *   [ 0, 1, ],
               *   [ 1, 0, ],
               * ];
               * TensorScriptModelInterface.getInputShape(input) // => [2,2]
               * @see {https://stackoverflow.com/questions/10237615/get-size-of-dimensions-in-array}
               * @param {Array<Array<number>>} matrix - input matrix 
               * @return {Array<number>} returns the shape of a matrix (e.g. [2,2])
               */
              //@ts-ignore
              static getInputShape(matrix=[]) {
              // static getInputShape(matrix:NestedArray<V>=[]):Shape {
                if (Array.isArray(matrix) === false || !matrix[ 0 ] || !matrix[ 0 ].length || Array.isArray(matrix[ 0 ]) === false) throw new TypeError('input must be a matrix');
                const dim = [];
                const x_dimensions = matrix[ 0 ].length;
                let vectors = matrix;
                matrix.forEach((vector) => {
                  if (vector.length !== x_dimensions) throw new SyntaxError('input must have the same length in each row');
                });
                for (;;) {
                  dim.push(vectors.length);
                  if (Array.isArray(vectors[0])) {
                    vectors = vectors[0];
                  } else {
                    break;
                  }
                }
                return dim;
              }
              exportConfiguration() {
                return {
                  type: this.type,
                  settings: this.settings,
                  trained: this.trained,
                  compiled: this.compiled,
                  xShape: this.xShape,
                  yShape: this.yShape,
                  layers: this.layers,
                };
              }
              importConfiguration(configuration) {
                this.type = configuration.type || this.type;
                this.settings = {
                  ...this.settings,
                  ...configuration.settings,
                };
                this.trained = configuration.trained || this.trained;
                this.compiled = configuration.compiled || this.compiled;
                this.xShape = configuration.xShape || this.xShape;
                this.yShape = configuration.yShape || this.yShape;
                this.layers = configuration.layers || this.layers;
              }
              /**
               * Asynchronously trains tensorflow model, must be implemented by tensorscript class
               * @abstract 
               * @param {Array<Array<number>>} x_matrix - independent variables
               * @param {Array<Array<number>>} y_matrix - dependent variables
               * @return {Object} returns trained tensorflow model 
               */
              
              train(x_matrix, y_matrix) {
                throw new ReferenceError('train method is not implemented');
              }
              
              /**
               * Predicts new dependent variables
               * @abstract 
               * @param {Array<Array<number>>|Array<number>} matrix - new test independent variables
               * @return {{data: Promise}} returns tensorflow prediction 
               */
              calculate(matrix) {
                throw new ReferenceError('calculate method is not implemented');
              }
              /**
               * Loads a saved tensoflow / keras model, this is an alias for 
               * @param {Object} options - tensorflow load model options
               * @return {Object} tensorflow model
               * @see {@link https://www.tensorflow.org/js/guide/save_load#loading_a_tfmodel}
               */
              async loadModel(options) {
                this.model = await this.tf.loadLayersModel(options);
                this.xShape = this.model.inputs[0].shape;
                this.yShape = this.model.outputs[0].shape;
                this.trained = true;
                return this.model;
              }
              /**
               * saves a tensorflow model, this is an alias for 
               * @param {Object} options - tensorflow save model options
               * @return {Object} tensorflow model
               * @see {@link https://www.tensorflow.org/js/guide/save_load#save_a_tfmodel}
               */
              async saveModel(options) {
                const savedStatus = await this.model.save(options);
                return savedStatus;
              }

              /**
               * Returns prediction values from tensorflow model
               * @param {Array<Array<number>>|Array<number>} input_matrix - new test independent variables 
               * @param {Boolean} [options.json=true] - return object instead of typed array
               * @param {Boolean} [options.probability=true] - return real values instead of integers
               * @param {Boolean} [options.skip_matrix_check=false] - validate input is a matrix
               * @return {Array<number>|Array<Array<number>>} predicted model values
               */
              async predict(input_matrix, options = {}) {
                if (!input_matrix || Array.isArray(input_matrix)===false) throw new Error('invalid input matrix');
                const x_matrix = (Array.isArray(input_matrix[ 0 ])||options.skip_matrix_check)
                  ? input_matrix
                  : [
                    input_matrix,
                  ];
                const config = Object.assign({
                  json: true,
                  probability: true,
                }, options);
                return this.calculate(x_matrix )
                  .data()
                  .then((predictions) => {
                    // console.log({ predictions });
                    if (config.json === false) {
                      return predictions;
                    } else {
                      if (!this.yShape) throw new Error('Model is missing yShape');
                      const shape = [x_matrix.length, this.yShape[ 1 ], ];
                      const predictionValues = (options.probability === false) ? Array.from(predictions).map(Math.round) : Array.from(predictions);
                      return this.reshape(predictionValues, shape);
                    }
                  })
                  .catch((e) => {
                    throw e; 
                  });
              }
            }

            /**
             * Calculate the size of a multi dimensional array.
             * This function checks the size of the first entry, it does not validate
             * whether all dimensions match. (use function `validate` for that) (from math.js)
             * @param {Array} x
             * @see {https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}
             * @ignore
             * @return {Number[]} size
             */
            /* istanbul ignore next */
            function size (x) {
              let s = [];

              while (Array.isArray(x)) {
                s.push(x.length);
                x = x[0];
              }

              return s;
            }
            /**
             * Iteratively re-shape a multi dimensional array to fit the specified dimensions (from math.js)
             * @param {Array} array           Array to be reshaped
             * @param {Array.<number>} sizes  List of sizes for each dimension
             * @returns {Array}               Array whose data has been formatted to fit the
             *                                specified dimensions
             * @ignore
             * @see {https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}
             */
            /* istanbul ignore next */
            function _reshape(array, sizes) {
              // testing if there are enough elements for the requested shape
              var tmpArray = array;
              var tmpArray2;
              // for each dimensions starting by the last one and ignoring the first one
              for (var sizeIndex = sizes.length - 1; sizeIndex > 0; sizeIndex--) {
                var size = sizes[sizeIndex];
                tmpArray2 = [];

                // aggregate the elements of the current tmpArray in elements of the requested size
                var length = tmpArray.length / size;
                for (var i = 0; i < length; i++) {
                  tmpArray2.push(tmpArray.slice(i * size, (i + 1) * size));
                }
                // set it as the new tmpArray for the next loop turn or for return
                //@ts-ignore
                tmpArray = tmpArray2;
              }
              //@ts-ignore
              return tmpArray;
            }

            /**
             * Create a range error with the message:
             *     'Dimension mismatch (<actual size> != <expected size>)' (from math.js)
             * @param {number | number[]} actual        The actual size
             * @param {number | number[]} expected      The expected size
             * @param {string} [relation='!=']          Optional relation between actual
             *                                          and expected size: '!=', '<', etc.
             * @extends RangeError
             * @ignore
             * @see {https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}
             */
            /* istanbul ignore next */
            class DimensionError extends RangeError {
              
              
              
              
              constructor(actual, expected, relation) {
                /* istanbul ignore next */
                const message = 'Dimension mismatch (' + (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) + ' ' + ('!=') + ' ' + (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +  ')';
                super(message);
              
                this.actual = actual;
                this.expected = expected;
                this.relation = relation;
                // this.stack = (new Error()).stack
                this.message = message;
                this.name = 'DimensionError';
                this.isDimensionError = true;
              }
            }

            /**
             * Flatten a multi dimensional array, put all elements in a one dimensional
             * array
             * @param {Array} array   A multi dimensional array
             * @ignore
             * @see {https://github.com/josdejong/mathjs/blob/develop/src/utils/array.js}
             * @return {Array}        The flattened array (1 dimensional)
             */
            /* istanbul ignore next */
            function flatten$2(array) {
              /* istanbul ignore next */
              if (!Array.isArray(array)) {
                // if not an array, return as is
                /* istanbul ignore next */
                return array;
              }
              let flat = [];
              
              /* istanbul ignore next */
              array.forEach(function callback(value) {
                if (Array.isArray(value)) {
                  value.forEach(callback); // traverse through sub-arrays recursively
                } else {
                  flat.push(value);
                }
              });

              return flat;
            }

            /**
             * Deep Learning with Tensorflow
             * @class BaseNeuralNetwork
             * @implements {TensorScriptModelInterface}
             */
            class BaseNeuralNetwork extends TensorScriptModelInterface {
              /**
               * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters
               * @param {{model:Object,tf:Object,}} properties - extra instance properties
               */
              constructor(options = {}, properties) {
                const config = Object.assign({
                  layers: [],
                  compile: {
                    loss: 'meanSquaredError',
                    optimizer: 'adam',
                  },
                  fit: {
                    epochs: 100,
                    batchSize: 5,
                    verbose:0,
                  },
                }, options);
                super(config, properties);
                this.type = 'BaseNeuralNetwork';
                return this;
              }
              /**
               * Adds dense layers to tensorflow model
               * @abstract 
               * @param {Array<Array<number>>} x_matrix - independent variables
               * @param {Array<Array<number>>} y_matrix - dependent variables
               * @param {Array<Object>} layers - model dense layer parameters
               */
              generateLayers(x_matrix, y_matrix, layers, x_test, y_test) {
                throw new ReferenceError('generateLayers method is not implemented');
              }
              /**
               * Asynchronously trains tensorflow model
               * @override
               * @param {Array<Array<number>>} x_matrix - independent variables
               * @param {Array<Array<number>>} y_matrix - dependent variables
               * @param {Array<Object>} layers - array of model dense layer parameters
               * @param {Array<Array<number>>} x_text - validation data independent variables
               * @param {Array<Array<number>>} y_text - validation data dependent variables
               * @return {Object} returns trained tensorflow model 
               */
              async train(x_matrix, y_matrix, layers, x_test, y_test) {
                const xShape = this.getInputShape(x_matrix);
                const yShape = this.getInputShape(y_matrix);
                const xs = this.tf.tensor(x_matrix, xShape);
                const ys = this.tf.tensor(y_matrix, yShape);
                this.xShape = xShape;
                this.yShape = yShape;
                if (typeof this.compiled==='undefined' || this.compiled === false) {
                  this.model = this.tf.sequential();
                  this.generateLayers.call(this, x_matrix, y_matrix, layers || this.layers, x_test, y_test);
                  this.model.compile(this.settings.compile);
                  this.compiled = true;
                }
                await this.model.fit(xs, ys, this.settings.fit);
                this.trained = true;
                xs.dispose();
                ys.dispose();
                return this.model;
              }
              /**
               * Predicts new dependent variables
               * @override
               * @param {Array<Array<number>>|Array<number>} matrix - new test independent variables
               * @param {Object} options - model prediction options
               * @return {{data: Promise}} returns tensorflow prediction 
               */
              calculate(input_matrix, options) {
                if (!input_matrix || Array.isArray(input_matrix)===false) throw new Error('invalid input matrix');
                const predictionInput = (Array.isArray(input_matrix[ 0 ]))
                  ? input_matrix
                  : [
                    input_matrix,
                  ];
                const predictionTensor = this.tf.tensor(predictionInput);
                const prediction = this.model.predict(predictionTensor, options);
                predictionTensor.dispose();
                return prediction;
              }
            }

            /**
             * Deep Learning Regression with Tensorflow
             * @class DeepLearningRegression
             * @implements {BaseNeuralNetwork}
             */
            class DeepLearningRegression extends BaseNeuralNetwork {
              /**
               * @param {{layers:Array<Object>,compile:Object,fit:Object,layerPreference:String}} options - neural network configuration and tensorflow model hyperparameters
               * @param {{model:Object,tf:Object,}} properties - extra instance properties
               */
              constructor(options = {}, properties) {
                const config = Object.assign({
                  layers: [],
                  layerPreference:'deep',
                  compile: {
                    loss: 'meanSquaredError',
                    optimizer: 'adam',
                  },
                  fit: {
                    epochs: 100,
                    batchSize: 5
                  },
                }, options);
                super(config, properties);
                this.type = 'DeepLearningRegression';

                return this;
              }
              /**
               * Adds dense layers to tensorflow regression model
               * @override 
               * @param {Array<Array<number>>} x_matrix - independent variables
               * @param {Array<Array<number>>} y_matrix - dependent variables
               * @param {Array<Object>} layers - model dense layer parameters
               */
              generateLayers(x_matrix, y_matrix, layers) {
                const xShape = this.getInputShape(x_matrix);
                const yShape = this.getInputShape(y_matrix);
                const denseLayers = [];
                if (layers) {
                  denseLayers.push(...layers);
                } else if(this.settings.layerPreference==='deep') {
                  denseLayers.push({ units: xShape[ 1 ], inputShape: [xShape[1],], kernelInitializer: 'randomNormal', activation: 'relu', });
                  denseLayers.push({ units: parseInt(String(Math.ceil(xShape[ 1 ] / 2)), 10), kernelInitializer: 'randomNormal', activation: 'relu', });
                  denseLayers.push({ units: yShape[ 1 ], kernelInitializer: 'randomNormal', });
                } else {
                  denseLayers.push({ units: (xShape[ 1 ] * 2), inputShape: [xShape[1],], kernelInitializer: 'randomNormal', activation: 'relu', });
                  denseLayers.push({ units: yShape[ 1 ], kernelInitializer: 'randomNormal', });
                }
                this.layers = denseLayers;
                denseLayers.forEach(layer => {
                  this.model.add(this.tf.layers.dense(layer));
                });
              }
            }

            /**
             * Deep Learning Classification with Tensorflow
             * @class DeepLearningClassification
             * @implements {BaseNeuralNetwork}
             */
            class DeepLearningClassification extends BaseNeuralNetwork{
              /**
               * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters
               * @param {{model:Object,tf:Object,}} properties - extra instance properties
               */
              constructor(options = {}, properties) {
                const config = Object.assign({
                  layers: [],
                  compile: {
                    loss: 'categoricalCrossentropy',
                    optimizer: 'adam',
                  },
                  fit: {
                    epochs: 100,
                    batchSize: 5,
                  },
                }, options);
                super(config, properties);
                this.type = 'DeepLearningClassification';
                return this;
              }
              /**
               * Adds dense layers to tensorflow classification model
               * @override 
               * @param {Array<Array<number>>} x_matrix - independent variables
               * @param {Array<Array<number>>} y_matrix - dependent variables
               * @param {Array<Object>} layers - model dense layer parameters
               */
              generateLayers(x_matrix, y_matrix, layers) {
                const xShape = this.getInputShape(x_matrix);
                const yShape = this.getInputShape(y_matrix);
                this.yShape = yShape;
                this.xShape = xShape;
                const denseLayers = [];
                if (layers) {
                  denseLayers.push(...layers);
                } else {
                  denseLayers.push({ units: (xShape[ 1 ] * 2), inputDim: xShape[1],  activation: 'relu', });
                  denseLayers.push({ units: yShape[ 1 ], activation: 'softmax', });
                }
                this.layers = denseLayers;
                denseLayers.forEach(layer => {
                  this.model.add(this.tf.layers.dense(layer));
                });
              }
            }

            /**
             * Logistic Regression Classification with Tensorflow
             * @class LogisticRegression
             * @implements {BaseNeuralNetwork}
             */
            class LogisticRegression extends BaseNeuralNetwork {
              /**
               * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters
               * @param {{model:Object,tf:Object,}} properties - extra instance properties
               */
              constructor(options = {}, properties) {
                const config = Object.assign({
                  layers: [],
                  type:'simple',
                  compile: {
                    loss: 'meanSquaredError',
                    optimizer: 'rmsprop',
                  },
                  fit: {
                    epochs: 100,
                    batchSize: 5,
                  },
                }, options);
                super(config, properties);
                this.type = 'LogisticRegression';
                return this;
              }
              /**
               * Adds dense layers to tensorflow classification model
               * @override 
               * @param {Array<Array<number>>} x_matrix - independent variables
               * @param {Array<Array<number>>} y_matrix - dependent variables
               * @param {Array<Object>} layers - model dense layer parameters
               * @param {Array<Array<number>>} x_test - validation data independent variables
               * @param {Array<Array<number>>} y_test - validation data dependent variables
               */
              generateLayers(x_matrix, y_matrix, layers, x_test, y_test) {
                const xShape = this.getInputShape(x_matrix);
                const yShape = this.getInputShape(y_matrix);
                this.yShape = yShape;
                this.xShape = xShape;
                const denseLayers = [];
                if (layers) {
                  denseLayers.push(...layers);
                } else if (this.settings.type==='class' && this.settings.compile) { 
                  denseLayers.push({ units: 1, inputDim:  xShape[ 1 ], activation: 'sigmoid', });
                  this.settings.compile.loss = 'binaryCrossentropy';
                } else if (this.settings.type === 'l1l2' && this.settings.compile) { 
                  const kernelRegularizer = this.tf.regularizers.l1l2({ l1: 0.01, l2: 0.01, });
                  denseLayers.push({ units: 1, inputDim:  xShape[ 1 ], activation: 'sigmoid', kernelRegularizer, });
                  this.settings.compile.loss = 'binaryCrossentropy';
                } else {
                  denseLayers.push({ units: 1, inputShape: [xShape[1], ], });
                }
                this.layers = denseLayers;
                denseLayers.forEach(layer => {
                  this.model.add(this.tf.layers.dense(layer));
                });
                /* istanbul ignore next */
                if (x_test && y_test && this.settings && this.settings.fit) {
                  this.settings.fit.validationData = [x_test, y_test];
                }
              }
            }

            /**
             * Mulitple Linear Regression with Tensorflow
             * @class MultipleLinearRegression
             * @implements {BaseNeuralNetwork}
             */
            class MultipleLinearRegression extends BaseNeuralNetwork {
              /**
               * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters
               * @param {{model:Object,tf:Object,}} properties - extra instance properties
               */
              /* istanbul ignore next */
              constructor(options = {}, properties = {}) {
                const config = Object.assign({
                  layers: [],
                  compile: {
                    loss: 'meanSquaredError',
                    optimizer: 'sgd',
                  },
                  fit: {
                    epochs: 500,
                    batchSize: 5,
                  },
                }, options);
                super(config, properties);
                this.type = 'MultipleLinearRegression';

                return this;
              }
              /**
               * Adds dense layers to tensorflow regression model
               * @override 
               * @param {Array<Array<number>>} x_matrix - independent variables
               * @param {Array<Array<number>>} y_matrix - dependent variables
               * @param {Array<Object>} layers - model dense layer parameters
               */
              generateLayers(x_matrix, y_matrix, layers) {
                const xShape = this.getInputShape(x_matrix);
                const yShape = this.getInputShape(y_matrix);
                const denseLayers = [];
                if (layers) {
                  denseLayers.push(...layers);
                } else {
                  denseLayers.push({ units: yShape[1], inputShape: [xShape[1],], });
                }
                this.layers = denseLayers;
                denseLayers.forEach(layer => {
                  this.model.add(this.tf.layers.dense(layer));
                });
              }
            }

            //@ts-nocheck






            /**
             * Long Short Term Memory Time Series with Tensorflow
             * @class LSTMTimeSeries
             * @implements {BaseNeuralNetwork}
             */
            class LSTMTimeSeries extends BaseNeuralNetwork {
              
              // settings: TensorScriptOptions;

              /**
               * Creates dataset data
               * @example
               * LSTMTimeSeries.createDataset([ [ 1, ], [ 2, ], [ 3, ], [ 4, ], [ 5, ], [ 6, ], [ 7, ], [ 8, ], [ 9, ], [ 10, ], ], 3) // => 
                  //  [ 
                  //    [ 
                  //      [ [ 1 ], [ 2 ], [ 3 ] ],
                  //      [ [ 2 ], [ 3 ], [ 4 ] ],
                  //      [ [ 3 ], [ 4 ], [ 5 ] ],
                  //      [ [ 4 ], [ 5 ], [ 6 ] ],
                  //      [ [ 5 ], [ 6 ], [ 7 ] ],
                  //      [ [ 6 ], [ 7 ], [ 8 ] ], 
                  //   ], //x_matrix
                  //   [ [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ] ] //y_matrix
                  // ]
               * @param {Array<Array<number>} dataset - array of values
               * @param {Number} look_back - number of values in each feature 
               * @return {[Array<Array<number>>,Array<number>]} returns x matrix and y matrix for model trainning
               */
              /* istanbul ignore next */
              static createDataset(dataset=[], look_back = 1) { 
                const dataX = [];
                const dataY = [];
                for (let index in lodash_range(dataset.length - look_back - 1)) {
                  let i = parseInt(index);
                  let a = dataset.slice(i, i + look_back);
                  dataX.push(a);
                  dataY.push(dataset[ i + look_back ]);
                }
                return [dataX, dataY, ];
              }
              /**
               * Reshape input to be [samples, time steps, features]
               * @example
               * LSTMTimeSeries.getTimeseriesShape([ 
                  [ [ 1 ], [ 2 ], [ 3 ] ],
                  [ [ 2 ], [ 3 ], [ 4 ] ],
                  [ [ 3 ], [ 4 ], [ 5 ] ],
                  [ [ 4 ], [ 5 ], [ 6 ] ],
                  [ [ 5 ], [ 6 ], [ 7 ] ],
                  [ [ 6 ], [ 7 ], [ 8 ] ], 
                ]) //=> [6, 1, 3,]
               * @param {Array<Array<number>} x_timeseries - dataset array of values
               * @return {Array<Array<number>>} returns proper timeseries forecasting shape
               */
              static getTimeseriesShape( x_timeseries) {
                const time_steps = this.settings.timeSteps;
                const xShape = this.getInputShape(x_timeseries);
                //@ts-ignore
                const _samples = xShape[ 0 ];
                const _timeSteps = time_steps;
                //@ts-ignore
                const _features = xShape[ 1 ];
                const newShape = (this.settings.mulitpleTimeSteps || this.settings.stateful)
                  ? [_samples,  _features, _timeSteps, ]
                  : [ _samples, _timeSteps, _features, ];
                // console.log({newShape})
                return newShape;
              }
              /**
               * Returns data for predicting values
               * @param timeseries 
               * @param look_back 
               */
              static getTimeseriesDataSet( timeseries, look_back) {
                const lookback = look_back || this.settings.lookback;
                const matrices = LSTMTimeSeries.createDataset.call(this, timeseries, lookback);
                const x_matrix = matrices[ 0 ];
                const y_matrix = matrices[ 1 ];
                // const timeseriesShape = LSTMTimeSeries.getTimeseriesShape.call(this,x_matrix);
                //@ts-ignore
                const x_matrix_timeseries = BaseNeuralNetwork.reshape(x_matrix, [x_matrix.length, lookback, ]);
                const xShape = BaseNeuralNetwork.getInputShape(x_matrix_timeseries);
                const yShape = BaseNeuralNetwork.getInputShape(y_matrix);
                return {
                  yShape,
                  xShape,
                  y_matrix,
                  x_matrix:x_matrix_timeseries,
                };
              }
              
              
              
              /**
               * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters
               * @param {{model:Object,tf:Object,}} properties - extra instance properties
               */
              constructor(options = {}, properties) {
                const config = Object.assign({
                  layers: [],
                  type: 'simple',
                  stateful:false,
                  stacked: false,
                  mulitpleTimeSteps:false,
                  lookback:1,
                  batchSize:1,
                  timeSteps:1,
                  learningRate:0.1,
                  compile: {
                    loss: 'meanSquaredError',
                    optimizer: 'adam',
                  },
                  fit: {
                    epochs: 100,
                    batchSize: 1,
                  },
                }, options);
                super(config, properties);
                this.type = 'LSTMTimeSeries';

                this.createDataset = LSTMTimeSeries.createDataset;
                this.getTimeseriesDataSet = LSTMTimeSeries.getTimeseriesDataSet;
                this.getTimeseriesShape = LSTMTimeSeries.getTimeseriesShape;
                return this;
              }
              /**
               * Adds dense layers to tensorflow classification model
               * @override 
               * @param {Array<Array<number>>} x_matrix - independent variables
               * @param {Array<Array<number>>} y_matrix - dependent variables
               * @param {Array<Object>} layers - model dense layer parameters
               * @param {Array<Array<number>>} x_test - validation data independent variables
               * @param {Array<Array<number>>} y_test - validation data dependent variables
               */
              generateLayers(x_matrix, y_matrix, layers) {
                const xShape = this.getInputShape(x_matrix);
                const yShape = this.getInputShape(y_matrix);
                this.yShape = yShape;
                this.xShape = xShape;
                // const sgdoptimizer = this.tf.train.sgd(this.settings.learningRate);
                const lstmLayers = [];
                const rnnLayers = [];
                const denseLayers = [];
                /* istanbul ignore next */
                if (layers) {
                  if(layers.lstmLayers && layers.lstmLayers.length) lstmLayers.push(...layers.lstmLayers);
                  if(layers.rnnLayers && layers.rnnLayers.length) rnnLayers.push(...layers.rnnLayers);
                  if(layers.denseLayers && layers.denseLayers.length) denseLayers.push(...layers.denseLayers);
                } else if (this.settings && this.settings.fit && this.settings.stateful) {
                  const batchInputShape = [this.settings.fit.batchSize, this.settings.lookback, 1, ];
                  rnnLayers.push({ units: 4, batchInputShape:batchInputShape,  returnSequences:true, });
                  rnnLayers.push({ units: 4, batchInputShape:batchInputShape,  });
                  denseLayers.push({ units: yShape[1], });
                // } else if(this.settings.stacked) {
                //   lstmLayers.push({ units: 4, inputShape: [ 1, this.settings.lookback ], });
                //   // model.add(LSTM(4, batch_input_shape=(batch_size, look_back, 1), stateful=True, return_sequences=True))
                //   // model.add(LSTM(4, batch_input_shape=(batch_size, look_back, 1), stateful=True))
                //   denseLayers.push({ units: yShape[1], });
                } else {
                  const inputShape= [1, this.settings.lookback, ];
                  // console.log('default timeseries', { inputShape, xShape, yShape ,  });
                  lstmLayers.push({ units:4, inputShape,  });
                  denseLayers.push({ units: yShape[1], });
                }
                // console.log('lstmLayers',lstmLayers)
                // console.log('denseLayers',denseLayers)
                if (lstmLayers.length) {
                  lstmLayers.forEach(layer => {
                    this.model.add(this.tf.layers.lstm(layer));
                  });
                }
                if (rnnLayers.length) {
                  /* istanbul ignore next */
                  rnnLayers.forEach(layer => {
                    this.model.add(this.tf.layers.simpleRNN(layer));
                  });
                }
                if (denseLayers.length) {
                  denseLayers.forEach(layer => {
                    this.model.add(this.tf.layers.dense(layer));
                  });
                }
                this.layers = {
                  lstmLayers,
                  rnnLayers,
                  denseLayers,
                };
                // this.settings.compile.optimizer = sgdoptimizer;
              }
              async train(x_timeseries, y_timeseries, layers, x_test, y_test) {
                let yShape;
                let x_matrix;
                let y_matrix;
                const look_back = this.settings.lookback;
                if (y_timeseries) {
                  x_matrix = x_timeseries;
                  y_matrix = y_timeseries;
                } else {
                  const matrices = this.createDataset(x_timeseries, look_back);
                  x_matrix = matrices[ 0 ];
                  y_matrix = matrices[ 1 ];
                  yShape = this.getInputShape(y_matrix);
                }
                //_samples, _timeSteps, _features
                const timeseriesShape = this.getTimeseriesShape(x_matrix);
                const x_matrix_timeseries = BaseNeuralNetwork.reshape(x_matrix, timeseriesShape);
                const xs = this.tf.tensor(x_matrix_timeseries, timeseriesShape);
                const ys = this.tf.tensor(y_matrix, yShape);
                this.xShape = timeseriesShape;
                this.yShape = yShape;
                if (this.compiled === false) {
                  this.model = this.tf.sequential();
                  //@ts-ignore
                  this.generateLayers.call(this, x_matrix_timeseries, y_matrix, layers || this.layers,
                    // x_test, y_test
                  );
                  this.model.compile(this.settings.compile);
                  if (this.settings.fit && this.settings.stateful) {
                    this.settings.fit.shuffle = false;
                  }
                  this.compiled = true;
                }
                await this.model.fit(xs, ys, this.settings.fit);
                this.trained = true;

                // this.model.summary();
                xs.dispose();
                ys.dispose();
                return this.model;
              }
              calculate(x_matrix) {
                const timeseriesShape = this.getTimeseriesShape(x_matrix);
                //@ts-ignore
                const input_matrix = BaseNeuralNetwork.reshape(x_matrix, timeseriesShape);
                return super.calculate(input_matrix);
              }
              async predict(input_matrix, options) {
                if (this.settings.stateful && input_matrix.length > 1) {
                  //@ts-ignore
                  return Promise.all(input_matrix.map((input)=>super.predict([input, ], options))) ;
                } else {
                  return super.predict(input_matrix, options);
                }
              }
            }

            /**
             * Long Short Term Memory Multivariate Time Series with Tensorflow
             * @class LSTMMultivariateTimeSeries
             * @extends {LSTMTimeSeries}
             */
            //@ts-ignore
            class LSTMMultivariateTimeSeries extends LSTMTimeSeries {
              /**
               * Creates dataset data
               * @example
               * const ds = [
              [10, 20, 30, 40, 50, 60, 70, 80, 90,],
              [11, 21, 31, 41, 51, 61, 71, 81, 91,],
              [12, 22, 32, 42, 52, 62, 72, 82, 92,],
              [13, 23, 33, 43, 53, 63, 73, 83, 93,],
              [14, 24, 34, 44, 54, 64, 74, 84, 94,],
              [15, 25, 35, 45, 55, 65, 75, 85, 95,],
              [16, 26, 36, 46, 56, 66, 76, 86, 96,],
              [17, 27, 37, 47, 57, 67, 77, 87, 97,],
              [18, 28, 38, 48, 58, 68, 78, 88, 98,],
              [19, 29, 39, 49, 59, 69, 79, 89, 99,],
            ];
               * LSTMMultivariateTimeSeries.createDataset(ds,1) // => 
                  //  [ 
                  //   [ 
                  //    [ 20, 30, 40, 50, 60, 70, 80, 90 ],
                  //    [ 21, 31, 41, 51, 61, 71, 81, 91 ],
                  //    [ 22, 32, 42, 52, 62, 72, 82, 92 ],
                  //    [ 23, 33, 43, 53, 63, 73, 83, 93 ],
                  //    [ 24, 34, 44, 54, 64, 74, 84, 94 ],
                  //    [ 25, 35, 45, 55, 65, 75, 85, 95 ],
                  //    [ 26, 36, 46, 56, 66, 76, 86, 96 ],
                  //    [ 27, 37, 47, 57, 67, 77, 87, 97 ],
                  //    [ 28, 38, 48, 58, 68, 78, 88, 98 ]    
                  //   ], //x_matrix
                  //   [ 11, 12, 13, 14, 15, 16, 17, 18, 19 ], //y_matrix
                  //   8 //features
                  // ]
               * @param {Array<Array<number>} dataset - array of values
               * @param {Number} look_back - number of values in each feature 
               * @override 
               * @return {[Array<Array<number>>,Array<number>]} returns x matrix and y matrix for model trainning
               */
              /* istanbul ignore next */
              static createDataset( dataset = [], look_back = 1) { 
                const features = (this.settings && this.settings.features) ? this.settings.features : dataset[ 0 ].length - 1;
                const n_in = look_back || this.settings.lookback ||1; //lookbacks
                const n_out = (this.settings && this.settings.outputs) ? this.settings.outputs : 1; //1;
                
                //@ts-ignore
                const series = LSTMMultivariateTimeSeries.seriesToSupervised(dataset, n_in, n_out);
                const dropped = LSTMMultivariateTimeSeries.getDropableColumns(features, n_in, n_out);
                //@ts-ignore
                const droppedColumns = LSTMMultivariateTimeSeries.drop(series, dropped);
                const original_dropped_c_columns = [ 0, droppedColumns[ 0 ].length - 1, ];
                
                // console.log({ series, dropped_c_columns,original_dropped_c_columns, dropped, });
                const y = pivotVector$1(droppedColumns)[ droppedColumns[0].length - 1 ];
                const x = LSTMMultivariateTimeSeries.drop(
                  droppedColumns,
                  original_dropped_c_columns,
                  // [ 0, droppedColumns[ 0 ].length - 1, ]
                );
                //@ts-ignore
                return [ x, y, features, ];
              }
              /**
               * Drops columns by array index
               * @example
            const data = [ [ 10, 20, 30, 40, 50, 60, 70, 80, 90, 11, 21, 31, 41, 51, 61, 71, 81, 91 ],
                 [ 11, 21, 31, 41, 51, 61, 71, 81, 91, 12, 22, 32, 42, 52, 62, 72, 82, 92 ],
                 [ 12, 22, 32, 42, 52, 62, 72, 82, 92, 13, 23, 33, 43, 53, 63, 73, 83, 93 ],
                 [ 13, 23, 33, 43, 53, 63, 73, 83, 93, 14, 24, 34, 44, 54, 64, 74, 84, 94 ],
                 [ 14, 24, 34, 44, 54, 64, 74, 84, 94, 15, 25, 35, 45, 55, 65, 75, 85, 95 ],
                 [ 15, 25, 35, 45, 55, 65, 75, 85, 95, 16, 26, 36, 46, 56, 66, 76, 86, 96 ],
                 [ 16, 26, 36, 46, 56, 66, 76, 86, 96, 17, 27, 37, 47, 57, 67, 77, 87, 97 ],
                 [ 17, 27, 37, 47, 57, 67, 77, 87, 97, 18, 28, 38, 48, 58, 68, 78, 88, 98 ],
                 [ 18, 28, 38, 48, 58, 68, 78, 88, 98, 19, 29, 39, 49, 59, 69, 79, 89, 99 ] ];
            const n_in = 1; //lookbacks
            const n_out = 1;
            const dropColumns = getDropableColumns(8, n_in, n_out); // =>[ 10, 11, 12, 13, 14, 15, 16, 17 ]
            const newdata = drop(data,dropColumns); //=> [ 
                // [ 10, 20, 30, 40, 50, 60, 70, 80, 90, 11 ],
                // [ 11, 21, 31, 41, 51, 61, 71, 81, 91, 12 ],
                // [ 12, 22, 32, 42, 52, 62, 72, 82, 92, 13 ],
                // [ 13, 23, 33, 43, 53, 63, 73, 83, 93, 14 ],
                // [ 14, 24, 34, 44, 54, 64, 74, 84, 94, 15 ],
                // [ 15, 25, 35, 45, 55, 65, 75, 85, 95, 16 ],
                // [ 16, 26, 36, 46, 56, 66, 76, 86, 96, 17 ],
                // [ 17, 27, 37, 47, 57, 67, 77, 87, 97, 18 ],
                // [ 18, 28, 38, 48, 58, 68, 78, 88, 98, 19 ] 
                //]
              * @param {Array<Array<number>>} data - data set to drop columns 
              * @param {Array<number>} columns - array of column indexes
               * @returns {Array<Array<number>>} matrix with dropped columns
               */
              static drop(data, columns) {
                return data.reduce((cols, row, i) => { 
                  cols[ i ] = [];
                  row.forEach((col, idx) => {
                    if (columns.indexOf(idx)===-1) {
                      cols[ i ].push(col);
                    }
                  });
                  return cols;
                }, []);
              }
              /**
               * Converts data set to supervised labels for forecasting, the first column must be the dependent variable
               * @example 
               const ds = [
                [10, 20, 30, 40, 50, 60, 70, 80, 90,],
                [11, 21, 31, 41, 51, 61, 71, 81, 91,],
                [12, 22, 32, 42, 52, 62, 72, 82, 92,],
                [13, 23, 33, 43, 53, 63, 73, 83, 93,],
                [14, 24, 34, 44, 54, 64, 74, 84, 94,],
                [15, 25, 35, 45, 55, 65, 75, 85, 95,],
                [16, 26, 36, 46, 56, 66, 76, 86, 96,],
                [17, 27, 37, 47, 57, 67, 77, 87, 97,],
                [18, 28, 38, 48, 58, 68, 78, 88, 98,],
                [19, 29, 39, 49, 59, 69, 79, 89, 99,],
              ]; 
              const n_in = 1; //lookbacks
              const n_out = 1;
              const series = seriesToSupervised(ds, n_in, n_out); //=> [ 
                // [ 10, 20, 30, 40, 50, 60, 70, 80, 90, 11, 21, 31, 41, 51, 61, 71, 81, 91 ],
                // [ 11, 21, 31, 41, 51, 61, 71, 81, 91, 12, 22, 32, 42, 52, 62, 72, 82, 92 ],
                // [ 12, 22, 32, 42, 52, 62, 72, 82, 92, 13, 23, 33, 43, 53, 63, 73, 83, 93 ],
                // [ 13, 23, 33, 43, 53, 63, 73, 83, 93, 14, 24, 34, 44, 54, 64, 74, 84, 94 ],
                // [ 14, 24, 34, 44, 54, 64, 74, 84, 94, 15, 25, 35, 45, 55, 65, 75, 85, 95 ],
                // [ 15, 25, 35, 45, 55, 65, 75, 85, 95, 16, 26, 36, 46, 56, 66, 76, 86, 96 ],
                // [ 16, 26, 36, 46, 56, 66, 76, 86, 96, 17, 27, 37, 47, 57, 67, 77, 87, 97 ],
                // [ 17, 27, 37, 47, 57, 67, 77, 87, 97, 18, 28, 38, 48, 58, 68, 78, 88, 98 ],
                // [ 18, 28, 38, 48, 58, 68, 78, 88, 98, 19, 29, 39, 49, 59, 69, 79, 89, 99 ] 
                //];
               * 
               * @param {Array<Array<number>>} data - data set 
               * @param {number} n_in - look backs 
               * @param {number} n_out - future iterations (only 1 supported) 
               * @todo support multiple future iterations
               * @returns {Array<Array<number>>} multivariate dataset for time series
               */
              static seriesToSupervised(data, n_in = 1, n_out = 1) {
                if (n_out !== 1) throw new RangeError('Only 1 future iteration supported');
                if (data && Array.isArray(data) && Array.isArray(data[0]) && data[ 0 ].length < 2) throw new RangeError('Must include at least two columns, the first column must be the dependent variable, followed by independent variables');
                // let n_vars = data[ 0 ].length;
                let cols = [];
                // let names = [];
                // input sequence (t-n, ... t-1)
                for (let x in data) {
                  //@ts-ignore
                  x = Number(parseInt(x));
                  //@ts-ignore
                  let maxIndex = x + n_in + n_out;
                  if (maxIndex > data.length) break;
                  //@ts-ignore
                  cols[ x ] = [];
                  // console.log({ x,maxIndex });
                  for (let i in lodash_range(n_in)) {
                    //@ts-ignore
                    i = parseInt(i);
                    //@ts-ignore
                    cols[ x ].push(...data[x+i]);
                    // console.log({ i, cols, });
                  }
                  for (let j in lodash_range(n_out)){
                    //@ts-ignore
                    j = parseInt(j);
                    //@ts-ignore
                    cols[ x ].push(...data[ x+j+n_in ]);
                    // console.log({ j, cols, });
                  }
                }
                return cols;
              }
              /**
               * Calculates which columns to drop by index
               * @todo support multiple iterations in the future, also only one output variable supported in column features * lookbacks -1
               * @example
            const ds = [
              [10, 20, 30, 40, 50, 60, 70, 80, 90,],
              [11, 21, 31, 41, 51, 61, 71, 81, 91,],
              [12, 22, 32, 42, 52, 62, 72, 82, 92,],
              [13, 23, 33, 43, 53, 63, 73, 83, 93,],
              [14, 24, 34, 44, 54, 64, 74, 84, 94,],
              [15, 25, 35, 45, 55, 65, 75, 85, 95,],
              [16, 26, 36, 46, 56, 66, 76, 86, 96,],
              [17, 27, 37, 47, 57, 67, 77, 87, 97,],
              [18, 28, 38, 48, 58, 68, 78, 88, 98,],
              [19, 29, 39, 49, 59, 69, 79, 89, 99,],
            ];
            const n_in = 1; //lookbacks
            const n_out = 1;
            const dropped = getDropableColumns(8, n_in, n_out); //=> [ 10, 11, 12, 13, 14, 15, 16, 17 ]
               * @param {number} features - number of independent variables
               * @param {number} n_in - look backs 
               * @param {number} n_out - future iterations (currently only 1 supported)
               * @returns {Array<number>} array indexes to drop
               */
              static getDropableColumns(features, n_in, n_out) {
                if (n_out !== 1) throw new RangeError('Only 1 future iteration supported');
                const cols = features + 1;
                const total_cols = cols * n_in + cols * n_out;
                // console.log({ cols, total_cols });
                return lodash_range(total_cols - cols +1, total_cols);
              }
              /**
               * Reshape input to be [samples, time steps, features]
               * @example
               * @override 
               * LSTMTimeSeries.getTimeseriesShape([ 
                  [ [ 1 ], [ 2 ], [ 3 ] ],
                  [ [ 2 ], [ 3 ], [ 4 ] ],
                  [ [ 3 ], [ 4 ], [ 5 ] ],
                  [ [ 4 ], [ 5 ], [ 6 ] ],
                  [ [ 5 ], [ 6 ], [ 7 ] ],
                  [ [ 6 ], [ 7 ], [ 8 ] ], 
                ]) //=> [6, 1, 3,]
               * @param {Array<Array<number>} x_timeseries - dataset array of values
               * @return {Array<Array<number>>} returns proper timeseries forecasting shape
               */
              static getTimeseriesShape( x_timeseries) {
                const time_steps = (this.settings && this.settings.lookback) ? this.settings.lookback : 1;
                const xShape = this.getInputShape(x_timeseries);
                const _samples = xShape[ 0 ];
                const _timeSteps = time_steps;
                const _features = (this.settings && this.settings.features) ? this.settings.features : xShape[ 1 ];
                // reshape input to be 3D [samples, timesteps, features]
                // train_X = train_X.reshape((train_X.shape[0], n_hours, n_features))
                const newShape = [ _samples, _timeSteps, _features, ];
                // console.log({newShape})
                return newShape;
              }
              /**
               * Returns data for predicting values
               * @param timeseries 
               * @param look_back 
               * @override 
               */
              static getTimeseriesDataSet( timeseries, look_back) {
                const lookBack = look_back || this.settings.lookback;
                const matrices = LSTMMultivariateTimeSeries.createDataset.call(this, timeseries, lookBack);
                const x_matrix = matrices[0];
                //@ts-ignore
                const y_matrix_m = LSTMMultivariateTimeSeries.reshape(matrices[ 1 ], [ matrices[ 1 ].length, 1 ]);
                //@ts-ignore
                const timeseriesShape = LSTMMultivariateTimeSeries.getTimeseriesShape.call(this,x_matrix);
                // const timeseriesShape = LSTMMultivariateTimeSeries.getTimeseriesShape(x_matrix);
                //@ts-ignore
                const x_matrix_timeseries = LSTMMultivariateTimeSeries.reshape(x_matrix, timeseriesShape);
                // const x_matrix_timeseries = LSTMMultivariateTimeSeries.reshape(x_matrix, [x_matrix.length, lookBack, ]);
                const xShape = LSTMMultivariateTimeSeries.getInputShape(x_matrix_timeseries);
                //@ts-ignore
                const y_matrix = pivotVector$1(y_matrix_m)[ y_matrix_m[0].length - 1 ];

                const yShape = LSTMMultivariateTimeSeries.getInputShape(y_matrix_m);
                return {
                  yShape,
                  xShape,
                  y_matrix,
                  x_matrix: x_matrix_timeseries,
                };
              }
              
              
              
              
              
              
              /**
               * @param {{layers:Array<Object>,compile:Object,fit:Object}} options - neural network configuration and tensorflow model hyperparameters
               * @param {{model:Object,tf:Object,}} properties - extra instance properties
               */
              constructor(options = {}, properties) {
                const config = Object.assign({
                  layers: [],
                  stateful: true,
                  mulitpleTimeSteps:false,
                  lookback: 1,
                  features: undefined,
                  outputs:1,
                  learningRate: 0.1,
                  compile: {
                    loss: 'meanSquaredError',
                    optimizer: 'adam',
                  },
                  fit: {
                    epochs: 100,
                    batchSize: 1,
                    shuffle: false,
                  },
                }, options);
                super(config, properties);
                this.type = 'LSTMMultivariateTimeSeries';

                this.createDataset = LSTMMultivariateTimeSeries.createDataset;
                this.seriesToSupervised = LSTMMultivariateTimeSeries.seriesToSupervised;
                this.getDropableColumns = LSTMMultivariateTimeSeries.getDropableColumns;
                this.drop = LSTMMultivariateTimeSeries.drop;
                this.getTimeseriesShape = LSTMMultivariateTimeSeries.getTimeseriesShape;
                this.getTimeseriesDataSet = LSTMMultivariateTimeSeries.getTimeseriesDataSet;
                return this;
              }
              /**
               * Adds dense layers to tensorflow classification model
               * @override 
               * @param {Array<Array<number>>} x_matrix - independent variables
               * @param {Array<Array<number>>} y_matrix - dependent variables
               * @param {Array<Object>} layers - model dense layer parameters
               * @param {Array<Array<number>>} x_test - validation data independent variables
               * @param {Array<Array<number>>} y_test - validation data dependent variables
               */
              generateLayers(x_matrix, y_matrix, layers) {
                const xShape = this.getInputShape(x_matrix);
                const yShape = this.getInputShape(y_matrix);
                this.yShape = yShape;
                this.xShape = xShape;
                const lstmLayers = [];
                const denseLayers = [];
                if (layers) {
                  if(layers.lstmLayers && layers.lstmLayers.length) lstmLayers.push(...layers.lstmLayers);
                  if(layers.denseLayers && layers.denseLayers.length) denseLayers.push(...layers.denseLayers);
               
                } else {
                  const inputShape = [ xShape[ 1 ], xShape[ 2 ], ];
                  // console.log('default timeseries', { inputShape, xShape, yShape, });
                  // model.add(LSTM(50, input_shape=(train_X.shape[1], train_X.shape[2])))
                  // model.add(Dense(1))

                  lstmLayers.push({ units: 10, inputShape,  });
                  denseLayers.push({ units: yShape[1], });
                }
                // console.log('lstmLayers',lstmLayers)
                // console.log('denseLayers',denseLayers)
                if (lstmLayers.length) {
                  lstmLayers.forEach(layer => {
                    this.model.add(this.tf.layers.lstm(layer));
                  });
                }
                if (denseLayers.length) {
                  denseLayers.forEach(layer => {
                    this.model.add(this.tf.layers.dense(layer));
                  });
                }
                this.layers = {
                  lstmLayers,
                  denseLayers,
                };
                // this.settings.compile.optimizer = sgdoptimizer;
              }
              /**
               * @override 
               * @param x_timeseries 
               * @param y_timeseries 
               * @param layers 
               * @param x_test 
               * @param y_test 
               */
              async train(x_timeseries, y_timeseries, layers, x_test, y_test) {
                let xShape;
                let yShape;
                let x_matrix;
                let y_matrix;
                const look_back = this.settings.lookback;
                if (y_timeseries) {
                  x_matrix = x_timeseries;
                  y_matrix = y_timeseries;
                  xShape = this.getInputShape(x_matrix);
                  yShape = this.getInputShape(y_matrix);
                } else {
                  const matrices = this.createDataset(x_timeseries, look_back);
                  // console.log({matrices})
                  x_matrix = matrices[0];
                  //@ts-ignore
                  y_matrix = this.reshape(matrices[ 1 ], [ matrices[ 1 ].length, 1 ]);
                  xShape = this.getInputShape(x_matrix);
                  yShape = this.getInputShape(y_matrix);
                }
                //_samples, _timeSteps, _features
                const timeseriesShape = this.getTimeseriesShape(x_matrix);
                // console.log({
                //   timeseriesShape, yShape, xShape,
                //   // y_matrix, x_matrix,
                // });
                const x_matrix_timeseries = LSTMMultivariateTimeSeries.reshape(x_matrix, timeseriesShape);
                // console.log('x_matrix_timeseries',JSON.stringify(x_matrix_timeseries));
                // console.log('x_matrix',JSON.stringify(x_matrix));
                // console.log('y_matrix',JSON.stringify(y_matrix));
                const xs = this.tf.tensor(x_matrix_timeseries, timeseriesShape);
                const ys = this.tf.tensor(y_matrix, yShape);
                this.xShape = timeseriesShape;
                this.yShape = yShape;
                if (this.compiled===false) {
                  this.model = this.tf.sequential();
                  //@ts-ignore
                  this.generateLayers.call(this, x_matrix_timeseries, y_matrix, layers || this.layers,
                  //  x_test, y_test
                  );
                  this.model.compile(this.settings.compile);
                  this.compiled = true;
                }
                if (x_test && y_test && this.settings && this.settings.fit) {
                  this.settings.fit.validation_data = [ x_test, y_test, ];
                }
                await this.model.fit(xs, ys, this.settings.fit);
                this.trained = true;

                // this.model.summary();
                xs.dispose();
                ys.dispose();
                return this.model;
              }
            }

            /**
             * Returns an array of vectors as an array of arrays (from modelscript)
             * @example
            const vectors = [ [1,2,3], [1,2,3], [3,3,4], [3,3,3] ];
            const arrays = pivotVector(vectors); // => [ [1,2,3,3], [2,2,3,3], [3,3,4,3] ];
             * @memberOf util
             * @param {Array[]} vectors 
             * @returns {Array[]}
             * @ignore
             * @see {https://github.com/repetere/modelscript/blob/master/src/util.js}
             */
            /* istanbul ignore next */
            function pivotVector$1(vectors=[]) {
              /* istanbul ignore next */
              return vectors.reduce((result, val, index/*, arr*/) => {
                val.forEach((vecVal, i) => {
                  (index === 0)
                    ? (result.push([vecVal,]))
                    : (result[ i ].push(vecVal));
                });
                return result;
              }, []);
            }

            // these aren't really private, but nor are they really useful to document

            /**
             * @private
             */
            class LuxonError extends Error {}

            /**
             * @private
             */
            class InvalidDateTimeError extends LuxonError {
              constructor(reason) {
                super(`Invalid DateTime: ${reason.toMessage()}`);
              }
            }

            /**
             * @private
             */
            class InvalidIntervalError extends LuxonError {
              constructor(reason) {
                super(`Invalid Interval: ${reason.toMessage()}`);
              }
            }

            /**
             * @private
             */
            class InvalidDurationError extends LuxonError {
              constructor(reason) {
                super(`Invalid Duration: ${reason.toMessage()}`);
              }
            }

            /**
             * @private
             */
            class ConflictingSpecificationError extends LuxonError {}

            /**
             * @private
             */
            class InvalidUnitError extends LuxonError {
              constructor(unit) {
                super(`Invalid unit ${unit}`);
              }
            }

            /**
             * @private
             */
            class InvalidArgumentError extends LuxonError {}

            /**
             * @private
             */
            class ZoneIsAbstractError extends LuxonError {
              constructor() {
                super("Zone is an abstract class");
              }
            }

            /**
             * @private
             */

            const n$1 = "numeric",
              s$1 = "short",
              l$1 = "long";

            const DATE_SHORT = {
              year: n$1,
              month: n$1,
              day: n$1
            };

            const DATE_MED = {
              year: n$1,
              month: s$1,
              day: n$1
            };

            const DATE_FULL = {
              year: n$1,
              month: l$1,
              day: n$1
            };

            const DATE_HUGE = {
              year: n$1,
              month: l$1,
              day: n$1,
              weekday: l$1
            };

            const TIME_SIMPLE = {
              hour: n$1,
              minute: n$1
            };

            const TIME_WITH_SECONDS = {
              hour: n$1,
              minute: n$1,
              second: n$1
            };

            const TIME_WITH_SHORT_OFFSET = {
              hour: n$1,
              minute: n$1,
              second: n$1,
              timeZoneName: s$1
            };

            const TIME_WITH_LONG_OFFSET = {
              hour: n$1,
              minute: n$1,
              second: n$1,
              timeZoneName: l$1
            };

            const TIME_24_SIMPLE = {
              hour: n$1,
              minute: n$1,
              hour12: false
            };

            /**
             * {@link toLocaleString}; format like '09:30:23', always 24-hour.
             */
            const TIME_24_WITH_SECONDS = {
              hour: n$1,
              minute: n$1,
              second: n$1,
              hour12: false
            };

            /**
             * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.
             */
            const TIME_24_WITH_SHORT_OFFSET = {
              hour: n$1,
              minute: n$1,
              second: n$1,
              hour12: false,
              timeZoneName: s$1
            };

            /**
             * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.
             */
            const TIME_24_WITH_LONG_OFFSET = {
              hour: n$1,
              minute: n$1,
              second: n$1,
              hour12: false,
              timeZoneName: l$1
            };

            /**
             * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
             */
            const DATETIME_SHORT = {
              year: n$1,
              month: n$1,
              day: n$1,
              hour: n$1,
              minute: n$1
            };

            /**
             * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
             */
            const DATETIME_SHORT_WITH_SECONDS = {
              year: n$1,
              month: n$1,
              day: n$1,
              hour: n$1,
              minute: n$1,
              second: n$1
            };

            const DATETIME_MED = {
              year: n$1,
              month: s$1,
              day: n$1,
              hour: n$1,
              minute: n$1
            };

            const DATETIME_MED_WITH_SECONDS = {
              year: n$1,
              month: s$1,
              day: n$1,
              hour: n$1,
              minute: n$1,
              second: n$1
            };

            const DATETIME_MED_WITH_WEEKDAY = {
              year: n$1,
              month: s$1,
              day: n$1,
              weekday: s$1,
              hour: n$1,
              minute: n$1
            };

            const DATETIME_FULL = {
              year: n$1,
              month: l$1,
              day: n$1,
              hour: n$1,
              minute: n$1,
              timeZoneName: s$1
            };

            const DATETIME_FULL_WITH_SECONDS = {
              year: n$1,
              month: l$1,
              day: n$1,
              hour: n$1,
              minute: n$1,
              second: n$1,
              timeZoneName: s$1
            };

            const DATETIME_HUGE = {
              year: n$1,
              month: l$1,
              day: n$1,
              weekday: l$1,
              hour: n$1,
              minute: n$1,
              timeZoneName: l$1
            };

            const DATETIME_HUGE_WITH_SECONDS = {
              year: n$1,
              month: l$1,
              day: n$1,
              weekday: l$1,
              hour: n$1,
              minute: n$1,
              second: n$1,
              timeZoneName: l$1
            };

            /*
              This is just a junk drawer, containing anything used across multiple classes.
              Because Luxon is small(ish), this should stay small and we won't worry about splitting
              it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
            */

            /**
             * @private
             */

            // TYPES

            function isUndefined$1(o) {
              return typeof o === "undefined";
            }

            function isNumber$1(o) {
              return typeof o === "number";
            }

            function isInteger$1(o) {
              return typeof o === "number" && o % 1 === 0;
            }

            function isString$1(o) {
              return typeof o === "string";
            }

            function isDate$1(o) {
              return Object.prototype.toString.call(o) === "[object Date]";
            }

            // CAPABILITIES

            function hasIntl() {
              try {
                return typeof Intl !== "undefined" && Intl.DateTimeFormat;
              } catch (e) {
                return false;
              }
            }

            function hasFormatToParts() {
              return !isUndefined$1(Intl.DateTimeFormat.prototype.formatToParts);
            }

            function hasRelative() {
              try {
                return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
              } catch (e) {
                return false;
              }
            }

            // OBJECTS AND ARRAYS

            function maybeArray(thing) {
              return Array.isArray(thing) ? thing : [thing];
            }

            function bestBy(arr, by, compare) {
              if (arr.length === 0) {
                return undefined;
              }
              return arr.reduce((best, next) => {
                const pair = [by(next), next];
                if (!best) {
                  return pair;
                } else if (compare(best[0], pair[0]) === best[0]) {
                  return best;
                } else {
                  return pair;
                }
              }, null)[1];
            }

            function pick(obj, keys) {
              return keys.reduce((a, k) => {
                a[k] = obj[k];
                return a;
              }, {});
            }

            function hasOwnProperty$7(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }

            // NUMBERS AND STRINGS

            function integerBetween(thing, bottom, top) {
              return isInteger$1(thing) && thing >= bottom && thing <= top;
            }

            // x % n but takes the sign of n instead of x
            function floorMod(x, n) {
              return x - n * Math.floor(x / n);
            }

            function padStart(input, n = 2) {
              if (input.toString().length < n) {
                return ("0".repeat(n) + input).slice(-n);
              } else {
                return input.toString();
              }
            }

            function parseInteger(string) {
              if (isUndefined$1(string) || string === null || string === "") {
                return undefined;
              } else {
                return parseInt(string, 10);
              }
            }

            function parseMillis(fraction) {
              // Return undefined (instead of 0) in these cases, where fraction is not set
              if (isUndefined$1(fraction) || fraction === null || fraction === "") {
                return undefined;
              } else {
                const f = parseFloat("0." + fraction) * 1000;
                return Math.floor(f);
              }
            }

            function roundTo(number, digits, towardZero = false) {
              const factor = 10 ** digits,
                rounder = towardZero ? Math.trunc : Math.round;
              return rounder(number * factor) / factor;
            }

            // DATE BASICS

            function isLeapYear(year) {
              return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
            }

            function daysInYear(year) {
              return isLeapYear(year) ? 366 : 365;
            }

            function daysInMonth(year, month) {
              const modMonth = floorMod(month - 1, 12) + 1,
                modYear = year + (month - modMonth) / 12;

              if (modMonth === 2) {
                return isLeapYear(modYear) ? 29 : 28;
              } else {
                return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
              }
            }

            // covert a calendar object to a local timestamp (epoch, but with the offset baked in)
            function objToLocalTS(obj) {
              let d = Date.UTC(
                obj.year,
                obj.month - 1,
                obj.day,
                obj.hour,
                obj.minute,
                obj.second,
                obj.millisecond
              );

              // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
              if (obj.year < 100 && obj.year >= 0) {
                d = new Date(d);
                d.setUTCFullYear(d.getUTCFullYear() - 1900);
              }
              return +d;
            }

            function weeksInWeekYear(weekYear) {
              const p1 =
                  (weekYear +
                    Math.floor(weekYear / 4) -
                    Math.floor(weekYear / 100) +
                    Math.floor(weekYear / 400)) %
                  7,
                last = weekYear - 1,
                p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
              return p1 === 4 || p2 === 3 ? 53 : 52;
            }

            function untruncateYear(year) {
              if (year > 99) {
                return year;
              } else return year > 60 ? 1900 + year : 2000 + year;
            }

            // PARSING

            function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
              const date = new Date(ts),
                intlOpts = {
                  hour12: false,
                  year: "numeric",
                  month: "2-digit",
                  day: "2-digit",
                  hour: "2-digit",
                  minute: "2-digit"
                };

              if (timeZone) {
                intlOpts.timeZone = timeZone;
              }

              const modified = Object.assign({ timeZoneName: offsetFormat }, intlOpts),
                intl = hasIntl();

              if (intl && hasFormatToParts()) {
                const parsed = new Intl.DateTimeFormat(locale, modified)
                  .formatToParts(date)
                  .find(m => m.type.toLowerCase() === "timezonename");
                return parsed ? parsed.value : null;
              } else if (intl) {
                // this probably doesn't work for all locales
                const without = new Intl.DateTimeFormat(locale, intlOpts).format(date),
                  included = new Intl.DateTimeFormat(locale, modified).format(date),
                  diffed = included.substring(without.length),
                  trimmed = diffed.replace(/^[, \u200e]+/, "");
                return trimmed;
              } else {
                return null;
              }
            }

            // signedOffset('-5', '30') -> -330
            function signedOffset(offHourStr, offMinuteStr) {
              let offHour = parseInt(offHourStr, 10);

              // don't || this because we want to preserve -0
              if (Number.isNaN(offHour)) {
                offHour = 0;
              }

              const offMin = parseInt(offMinuteStr, 10) || 0,
                offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
              return offHour * 60 + offMinSigned;
            }

            // COERCION

            function asNumber(value) {
              const numericValue = Number(value);
              if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
                throw new InvalidArgumentError(`Invalid unit value ${value}`);
              return numericValue;
            }

            function normalizeObject(obj, normalizer, nonUnitKeys) {
              const normalized = {};
              for (const u in obj) {
                if (hasOwnProperty$7(obj, u)) {
                  if (nonUnitKeys.indexOf(u) >= 0) continue;
                  const v = obj[u];
                  if (v === undefined || v === null) continue;
                  normalized[normalizer(u)] = asNumber(v);
                }
              }
              return normalized;
            }

            function formatOffset(offset, format) {
              const hours = Math.trunc(offset / 60),
                minutes = Math.abs(offset % 60),
                sign = hours >= 0 && !Object.is(hours, -0) ? "+" : "-",
                base = `${sign}${Math.abs(hours)}`;

              switch (format) {
                case "short":
                  return `${sign}${padStart(Math.abs(hours), 2)}:${padStart(minutes, 2)}`;
                case "narrow":
                  return minutes > 0 ? `${base}:${minutes}` : base;
                case "techie":
                  return `${sign}${padStart(Math.abs(hours), 2)}${padStart(minutes, 2)}`;
                default:
                  throw new RangeError(`Value format ${format} is out of range for property format`);
              }
            }

            function timeObject(obj) {
              return pick(obj, ["hour", "minute", "second", "millisecond"]);
            }

            const ianaRegex = /[A-Za-z_+-]{1,256}(:?\/[A-Za-z_+-]{1,256}(\/[A-Za-z_+-]{1,256})?)?/;

            function stringify$1(obj) {
              return JSON.stringify(obj, Object.keys(obj).sort());
            }

            /**
             * @private
             */

            const monthsLong = [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
            ];

            const monthsShort = [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec"
            ];

            const monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];

            function months$1(length) {
              switch (length) {
                case "narrow":
                  return monthsNarrow;
                case "short":
                  return monthsShort;
                case "long":
                  return monthsLong;
                case "numeric":
                  return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
                case "2-digit":
                  return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
                default:
                  return null;
              }
            }

            const weekdaysLong = [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ];

            const weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

            const weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];

            function weekdays(length) {
              switch (length) {
                case "narrow":
                  return weekdaysNarrow;
                case "short":
                  return weekdaysShort;
                case "long":
                  return weekdaysLong;
                case "numeric":
                  return ["1", "2", "3", "4", "5", "6", "7"];
                default:
                  return null;
              }
            }

            const meridiems = ["AM", "PM"];

            const erasLong = ["Before Christ", "Anno Domini"];

            const erasShort = ["BC", "AD"];

            const erasNarrow = ["B", "A"];

            function eras(length) {
              switch (length) {
                case "narrow":
                  return erasNarrow;
                case "short":
                  return erasShort;
                case "long":
                  return erasLong;
                default:
                  return null;
              }
            }

            function meridiemForDateTime(dt) {
              return meridiems[dt.hour < 12 ? 0 : 1];
            }

            function weekdayForDateTime(dt, length) {
              return weekdays(length)[dt.weekday - 1];
            }

            function monthForDateTime(dt, length) {
              return months$1(length)[dt.month - 1];
            }

            function eraForDateTime(dt, length) {
              return eras(length)[dt.year < 0 ? 0 : 1];
            }

            function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
              const units = {
                years: ["year", "yr."],
                quarters: ["quarter", "qtr."],
                months: ["month", "mo."],
                weeks: ["week", "wk."],
                days: ["day", "day", "days"],
                hours: ["hour", "hr."],
                minutes: ["minute", "min."],
                seconds: ["second", "sec."]
              };

              const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

              if (numeric === "auto" && lastable) {
                const isDay = unit === "days";
                switch (count) {
                  case 1:
                    return isDay ? "tomorrow" : `next ${units[unit][0]}`;
                  case -1:
                    return isDay ? "yesterday" : `last ${units[unit][0]}`;
                  case 0:
                    return isDay ? "today" : `this ${units[unit][0]}`;
                }
              }

              const isInPast = Object.is(count, -0) || count < 0,
                fmtValue = Math.abs(count),
                singular = fmtValue === 1,
                lilUnits = units[unit],
                fmtUnit = narrow
                  ? singular
                    ? lilUnits[1]
                    : lilUnits[2] || lilUnits[1]
                  : singular
                    ? units[unit][0]
                    : unit;
              return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
            }

            function formatString(knownFormat) {
              // these all have the offsets removed because we don't have access to them
              // without all the intl stuff this is backfilling
              const filtered = pick(knownFormat, [
                  "weekday",
                  "era",
                  "year",
                  "month",
                  "day",
                  "hour",
                  "minute",
                  "second",
                  "timeZoneName",
                  "hour12"
                ]),
                key = stringify$1(filtered),
                dateTimeHuge = "EEEE, LLLL d, yyyy, h:mm a";
              switch (key) {
                case stringify$1(DATE_SHORT):
                  return "M/d/yyyy";
                case stringify$1(DATE_MED):
                  return "LLL d, yyyy";
                case stringify$1(DATE_FULL):
                  return "LLLL d, yyyy";
                case stringify$1(DATE_HUGE):
                  return "EEEE, LLLL d, yyyy";
                case stringify$1(TIME_SIMPLE):
                  return "h:mm a";
                case stringify$1(TIME_WITH_SECONDS):
                  return "h:mm:ss a";
                case stringify$1(TIME_WITH_SHORT_OFFSET):
                  return "h:mm a";
                case stringify$1(TIME_WITH_LONG_OFFSET):
                  return "h:mm a";
                case stringify$1(TIME_24_SIMPLE):
                  return "HH:mm";
                case stringify$1(TIME_24_WITH_SECONDS):
                  return "HH:mm:ss";
                case stringify$1(TIME_24_WITH_SHORT_OFFSET):
                  return "HH:mm";
                case stringify$1(TIME_24_WITH_LONG_OFFSET):
                  return "HH:mm";
                case stringify$1(DATETIME_SHORT):
                  return "M/d/yyyy, h:mm a";
                case stringify$1(DATETIME_MED):
                  return "LLL d, yyyy, h:mm a";
                case stringify$1(DATETIME_FULL):
                  return "LLLL d, yyyy, h:mm a";
                case stringify$1(DATETIME_HUGE):
                  return dateTimeHuge;
                case stringify$1(DATETIME_SHORT_WITH_SECONDS):
                  return "M/d/yyyy, h:mm:ss a";
                case stringify$1(DATETIME_MED_WITH_SECONDS):
                  return "LLL d, yyyy, h:mm:ss a";
                case stringify$1(DATETIME_MED_WITH_WEEKDAY):
                  return "EEE, d LLL yyyy, h:mm a";
                case stringify$1(DATETIME_FULL_WITH_SECONDS):
                  return "LLLL d, yyyy, h:mm:ss a";
                case stringify$1(DATETIME_HUGE_WITH_SECONDS):
                  return "EEEE, LLLL d, yyyy, h:mm:ss a";
                default:
                  return dateTimeHuge;
              }
            }

            function stringifyTokens(splits, tokenToString) {
              let s = "";
              for (const token of splits) {
                if (token.literal) {
                  s += token.val;
                } else {
                  s += tokenToString(token.val);
                }
              }
              return s;
            }

            const macroTokenToFormatOpts = {
              D: DATE_SHORT,
              DD: DATE_MED,
              DDD: DATE_FULL,
              DDDD: DATE_HUGE,
              t: TIME_SIMPLE,
              tt: TIME_WITH_SECONDS,
              ttt: TIME_WITH_SHORT_OFFSET,
              tttt: TIME_WITH_LONG_OFFSET,
              T: TIME_24_SIMPLE,
              TT: TIME_24_WITH_SECONDS,
              TTT: TIME_24_WITH_SHORT_OFFSET,
              TTTT: TIME_24_WITH_LONG_OFFSET,
              f: DATETIME_SHORT,
              ff: DATETIME_MED,
              fff: DATETIME_FULL,
              ffff: DATETIME_HUGE,
              F: DATETIME_SHORT_WITH_SECONDS,
              FF: DATETIME_MED_WITH_SECONDS,
              FFF: DATETIME_FULL_WITH_SECONDS,
              FFFF: DATETIME_HUGE_WITH_SECONDS
            };

            /**
             * @private
             */

            class Formatter {
              static create(locale, opts = {}) {
                return new Formatter(locale, opts);
              }

              static parseFormat(fmt) {
                let current = null,
                  currentFull = "",
                  bracketed = false;
                const splits = [];
                for (let i = 0; i < fmt.length; i++) {
                  const c = fmt.charAt(i);
                  if (c === "'") {
                    if (currentFull.length > 0) {
                      splits.push({ literal: bracketed, val: currentFull });
                    }
                    current = null;
                    currentFull = "";
                    bracketed = !bracketed;
                  } else if (bracketed) {
                    currentFull += c;
                  } else if (c === current) {
                    currentFull += c;
                  } else {
                    if (currentFull.length > 0) {
                      splits.push({ literal: false, val: currentFull });
                    }
                    currentFull = c;
                    current = c;
                  }
                }

                if (currentFull.length > 0) {
                  splits.push({ literal: bracketed, val: currentFull });
                }

                return splits;
              }

              static macroTokenToFormatOpts(token) {
                return macroTokenToFormatOpts[token];
              }

              constructor(locale, formatOpts) {
                this.opts = formatOpts;
                this.loc = locale;
                this.systemLoc = null;
              }

              formatWithSystemDefault(dt, opts) {
                if (this.systemLoc === null) {
                  this.systemLoc = this.loc.redefaultToSystem();
                }
                const df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));
                return df.format();
              }

              formatDateTime(dt, opts = {}) {
                const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
                return df.format();
              }

              formatDateTimeParts(dt, opts = {}) {
                const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
                return df.formatToParts();
              }

              resolvedOptions(dt, opts = {}) {
                const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
                return df.resolvedOptions();
              }

              num(n, p = 0) {
                // we get some perf out of doing this here, annoyingly
                if (this.opts.forceSimple) {
                  return padStart(n, p);
                }

                const opts = Object.assign({}, this.opts);

                if (p > 0) {
                  opts.padTo = p;
                }

                return this.loc.numberFormatter(opts).format(n);
              }

              formatDateTimeFromString(dt, fmt) {
                const knownEnglish = this.loc.listingMode() === "en",
                  useDateTimeFormatter =
                    this.loc.outputCalendar && this.loc.outputCalendar !== "gregory" && hasFormatToParts(),
                  string = (opts, extract) => this.loc.extract(dt, opts, extract),
                  formatOffset = opts => {
                    if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
                      return "Z";
                    }

                    return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
                  },
                  meridiem = () =>
                    knownEnglish
                      ? meridiemForDateTime(dt)
                      : string({ hour: "numeric", hour12: true }, "dayperiod"),
                  month = (length, standalone) =>
                    knownEnglish
                      ? monthForDateTime(dt, length)
                      : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"),
                  weekday = (length, standalone) =>
                    knownEnglish
                      ? weekdayForDateTime(dt, length)
                      : string(
                          standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
                          "weekday"
                        ),
                  maybeMacro = token => {
                    const formatOpts = Formatter.macroTokenToFormatOpts(token);
                    if (formatOpts) {
                      return this.formatWithSystemDefault(dt, formatOpts);
                    } else {
                      return token;
                    }
                  },
                  era = length =>
                    knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"),
                  tokenToString = token => {
                    // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles
                    switch (token) {
                      // ms
                      case "S":
                        return this.num(dt.millisecond);
                      case "u":
                      // falls through
                      case "SSS":
                        return this.num(dt.millisecond, 3);
                      // seconds
                      case "s":
                        return this.num(dt.second);
                      case "ss":
                        return this.num(dt.second, 2);
                      // minutes
                      case "m":
                        return this.num(dt.minute);
                      case "mm":
                        return this.num(dt.minute, 2);
                      // hours
                      case "h":
                        return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
                      case "hh":
                        return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
                      case "H":
                        return this.num(dt.hour);
                      case "HH":
                        return this.num(dt.hour, 2);
                      // offset
                      case "Z":
                        // like +6
                        return formatOffset({ format: "narrow", allowZ: this.opts.allowZ });
                      case "ZZ":
                        // like +06:00
                        return formatOffset({ format: "short", allowZ: this.opts.allowZ });
                      case "ZZZ":
                        // like +0600
                        return formatOffset({ format: "techie", allowZ: this.opts.allowZ });
                      case "ZZZZ":
                        // like EST
                        return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
                      case "ZZZZZ":
                        // like Eastern Standard Time
                        return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
                      // zone
                      case "z":
                        // like America/New_York
                        return dt.zoneName;
                      // meridiems
                      case "a":
                        return meridiem();
                      // dates
                      case "d":
                        return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
                      case "dd":
                        return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
                      // weekdays - standalone
                      case "c":
                        // like 1
                        return this.num(dt.weekday);
                      case "ccc":
                        // like 'Tues'
                        return weekday("short", true);
                      case "cccc":
                        // like 'Tuesday'
                        return weekday("long", true);
                      case "ccccc":
                        // like 'T'
                        return weekday("narrow", true);
                      // weekdays - format
                      case "E":
                        // like 1
                        return this.num(dt.weekday);
                      case "EEE":
                        // like 'Tues'
                        return weekday("short", false);
                      case "EEEE":
                        // like 'Tuesday'
                        return weekday("long", false);
                      case "EEEEE":
                        // like 'T'
                        return weekday("narrow", false);
                      // months - standalone
                      case "L":
                        // like 1
                        return useDateTimeFormatter
                          ? string({ month: "numeric", day: "numeric" }, "month")
                          : this.num(dt.month);
                      case "LL":
                        // like 01, doesn't seem to work
                        return useDateTimeFormatter
                          ? string({ month: "2-digit", day: "numeric" }, "month")
                          : this.num(dt.month, 2);
                      case "LLL":
                        // like Jan
                        return month("short", true);
                      case "LLLL":
                        // like January
                        return month("long", true);
                      case "LLLLL":
                        // like J
                        return month("narrow", true);
                      // months - format
                      case "M":
                        // like 1
                        return useDateTimeFormatter
                          ? string({ month: "numeric" }, "month")
                          : this.num(dt.month);
                      case "MM":
                        // like 01
                        return useDateTimeFormatter
                          ? string({ month: "2-digit" }, "month")
                          : this.num(dt.month, 2);
                      case "MMM":
                        // like Jan
                        return month("short", false);
                      case "MMMM":
                        // like January
                        return month("long", false);
                      case "MMMMM":
                        // like J
                        return month("narrow", false);
                      // years
                      case "y":
                        // like 2014
                        return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
                      case "yy":
                        // like 14
                        return useDateTimeFormatter
                          ? string({ year: "2-digit" }, "year")
                          : this.num(dt.year.toString().slice(-2), 2);
                      case "yyyy":
                        // like 0012
                        return useDateTimeFormatter
                          ? string({ year: "numeric" }, "year")
                          : this.num(dt.year, 4);
                      case "yyyyyy":
                        // like 000012
                        return useDateTimeFormatter
                          ? string({ year: "numeric" }, "year")
                          : this.num(dt.year, 6);
                      // eras
                      case "G":
                        // like AD
                        return era("short");
                      case "GG":
                        // like Anno Domini
                        return era("long");
                      case "GGGGG":
                        return era("narrow");
                      case "kk":
                        return this.num(dt.weekYear.toString().slice(-2), 2);
                      case "kkkk":
                        return this.num(dt.weekYear, 4);
                      case "W":
                        return this.num(dt.weekNumber);
                      case "WW":
                        return this.num(dt.weekNumber, 2);
                      case "o":
                        return this.num(dt.ordinal);
                      case "ooo":
                        return this.num(dt.ordinal, 3);
                      case "q":
                        // like 1
                        return this.num(dt.quarter);
                      case "qq":
                        // like 01
                        return this.num(dt.quarter, 2);
                      case "X":
                        return this.num(Math.floor(dt.ts / 1000));
                      case "x":
                        return this.num(dt.ts);
                      default:
                        return maybeMacro(token);
                    }
                  };

                return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
              }

              formatDurationFromString(dur, fmt) {
                const tokenToField = token => {
                    switch (token[0]) {
                      case "S":
                        return "millisecond";
                      case "s":
                        return "second";
                      case "m":
                        return "minute";
                      case "h":
                        return "hour";
                      case "d":
                        return "day";
                      case "M":
                        return "month";
                      case "y":
                        return "year";
                      default:
                        return null;
                    }
                  },
                  tokenToString = lildur => token => {
                    const mapped = tokenToField(token);
                    if (mapped) {
                      return this.num(lildur.get(mapped), token.length);
                    } else {
                      return token;
                    }
                  },
                  tokens = Formatter.parseFormat(fmt),
                  realTokens = tokens.reduce(
                    (found, { literal, val }) => (literal ? found : found.concat(val)),
                    []
                  ),
                  collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));
                return stringifyTokens(tokens, tokenToString(collapsed));
              }
            }

            class Invalid {
              constructor(reason, explanation) {
                this.reason = reason;
                this.explanation = explanation;
              }

              toMessage() {
                if (this.explanation) {
                  return `${this.reason}: ${this.explanation}`;
                } else {
                  return this.reason;
                }
              }
            }

            /* eslint no-unused-vars: "off" */

            /**
             * @interface
             */
            class Zone {
              /**
               * The type of zone
               * @abstract
               * @type {string}
               */
              get type() {
                throw new ZoneIsAbstractError();
              }

              /**
               * The name of this zone.
               * @abstract
               * @type {string}
               */
              get name() {
                throw new ZoneIsAbstractError();
              }

              /**
               * Returns whether the offset is known to be fixed for the whole year.
               * @abstract
               * @type {boolean}
               */
              get universal() {
                throw new ZoneIsAbstractError();
              }

              /**
               * Returns the offset's common name (such as EST) at the specified timestamp
               * @abstract
               * @param {number} ts - Epoch milliseconds for which to get the name
               * @param {Object} opts - Options to affect the format
               * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
               * @param {string} opts.locale - What locale to return the offset name in.
               * @return {string}
               */
              offsetName(ts, opts) {
                throw new ZoneIsAbstractError();
              }

              /**
               * Returns the offset's value as a string
               * @abstract
               * @param {number} ts - Epoch milliseconds for which to get the offset
               * @param {string} format - What style of offset to return.
               *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
               * @return {string}
               */
              formatOffset(ts, format) {
                throw new ZoneIsAbstractError();
              }

              /**
               * Return the offset in minutes for this zone at the specified timestamp.
               * @abstract
               * @param {number} ts - Epoch milliseconds for which to compute the offset
               * @return {number}
               */
              offset(ts) {
                throw new ZoneIsAbstractError();
              }

              /**
               * Return whether this Zone is equal to another zone
               * @abstract
               * @param {Zone} otherZone - the zone to compare
               * @return {boolean}
               */
              equals(otherZone) {
                throw new ZoneIsAbstractError();
              }

              /**
               * Return whether this Zone is valid.
               * @abstract
               * @type {boolean}
               */
              get isValid() {
                throw new ZoneIsAbstractError();
              }
            }

            let singleton = null;

            /**
             * Represents the local zone for this Javascript environment.
             * @implements {Zone}
             */
            class LocalZone extends Zone {
              /**
               * Get a singleton instance of the local zone
               * @return {LocalZone}
               */
              static get instance() {
                if (singleton === null) {
                  singleton = new LocalZone();
                }
                return singleton;
              }

              /** @override **/
              get type() {
                return "local";
              }

              /** @override **/
              get name() {
                if (hasIntl()) {
                  return new Intl.DateTimeFormat().resolvedOptions().timeZone;
                } else return "local";
              }

              /** @override **/
              get universal() {
                return false;
              }

              /** @override **/
              offsetName(ts, { format, locale }) {
                return parseZoneInfo(ts, format, locale);
              }

              /** @override **/
              formatOffset(ts, format) {
                return formatOffset(this.offset(ts), format);
              }

              /** @override **/
              offset(ts) {
                return -new Date(ts).getTimezoneOffset();
              }

              /** @override **/
              equals(otherZone) {
                return otherZone.type === "local";
              }

              /** @override **/
              get isValid() {
                return true;
              }
            }

            const matchingRegex = RegExp(`^${ianaRegex.source}$`);

            let dtfCache = {};
            function makeDTF(zone) {
              if (!dtfCache[zone]) {
                dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
                  hour12: false,
                  timeZone: zone,
                  year: "numeric",
                  month: "2-digit",
                  day: "2-digit",
                  hour: "2-digit",
                  minute: "2-digit",
                  second: "2-digit"
                });
              }
              return dtfCache[zone];
            }

            const typeToPos = {
              year: 0,
              month: 1,
              day: 2,
              hour: 3,
              minute: 4,
              second: 5
            };

            function hackyOffset(dtf, date) {
              const formatted = dtf.format(date).replace(/\u200E/g, ""),
                parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted),
                [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;
              return [fYear, fMonth, fDay, fHour, fMinute, fSecond];
            }

            function partsOffset(dtf, date) {
              const formatted = dtf.formatToParts(date),
                filled = [];
              for (let i = 0; i < formatted.length; i++) {
                const { type, value } = formatted[i],
                  pos = typeToPos[type];

                if (!isUndefined$1(pos)) {
                  filled[pos] = parseInt(value, 10);
                }
              }
              return filled;
            }

            let ianaZoneCache = {};
            /**
             * A zone identified by an IANA identifier, like America/New_York
             * @implements {Zone}
             */
            class IANAZone extends Zone {
              /**
               * @param {string} name - Zone name
               * @return {IANAZone}
               */
              static create(name) {
                if (!ianaZoneCache[name]) {
                  ianaZoneCache[name] = new IANAZone(name);
                }
                return ianaZoneCache[name];
              }

              /**
               * Reset local caches. Should only be necessary in testing scenarios.
               * @return {void}
               */
              static resetCache() {
                ianaZoneCache = {};
                dtfCache = {};
              }

              /**
               * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
               * @param {string} s - The string to check validity on
               * @example IANAZone.isValidSpecifier("America/New_York") //=> true
               * @example IANAZone.isValidSpecifier("Fantasia/Castle") //=> true
               * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
               * @return {boolean}
               */
              static isValidSpecifier(s) {
                return !!(s && s.match(matchingRegex));
              }

              /**
               * Returns whether the provided string identifies a real zone
               * @param {string} zone - The string to check
               * @example IANAZone.isValidZone("America/New_York") //=> true
               * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
               * @example IANAZone.isValidZone("Sport~~blorp") //=> false
               * @return {boolean}
               */
              static isValidZone(zone) {
                try {
                  new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
                  return true;
                } catch (e) {
                  return false;
                }
              }

              // Etc/GMT+8 -> -480
              /** @ignore */
              static parseGMTOffset(specifier) {
                if (specifier) {
                  const match = specifier.match(/^Etc\/GMT([+-]\d{1,2})$/i);
                  if (match) {
                    return -60 * parseInt(match[1]);
                  }
                }
                return null;
              }

              constructor(name) {
                super();
                /** @private **/
                this.zoneName = name;
                /** @private **/
                this.valid = IANAZone.isValidZone(name);
              }

              /** @override **/
              get type() {
                return "iana";
              }

              /** @override **/
              get name() {
                return this.zoneName;
              }

              /** @override **/
              get universal() {
                return false;
              }

              /** @override **/
              offsetName(ts, { format, locale }) {
                return parseZoneInfo(ts, format, locale, this.name);
              }

              /** @override **/
              formatOffset(ts, format) {
                return formatOffset(this.offset(ts), format);
              }

              /** @override **/
              offset(ts) {
                const date = new Date(ts),
                  dtf = makeDTF(this.name),
                  [year, month, day, hour, minute, second] = dtf.formatToParts
                    ? partsOffset(dtf, date)
                    : hackyOffset(dtf, date),
                  // work around https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
                  adjustedHour = hour === 24 ? 0 : hour;

                const asUTC = objToLocalTS({
                  year,
                  month,
                  day,
                  hour: adjustedHour,
                  minute,
                  second,
                  millisecond: 0
                });

                let asTS = +date;
                const over = asTS % 1000;
                asTS -= over >= 0 ? over : 1000 + over;
                return (asUTC - asTS) / (60 * 1000);
              }

              /** @override **/
              equals(otherZone) {
                return otherZone.type === "iana" && otherZone.name === this.name;
              }

              /** @override **/
              get isValid() {
                return this.valid;
              }
            }

            let singleton$1 = null;

            /**
             * A zone with a fixed offset (meaning no DST)
             * @implements {Zone}
             */
            class FixedOffsetZone extends Zone {
              /**
               * Get a singleton instance of UTC
               * @return {FixedOffsetZone}
               */
              static get utcInstance() {
                if (singleton$1 === null) {
                  singleton$1 = new FixedOffsetZone(0);
                }
                return singleton$1;
              }

              /**
               * Get an instance with a specified offset
               * @param {number} offset - The offset in minutes
               * @return {FixedOffsetZone}
               */
              static instance(offset) {
                return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
              }

              /**
               * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
               * @param {string} s - The offset string to parse
               * @example FixedOffsetZone.parseSpecifier("UTC+6")
               * @example FixedOffsetZone.parseSpecifier("UTC+06")
               * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
               * @return {FixedOffsetZone}
               */
              static parseSpecifier(s) {
                if (s) {
                  const r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
                  if (r) {
                    return new FixedOffsetZone(signedOffset(r[1], r[2]));
                  }
                }
                return null;
              }

              constructor(offset) {
                super();
                /** @private **/
                this.fixed = offset;
              }

              /** @override **/
              get type() {
                return "fixed";
              }

              /** @override **/
              get name() {
                return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
              }

              /** @override **/
              offsetName() {
                return this.name;
              }

              /** @override **/
              formatOffset(ts, format) {
                return formatOffset(this.fixed, format);
              }

              /** @override **/
              get universal() {
                return true;
              }

              /** @override **/
              offset() {
                return this.fixed;
              }

              /** @override **/
              equals(otherZone) {
                return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
              }

              /** @override **/
              get isValid() {
                return true;
              }
            }

            /**
             * A zone that failed to parse. You should never need to instantiate this.
             * @implements {Zone}
             */
            class InvalidZone extends Zone {
              constructor(zoneName) {
                super();
                /**  @private */
                this.zoneName = zoneName;
              }

              /** @override **/
              get type() {
                return "invalid";
              }

              /** @override **/
              get name() {
                return this.zoneName;
              }

              /** @override **/
              get universal() {
                return false;
              }

              /** @override **/
              offsetName() {
                return null;
              }

              /** @override **/
              formatOffset() {
                return "";
              }

              /** @override **/
              offset() {
                return NaN;
              }

              /** @override **/
              equals() {
                return false;
              }

              /** @override **/
              get isValid() {
                return false;
              }
            }

            /**
             * @private
             */

            function normalizeZone(input, defaultZone) {
              let offset;
              if (isUndefined$1(input) || input === null) {
                return defaultZone;
              } else if (input instanceof Zone) {
                return input;
              } else if (isString$1(input)) {
                const lowered = input.toLowerCase();
                if (lowered === "local") return defaultZone;
                else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
                else if ((offset = IANAZone.parseGMTOffset(input)) != null) {
                  // handle Etc/GMT-4, which V8 chokes on
                  return FixedOffsetZone.instance(offset);
                } else if (IANAZone.isValidSpecifier(lowered)) return IANAZone.create(input);
                else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);
              } else if (isNumber$1(input)) {
                return FixedOffsetZone.instance(input);
              } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
                // This is dumb, but the instanceof check above doesn't seem to really work
                // so we're duck checking it
                return input;
              } else {
                return new InvalidZone(input);
              }
            }

            let now = () => Date.now(),
              defaultZone = null, // not setting this directly to LocalZone.instance bc loading order issues
              defaultLocale = null,
              defaultNumberingSystem = null,
              defaultOutputCalendar = null,
              throwOnInvalid = false;

            /**
             * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
             */
            class Settings {
              /**
               * Get the callback for returning the current timestamp.
               * @type {function}
               */
              static get now() {
                return now;
              }

              /**
               * Set the callback for returning the current timestamp.
               * The function should return a number, which will be interpreted as an Epoch millisecond count
               * @type {function}
               * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
               * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
               */
              static set now(n) {
                now = n;
              }

              /**
               * Get the default time zone to create DateTimes in.
               * @type {string}
               */
              static get defaultZoneName() {
                return Settings.defaultZone.name;
              }

              /**
               * Set the default time zone to create DateTimes in. Does not affect existing instances.
               * @type {string}
               */
              static set defaultZoneName(z) {
                if (!z) {
                  defaultZone = null;
                } else {
                  defaultZone = normalizeZone(z);
                }
              }

              /**
               * Get the default time zone object to create DateTimes in. Does not affect existing instances.
               * @type {Zone}
               */
              static get defaultZone() {
                return defaultZone || LocalZone.instance;
              }

              /**
               * Get the default locale to create DateTimes with. Does not affect existing instances.
               * @type {string}
               */
              static get defaultLocale() {
                return defaultLocale;
              }

              /**
               * Set the default locale to create DateTimes with. Does not affect existing instances.
               * @type {string}
               */
              static set defaultLocale(locale) {
                defaultLocale = locale;
              }

              /**
               * Get the default numbering system to create DateTimes with. Does not affect existing instances.
               * @type {string}
               */
              static get defaultNumberingSystem() {
                return defaultNumberingSystem;
              }

              /**
               * Set the default numbering system to create DateTimes with. Does not affect existing instances.
               * @type {string}
               */
              static set defaultNumberingSystem(numberingSystem) {
                defaultNumberingSystem = numberingSystem;
              }

              /**
               * Get the default output calendar to create DateTimes with. Does not affect existing instances.
               * @type {string}
               */
              static get defaultOutputCalendar() {
                return defaultOutputCalendar;
              }

              /**
               * Set the default output calendar to create DateTimes with. Does not affect existing instances.
               * @type {string}
               */
              static set defaultOutputCalendar(outputCalendar) {
                defaultOutputCalendar = outputCalendar;
              }

              /**
               * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
               * @type {boolean}
               */
              static get throwOnInvalid() {
                return throwOnInvalid;
              }

              /**
               * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
               * @type {boolean}
               */
              static set throwOnInvalid(t) {
                throwOnInvalid = t;
              }

              /**
               * Reset Luxon's global caches. Should only be necessary in testing scenarios.
               * @return {void}
               */
              static resetCaches() {
                Locale.resetCache();
                IANAZone.resetCache();
              }
            }

            let intlDTCache = {};
            function getCachedDTF(locString, opts = {}) {
              const key = JSON.stringify([locString, opts]);
              let dtf = intlDTCache[key];
              if (!dtf) {
                dtf = new Intl.DateTimeFormat(locString, opts);
                intlDTCache[key] = dtf;
              }
              return dtf;
            }

            let intlNumCache = {};
            function getCachedINF(locString, opts = {}) {
              const key = JSON.stringify([locString, opts]);
              let inf = intlNumCache[key];
              if (!inf) {
                inf = new Intl.NumberFormat(locString, opts);
                intlNumCache[key] = inf;
              }
              return inf;
            }

            let intlRelCache = {};
            function getCachedRTF(locString, opts = {}) {
              const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options
              const key = JSON.stringify([locString, cacheKeyOpts]);
              let inf = intlRelCache[key];
              if (!inf) {
                inf = new Intl.RelativeTimeFormat(locString, opts);
                intlRelCache[key] = inf;
              }
              return inf;
            }

            let sysLocaleCache = null;
            function systemLocale() {
              if (sysLocaleCache) {
                return sysLocaleCache;
              } else if (hasIntl()) {
                const computedSys = new Intl.DateTimeFormat().resolvedOptions().locale;
                // node sometimes defaults to "und". Override that because that is dumb
                sysLocaleCache = !computedSys || computedSys === "und" ? "en-US" : computedSys;
                return sysLocaleCache;
              } else {
                sysLocaleCache = "en-US";
                return sysLocaleCache;
              }
            }

            function parseLocaleString(localeStr) {
              // I really want to avoid writing a BCP 47 parser
              // see, e.g. https://github.com/wooorm/bcp-47
              // Instead, we'll do this:

              // a) if the string has no -u extensions, just leave it alone
              // b) if it does, use Intl to resolve everything
              // c) if Intl fails, try again without the -u

              const uIndex = localeStr.indexOf("-u-");
              if (uIndex === -1) {
                return [localeStr];
              } else {
                let options;
                const smaller = localeStr.substring(0, uIndex);
                try {
                  options = getCachedDTF(localeStr).resolvedOptions();
                } catch (e) {
                  options = getCachedDTF(smaller).resolvedOptions();
                }

                const { numberingSystem, calendar } = options;
                // return the smaller one so that we can append the calendar and numbering overrides to it
                return [smaller, numberingSystem, calendar];
              }
            }

            function intlConfigString(localeStr, numberingSystem, outputCalendar) {
              if (hasIntl()) {
                if (outputCalendar || numberingSystem) {
                  localeStr += "-u";

                  if (outputCalendar) {
                    localeStr += `-ca-${outputCalendar}`;
                  }

                  if (numberingSystem) {
                    localeStr += `-nu-${numberingSystem}`;
                  }
                  return localeStr;
                } else {
                  return localeStr;
                }
              } else {
                return [];
              }
            }

            function mapMonths(f) {
              const ms = [];
              for (let i = 1; i <= 12; i++) {
                const dt = DateTime.utc(2016, i, 1);
                ms.push(f(dt));
              }
              return ms;
            }

            function mapWeekdays(f) {
              const ms = [];
              for (let i = 1; i <= 7; i++) {
                const dt = DateTime.utc(2016, 11, 13 + i);
                ms.push(f(dt));
              }
              return ms;
            }

            function listStuff(loc, length, defaultOK, englishFn, intlFn) {
              const mode = loc.listingMode(defaultOK);

              if (mode === "error") {
                return null;
              } else if (mode === "en") {
                return englishFn(length);
              } else {
                return intlFn(length);
              }
            }

            function supportsFastNumbers(loc) {
              if (loc.numberingSystem && loc.numberingSystem !== "latn") {
                return false;
              } else {
                return (
                  loc.numberingSystem === "latn" ||
                  !loc.locale ||
                  loc.locale.startsWith("en") ||
                  (hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn")
                );
              }
            }

            /**
             * @private
             */

            class PolyNumberFormatter {
              constructor(intl, forceSimple, opts) {
                this.padTo = opts.padTo || 0;
                this.floor = opts.floor || false;

                if (!forceSimple && hasIntl()) {
                  const intlOpts = { useGrouping: false };
                  if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
                  this.inf = getCachedINF(intl, intlOpts);
                }
              }

              format(i) {
                if (this.inf) {
                  const fixed = this.floor ? Math.floor(i) : i;
                  return this.inf.format(fixed);
                } else {
                  // to match the browser's numberformatter defaults
                  const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
                  return padStart(fixed, this.padTo);
                }
              }
            }

            /**
             * @private
             */

            class PolyDateFormatter {
              constructor(dt, intl, opts) {
                this.opts = opts;
                this.hasIntl = hasIntl();

                let z;
                if (dt.zone.universal && this.hasIntl) {
                  // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,
                  // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.
                  // So we have to make do. Two cases:
                  // 1. The format options tell us to show the zone. We can't do that, so the best
                  // we can do is format the date in UTC.
                  // 2. The format options don't tell us to show the zone. Then we can adjust them
                  // the time and tell the formatter to show it to us in UTC, so that the time is right
                  // and the bad zone doesn't show up.
                  // We can clean all this up when Chrome fixes this.
                  z = "UTC";
                  if (opts.timeZoneName) {
                    this.dt = dt;
                  } else {
                    this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);
                  }
                } else if (dt.zone.type === "local") {
                  this.dt = dt;
                } else {
                  this.dt = dt;
                  z = dt.zone.name;
                }

                if (this.hasIntl) {
                  const intlOpts = Object.assign({}, this.opts);
                  if (z) {
                    intlOpts.timeZone = z;
                  }
                  this.dtf = getCachedDTF(intl, intlOpts);
                }
              }

              format() {
                if (this.hasIntl) {
                  return this.dtf.format(this.dt.toJSDate());
                } else {
                  const tokenFormat = formatString(this.opts),
                    loc = Locale.create("en-US");
                  return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);
                }
              }

              formatToParts() {
                if (this.hasIntl && hasFormatToParts()) {
                  return this.dtf.formatToParts(this.dt.toJSDate());
                } else {
                  // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings
                  // and IMO it's too weird to have an uncanny valley like that
                  return [];
                }
              }

              resolvedOptions() {
                if (this.hasIntl) {
                  return this.dtf.resolvedOptions();
                } else {
                  return {
                    locale: "en-US",
                    numberingSystem: "latn",
                    outputCalendar: "gregory"
                  };
                }
              }
            }

            /**
             * @private
             */
            class PolyRelFormatter {
              constructor(intl, isEnglish, opts) {
                this.opts = Object.assign({ style: "long" }, opts);
                if (!isEnglish && hasRelative()) {
                  this.rtf = getCachedRTF(intl, opts);
                }
              }

              format(count, unit) {
                if (this.rtf) {
                  return this.rtf.format(count, unit);
                } else {
                  return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
                }
              }

              formatToParts(count, unit) {
                if (this.rtf) {
                  return this.rtf.formatToParts(count, unit);
                } else {
                  return [];
                }
              }
            }

            /**
             * @private
             */

            class Locale {
              static fromOpts(opts) {
                return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
              }

              static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {
                const specifiedLocale = locale || Settings.defaultLocale,
                  // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
                  localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale()),
                  numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,
                  outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
                return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
              }

              static resetCache() {
                sysLocaleCache = null;
                intlDTCache = {};
                intlNumCache = {};
                intlRelCache = {};
              }

              static fromObject({ locale, numberingSystem, outputCalendar } = {}) {
                return Locale.create(locale, numberingSystem, outputCalendar);
              }

              constructor(locale, numbering, outputCalendar, specifiedLocale) {
                const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);

                this.locale = parsedLocale;
                this.numberingSystem = numbering || parsedNumberingSystem || null;
                this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
                this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);

                this.weekdaysCache = { format: {}, standalone: {} };
                this.monthsCache = { format: {}, standalone: {} };
                this.meridiemCache = null;
                this.eraCache = {};

                this.specifiedLocale = specifiedLocale;
                this.fastNumbersCached = null;
              }

              get fastNumbers() {
                if (this.fastNumbersCached == null) {
                  this.fastNumbersCached = supportsFastNumbers(this);
                }

                return this.fastNumbersCached;
              }

              listingMode(defaultOK = true) {
                const intl = hasIntl(),
                  hasFTP = intl && hasFormatToParts(),
                  isActuallyEn = this.isEnglish(),
                  hasNoWeirdness =
                    (this.numberingSystem === null || this.numberingSystem === "latn") &&
                    (this.outputCalendar === null || this.outputCalendar === "gregory");

                if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {
                  return "error";
                } else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {
                  return "en";
                } else {
                  return "intl";
                }
              }

              clone(alts) {
                if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
                  return this;
                } else {
                  return Locale.create(
                    alts.locale || this.specifiedLocale,
                    alts.numberingSystem || this.numberingSystem,
                    alts.outputCalendar || this.outputCalendar,
                    alts.defaultToEN || false
                  );
                }
              }

              redefaultToEN(alts = {}) {
                return this.clone(Object.assign({}, alts, { defaultToEN: true }));
              }

              redefaultToSystem(alts = {}) {
                return this.clone(Object.assign({}, alts, { defaultToEN: false }));
              }

              months(length, format = false, defaultOK = true) {
                return listStuff(this, length, defaultOK, months$1, () => {
                  const intl = format ? { month: length, day: "numeric" } : { month: length },
                    formatStr = format ? "format" : "standalone";
                  if (!this.monthsCache[formatStr][length]) {
                    this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, "month"));
                  }
                  return this.monthsCache[formatStr][length];
                });
              }

              weekdays(length, format = false, defaultOK = true) {
                return listStuff(this, length, defaultOK, weekdays, () => {
                  const intl = format
                      ? { weekday: length, year: "numeric", month: "long", day: "numeric" }
                      : { weekday: length },
                    formatStr = format ? "format" : "standalone";
                  if (!this.weekdaysCache[formatStr][length]) {
                    this.weekdaysCache[formatStr][length] = mapWeekdays(dt =>
                      this.extract(dt, intl, "weekday")
                    );
                  }
                  return this.weekdaysCache[formatStr][length];
                });
              }

              meridiems(defaultOK = true) {
                return listStuff(
                  this,
                  undefined,
                  defaultOK,
                  () => meridiems,
                  () => {
                    // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
                    // for AM and PM. This is probably wrong, but it's makes parsing way easier.
                    if (!this.meridiemCache) {
                      const intl = { hour: "numeric", hour12: true };
                      this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
                        dt => this.extract(dt, intl, "dayperiod")
                      );
                    }

                    return this.meridiemCache;
                  }
                );
              }

              eras(length, defaultOK = true) {
                return listStuff(this, length, defaultOK, eras, () => {
                  const intl = { era: length };

                  // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
                  // to definitely enumerate them.
                  if (!this.eraCache[length]) {
                    this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>
                      this.extract(dt, intl, "era")
                    );
                  }

                  return this.eraCache[length];
                });
              }

              extract(dt, intlOpts, field) {
                const df = this.dtFormatter(dt, intlOpts),
                  results = df.formatToParts(),
                  matching = results.find(m => m.type.toLowerCase() === field);
                return matching ? matching.value : null;
              }

              numberFormatter(opts = {}) {
                // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
                // (in contrast, the rest of the condition is used heavily)
                return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
              }

              dtFormatter(dt, intlOpts = {}) {
                return new PolyDateFormatter(dt, this.intl, intlOpts);
              }

              relFormatter(opts = {}) {
                return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
              }

              isEnglish() {
                return (
                  this.locale === "en" ||
                  this.locale.toLowerCase() === "en-us" ||
                  (hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us"))
                );
              }

              equals(other) {
                return (
                  this.locale === other.locale &&
                  this.numberingSystem === other.numberingSystem &&
                  this.outputCalendar === other.outputCalendar
                );
              }
            }

            /*
             * This file handles parsing for well-specified formats. Here's how it works:
             * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
             * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
             * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
             * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
             * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
             * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
             */

            function combineRegexes(...regexes) {
              const full = regexes.reduce((f, r) => f + r.source, "");
              return RegExp(`^${full}$`);
            }

            function combineExtractors(...extractors) {
              return m =>
                extractors
                  .reduce(
                    ([mergedVals, mergedZone, cursor], ex) => {
                      const [val, zone, next] = ex(m, cursor);
                      return [Object.assign(mergedVals, val), mergedZone || zone, next];
                    },
                    [{}, null, 1]
                  )
                  .slice(0, 2);
            }

            function parse$2(s, ...patterns) {
              if (s == null) {
                return [null, null];
              }

              for (const [regex, extractor] of patterns) {
                const m = regex.exec(s);
                if (m) {
                  return extractor(m);
                }
              }
              return [null, null];
            }

            function simpleParse(...keys) {
              return (match, cursor) => {
                const ret = {};
                let i;

                for (i = 0; i < keys.length; i++) {
                  ret[keys[i]] = parseInteger(match[cursor + i]);
                }
                return [ret, null, cursor + i];
              };
            }

            // ISO and SQL parsing
            const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,
              isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,9}))?)?)?/,
              isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),
              isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),
              isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,
              isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/,
              isoOrdinalRegex = /(\d{4})-?(\d{3})/,
              extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay"),
              extractISOOrdinalData = simpleParse("year", "ordinal"),
              sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/, // dumbed-down version of the ISO one
              sqlTimeRegex = RegExp(
                `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
              ),
              sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);

            function int(match, pos, fallback) {
              const m = match[pos];
              return isUndefined$1(m) ? fallback : parseInteger(m);
            }

            function extractISOYmd(match, cursor) {
              const item = {
                year: int(match, cursor),
                month: int(match, cursor + 1, 1),
                day: int(match, cursor + 2, 1)
              };

              return [item, null, cursor + 3];
            }

            function extractISOTime(match, cursor) {
              const item = {
                hour: int(match, cursor, 0),
                minute: int(match, cursor + 1, 0),
                second: int(match, cursor + 2, 0),
                millisecond: parseMillis(match[cursor + 3])
              };

              return [item, null, cursor + 4];
            }

            function extractISOOffset(match, cursor) {
              const local = !match[cursor] && !match[cursor + 1],
                fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
                zone = local ? null : FixedOffsetZone.instance(fullOffset);
              return [{}, zone, cursor + 3];
            }

            function extractIANAZone(match, cursor) {
              const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
              return [{}, zone, cursor + 1];
            }

            // ISO duration parsing

            const isoDuration = /^-?P(?:(?:(-?\d{1,9})Y)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})W)?(?:(-?\d{1,9})D)?(?:T(?:(-?\d{1,9})H)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})(?:[.,](-?\d{1,9}))?S)?)?)$/;

            function extractISODuration(match) {
              const [
                s,
                yearStr,
                monthStr,
                weekStr,
                dayStr,
                hourStr,
                minuteStr,
                secondStr,
                millisecondsStr
              ] = match;

              const hasNegativePrefix = s[0] === "-";

              const maybeNegate = num => (num && hasNegativePrefix ? -num : num);

              return [
                {
                  years: maybeNegate(parseInteger(yearStr)),
                  months: maybeNegate(parseInteger(monthStr)),
                  weeks: maybeNegate(parseInteger(weekStr)),
                  days: maybeNegate(parseInteger(dayStr)),
                  hours: maybeNegate(parseInteger(hourStr)),
                  minutes: maybeNegate(parseInteger(minuteStr)),
                  seconds: maybeNegate(parseInteger(secondStr)),
                  milliseconds: maybeNegate(parseMillis(millisecondsStr))
                }
              ];
            }

            // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
            // and not just that we're in -240 *right now*. But since I don't think these are used that often
            // I'm just going to ignore that
            const obsOffsets = {
              GMT: 0,
              EDT: -4 * 60,
              EST: -5 * 60,
              CDT: -5 * 60,
              CST: -6 * 60,
              MDT: -6 * 60,
              MST: -7 * 60,
              PDT: -7 * 60,
              PST: -8 * 60
            };

            function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
              const result = {
                year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
                month: monthsShort.indexOf(monthStr) + 1,
                day: parseInteger(dayStr),
                hour: parseInteger(hourStr),
                minute: parseInteger(minuteStr)
              };

              if (secondStr) result.second = parseInteger(secondStr);
              if (weekdayStr) {
                result.weekday =
                  weekdayStr.length > 3
                    ? weekdaysLong.indexOf(weekdayStr) + 1
                    : weekdaysShort.indexOf(weekdayStr) + 1;
              }

              return result;
            }

            // RFC 2822/5322
            const rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

            function extractRFC2822(match) {
              const [
                  ,
                  weekdayStr,
                  dayStr,
                  monthStr,
                  yearStr,
                  hourStr,
                  minuteStr,
                  secondStr,
                  obsOffset,
                  milOffset,
                  offHourStr,
                  offMinuteStr
                ] = match,
                result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

              let offset;
              if (obsOffset) {
                offset = obsOffsets[obsOffset];
              } else if (milOffset) {
                offset = 0;
              } else {
                offset = signedOffset(offHourStr, offMinuteStr);
              }

              return [result, new FixedOffsetZone(offset)];
            }

            function preprocessRFC2822(s) {
              // Remove comments and folding whitespace and replace multiple-spaces with a single space
              return s
                .replace(/\([^)]*\)|[\n\t]/g, " ")
                .replace(/(\s\s+)/g, " ")
                .trim();
            }

            // http date

            const rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
              rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
              ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

            function extractRFC1123Or850(match) {
              const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,
                result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
              return [result, FixedOffsetZone.utcInstance];
            }

            function extractASCII(match) {
              const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,
                result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
              return [result, FixedOffsetZone.utcInstance];
            }

            const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
            const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
            const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
            const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);

            const extractISOYmdTimeAndOffset = combineExtractors(
              extractISOYmd,
              extractISOTime,
              extractISOOffset
            );
            const extractISOWeekTimeAndOffset = combineExtractors(
              extractISOWeekData,
              extractISOTime,
              extractISOOffset
            );
            const extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);
            const extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);

            /**
             * @private
             */

            function parseISODate(s) {
              return parse$2(
                s,
                [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
                [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
                [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime],
                [isoTimeCombinedRegex, extractISOTimeAndOffset]
              );
            }

            function parseRFC2822Date(s) {
              return parse$2(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
            }

            function parseHTTPDate(s) {
              return parse$2(
                s,
                [rfc1123, extractRFC1123Or850],
                [rfc850, extractRFC1123Or850],
                [ascii, extractASCII]
              );
            }

            function parseISODuration(s) {
              return parse$2(s, [isoDuration, extractISODuration]);
            }

            const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
            const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);

            const extractISOYmdTimeOffsetAndIANAZone = combineExtractors(
              extractISOYmd,
              extractISOTime,
              extractISOOffset,
              extractIANAZone
            );
            const extractISOTimeOffsetAndIANAZone = combineExtractors(
              extractISOTime,
              extractISOOffset,
              extractIANAZone
            );

            function parseSQL(s) {
              return parse$2(
                s,
                [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone],
                [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
              );
            }

            const INVALID = "Invalid Duration";

            // unit conversion constants
            const lowOrderMatrix = {
                weeks: {
                  days: 7,
                  hours: 7 * 24,
                  minutes: 7 * 24 * 60,
                  seconds: 7 * 24 * 60 * 60,
                  milliseconds: 7 * 24 * 60 * 60 * 1000
                },
                days: {
                  hours: 24,
                  minutes: 24 * 60,
                  seconds: 24 * 60 * 60,
                  milliseconds: 24 * 60 * 60 * 1000
                },
                hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
                minutes: { seconds: 60, milliseconds: 60 * 1000 },
                seconds: { milliseconds: 1000 }
              },
              casualMatrix = Object.assign(
                {
                  years: {
                    months: 12,
                    weeks: 52,
                    days: 365,
                    hours: 365 * 24,
                    minutes: 365 * 24 * 60,
                    seconds: 365 * 24 * 60 * 60,
                    milliseconds: 365 * 24 * 60 * 60 * 1000
                  },
                  quarters: {
                    months: 3,
                    weeks: 13,
                    days: 91,
                    hours: 91 * 24,
                    minutes: 91 * 24 * 60,
                    milliseconds: 91 * 24 * 60 * 60 * 1000
                  },
                  months: {
                    weeks: 4,
                    days: 30,
                    hours: 30 * 24,
                    minutes: 30 * 24 * 60,
                    seconds: 30 * 24 * 60 * 60,
                    milliseconds: 30 * 24 * 60 * 60 * 1000
                  }
                },
                lowOrderMatrix
              ),
              daysInYearAccurate = 146097.0 / 400,
              daysInMonthAccurate = 146097.0 / 4800,
              accurateMatrix = Object.assign(
                {
                  years: {
                    months: 12,
                    weeks: daysInYearAccurate / 7,
                    days: daysInYearAccurate,
                    hours: daysInYearAccurate * 24,
                    minutes: daysInYearAccurate * 24 * 60,
                    seconds: daysInYearAccurate * 24 * 60 * 60,
                    milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
                  },
                  quarters: {
                    months: 3,
                    weeks: daysInYearAccurate / 28,
                    days: daysInYearAccurate / 4,
                    hours: (daysInYearAccurate * 24) / 4,
                    minutes: (daysInYearAccurate * 24 * 60) / 4,
                    seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,
                    milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4
                  },
                  months: {
                    weeks: daysInMonthAccurate / 7,
                    days: daysInMonthAccurate,
                    hours: daysInMonthAccurate * 24,
                    minutes: daysInMonthAccurate * 24 * 60,
                    seconds: daysInMonthAccurate * 24 * 60 * 60,
                    milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
                  }
                },
                lowOrderMatrix
              );

            // units ordered by size
            const orderedUnits = [
              "years",
              "quarters",
              "months",
              "weeks",
              "days",
              "hours",
              "minutes",
              "seconds",
              "milliseconds"
            ];

            const reverseUnits = orderedUnits.slice(0).reverse();

            // clone really means "create another instance just like this one, but with these changes"
            function clone(dur, alts, clear = false) {
              // deep merge for vals
              const conf = {
                values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),
                loc: dur.loc.clone(alts.loc),
                conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy
              };
              return new Duration(conf);
            }

            function antiTrunc(n) {
              return n < 0 ? Math.floor(n) : Math.ceil(n);
            }

            // NB: mutates parameters
            function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
              const conv = matrix[toUnit][fromUnit],
                raw = fromMap[fromUnit] / conv,
                sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
                // ok, so this is wild, but see the matrix in the tests
                added =
                  !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
              toMap[toUnit] += added;
              fromMap[fromUnit] -= added * conv;
            }

            // NB: mutates parameters
            function normalizeValues(matrix, vals) {
              reverseUnits.reduce((previous, current) => {
                if (!isUndefined$1(vals[current])) {
                  if (previous) {
                    convert(matrix, vals, previous, vals, current);
                  }
                  return current;
                } else {
                  return previous;
                }
              }, null);
            }

            /**
             * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.
             *
             * Here is a brief overview of commonly used methods and getters in Duration:
             *
             * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
             * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.
             * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.
             * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.
             * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}
             *
             * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
             */
            class Duration {
              /**
               * @private
               */
              constructor(config) {
                const accurate = config.conversionAccuracy === "longterm" || false;
                /**
                 * @access private
                 */
                this.values = config.values;
                /**
                 * @access private
                 */
                this.loc = config.loc || Locale.create();
                /**
                 * @access private
                 */
                this.conversionAccuracy = accurate ? "longterm" : "casual";
                /**
                 * @access private
                 */
                this.invalid = config.invalid || null;
                /**
                 * @access private
                 */
                this.matrix = accurate ? accurateMatrix : casualMatrix;
                /**
                 * @access private
                 */
                this.isLuxonDuration = true;
              }

              /**
               * Create Duration from a number of milliseconds.
               * @param {number} count of milliseconds
               * @param {Object} opts - options for parsing
               * @param {string} [opts.locale='en-US'] - the locale to use
               * @param {string} opts.numberingSystem - the numbering system to use
               * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
               * @return {Duration}
               */
              static fromMillis(count, opts) {
                return Duration.fromObject(Object.assign({ milliseconds: count }, opts));
              }

              /**
               * Create a Duration from a Javascript object with keys like 'years' and 'hours.
               * If this object is empty then a zero milliseconds duration is returned.
               * @param {Object} obj - the object to create the DateTime from
               * @param {number} obj.years
               * @param {number} obj.quarters
               * @param {number} obj.months
               * @param {number} obj.weeks
               * @param {number} obj.days
               * @param {number} obj.hours
               * @param {number} obj.minutes
               * @param {number} obj.seconds
               * @param {number} obj.milliseconds
               * @param {string} [obj.locale='en-US'] - the locale to use
               * @param {string} obj.numberingSystem - the numbering system to use
               * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use
               * @return {Duration}
               */
              static fromObject(obj) {
                if (obj == null || typeof obj !== "object") {
                  throw new InvalidArgumentError(
                    `Duration.fromObject: argument expected to be an object, got ${
          obj === null ? "null" : typeof obj
        }`
                  );
                }
                return new Duration({
                  values: normalizeObject(obj, Duration.normalizeUnit, [
                    "locale",
                    "numberingSystem",
                    "conversionAccuracy",
                    "zone" // a bit of debt; it's super inconvenient internally not to be able to blindly pass this
                  ]),
                  loc: Locale.fromObject(obj),
                  conversionAccuracy: obj.conversionAccuracy
                });
              }

              /**
               * Create a Duration from an ISO 8601 duration string.
               * @param {string} text - text to parse
               * @param {Object} opts - options for parsing
               * @param {string} [opts.locale='en-US'] - the locale to use
               * @param {string} opts.numberingSystem - the numbering system to use
               * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
               * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
               * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
               * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
               * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
               * @return {Duration}
               */
              static fromISO(text, opts) {
                const [parsed] = parseISODuration(text);
                if (parsed) {
                  const obj = Object.assign(parsed, opts);
                  return Duration.fromObject(obj);
                } else {
                  return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
                }
              }

              /**
               * Create an invalid Duration.
               * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
               * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
               * @return {Duration}
               */
              static invalid(reason, explanation = null) {
                if (!reason) {
                  throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
                }

                const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

                if (Settings.throwOnInvalid) {
                  throw new InvalidDurationError(invalid);
                } else {
                  return new Duration({ invalid });
                }
              }

              /**
               * @private
               */
              static normalizeUnit(unit) {
                const normalized = {
                  year: "years",
                  years: "years",
                  quarter: "quarters",
                  quarters: "quarters",
                  month: "months",
                  months: "months",
                  week: "weeks",
                  weeks: "weeks",
                  day: "days",
                  days: "days",
                  hour: "hours",
                  hours: "hours",
                  minute: "minutes",
                  minutes: "minutes",
                  second: "seconds",
                  seconds: "seconds",
                  millisecond: "milliseconds",
                  milliseconds: "milliseconds"
                }[unit ? unit.toLowerCase() : unit];

                if (!normalized) throw new InvalidUnitError(unit);

                return normalized;
              }

              /**
               * Check if an object is a Duration. Works across context boundaries
               * @param {object} o
               * @return {boolean}
               */
              static isDuration(o) {
                return (o && o.isLuxonDuration) || false;
              }

              /**
               * Get  the locale of a Duration, such 'en-GB'
               * @type {string}
               */
              get locale() {
                return this.isValid ? this.loc.locale : null;
              }

              /**
               * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
               *
               * @type {string}
               */
              get numberingSystem() {
                return this.isValid ? this.loc.numberingSystem : null;
              }

              /**
               * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
               * * `S` for milliseconds
               * * `s` for seconds
               * * `m` for minutes
               * * `h` for hours
               * * `d` for days
               * * `M` for months
               * * `y` for years
               * Notes:
               * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
               * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.
               * @param {string} fmt - the format string
               * @param {Object} opts - options
               * @param {boolean} [opts.floor=true] - floor numerical values
               * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
               * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
               * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
               * @return {string}
               */
              toFormat(fmt, opts = {}) {
                // reverse-compat since 1.2; we always round down now, never up, and we do it by default
                const fmtOpts = Object.assign({}, opts, {
                  floor: opts.round !== false && opts.floor !== false
                });
                return this.isValid
                  ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)
                  : INVALID;
              }

              /**
               * Returns a Javascript object with this Duration's values.
               * @param opts - options for generating the object
               * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
               * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
               * @return {Object}
               */
              toObject(opts = {}) {
                if (!this.isValid) return {};

                const base = Object.assign({}, this.values);

                if (opts.includeConfig) {
                  base.conversionAccuracy = this.conversionAccuracy;
                  base.numberingSystem = this.loc.numberingSystem;
                  base.locale = this.loc.locale;
                }
                return base;
              }

              /**
               * Returns an ISO 8601-compliant string representation of this Duration.
               * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
               * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
               * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
               * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
               * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
               * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
               * @return {string}
               */
              toISO() {
                // we could use the formatter, but this is an easier way to get the minimum string
                if (!this.isValid) return null;

                let s = "P";
                if (this.years !== 0) s += this.years + "Y";
                if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
                if (this.weeks !== 0) s += this.weeks + "W";
                if (this.days !== 0) s += this.days + "D";
                if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
                  s += "T";
                if (this.hours !== 0) s += this.hours + "H";
                if (this.minutes !== 0) s += this.minutes + "M";
                if (this.seconds !== 0 || this.milliseconds !== 0)
                  // this will handle "floating point madness" by removing extra decimal places
                  // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
                  s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
                if (s === "P") s += "T0S";
                return s;
              }

              /**
               * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
               * @return {string}
               */
              toJSON() {
                return this.toISO();
              }

              /**
               * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
               * @return {string}
               */
              toString() {
                return this.toISO();
              }

              /**
               * Returns an milliseconds value of this Duration.
               * @return {number}
               */
              valueOf() {
                return this.as("milliseconds");
              }

              /**
               * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
               * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
               * @return {Duration}
               */
              plus(duration) {
                if (!this.isValid) return this;

                const dur = friendlyDuration(duration),
                  result = {};

                for (const k of orderedUnits) {
                  if (hasOwnProperty$7(dur.values, k) || hasOwnProperty$7(this.values, k)) {
                    result[k] = dur.get(k) + this.get(k);
                  }
                }

                return clone(this, { values: result }, true);
              }

              /**
               * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
               * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
               * @return {Duration}
               */
              minus(duration) {
                if (!this.isValid) return this;

                const dur = friendlyDuration(duration);
                return this.plus(dur.negate());
              }

              /**
               * Scale this Duration by the specified amount. Return a newly-constructed Duration.
               * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
               * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }
               * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === "hour" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
               * @return {Duration}
               */
              mapUnits(fn) {
                if (!this.isValid) return this;
                const result = {};
                for (const k of Object.keys(this.values)) {
                  result[k] = asNumber(fn(this.values[k], k));
                }
                return clone(this, { values: result }, true);
              }

              /**
               * Get the value of unit.
               * @param {string} unit - a unit such as 'minute' or 'day'
               * @example Duration.fromObject({years: 2, days: 3}).years //=> 2
               * @example Duration.fromObject({years: 2, days: 3}).months //=> 0
               * @example Duration.fromObject({years: 2, days: 3}).days //=> 3
               * @return {number}
               */
              get(unit) {
                return this[Duration.normalizeUnit(unit)];
              }

              /**
               * "Set" the values of specified units. Return a newly-constructed Duration.
               * @param {Object} values - a mapping of units to numbers
               * @example dur.set({ years: 2017 })
               * @example dur.set({ hours: 8, minutes: 30 })
               * @return {Duration}
               */
              set(values) {
                if (!this.isValid) return this;

                const mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit, []));
                return clone(this, { values: mixed });
              }

              /**
               * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
               * @example dur.reconfigure({ locale: 'en-GB' })
               * @return {Duration}
               */
              reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {
                const loc = this.loc.clone({ locale, numberingSystem }),
                  opts = { loc };

                if (conversionAccuracy) {
                  opts.conversionAccuracy = conversionAccuracy;
                }

                return clone(this, opts);
              }

              /**
               * Return the length of the duration in the specified unit.
               * @param {string} unit - a unit such as 'minutes' or 'days'
               * @example Duration.fromObject({years: 1}).as('days') //=> 365
               * @example Duration.fromObject({years: 1}).as('months') //=> 12
               * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
               * @return {number}
               */
              as(unit) {
                return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
              }

              /**
               * Reduce this Duration to its canonical representation in its current units.
               * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
               * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
               * @return {Duration}
               */
              normalize() {
                if (!this.isValid) return this;
                const vals = this.toObject();
                normalizeValues(this.matrix, vals);
                return clone(this, { values: vals }, true);
              }

              /**
               * Convert this Duration into its representation in a different set of units.
               * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
               * @return {Duration}
               */
              shiftTo(...units) {
                if (!this.isValid) return this;

                if (units.length === 0) {
                  return this;
                }

                units = units.map(u => Duration.normalizeUnit(u));

                const built = {},
                  accumulated = {},
                  vals = this.toObject();
                let lastUnit;

                normalizeValues(this.matrix, vals);

                for (const k of orderedUnits) {
                  if (units.indexOf(k) >= 0) {
                    lastUnit = k;

                    let own = 0;

                    // anything we haven't boiled down yet should get boiled to this unit
                    for (const ak in accumulated) {
                      own += this.matrix[ak][k] * accumulated[ak];
                      accumulated[ak] = 0;
                    }

                    // plus anything that's already in this unit
                    if (isNumber$1(vals[k])) {
                      own += vals[k];
                    }

                    const i = Math.trunc(own);
                    built[k] = i;
                    accumulated[k] = own - i; // we'd like to absorb these fractions in another unit

                    // plus anything further down the chain that should be rolled up in to this
                    for (const down in vals) {
                      if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {
                        convert(this.matrix, vals, down, built, k);
                      }
                    }
                    // otherwise, keep it in the wings to boil it later
                  } else if (isNumber$1(vals[k])) {
                    accumulated[k] = vals[k];
                  }
                }

                // anything leftover becomes the decimal for the last unit
                // lastUnit must be defined since units is not empty
                for (const key in accumulated) {
                  if (accumulated[key] !== 0) {
                    built[lastUnit] +=
                      key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
                  }
                }

                return clone(this, { values: built }, true).normalize();
              }

              /**
               * Return the negative of this Duration.
               * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
               * @return {Duration}
               */
              negate() {
                if (!this.isValid) return this;
                const negated = {};
                for (const k of Object.keys(this.values)) {
                  negated[k] = -this.values[k];
                }
                return clone(this, { values: negated }, true);
              }

              /**
               * Get the years.
               * @type {number}
               */
              get years() {
                return this.isValid ? this.values.years || 0 : NaN;
              }

              /**
               * Get the quarters.
               * @type {number}
               */
              get quarters() {
                return this.isValid ? this.values.quarters || 0 : NaN;
              }

              /**
               * Get the months.
               * @type {number}
               */
              get months() {
                return this.isValid ? this.values.months || 0 : NaN;
              }

              /**
               * Get the weeks
               * @type {number}
               */
              get weeks() {
                return this.isValid ? this.values.weeks || 0 : NaN;
              }

              /**
               * Get the days.
               * @type {number}
               */
              get days() {
                return this.isValid ? this.values.days || 0 : NaN;
              }

              /**
               * Get the hours.
               * @type {number}
               */
              get hours() {
                return this.isValid ? this.values.hours || 0 : NaN;
              }

              /**
               * Get the minutes.
               * @type {number}
               */
              get minutes() {
                return this.isValid ? this.values.minutes || 0 : NaN;
              }

              /**
               * Get the seconds.
               * @return {number}
               */
              get seconds() {
                return this.isValid ? this.values.seconds || 0 : NaN;
              }

              /**
               * Get the milliseconds.
               * @return {number}
               */
              get milliseconds() {
                return this.isValid ? this.values.milliseconds || 0 : NaN;
              }

              /**
               * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
               * on invalid DateTimes or Intervals.
               * @return {boolean}
               */
              get isValid() {
                return this.invalid === null;
              }

              /**
               * Returns an error code if this Duration became invalid, or null if the Duration is valid
               * @return {string}
               */
              get invalidReason() {
                return this.invalid ? this.invalid.reason : null;
              }

              /**
               * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
               * @type {string}
               */
              get invalidExplanation() {
                return this.invalid ? this.invalid.explanation : null;
              }

              /**
               * Equality check
               * Two Durations are equal iff they have the same units and the same values for each unit.
               * @param {Duration} other
               * @return {boolean}
               */
              equals(other) {
                if (!this.isValid || !other.isValid) {
                  return false;
                }

                if (!this.loc.equals(other.loc)) {
                  return false;
                }

                for (const u of orderedUnits) {
                  if (this.values[u] !== other.values[u]) {
                    return false;
                  }
                }
                return true;
              }
            }

            /**
             * @private
             */
            function friendlyDuration(durationish) {
              if (isNumber$1(durationish)) {
                return Duration.fromMillis(durationish);
              } else if (Duration.isDuration(durationish)) {
                return durationish;
              } else if (typeof durationish === "object") {
                return Duration.fromObject(durationish);
              } else {
                throw new InvalidArgumentError(
                  `Unknown duration argument ${durationish} of type ${typeof durationish}`
                );
              }
            }

            const INVALID$1 = "Invalid Interval";

            // checks if the start is equal to or before the end
            function validateStartEnd(start, end) {
              if (!start || !start.isValid) {
                return Interval.invalid("missing or invalid start");
              } else if (!end || !end.isValid) {
                return Interval.invalid("missing or invalid end");
              } else if (end < start) {
                return Interval.invalid(
                  "end before start",
                  `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
                );
              } else {
                return null;
              }
            }

            /**
             * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
             *
             * Here is a brief overview of the most commonly used methods and getters in Interval:
             *
             * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.
             * * **Accessors** Use {@link start} and {@link end} to get the start and end.
             * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.
             * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.
             * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}
             * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.
             */
            class Interval {
              /**
               * @private
               */
              constructor(config) {
                /**
                 * @access private
                 */
                this.s = config.start;
                /**
                 * @access private
                 */
                this.e = config.end;
                /**
                 * @access private
                 */
                this.invalid = config.invalid || null;
                /**
                 * @access private
                 */
                this.isLuxonInterval = true;
              }

              /**
               * Create an invalid Interval.
               * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
               * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
               * @return {Interval}
               */
              static invalid(reason, explanation = null) {
                if (!reason) {
                  throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
                }

                const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

                if (Settings.throwOnInvalid) {
                  throw new InvalidIntervalError(invalid);
                } else {
                  return new Interval({ invalid });
                }
              }

              /**
               * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
               * @param {DateTime|Date|Object} start
               * @param {DateTime|Date|Object} end
               * @return {Interval}
               */
              static fromDateTimes(start, end) {
                const builtStart = friendlyDateTime(start),
                  builtEnd = friendlyDateTime(end);

                const validateError = validateStartEnd(builtStart, builtEnd);

                if (validateError == null) {
                  return new Interval({
                    start: builtStart,
                    end: builtEnd
                  });
                } else {
                  return validateError;
                }
              }

              /**
               * Create an Interval from a start DateTime and a Duration to extend to.
               * @param {DateTime|Date|Object} start
               * @param {Duration|Object|number} duration - the length of the Interval.
               * @return {Interval}
               */
              static after(start, duration) {
                const dur = friendlyDuration(duration),
                  dt = friendlyDateTime(start);
                return Interval.fromDateTimes(dt, dt.plus(dur));
              }

              /**
               * Create an Interval from an end DateTime and a Duration to extend backwards to.
               * @param {DateTime|Date|Object} end
               * @param {Duration|Object|number} duration - the length of the Interval.
               * @return {Interval}
               */
              static before(end, duration) {
                const dur = friendlyDuration(duration),
                  dt = friendlyDateTime(end);
                return Interval.fromDateTimes(dt.minus(dur), dt);
              }

              /**
               * Create an Interval from an ISO 8601 string.
               * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
               * @param {string} text - the ISO string to parse
               * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}
               * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
               * @return {Interval}
               */
              static fromISO(text, opts) {
                const [s, e] = (text || "").split("/", 2);
                if (s && e) {
                  const start = DateTime.fromISO(s, opts),
                    end = DateTime.fromISO(e, opts);

                  if (start.isValid && end.isValid) {
                    return Interval.fromDateTimes(start, end);
                  }

                  if (start.isValid) {
                    const dur = Duration.fromISO(e, opts);
                    if (dur.isValid) {
                      return Interval.after(start, dur);
                    }
                  } else if (end.isValid) {
                    const dur = Duration.fromISO(s, opts);
                    if (dur.isValid) {
                      return Interval.before(end, dur);
                    }
                  }
                }
                return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
              }

              /**
               * Check if an object is an Interval. Works across context boundaries
               * @param {object} o
               * @return {boolean}
               */
              static isInterval(o) {
                return (o && o.isLuxonInterval) || false;
              }

              /**
               * Returns the start of the Interval
               * @type {DateTime}
               */
              get start() {
                return this.isValid ? this.s : null;
              }

              /**
               * Returns the end of the Interval
               * @type {DateTime}
               */
              get end() {
                return this.isValid ? this.e : null;
              }

              /**
               * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
               * @type {boolean}
               */
              get isValid() {
                return this.invalidReason === null;
              }

              /**
               * Returns an error code if this Interval is invalid, or null if the Interval is valid
               * @type {string}
               */
              get invalidReason() {
                return this.invalid ? this.invalid.reason : null;
              }

              /**
               * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
               * @type {string}
               */
              get invalidExplanation() {
                return this.invalid ? this.invalid.explanation : null;
              }

              /**
               * Returns the length of the Interval in the specified unit.
               * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
               * @return {number}
               */
              length(unit = "milliseconds") {
                return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
              }

              /**
               * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
               * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
               * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
               * @param {string} [unit='milliseconds'] - the unit of time to count.
               * @return {number}
               */
              count(unit = "milliseconds") {
                if (!this.isValid) return NaN;
                const start = this.start.startOf(unit),
                  end = this.end.startOf(unit);
                return Math.floor(end.diff(start, unit).get(unit)) + 1;
              }

              /**
               * Returns whether this Interval's start and end are both in the same unit of time
               * @param {string} unit - the unit of time to check sameness on
               * @return {boolean}
               */
              hasSame(unit) {
                return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;
              }

              /**
               * Return whether this Interval has the same start and end DateTimes.
               * @return {boolean}
               */
              isEmpty() {
                return this.s.valueOf() === this.e.valueOf();
              }

              /**
               * Return whether this Interval's start is after the specified DateTime.
               * @param {DateTime} dateTime
               * @return {boolean}
               */
              isAfter(dateTime) {
                if (!this.isValid) return false;
                return this.s > dateTime;
              }

              /**
               * Return whether this Interval's end is before the specified DateTime.
               * @param {DateTime} dateTime
               * @return {boolean}
               */
              isBefore(dateTime) {
                if (!this.isValid) return false;
                return this.e <= dateTime;
              }

              /**
               * Return whether this Interval contains the specified DateTime.
               * @param {DateTime} dateTime
               * @return {boolean}
               */
              contains(dateTime) {
                if (!this.isValid) return false;
                return this.s <= dateTime && this.e > dateTime;
              }

              /**
               * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
               * @param {Object} values - the values to set
               * @param {DateTime} values.start - the starting DateTime
               * @param {DateTime} values.end - the ending DateTime
               * @return {Interval}
               */
              set({ start, end } = {}) {
                if (!this.isValid) return this;
                return Interval.fromDateTimes(start || this.s, end || this.e);
              }

              /**
               * Split this Interval at each of the specified DateTimes
               * @param {...[DateTime]} dateTimes - the unit of time to count.
               * @return {[Interval]}
               */
              splitAt(...dateTimes) {
                if (!this.isValid) return [];
                const sorted = dateTimes
                    .map(friendlyDateTime)
                    .filter(d => this.contains(d))
                    .sort(),
                  results = [];
                let { s } = this,
                  i = 0;

                while (s < this.e) {
                  const added = sorted[i] || this.e,
                    next = +added > +this.e ? this.e : added;
                  results.push(Interval.fromDateTimes(s, next));
                  s = next;
                  i += 1;
                }

                return results;
              }

              /**
               * Split this Interval into smaller Intervals, each of the specified length.
               * Left over time is grouped into a smaller interval
               * @param {Duration|Object|number} duration - The length of each resulting interval.
               * @return {[Interval]}
               */
              splitBy(duration) {
                const dur = friendlyDuration(duration);

                if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
                  return [];
                }

                let { s } = this,
                  added,
                  next;

                const results = [];
                while (s < this.e) {
                  added = s.plus(dur);
                  next = +added > +this.e ? this.e : added;
                  results.push(Interval.fromDateTimes(s, next));
                  s = next;
                }

                return results;
              }

              /**
               * Split this Interval into the specified number of smaller intervals.
               * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
               * @return {[Interval]}
               */
              divideEqually(numberOfParts) {
                if (!this.isValid) return [];
                return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
              }

              /**
               * Return whether this Interval overlaps with the specified Interval
               * @param {Interval} other
               * @return {boolean}
               */
              overlaps(other) {
                return this.e > other.s && this.s < other.e;
              }

              /**
               * Return whether this Interval's end is adjacent to the specified Interval's start.
               * @param {Interval} other
               * @return {boolean}
               */
              abutsStart(other) {
                if (!this.isValid) return false;
                return +this.e === +other.s;
              }

              /**
               * Return whether this Interval's start is adjacent to the specified Interval's end.
               * @param {Interval} other
               * @return {boolean}
               */
              abutsEnd(other) {
                if (!this.isValid) return false;
                return +other.e === +this.s;
              }

              /**
               * Return whether this Interval engulfs the start and end of the specified Interval.
               * @param {Interval} other
               * @return {boolean}
               */
              engulfs(other) {
                if (!this.isValid) return false;
                return this.s <= other.s && this.e >= other.e;
              }

              /**
               * Return whether this Interval has the same start and end as the specified Interval.
               * @param {Interval} other
               * @return {boolean}
               */
              equals(other) {
                if (!this.isValid || !other.isValid) {
                  return false;
                }

                return this.s.equals(other.s) && this.e.equals(other.e);
              }

              /**
               * Return an Interval representing the intersection of this Interval and the specified Interval.
               * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
               * Returns null if the intersection is empty, meaning, the intervals don't intersect.
               * @param {Interval} other
               * @return {Interval}
               */
              intersection(other) {
                if (!this.isValid) return this;
                const s = this.s > other.s ? this.s : other.s,
                  e = this.e < other.e ? this.e : other.e;

                if (s > e) {
                  return null;
                } else {
                  return Interval.fromDateTimes(s, e);
                }
              }

              /**
               * Return an Interval representing the union of this Interval and the specified Interval.
               * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
               * @param {Interval} other
               * @return {Interval}
               */
              union(other) {
                if (!this.isValid) return this;
                const s = this.s < other.s ? this.s : other.s,
                  e = this.e > other.e ? this.e : other.e;
                return Interval.fromDateTimes(s, e);
              }

              /**
               * Merge an array of Intervals into a equivalent minimal set of Intervals.
               * Combines overlapping and adjacent Intervals.
               * @param {[Interval]} intervals
               * @return {[Interval]}
               */
              static merge(intervals) {
                const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(
                  ([sofar, current], item) => {
                    if (!current) {
                      return [sofar, item];
                    } else if (current.overlaps(item) || current.abutsStart(item)) {
                      return [sofar, current.union(item)];
                    } else {
                      return [sofar.concat([current]), item];
                    }
                  },
                  [[], null]
                );
                if (final) {
                  found.push(final);
                }
                return found;
              }

              /**
               * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
               * @param {[Interval]} intervals
               * @return {[Interval]}
               */
              static xor(intervals) {
                let start = null,
                  currentCount = 0;
                const results = [],
                  ends = intervals.map(i => [{ time: i.s, type: "s" }, { time: i.e, type: "e" }]),
                  flattened = Array.prototype.concat(...ends),
                  arr = flattened.sort((a, b) => a.time - b.time);

                for (const i of arr) {
                  currentCount += i.type === "s" ? 1 : -1;

                  if (currentCount === 1) {
                    start = i.time;
                  } else {
                    if (start && +start !== +i.time) {
                      results.push(Interval.fromDateTimes(start, i.time));
                    }

                    start = null;
                  }
                }

                return Interval.merge(results);
              }

              /**
               * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
               * @param {...Interval} intervals
               * @return {[Interval]}
               */
              difference(...intervals) {
                return Interval.xor([this].concat(intervals))
                  .map(i => this.intersection(i))
                  .filter(i => i && !i.isEmpty());
              }

              /**
               * Returns a string representation of this Interval appropriate for debugging.
               * @return {string}
               */
              toString() {
                if (!this.isValid) return INVALID$1;
                return `[${this.s.toISO()} – ${this.e.toISO()})`;
              }

              /**
               * Returns an ISO 8601-compliant string representation of this Interval.
               * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
               * @param {Object} opts - The same options as {@link DateTime.toISO}
               * @return {string}
               */
              toISO(opts) {
                if (!this.isValid) return INVALID$1;
                return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
              }

              /**
               * Returns an ISO 8601-compliant string representation of date of this Interval.
               * The time components are ignored.
               * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
               * @return {string}
               */
              toISODate() {
                if (!this.isValid) return INVALID$1;
                return `${this.s.toISODate()}/${this.e.toISODate()}`;
              }

              /**
               * Returns an ISO 8601-compliant string representation of time of this Interval.
               * The date components are ignored.
               * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
               * @param {Object} opts - The same options as {@link DateTime.toISO}
               * @return {string}
               */
              toISOTime(opts) {
                if (!this.isValid) return INVALID$1;
                return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
              }

              /**
               * Returns a string representation of this Interval formatted according to the specified format string.
               * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.
               * @param {Object} opts - options
               * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations
               * @return {string}
               */
              toFormat(dateFormat, { separator = " – " } = {}) {
                if (!this.isValid) return INVALID$1;
                return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
              }

              /**
               * Return a Duration representing the time spanned by this interval.
               * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
               * @param {Object} opts - options that affect the creation of the Duration
               * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
               * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
               * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
               * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
               * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
               * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
               * @return {Duration}
               */
              toDuration(unit, opts) {
                if (!this.isValid) {
                  return Duration.invalid(this.invalidReason);
                }
                return this.e.diff(this.s, unit, opts);
              }

              /**
               * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
               * @param {function} mapFn
               * @return {Interval}
               * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
               * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
               */
              mapEndpoints(mapFn) {
                return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
              }
            }

            /**
             * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
             */
            class Info {
              /**
               * Return whether the specified zone contains a DST.
               * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
               * @return {boolean}
               */
              static hasDST(zone = Settings.defaultZone) {
                const proto = DateTime.local()
                  .setZone(zone)
                  .set({ month: 12 });

                return !zone.universal && proto.offset !== proto.set({ month: 6 }).offset;
              }

              /**
               * Return whether the specified zone is a valid IANA specifier.
               * @param {string} zone - Zone to check
               * @return {boolean}
               */
              static isValidIANAZone(zone) {
                return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);
              }

              /**
               * Converts the input into a {@link Zone} instance.
               *
               * * If `input` is already a Zone instance, it is returned unchanged.
               * * If `input` is a string containing a valid time zone name, a Zone instance
               *   with that name is returned.
               * * If `input` is a string that doesn't refer to a known time zone, a Zone
               *   instance with {@link Zone.isValid} == false is returned.
               * * If `input is a number, a Zone instance with the specified fixed offset
               *   in minutes is returned.
               * * If `input` is `null` or `undefined`, the default zone is returned.
               * @param {string|Zone|number} [input] - the value to be converted
               * @return {Zone}
               */
              static normalizeZone(input) {
                return normalizeZone(input, Settings.defaultZone);
              }

              /**
               * Return an array of standalone month names.
               * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
               * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
               * @param {Object} opts - options
               * @param {string} [opts.locale] - the locale code
               * @param {string} [opts.numberingSystem=null] - the numbering system
               * @param {string} [opts.outputCalendar='gregory'] - the calendar
               * @example Info.months()[0] //=> 'January'
               * @example Info.months('short')[0] //=> 'Jan'
               * @example Info.months('numeric')[0] //=> '1'
               * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
               * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
               * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
               * @return {[string]}
               */
              static months(
                length = "long",
                { locale = null, numberingSystem = null, outputCalendar = "gregory" } = {}
              ) {
                return Locale.create(locale, numberingSystem, outputCalendar).months(length);
              }

              /**
               * Return an array of format month names.
               * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
               * changes the string.
               * See {@link months}
               * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
               * @param {Object} opts - options
               * @param {string} [opts.locale] - the locale code
               * @param {string} [opts.numberingSystem=null] - the numbering system
               * @param {string} [opts.outputCalendar='gregory'] - the calendar
               * @return {[string]}
               */
              static monthsFormat(
                length = "long",
                { locale = null, numberingSystem = null, outputCalendar = "gregory" } = {}
              ) {
                return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);
              }

              /**
               * Return an array of standalone week names.
               * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
               * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
               * @param {Object} opts - options
               * @param {string} [opts.locale] - the locale code
               * @param {string} [opts.numberingSystem=null] - the numbering system
               * @example Info.weekdays()[0] //=> 'Monday'
               * @example Info.weekdays('short')[0] //=> 'Mon'
               * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
               * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
               * @return {[string]}
               */
              static weekdays(length = "long", { locale = null, numberingSystem = null } = {}) {
                return Locale.create(locale, numberingSystem, null).weekdays(length);
              }

              /**
               * Return an array of format week names.
               * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
               * changes the string.
               * See {@link weekdays}
               * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
               * @param {Object} opts - options
               * @param {string} [opts.locale=null] - the locale code
               * @param {string} [opts.numberingSystem=null] - the numbering system
               * @return {[string]}
               */
              static weekdaysFormat(length = "long", { locale = null, numberingSystem = null } = {}) {
                return Locale.create(locale, numberingSystem, null).weekdays(length, true);
              }

              /**
               * Return an array of meridiems.
               * @param {Object} opts - options
               * @param {string} [opts.locale] - the locale code
               * @example Info.meridiems() //=> [ 'AM', 'PM' ]
               * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
               * @return {[string]}
               */
              static meridiems({ locale = null } = {}) {
                return Locale.create(locale).meridiems();
              }

              /**
               * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
               * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
               * @param {Object} opts - options
               * @param {string} [opts.locale] - the locale code
               * @example Info.eras() //=> [ 'BC', 'AD' ]
               * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
               * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
               * @return {[string]}
               */
              static eras(length = "short", { locale = null } = {}) {
                return Locale.create(locale, null, "gregory").eras(length);
              }

              /**
               * Return the set of available features in this environment.
               * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.
               * Keys:
               * * `zones`: whether this environment supports IANA timezones
               * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing
               * * `intl`: whether this environment supports general internationalization
               * * `relative`: whether this environment supports relative time formatting
               * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }
               * @return {Object}
               */
              static features() {
                let intl = false,
                  intlTokens = false,
                  zones = false,
                  relative = false;

                if (hasIntl()) {
                  intl = true;
                  intlTokens = hasFormatToParts();
                  relative = hasRelative();

                  try {
                    zones =
                      new Intl.DateTimeFormat("en", { timeZone: "America/New_York" }).resolvedOptions()
                        .timeZone === "America/New_York";
                  } catch (e) {
                    zones = false;
                  }
                }

                return { intl, intlTokens, zones, relative };
              }
            }

            function dayDiff(earlier, later) {
              const utcDayStart = dt =>
                  dt
                    .toUTC(0, { keepLocalTime: true })
                    .startOf("day")
                    .valueOf(),
                ms = utcDayStart(later) - utcDayStart(earlier);
              return Math.floor(Duration.fromMillis(ms).as("days"));
            }

            function highOrderDiffs(cursor, later, units) {
              const differs = [
                ["years", (a, b) => b.year - a.year],
                ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
                [
                  "weeks",
                  (a, b) => {
                    const days = dayDiff(a, b);
                    return (days - (days % 7)) / 7;
                  }
                ],
                ["days", dayDiff]
              ];

              const results = {};
              let lowestOrder, highWater;

              for (const [unit, differ] of differs) {
                if (units.indexOf(unit) >= 0) {
                  lowestOrder = unit;

                  let delta = differ(cursor, later);
                  highWater = cursor.plus({ [unit]: delta });

                  if (highWater > later) {
                    cursor = cursor.plus({ [unit]: delta - 1 });
                    delta -= 1;
                  } else {
                    cursor = highWater;
                  }

                  results[unit] = delta;
                }
              }

              return [cursor, results, highWater, lowestOrder];
            }

            function diff(earlier, later, units, opts) {
              let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);

              const remainingMillis = later - cursor;

              const lowerOrderUnits = units.filter(
                u => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
              );

              if (lowerOrderUnits.length === 0) {
                if (highWater < later) {
                  highWater = cursor.plus({ [lowestOrder]: 1 });
                }

                if (highWater !== cursor) {
                  results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
                }
              }

              const duration = Duration.fromObject(Object.assign(results, opts));

              if (lowerOrderUnits.length > 0) {
                return Duration.fromMillis(remainingMillis, opts)
                  .shiftTo(...lowerOrderUnits)
                  .plus(duration);
              } else {
                return duration;
              }
            }

            const numberingSystems = {
              arab: "[\u0660-\u0669]",
              arabext: "[\u06F0-\u06F9]",
              bali: "[\u1B50-\u1B59]",
              beng: "[\u09E6-\u09EF]",
              deva: "[\u0966-\u096F]",
              fullwide: "[\uFF10-\uFF19]",
              gujr: "[\u0AE6-\u0AEF]",
              hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
              khmr: "[\u17E0-\u17E9]",
              knda: "[\u0CE6-\u0CEF]",
              laoo: "[\u0ED0-\u0ED9]",
              limb: "[\u1946-\u194F]",
              mlym: "[\u0D66-\u0D6F]",
              mong: "[\u1810-\u1819]",
              mymr: "[\u1040-\u1049]",
              orya: "[\u0B66-\u0B6F]",
              tamldec: "[\u0BE6-\u0BEF]",
              telu: "[\u0C66-\u0C6F]",
              thai: "[\u0E50-\u0E59]",
              tibt: "[\u0F20-\u0F29]",
              latn: "\\d"
            };

            const numberingSystemsUTF16 = {
              arab: [1632, 1641],
              arabext: [1776, 1785],
              bali: [6992, 7001],
              beng: [2534, 2543],
              deva: [2406, 2415],
              fullwide: [65296, 65303],
              gujr: [2790, 2799],
              khmr: [6112, 6121],
              knda: [3302, 3311],
              laoo: [3792, 3801],
              limb: [6470, 6479],
              mlym: [3430, 3439],
              mong: [6160, 6169],
              mymr: [4160, 4169],
              orya: [2918, 2927],
              tamldec: [3046, 3055],
              telu: [3174, 3183],
              thai: [3664, 3673],
              tibt: [3872, 3881]
            };

            // eslint-disable-next-line
            const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");

            function parseDigits(str) {
              let value = parseInt(str, 10);
              if (isNaN(value)) {
                value = "";
                for (let i = 0; i < str.length; i++) {
                  const code = str.charCodeAt(i);

                  if (str[i].search(numberingSystems.hanidec) !== -1) {
                    value += hanidecChars.indexOf(str[i]);
                  } else {
                    for (const key in numberingSystemsUTF16) {
                      const [min, max] = numberingSystemsUTF16[key];
                      if (code >= min && code <= max) {
                        value += code - min;
                      }
                    }
                  }
                }
                return parseInt(value, 10);
              } else {
                return value;
              }
            }

            function digitRegex({ numberingSystem }, append = "") {
              return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
            }

            const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

            function intUnit(regex, post = i => i) {
              return { regex, deser: ([s]) => post(parseDigits(s)) };
            }

            function fixListRegex(s) {
              // make dots optional and also make them literal
              return s.replace(/\./, "\\.?");
            }

            function stripInsensitivities(s) {
              return s.replace(/\./, "").toLowerCase();
            }

            function oneOf(strings, startIndex) {
              if (strings === null) {
                return null;
              } else {
                return {
                  regex: RegExp(strings.map(fixListRegex).join("|")),
                  deser: ([s]) =>
                    strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex
                };
              }
            }

            function offset(regex, groups) {
              return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
            }

            function simple(regex) {
              return { regex, deser: ([s]) => s };
            }

            function escapeToken(value) {
              // eslint-disable-next-line no-useless-escape
              return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
            }

            function unitForToken(token, loc) {
              const one = digitRegex(loc),
                two = digitRegex(loc, "{2}"),
                three = digitRegex(loc, "{3}"),
                four = digitRegex(loc, "{4}"),
                six = digitRegex(loc, "{6}"),
                oneOrTwo = digitRegex(loc, "{1,2}"),
                oneToThree = digitRegex(loc, "{1,3}"),
                oneToSix = digitRegex(loc, "{1,6}"),
                oneToNine = digitRegex(loc, "{1,9}"),
                twoToFour = digitRegex(loc, "{2,4}"),
                fourToSix = digitRegex(loc, "{4,6}"),
                literal = t => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),
                unitate = t => {
                  if (token.literal) {
                    return literal(t);
                  }
                  switch (t.val) {
                    // era
                    case "G":
                      return oneOf(loc.eras("short", false), 0);
                    case "GG":
                      return oneOf(loc.eras("long", false), 0);
                    // years
                    case "y":
                      return intUnit(oneToSix);
                    case "yy":
                      return intUnit(twoToFour, untruncateYear);
                    case "yyyy":
                      return intUnit(four);
                    case "yyyyy":
                      return intUnit(fourToSix);
                    case "yyyyyy":
                      return intUnit(six);
                    // months
                    case "M":
                      return intUnit(oneOrTwo);
                    case "MM":
                      return intUnit(two);
                    case "MMM":
                      return oneOf(loc.months("short", true, false), 1);
                    case "MMMM":
                      return oneOf(loc.months("long", true, false), 1);
                    case "L":
                      return intUnit(oneOrTwo);
                    case "LL":
                      return intUnit(two);
                    case "LLL":
                      return oneOf(loc.months("short", false, false), 1);
                    case "LLLL":
                      return oneOf(loc.months("long", false, false), 1);
                    // dates
                    case "d":
                      return intUnit(oneOrTwo);
                    case "dd":
                      return intUnit(two);
                    // ordinals
                    case "o":
                      return intUnit(oneToThree);
                    case "ooo":
                      return intUnit(three);
                    // time
                    case "HH":
                      return intUnit(two);
                    case "H":
                      return intUnit(oneOrTwo);
                    case "hh":
                      return intUnit(two);
                    case "h":
                      return intUnit(oneOrTwo);
                    case "mm":
                      return intUnit(two);
                    case "m":
                      return intUnit(oneOrTwo);
                    case "q":
                      return intUnit(oneOrTwo);
                    case "qq":
                      return intUnit(two);
                    case "s":
                      return intUnit(oneOrTwo);
                    case "ss":
                      return intUnit(two);
                    case "S":
                      return intUnit(oneToThree);
                    case "SSS":
                      return intUnit(three);
                    case "u":
                      return simple(oneToNine);
                    // meridiem
                    case "a":
                      return oneOf(loc.meridiems(), 0);
                    // weekYear (k)
                    case "kkkk":
                      return intUnit(four);
                    case "kk":
                      return intUnit(twoToFour, untruncateYear);
                    // weekNumber (W)
                    case "W":
                      return intUnit(oneOrTwo);
                    case "WW":
                      return intUnit(two);
                    // weekdays
                    case "E":
                    case "c":
                      return intUnit(one);
                    case "EEE":
                      return oneOf(loc.weekdays("short", false, false), 1);
                    case "EEEE":
                      return oneOf(loc.weekdays("long", false, false), 1);
                    case "ccc":
                      return oneOf(loc.weekdays("short", true, false), 1);
                    case "cccc":
                      return oneOf(loc.weekdays("long", true, false), 1);
                    // offset/zone
                    case "Z":
                    case "ZZ":
                      return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
                    case "ZZZ":
                      return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
                    // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
                    // because we don't have any way to figure out what they are
                    case "z":
                      return simple(/[a-z_+-/]{1,256}?/i);
                    default:
                      return literal(t);
                  }
                };

              const unit = unitate(token) || {
                invalidReason: MISSING_FTP
              };

              unit.token = token;

              return unit;
            }

            const partTypeStyleToTokenVal = {
              year: {
                "2-digit": "yy",
                numeric: "yyyyy"
              },
              month: {
                numeric: "M",
                "2-digit": "MM",
                short: "MMM",
                long: "MMMM"
              },
              day: {
                numeric: "d",
                "2-digit": "dd"
              },
              weekday: {
                short: "EEE",
                long: "EEEE"
              },
              dayperiod: "a",
              dayPeriod: "a",
              hour: {
                numeric: "h",
                "2-digit": "hh"
              },
              minute: {
                numeric: "m",
                "2-digit": "mm"
              },
              second: {
                numeric: "s",
                "2-digit": "ss"
              }
            };

            function tokenForPart(part, locale, formatOpts) {
              const { type, value } = part;

              if (type === "literal") {
                return {
                  literal: true,
                  val: value
                };
              }

              const style = formatOpts[type];

              let val = partTypeStyleToTokenVal[type];
              if (typeof val === "object") {
                val = val[style];
              }

              if (val) {
                return {
                  literal: false,
                  val
                };
              }

              return undefined;
            }

            function buildRegex(units) {
              const re = units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
              return [`^${re}$`, units];
            }

            function match(input, regex, handlers) {
              const matches = input.match(regex);

              if (matches) {
                const all = {};
                let matchIndex = 1;
                for (const i in handlers) {
                  if (hasOwnProperty$7(handlers, i)) {
                    const h = handlers[i],
                      groups = h.groups ? h.groups + 1 : 1;
                    if (!h.literal && h.token) {
                      all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
                    }
                    matchIndex += groups;
                  }
                }
                return [matches, all];
              } else {
                return [matches, {}];
              }
            }

            function dateTimeFromMatches(matches) {
              const toField = token => {
                switch (token) {
                  case "S":
                    return "millisecond";
                  case "s":
                    return "second";
                  case "m":
                    return "minute";
                  case "h":
                  case "H":
                    return "hour";
                  case "d":
                    return "day";
                  case "o":
                    return "ordinal";
                  case "L":
                  case "M":
                    return "month";
                  case "y":
                    return "year";
                  case "E":
                  case "c":
                    return "weekday";
                  case "W":
                    return "weekNumber";
                  case "k":
                    return "weekYear";
                  case "q":
                    return "quarter";
                  default:
                    return null;
                }
              };

              let zone;
              if (!isUndefined$1(matches.Z)) {
                zone = new FixedOffsetZone(matches.Z);
              } else if (!isUndefined$1(matches.z)) {
                zone = IANAZone.create(matches.z);
              } else {
                zone = null;
              }

              if (!isUndefined$1(matches.q)) {
                matches.M = (matches.q - 1) * 3 + 1;
              }

              if (!isUndefined$1(matches.h)) {
                if (matches.h < 12 && matches.a === 1) {
                  matches.h += 12;
                } else if (matches.h === 12 && matches.a === 0) {
                  matches.h = 0;
                }
              }

              if (matches.G === 0 && matches.y) {
                matches.y = -matches.y;
              }

              if (!isUndefined$1(matches.u)) {
                matches.S = parseMillis(matches.u);
              }

              const vals = Object.keys(matches).reduce((r, k) => {
                const f = toField(k);
                if (f) {
                  r[f] = matches[k];
                }

                return r;
              }, {});

              return [vals, zone];
            }

            let dummyDateTimeCache = null;

            function getDummyDateTime() {
              if (!dummyDateTimeCache) {
                dummyDateTimeCache = DateTime.fromMillis(1555555555555);
              }

              return dummyDateTimeCache;
            }

            function maybeExpandMacroToken(token, locale) {
              if (token.literal) {
                return token;
              }

              const formatOpts = Formatter.macroTokenToFormatOpts(token.val);

              if (!formatOpts) {
                return token;
              }

              const formatter = Formatter.create(locale, formatOpts);
              const parts = formatter.formatDateTimeParts(getDummyDateTime());

              const tokens = parts.map(p => tokenForPart(p, locale, formatOpts));

              if (tokens.includes(undefined)) {
                return token;
              }

              return tokens;
            }

            function expandMacroTokens(tokens, locale) {
              return Array.prototype.concat(...tokens.map(t => maybeExpandMacroToken(t, locale)));
            }

            /**
             * @private
             */

            function explainFromTokens(locale, input, format) {
              const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
                units = tokens.map(t => unitForToken(t, locale)),
                disqualifyingUnit = units.find(t => t.invalidReason);

              if (disqualifyingUnit) {
                return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };
              } else {
                const [regexString, handlers] = buildRegex(units),
                  regex = RegExp(regexString, "i"),
                  [rawMatches, matches] = match(input, regex, handlers),
                  [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];
                if (hasOwnProperty$7(matches, "a") && hasOwnProperty$7(matches, "H")) {
                  throw new ConflictingSpecificationError(
                    "Can't include meridiem when specifying 24-hour format"
                  );
                }
                return { input, tokens, regex, rawMatches, matches, result, zone };
              }
            }

            function parseFromTokens(locale, input, format) {
              const { result, zone, invalidReason } = explainFromTokens(locale, input, format);
              return [result, zone, invalidReason];
            }

            const nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
              leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

            function unitOutOfRange(unit, value) {
              return new Invalid(
                "unit out of range",
                `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
              );
            }

            function dayOfWeek(year, month, day) {
              const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();
              return js === 0 ? 7 : js;
            }

            function computeOrdinal(year, month, day) {
              return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
            }

            function uncomputeOrdinal(year, ordinal) {
              const table = isLeapYear(year) ? leapLadder : nonLeapLadder,
                month0 = table.findIndex(i => i < ordinal),
                day = ordinal - table[month0];
              return { month: month0 + 1, day };
            }

            /**
             * @private
             */

            function gregorianToWeek(gregObj) {
              const { year, month, day } = gregObj,
                ordinal = computeOrdinal(year, month, day),
                weekday = dayOfWeek(year, month, day);

              let weekNumber = Math.floor((ordinal - weekday + 10) / 7),
                weekYear;

              if (weekNumber < 1) {
                weekYear = year - 1;
                weekNumber = weeksInWeekYear(weekYear);
              } else if (weekNumber > weeksInWeekYear(year)) {
                weekYear = year + 1;
                weekNumber = 1;
              } else {
                weekYear = year;
              }

              return Object.assign({ weekYear, weekNumber, weekday }, timeObject(gregObj));
            }

            function weekToGregorian(weekData) {
              const { weekYear, weekNumber, weekday } = weekData,
                weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
                yearInDays = daysInYear(weekYear);

              let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
                year;

              if (ordinal < 1) {
                year = weekYear - 1;
                ordinal += daysInYear(year);
              } else if (ordinal > yearInDays) {
                year = weekYear + 1;
                ordinal -= daysInYear(weekYear);
              } else {
                year = weekYear;
              }

              const { month, day } = uncomputeOrdinal(year, ordinal);

              return Object.assign({ year, month, day }, timeObject(weekData));
            }

            function gregorianToOrdinal(gregData) {
              const { year, month, day } = gregData,
                ordinal = computeOrdinal(year, month, day);

              return Object.assign({ year, ordinal }, timeObject(gregData));
            }

            function ordinalToGregorian(ordinalData) {
              const { year, ordinal } = ordinalData,
                { month, day } = uncomputeOrdinal(year, ordinal);

              return Object.assign({ year, month, day }, timeObject(ordinalData));
            }

            function hasInvalidWeekData(obj) {
              const validYear = isInteger$1(obj.weekYear),
                validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
                validWeekday = integerBetween(obj.weekday, 1, 7);

              if (!validYear) {
                return unitOutOfRange("weekYear", obj.weekYear);
              } else if (!validWeek) {
                return unitOutOfRange("week", obj.week);
              } else if (!validWeekday) {
                return unitOutOfRange("weekday", obj.weekday);
              } else return false;
            }

            function hasInvalidOrdinalData(obj) {
              const validYear = isInteger$1(obj.year),
                validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

              if (!validYear) {
                return unitOutOfRange("year", obj.year);
              } else if (!validOrdinal) {
                return unitOutOfRange("ordinal", obj.ordinal);
              } else return false;
            }

            function hasInvalidGregorianData(obj) {
              const validYear = isInteger$1(obj.year),
                validMonth = integerBetween(obj.month, 1, 12),
                validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

              if (!validYear) {
                return unitOutOfRange("year", obj.year);
              } else if (!validMonth) {
                return unitOutOfRange("month", obj.month);
              } else if (!validDay) {
                return unitOutOfRange("day", obj.day);
              } else return false;
            }

            function hasInvalidTimeData(obj) {
              const { hour, minute, second, millisecond } = obj;
              const validHour =
                  integerBetween(hour, 0, 23) ||
                  (hour === 24 && minute === 0 && second === 0 && millisecond === 0),
                validMinute = integerBetween(minute, 0, 59),
                validSecond = integerBetween(second, 0, 59),
                validMillisecond = integerBetween(millisecond, 0, 999);

              if (!validHour) {
                return unitOutOfRange("hour", hour);
              } else if (!validMinute) {
                return unitOutOfRange("minute", minute);
              } else if (!validSecond) {
                return unitOutOfRange("second", second);
              } else if (!validMillisecond) {
                return unitOutOfRange("millisecond", millisecond);
              } else return false;
            }

            const INVALID$2 = "Invalid DateTime";
            const MAX_DATE = 8.64e15;

            function unsupportedZone(zone) {
              return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
            }

            // we cache week data on the DT object and this intermediates the cache
            function possiblyCachedWeekData(dt) {
              if (dt.weekData === null) {
                dt.weekData = gregorianToWeek(dt.c);
              }
              return dt.weekData;
            }

            // clone really means, "make a new object with these modifications". all "setters" really use this
            // to create a new object while only changing some of the properties
            function clone$1(inst, alts) {
              const current = {
                ts: inst.ts,
                zone: inst.zone,
                c: inst.c,
                o: inst.o,
                loc: inst.loc,
                invalid: inst.invalid
              };
              return new DateTime(Object.assign({}, current, alts, { old: current }));
            }

            // find the right offset a given local time. The o input is our guess, which determines which
            // offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
            function fixOffset(localTS, o, tz) {
              // Our UTC time is just a guess because our offset is just a guess
              let utcGuess = localTS - o * 60 * 1000;

              // Test whether the zone matches the offset for this ts
              const o2 = tz.offset(utcGuess);

              // If so, offset didn't change and we're done
              if (o === o2) {
                return [utcGuess, o];
              }

              // If not, change the ts by the difference in the offset
              utcGuess -= (o2 - o) * 60 * 1000;

              // If that gives us the local time we want, we're done
              const o3 = tz.offset(utcGuess);
              if (o2 === o3) {
                return [utcGuess, o2];
              }

              // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
              return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
            }

            // convert an epoch timestamp into a calendar object with the given offset
            function tsToObj(ts, offset) {
              ts += offset * 60 * 1000;

              const d = new Date(ts);

              return {
                year: d.getUTCFullYear(),
                month: d.getUTCMonth() + 1,
                day: d.getUTCDate(),
                hour: d.getUTCHours(),
                minute: d.getUTCMinutes(),
                second: d.getUTCSeconds(),
                millisecond: d.getUTCMilliseconds()
              };
            }

            // convert a calendar object to a epoch timestamp
            function objToTS(obj, offset, zone) {
              return fixOffset(objToLocalTS(obj), offset, zone);
            }

            // create a new DT instance by adding a duration, adjusting for DSTs
            function adjustTime(inst, dur) {
              const keys = Object.keys(dur.values);
              if (keys.indexOf("milliseconds") === -1) {
                keys.push("milliseconds");
              }

              dur = dur.shiftTo(...keys);

              const oPre = inst.o,
                year = inst.c.year + dur.years,
                month = inst.c.month + dur.months + dur.quarters * 3,
                c = Object.assign({}, inst.c, {
                  year,
                  month,
                  day: Math.min(inst.c.day, daysInMonth(year, month)) + dur.days + dur.weeks * 7
                }),
                millisToAdd = Duration.fromObject({
                  hours: dur.hours,
                  minutes: dur.minutes,
                  seconds: dur.seconds,
                  milliseconds: dur.milliseconds
                }).as("milliseconds"),
                localTS = objToLocalTS(c);

              let [ts, o] = fixOffset(localTS, oPre, inst.zone);

              if (millisToAdd !== 0) {
                ts += millisToAdd;
                // that could have changed the offset by going over a DST, but we want to keep the ts the same
                o = inst.zone.offset(ts);
              }

              return { ts, o };
            }

            // helper useful in turning the results of parsing into real dates
            // by handling the zone options
            function parseDataToDateTime(parsed, parsedZone, opts, format, text) {
              const { setZone, zone } = opts;
              if (parsed && Object.keys(parsed).length !== 0) {
                const interpretationZone = parsedZone || zone,
                  inst = DateTime.fromObject(
                    Object.assign(parsed, opts, {
                      zone: interpretationZone,
                      // setZone is a valid option in the calling methods, but not in fromObject
                      setZone: undefined
                    })
                  );
                return setZone ? inst : inst.setZone(zone);
              } else {
                return DateTime.invalid(
                  new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
                );
              }
            }

            // if you want to output a technical format (e.g. RFC 2822), this helper
            // helps handle the details
            function toTechFormat(dt, format, allowZ = true) {
              return dt.isValid
                ? Formatter.create(Locale.create("en-US"), {
                    allowZ,
                    forceSimple: true
                  }).formatDateTimeFromString(dt, format)
                : null;
            }

            // technical time formats (e.g. the time part of ISO 8601), take some options
            // and this commonizes their handling
            function toTechTimeFormat(
              dt,
              {
                suppressSeconds = false,
                suppressMilliseconds = false,
                includeOffset,
                includeZone = false,
                spaceZone = false,
                format = "extended"
              }
            ) {
              let fmt = format === "basic" ? "HHmm" : "HH:mm";

              if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {
                fmt += format === "basic" ? "ss" : ":ss";
                if (!suppressMilliseconds || dt.millisecond !== 0) {
                  fmt += ".SSS";
                }
              }

              if ((includeZone || includeOffset) && spaceZone) {
                fmt += " ";
              }

              if (includeZone) {
                fmt += "z";
              } else if (includeOffset) {
                fmt += format === "basic" ? "ZZZ" : "ZZ";
              }

              return toTechFormat(dt, fmt);
            }

            // defaults for unspecified units in the supported calendars
            const defaultUnitValues = {
                month: 1,
                day: 1,
                hour: 0,
                minute: 0,
                second: 0,
                millisecond: 0
              },
              defaultWeekUnitValues = {
                weekNumber: 1,
                weekday: 1,
                hour: 0,
                minute: 0,
                second: 0,
                millisecond: 0
              },
              defaultOrdinalUnitValues = {
                ordinal: 1,
                hour: 0,
                minute: 0,
                second: 0,
                millisecond: 0
              };

            // Units in the supported calendars, sorted by bigness
            const orderedUnits$1 = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
              orderedWeekUnits = [
                "weekYear",
                "weekNumber",
                "weekday",
                "hour",
                "minute",
                "second",
                "millisecond"
              ],
              orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

            // standardize case and plurality in units
            function normalizeUnit(unit) {
              const normalized = {
                year: "year",
                years: "year",
                month: "month",
                months: "month",
                day: "day",
                days: "day",
                hour: "hour",
                hours: "hour",
                minute: "minute",
                minutes: "minute",
                quarter: "quarter",
                quarters: "quarter",
                second: "second",
                seconds: "second",
                millisecond: "millisecond",
                milliseconds: "millisecond",
                weekday: "weekday",
                weekdays: "weekday",
                weeknumber: "weekNumber",
                weeksnumber: "weekNumber",
                weeknumbers: "weekNumber",
                weekyear: "weekYear",
                weekyears: "weekYear",
                ordinal: "ordinal"
              }[unit.toLowerCase()];

              if (!normalized) throw new InvalidUnitError(unit);

              return normalized;
            }

            // this is a dumbed down version of fromObject() that runs about 60% faster
            // but doesn't do any validation, makes a bunch of assumptions about what units
            // are present, and so on.
            function quickDT(obj, zone) {
              // assume we have the higher-order units
              for (const u of orderedUnits$1) {
                if (isUndefined$1(obj[u])) {
                  obj[u] = defaultUnitValues[u];
                }
              }

              const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
              if (invalid) {
                return DateTime.invalid(invalid);
              }

              const tsNow = Settings.now(),
                offsetProvis = zone.offset(tsNow),
                [ts, o] = objToTS(obj, offsetProvis, zone);

              return new DateTime({
                ts,
                zone,
                o
              });
            }

            function diffRelative(start, end, opts) {
              const round = isUndefined$1(opts.round) ? true : opts.round,
                format = (c, unit) => {
                  c = roundTo(c, round || opts.calendary ? 0 : 2, true);
                  const formatter = end.loc.clone(opts).relFormatter(opts);
                  return formatter.format(c, unit);
                },
                differ = unit => {
                  if (opts.calendary) {
                    if (!end.hasSame(start, unit)) {
                      return end
                        .startOf(unit)
                        .diff(start.startOf(unit), unit)
                        .get(unit);
                    } else return 0;
                  } else {
                    return end.diff(start, unit).get(unit);
                  }
                };

              if (opts.unit) {
                return format(differ(opts.unit), opts.unit);
              }

              for (const unit of opts.units) {
                const count = differ(unit);
                if (Math.abs(count) >= 1) {
                  return format(count, unit);
                }
              }
              return format(0, opts.units[opts.units.length - 1]);
            }

            /**
             * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
             *
             * A DateTime comprises of:
             * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
             * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
             * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
             *
             * Here is a brief overview of the most commonly used functionality it provides:
             *
             * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.
             * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},
             * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.
             * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.
             * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.
             * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.
             * * **Output**: To convert the DateTime to other representations, use the {@link toRelative}, {@link toRelativeCalendar}, {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.
             *
             * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
             */
            class DateTime {
              /**
               * @access private
               */
              constructor(config) {
                const zone = config.zone || Settings.defaultZone;

                let invalid =
                  config.invalid ||
                  (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) ||
                  (!zone.isValid ? unsupportedZone(zone) : null);
                /**
                 * @access private
                 */
                this.ts = isUndefined$1(config.ts) ? Settings.now() : config.ts;

                let c = null,
                  o = null;
                if (!invalid) {
                  const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

                  if (unchanged) {
                    [c, o] = [config.old.c, config.old.o];
                  } else {
                    const ot = zone.offset(this.ts);
                    c = tsToObj(this.ts, ot);
                    invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
                    c = invalid ? null : c;
                    o = invalid ? null : ot;
                  }
                }

                /**
                 * @access private
                 */
                this._zone = zone;
                /**
                 * @access private
                 */
                this.loc = config.loc || Locale.create();
                /**
                 * @access private
                 */
                this.invalid = invalid;
                /**
                 * @access private
                 */
                this.weekData = null;
                /**
                 * @access private
                 */
                this.c = c;
                /**
                 * @access private
                 */
                this.o = o;
                /**
                 * @access private
                 */
                this.isLuxonDateTime = true;
              }

              // CONSTRUCT

              /**
               * Create a local DateTime
               * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
               * @param {number} [month=1] - The month, 1-indexed
               * @param {number} [day=1] - The day of the month
               * @param {number} [hour=0] - The hour of the day, in 24-hour time
               * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
               * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
               * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
               * @example DateTime.local()                            //~> now
               * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00
               * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00
               * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00
               * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00
               * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00
               * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10
               * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765
               * @return {DateTime}
               */
              static local(year, month, day, hour, minute, second, millisecond) {
                if (isUndefined$1(year)) {
                  return new DateTime({ ts: Settings.now() });
                } else {
                  return quickDT(
                    {
                      year,
                      month,
                      day,
                      hour,
                      minute,
                      second,
                      millisecond
                    },
                    Settings.defaultZone
                  );
                }
              }

              /**
               * Create a DateTime in UTC
               * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
               * @param {number} [month=1] - The month, 1-indexed
               * @param {number} [day=1] - The day of the month
               * @param {number} [hour=0] - The hour of the day, in 24-hour time
               * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
               * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
               * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
               * @example DateTime.utc()                            //~> now
               * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z
               * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z
               * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z
               * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z
               * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z
               * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z
               * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z
               * @return {DateTime}
               */
              static utc(year, month, day, hour, minute, second, millisecond) {
                if (isUndefined$1(year)) {
                  return new DateTime({
                    ts: Settings.now(),
                    zone: FixedOffsetZone.utcInstance
                  });
                } else {
                  return quickDT(
                    {
                      year,
                      month,
                      day,
                      hour,
                      minute,
                      second,
                      millisecond
                    },
                    FixedOffsetZone.utcInstance
                  );
                }
              }

              /**
               * Create a DateTime from a Javascript Date object. Uses the default zone.
               * @param {Date} date - a Javascript Date object
               * @param {Object} options - configuration options for the DateTime
               * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
               * @return {DateTime}
               */
              static fromJSDate(date, options = {}) {
                const ts = isDate$1(date) ? date.valueOf() : NaN;
                if (Number.isNaN(ts)) {
                  return DateTime.invalid("invalid input");
                }

                const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
                if (!zoneToUse.isValid) {
                  return DateTime.invalid(unsupportedZone(zoneToUse));
                }

                return new DateTime({
                  ts: ts,
                  zone: zoneToUse,
                  loc: Locale.fromObject(options)
                });
              }

              /**
               * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
               * @param {number} milliseconds - a number of milliseconds since 1970 UTC
               * @param {Object} options - configuration options for the DateTime
               * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
               * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
               * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
               * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
               * @return {DateTime}
               */
              static fromMillis(milliseconds, options = {}) {
                if (!isNumber$1(milliseconds)) {
                  throw new InvalidArgumentError(
                    `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
                  );
                } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
                  // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
                  return DateTime.invalid("Timestamp out of range");
                } else {
                  return new DateTime({
                    ts: milliseconds,
                    zone: normalizeZone(options.zone, Settings.defaultZone),
                    loc: Locale.fromObject(options)
                  });
                }
              }

              /**
               * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
               * @param {number} seconds - a number of seconds since 1970 UTC
               * @param {Object} options - configuration options for the DateTime
               * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
               * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
               * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
               * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
               * @return {DateTime}
               */
              static fromSeconds(seconds, options = {}) {
                if (!isNumber$1(seconds)) {
                  throw new InvalidArgumentError("fromSeconds requires a numerical input");
                } else {
                  return new DateTime({
                    ts: seconds * 1000,
                    zone: normalizeZone(options.zone, Settings.defaultZone),
                    loc: Locale.fromObject(options)
                  });
                }
              }

              /**
               * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.
               * @param {Object} obj - the object to create the DateTime from
               * @param {number} obj.year - a year, such as 1987
               * @param {number} obj.month - a month, 1-12
               * @param {number} obj.day - a day of the month, 1-31, depending on the month
               * @param {number} obj.ordinal - day of the year, 1-365 or 366
               * @param {number} obj.weekYear - an ISO week year
               * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
               * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
               * @param {number} obj.hour - hour of the day, 0-23
               * @param {number} obj.minute - minute of the hour, 0-59
               * @param {number} obj.second - second of the minute, 0-59
               * @param {number} obj.millisecond - millisecond of the second, 0-999
               * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
               * @param {string} [obj.locale='system's locale'] - a locale to set on the resulting DateTime instance
               * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance
               * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance
               * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
               * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
               * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
               * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),
               * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })
               * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })
               * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
               * @return {DateTime}
               */
              static fromObject(obj) {
                const zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);
                if (!zoneToUse.isValid) {
                  return DateTime.invalid(unsupportedZone(zoneToUse));
                }

                const tsNow = Settings.now(),
                  offsetProvis = zoneToUse.offset(tsNow),
                  normalized = normalizeObject(obj, normalizeUnit, [
                    "zone",
                    "locale",
                    "outputCalendar",
                    "numberingSystem"
                  ]),
                  containsOrdinal = !isUndefined$1(normalized.ordinal),
                  containsGregorYear = !isUndefined$1(normalized.year),
                  containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day),
                  containsGregor = containsGregorYear || containsGregorMD,
                  definiteWeekDef = normalized.weekYear || normalized.weekNumber,
                  loc = Locale.fromObject(obj);

                // cases:
                // just a weekday -> this week's instance of that weekday, no worries
                // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
                // (gregorian month or day) + ordinal -> error
                // otherwise just use weeks or ordinals or gregorian, depending on what's specified

                if ((containsGregor || containsOrdinal) && definiteWeekDef) {
                  throw new ConflictingSpecificationError(
                    "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
                  );
                }

                if (containsGregorMD && containsOrdinal) {
                  throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
                }

                const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);

                // configure ourselves to deal with gregorian dates or week stuff
                let units,
                  defaultValues,
                  objNow = tsToObj(tsNow, offsetProvis);
                if (useWeekData) {
                  units = orderedWeekUnits;
                  defaultValues = defaultWeekUnitValues;
                  objNow = gregorianToWeek(objNow);
                } else if (containsOrdinal) {
                  units = orderedOrdinalUnits;
                  defaultValues = defaultOrdinalUnitValues;
                  objNow = gregorianToOrdinal(objNow);
                } else {
                  units = orderedUnits$1;
                  defaultValues = defaultUnitValues;
                }

                // set default values for missing stuff
                let foundFirst = false;
                for (const u of units) {
                  const v = normalized[u];
                  if (!isUndefined$1(v)) {
                    foundFirst = true;
                  } else if (foundFirst) {
                    normalized[u] = defaultValues[u];
                  } else {
                    normalized[u] = objNow[u];
                  }
                }

                // make sure the values we have are in range
                const higherOrderInvalid = useWeekData
                    ? hasInvalidWeekData(normalized)
                    : containsOrdinal
                      ? hasInvalidOrdinalData(normalized)
                      : hasInvalidGregorianData(normalized),
                  invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

                if (invalid) {
                  return DateTime.invalid(invalid);
                }

                // compute the actual time
                const gregorian = useWeekData
                    ? weekToGregorian(normalized)
                    : containsOrdinal
                      ? ordinalToGregorian(normalized)
                      : normalized,
                  [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),
                  inst = new DateTime({
                    ts: tsFinal,
                    zone: zoneToUse,
                    o: offsetFinal,
                    loc
                  });

                // gregorian data + weekday serves only to validate
                if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
                  return DateTime.invalid(
                    "mismatched weekday",
                    `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
                  );
                }

                return inst;
              }

              /**
               * Create a DateTime from an ISO 8601 string
               * @param {string} text - the ISO string
               * @param {Object} opts - options to affect the creation
               * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
               * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
               * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
               * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
               * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
               * @example DateTime.fromISO('2016-05-25T09:08:34.123')
               * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
               * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
               * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
               * @example DateTime.fromISO('2016-W05-4')
               * @return {DateTime}
               */
              static fromISO(text, opts = {}) {
                const [vals, parsedZone] = parseISODate(text);
                return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
              }

              /**
               * Create a DateTime from an RFC 2822 string
               * @param {string} text - the RFC 2822 string
               * @param {Object} opts - options to affect the creation
               * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
               * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
               * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
               * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
               * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
               * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
               * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
               * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
               * @return {DateTime}
               */
              static fromRFC2822(text, opts = {}) {
                const [vals, parsedZone] = parseRFC2822Date(text);
                return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
              }

              /**
               * Create a DateTime from an HTTP header date
               * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
               * @param {string} text - the HTTP header date
               * @param {Object} opts - options to affect the creation
               * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
               * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
               * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
               * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
               * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
               * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
               * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
               * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
               * @return {DateTime}
               */
              static fromHTTP(text, opts = {}) {
                const [vals, parsedZone] = parseHTTPDate(text);
                return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
              }

              /**
               * Create a DateTime from an input string and format string.
               * Defaults to en-US if no locale has been specified, regardless of the system's locale.
               * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens
               * @param {string} text - the string to parse
               * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
               * @param {Object} opts - options to affect the creation
               * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
               * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
               * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
               * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
               * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
               * @return {DateTime}
               */
              static fromFormat(text, fmt, opts = {}) {
                if (isUndefined$1(text) || isUndefined$1(fmt)) {
                  throw new InvalidArgumentError("fromFormat requires an input string and a format");
                }

                const { locale = null, numberingSystem = null } = opts,
                  localeToUse = Locale.fromOpts({
                    locale,
                    numberingSystem,
                    defaultToEN: true
                  }),
                  [vals, parsedZone, invalid] = parseFromTokens(localeToUse, text, fmt);
                if (invalid) {
                  return DateTime.invalid(invalid);
                } else {
                  return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text);
                }
              }

              /**
               * @deprecated use fromFormat instead
               */
              static fromString(text, fmt, opts = {}) {
                return DateTime.fromFormat(text, fmt, opts);
              }

              /**
               * Create a DateTime from a SQL date, time, or datetime
               * Defaults to en-US if no locale has been specified, regardless of the system's locale
               * @param {string} text - the string to parse
               * @param {Object} opts - options to affect the creation
               * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
               * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
               * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
               * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
               * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
               * @example DateTime.fromSQL('2017-05-15')
               * @example DateTime.fromSQL('2017-05-15 09:12:34')
               * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
               * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
               * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
               * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
               * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
               * @example DateTime.fromSQL('09:12:34.342')
               * @return {DateTime}
               */
              static fromSQL(text, opts = {}) {
                const [vals, parsedZone] = parseSQL(text);
                return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
              }

              /**
               * Create an invalid DateTime.
               * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
               * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
               * @return {DateTime}
               */
              static invalid(reason, explanation = null) {
                if (!reason) {
                  throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
                }

                const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

                if (Settings.throwOnInvalid) {
                  throw new InvalidDateTimeError(invalid);
                } else {
                  return new DateTime({ invalid });
                }
              }

              /**
               * Check if an object is a DateTime. Works across context boundaries
               * @param {object} o
               * @return {boolean}
               */
              static isDateTime(o) {
                return (o && o.isLuxonDateTime) || false;
              }

              // INFO

              /**
               * Get the value of unit.
               * @param {string} unit - a unit such as 'minute' or 'day'
               * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
               * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
               * @return {number}
               */
              get(unit) {
                return this[unit];
              }

              /**
               * Returns whether the DateTime is valid. Invalid DateTimes occur when:
               * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
               * * The DateTime was created by an operation on another invalid date
               * @type {boolean}
               */
              get isValid() {
                return this.invalid === null;
              }

              /**
               * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
               * @type {string}
               */
              get invalidReason() {
                return this.invalid ? this.invalid.reason : null;
              }

              /**
               * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
               * @type {string}
               */
              get invalidExplanation() {
                return this.invalid ? this.invalid.explanation : null;
              }

              /**
               * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
               *
               * @type {string}
               */
              get locale() {
                return this.isValid ? this.loc.locale : null;
              }

              /**
               * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
               *
               * @type {string}
               */
              get numberingSystem() {
                return this.isValid ? this.loc.numberingSystem : null;
              }

              /**
               * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
               *
               * @type {string}
               */
              get outputCalendar() {
                return this.isValid ? this.loc.outputCalendar : null;
              }

              /**
               * Get the time zone associated with this DateTime.
               * @type {Zone}
               */
              get zone() {
                return this._zone;
              }

              /**
               * Get the name of the time zone.
               * @type {string}
               */
              get zoneName() {
                return this.isValid ? this.zone.name : null;
              }

              /**
               * Get the year
               * @example DateTime.local(2017, 5, 25).year //=> 2017
               * @type {number}
               */
              get year() {
                return this.isValid ? this.c.year : NaN;
              }

              /**
               * Get the quarter
               * @example DateTime.local(2017, 5, 25).quarter //=> 2
               * @type {number}
               */
              get quarter() {
                return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
              }

              /**
               * Get the month (1-12).
               * @example DateTime.local(2017, 5, 25).month //=> 5
               * @type {number}
               */
              get month() {
                return this.isValid ? this.c.month : NaN;
              }

              /**
               * Get the day of the month (1-30ish).
               * @example DateTime.local(2017, 5, 25).day //=> 25
               * @type {number}
               */
              get day() {
                return this.isValid ? this.c.day : NaN;
              }

              /**
               * Get the hour of the day (0-23).
               * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
               * @type {number}
               */
              get hour() {
                return this.isValid ? this.c.hour : NaN;
              }

              /**
               * Get the minute of the hour (0-59).
               * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
               * @type {number}
               */
              get minute() {
                return this.isValid ? this.c.minute : NaN;
              }

              /**
               * Get the second of the minute (0-59).
               * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
               * @type {number}
               */
              get second() {
                return this.isValid ? this.c.second : NaN;
              }

              /**
               * Get the millisecond of the second (0-999).
               * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
               * @type {number}
               */
              get millisecond() {
                return this.isValid ? this.c.millisecond : NaN;
              }

              /**
               * Get the week year
               * @see https://en.wikipedia.org/wiki/ISO_week_date
               * @example DateTime.local(2014, 11, 31).weekYear //=> 2015
               * @type {number}
               */
              get weekYear() {
                return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
              }

              /**
               * Get the week number of the week year (1-52ish).
               * @see https://en.wikipedia.org/wiki/ISO_week_date
               * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
               * @type {number}
               */
              get weekNumber() {
                return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
              }

              /**
               * Get the day of the week.
               * 1 is Monday and 7 is Sunday
               * @see https://en.wikipedia.org/wiki/ISO_week_date
               * @example DateTime.local(2014, 11, 31).weekday //=> 4
               * @type {number}
               */
              get weekday() {
                return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
              }

              /**
               * Get the ordinal (meaning the day of the year)
               * @example DateTime.local(2017, 5, 25).ordinal //=> 145
               * @type {number|DateTime}
               */
              get ordinal() {
                return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
              }

              /**
               * Get the human readable short month name, such as 'Oct'.
               * Defaults to the system's locale if no locale has been specified
               * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
               * @type {string}
               */
              get monthShort() {
                return this.isValid ? Info.months("short", { locale: this.locale })[this.month - 1] : null;
              }

              /**
               * Get the human readable long month name, such as 'October'.
               * Defaults to the system's locale if no locale has been specified
               * @example DateTime.local(2017, 10, 30).monthLong //=> October
               * @type {string}
               */
              get monthLong() {
                return this.isValid ? Info.months("long", { locale: this.locale })[this.month - 1] : null;
              }

              /**
               * Get the human readable short weekday, such as 'Mon'.
               * Defaults to the system's locale if no locale has been specified
               * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
               * @type {string}
               */
              get weekdayShort() {
                return this.isValid ? Info.weekdays("short", { locale: this.locale })[this.weekday - 1] : null;
              }

              /**
               * Get the human readable long weekday, such as 'Monday'.
               * Defaults to the system's locale if no locale has been specified
               * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
               * @type {string}
               */
              get weekdayLong() {
                return this.isValid ? Info.weekdays("long", { locale: this.locale })[this.weekday - 1] : null;
              }

              /**
               * Get the UTC offset of this DateTime in minutes
               * @example DateTime.local().offset //=> -240
               * @example DateTime.utc().offset //=> 0
               * @type {number}
               */
              get offset() {
                return this.isValid ? +this.o : NaN;
              }

              /**
               * Get the short human name for the zone's current offset, for example "EST" or "EDT".
               * Defaults to the system's locale if no locale has been specified
               * @type {string}
               */
              get offsetNameShort() {
                if (this.isValid) {
                  return this.zone.offsetName(this.ts, {
                    format: "short",
                    locale: this.locale
                  });
                } else {
                  return null;
                }
              }

              /**
               * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
               * Defaults to the system's locale if no locale has been specified
               * @type {string}
               */
              get offsetNameLong() {
                if (this.isValid) {
                  return this.zone.offsetName(this.ts, {
                    format: "long",
                    locale: this.locale
                  });
                } else {
                  return null;
                }
              }

              /**
               * Get whether this zone's offset ever changes, as in a DST.
               * @type {boolean}
               */
              get isOffsetFixed() {
                return this.isValid ? this.zone.universal : null;
              }

              /**
               * Get whether the DateTime is in a DST.
               * @type {boolean}
               */
              get isInDST() {
                if (this.isOffsetFixed) {
                  return false;
                } else {
                  return (
                    this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset
                  );
                }
              }

              /**
               * Returns true if this DateTime is in a leap year, false otherwise
               * @example DateTime.local(2016).isInLeapYear //=> true
               * @example DateTime.local(2013).isInLeapYear //=> false
               * @type {boolean}
               */
              get isInLeapYear() {
                return isLeapYear(this.year);
              }

              /**
               * Returns the number of days in this DateTime's month
               * @example DateTime.local(2016, 2).daysInMonth //=> 29
               * @example DateTime.local(2016, 3).daysInMonth //=> 31
               * @type {number}
               */
              get daysInMonth() {
                return daysInMonth(this.year, this.month);
              }

              /**
               * Returns the number of days in this DateTime's year
               * @example DateTime.local(2016).daysInYear //=> 366
               * @example DateTime.local(2013).daysInYear //=> 365
               * @type {number}
               */
              get daysInYear() {
                return this.isValid ? daysInYear(this.year) : NaN;
              }

              /**
               * Returns the number of weeks in this DateTime's year
               * @see https://en.wikipedia.org/wiki/ISO_week_date
               * @example DateTime.local(2004).weeksInWeekYear //=> 53
               * @example DateTime.local(2013).weeksInWeekYear //=> 52
               * @type {number}
               */
              get weeksInWeekYear() {
                return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
              }

              /**
               * Returns the resolved Intl options for this DateTime.
               * This is useful in understanding the behavior of formatting methods
               * @param {Object} opts - the same options as toLocaleString
               * @return {Object}
               */
              resolvedLocaleOpts(opts = {}) {
                const { locale, numberingSystem, calendar } = Formatter.create(
                  this.loc.clone(opts),
                  opts
                ).resolvedOptions(this);
                return { locale, numberingSystem, outputCalendar: calendar };
              }

              // TRANSFORM

              /**
               * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
               *
               * Equivalent to {@link setZone}('utc')
               * @param {number} [offset=0] - optionally, an offset from UTC in minutes
               * @param {Object} [opts={}] - options to pass to `setZone()`
               * @return {DateTime}
               */
              toUTC(offset = 0, opts = {}) {
                return this.setZone(FixedOffsetZone.instance(offset), opts);
              }

              /**
               * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
               *
               * Equivalent to `setZone('local')`
               * @return {DateTime}
               */
              toLocal() {
                return this.setZone(Settings.defaultZone);
              }

              /**
               * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
               *
               * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.
               * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.
               * @param {Object} opts - options
               * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
               * @return {DateTime}
               */
              setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
                zone = normalizeZone(zone, Settings.defaultZone);
                if (zone.equals(this.zone)) {
                  return this;
                } else if (!zone.isValid) {
                  return DateTime.invalid(unsupportedZone(zone));
                } else {
                  let newTS = this.ts;
                  if (keepLocalTime || keepCalendarTime) {
                    const offsetGuess = zone.offset(this.ts);
                    const asObj = this.toObject();
                    [newTS] = objToTS(asObj, offsetGuess, zone);
                  }
                  return clone$1(this, { ts: newTS, zone });
                }
              }

              /**
               * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
               * @param {Object} properties - the properties to set
               * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
               * @return {DateTime}
               */
              reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
                const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
                return clone$1(this, { loc });
              }

              /**
               * "Set" the locale. Returns a newly-constructed DateTime.
               * Just a convenient alias for reconfigure({ locale })
               * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
               * @return {DateTime}
               */
              setLocale(locale) {
                return this.reconfigure({ locale });
              }

              /**
               * "Set" the values of specified units. Returns a newly-constructed DateTime.
               * You can only set units with this method; for "setting" metadata, see {@link reconfigure} and {@link setZone}.
               * @param {Object} values - a mapping of units to numbers
               * @example dt.set({ year: 2017 })
               * @example dt.set({ hour: 8, minute: 30 })
               * @example dt.set({ weekday: 5 })
               * @example dt.set({ year: 2005, ordinal: 234 })
               * @return {DateTime}
               */
              set(values) {
                if (!this.isValid) return this;

                const normalized = normalizeObject(values, normalizeUnit, []),
                  settingWeekStuff =
                    !isUndefined$1(normalized.weekYear) ||
                    !isUndefined$1(normalized.weekNumber) ||
                    !isUndefined$1(normalized.weekday);

                let mixed;
                if (settingWeekStuff) {
                  mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));
                } else if (!isUndefined$1(normalized.ordinal)) {
                  mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));
                } else {
                  mixed = Object.assign(this.toObject(), normalized);

                  // if we didn't set the day but we ended up on an overflow date,
                  // use the last day of the right month
                  if (isUndefined$1(normalized.day)) {
                    mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
                  }
                }

                const [ts, o] = objToTS(mixed, this.o, this.zone);
                return clone$1(this, { ts, o });
              }

              /**
               * Add a period of time to this DateTime and return the resulting DateTime
               *
               * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
               * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
               * @example DateTime.local().plus(123) //~> in 123 milliseconds
               * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes
               * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow
               * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday
               * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
               * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
               * @return {DateTime}
               */
              plus(duration) {
                if (!this.isValid) return this;
                const dur = friendlyDuration(duration);
                return clone$1(this, adjustTime(this, dur));
              }

              /**
               * Subtract a period of time to this DateTime and return the resulting DateTime
               * See {@link plus}
               * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
               @return {DateTime}
              */
              minus(duration) {
                if (!this.isValid) return this;
                const dur = friendlyDuration(duration).negate();
                return clone$1(this, adjustTime(this, dur));
              }

              /**
               * "Set" this DateTime to the beginning of a unit of time.
               * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
               * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
               * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
               * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
               * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
               * @return {DateTime}
               */
              startOf(unit) {
                if (!this.isValid) return this;
                const o = {},
                  normalizedUnit = Duration.normalizeUnit(unit);
                switch (normalizedUnit) {
                  case "years":
                    o.month = 1;
                  // falls through
                  case "quarters":
                  case "months":
                    o.day = 1;
                  // falls through
                  case "weeks":
                  case "days":
                    o.hour = 0;
                  // falls through
                  case "hours":
                    o.minute = 0;
                  // falls through
                  case "minutes":
                    o.second = 0;
                  // falls through
                  case "seconds":
                    o.millisecond = 0;
                    break;
                  // no default, invalid units throw in normalizeUnit()
                }

                if (normalizedUnit === "weeks") {
                  o.weekday = 1;
                }

                if (normalizedUnit === "quarters") {
                  const q = Math.ceil(this.month / 3);
                  o.month = (q - 1) * 3 + 1;
                }

                return this.set(o);
              }

              /**
               * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
               * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.
               * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
               * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
               * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
               * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
               * @return {DateTime}
               */
              endOf(unit) {
                return this.isValid
                  ? this.plus({ [unit]: 1 })
                      .startOf(unit)
                      .minus(1)
                  : this;
              }

              // OUTPUT

              /**
               * Returns a string representation of this DateTime formatted according to the specified format string.
               * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).
               * Defaults to en-US if no locale has been specified, regardless of the system's locale.
               * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens
               * @param {string} fmt - the format string
               * @param {Object} opts - opts to override the configuration options
               * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
               * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
               * @example DateTime.local().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
               * @example DateTime.local().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
               * @return {string}
               */
              toFormat(fmt, opts = {}) {
                return this.isValid
                  ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)
                  : INVALID$2;
              }

              /**
               * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
               * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
               * of the DateTime in the assigned locale.
               * Defaults to the system's locale if no locale has been specified
               * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
               * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options
               * @example DateTime.local().toLocaleString(); //=> 4/20/2017
               * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
               * @example DateTime.local().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'
               * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
               * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
               * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
               * @example DateTime.local().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
               * @example DateTime.local().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
               * @example DateTime.local().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '11:32'
               * @return {string}
               */
              toLocaleString(opts = DATE_SHORT) {
                return this.isValid
                  ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)
                  : INVALID$2;
              }

              /**
               * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
               * Defaults to the system's locale if no locale has been specified
               * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
               * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
               * @example DateTime.local().toLocaleParts(); //=> [
               *                                   //=>   { type: 'day', value: '25' },
               *                                   //=>   { type: 'literal', value: '/' },
               *                                   //=>   { type: 'month', value: '05' },
               *                                   //=>   { type: 'literal', value: '/' },
               *                                   //=>   { type: 'year', value: '1982' }
               *                                   //=> ]
               */
              toLocaleParts(opts = {}) {
                return this.isValid
                  ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)
                  : [];
              }

              /**
               * Returns an ISO 8601-compliant string representation of this DateTime
               * @param {Object} opts - options
               * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
               * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
               * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
               * @param {string} [opts.format='extended'] - choose between the basic and extended format
               * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
               * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'
               * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
               * @example DateTime.local().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
               * @return {string}
               */
              toISO(opts = {}) {
                if (!this.isValid) {
                  return null;
                }

                return `${this.toISODate(opts)}T${this.toISOTime(opts)}`;
              }

              /**
               * Returns an ISO 8601-compliant string representation of this DateTime's date component
               * @param {Object} opts - options
               * @param {string} [opts.format='extended'] - choose between the basic and extended format
               * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
               * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
               * @return {string}
               */
              toISODate({ format = "extended" } = {}) {
                let fmt = format === "basic" ? "yyyyMMdd" : "yyyy-MM-dd";
                if (this.year > 9999) {
                  fmt = "+" + fmt;
                }

                return toTechFormat(this, fmt);
              }

              /**
               * Returns an ISO 8601-compliant string representation of this DateTime's week date
               * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
               * @return {string}
               */
              toISOWeekDate() {
                return toTechFormat(this, "kkkk-'W'WW-c");
              }

              /**
               * Returns an ISO 8601-compliant string representation of this DateTime's time component
               * @param {Object} opts - options
               * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
               * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
               * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
               * @param {string} [opts.format='extended'] - choose between the basic and extended format
               * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
               * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
               * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
               * @return {string}
               */
              toISOTime({
                suppressMilliseconds = false,
                suppressSeconds = false,
                includeOffset = true,
                format = "extended"
              } = {}) {
                return toTechTimeFormat(this, {
                  suppressSeconds,
                  suppressMilliseconds,
                  includeOffset,
                  format
                });
              }

              /**
               * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC
               * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
               * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
               * @return {string}
               */
              toRFC2822() {
                return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
              }

              /**
               * Returns a string representation of this DateTime appropriate for use in HTTP headers.
               * Specifically, the string conforms to RFC 1123.
               * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
               * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
               * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
               * @return {string}
               */
              toHTTP() {
                return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
              }

              /**
               * Returns a string representation of this DateTime appropriate for use in SQL Date
               * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
               * @return {string}
               */
              toSQLDate() {
                return toTechFormat(this, "yyyy-MM-dd");
              }

              /**
               * Returns a string representation of this DateTime appropriate for use in SQL Time
               * @param {Object} opts - options
               * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
               * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
               * @example DateTime.utc().toSQL() //=> '05:15:16.345'
               * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'
               * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'
               * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
               * @return {string}
               */
              toSQLTime({ includeOffset = true, includeZone = false } = {}) {
                return toTechTimeFormat(this, {
                  includeOffset,
                  includeZone,
                  spaceZone: true
                });
              }

              /**
               * Returns a string representation of this DateTime appropriate for use in SQL DateTime
               * @param {Object} opts - options
               * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
               * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
               * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
               * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
               * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
               * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
               * @return {string}
               */
              toSQL(opts = {}) {
                if (!this.isValid) {
                  return null;
                }

                return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
              }

              /**
               * Returns a string representation of this DateTime appropriate for debugging
               * @return {string}
               */
              toString() {
                return this.isValid ? this.toISO() : INVALID$2;
              }

              /**
               * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}
               * @return {number}
               */
              valueOf() {
                return this.toMillis();
              }

              /**
               * Returns the epoch milliseconds of this DateTime.
               * @return {number}
               */
              toMillis() {
                return this.isValid ? this.ts : NaN;
              }

              /**
               * Returns the epoch seconds of this DateTime.
               * @return {number}
               */
              toSeconds() {
                return this.isValid ? this.ts / 1000 : NaN;
              }

              /**
               * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
               * @return {string}
               */
              toJSON() {
                return this.toISO();
              }

              /**
               * Returns a BSON serializable equivalent to this DateTime.
               * @return {Date}
               */
              toBSON() {
                return this.toJSDate();
              }

              /**
               * Returns a Javascript object with this DateTime's year, month, day, and so on.
               * @param opts - options for generating the object
               * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
               * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
               * @return {Object}
               */
              toObject(opts = {}) {
                if (!this.isValid) return {};

                const base = Object.assign({}, this.c);

                if (opts.includeConfig) {
                  base.outputCalendar = this.outputCalendar;
                  base.numberingSystem = this.loc.numberingSystem;
                  base.locale = this.loc.locale;
                }
                return base;
              }

              /**
               * Returns a Javascript Date equivalent to this DateTime.
               * @return {Date}
               */
              toJSDate() {
                return new Date(this.isValid ? this.ts : NaN);
              }

              // COMPARE

              /**
               * Return the difference between two DateTimes as a Duration.
               * @param {DateTime} otherDateTime - the DateTime to compare this one to
               * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
               * @param {Object} opts - options that affect the creation of the Duration
               * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
               * @example
               * var i1 = DateTime.fromISO('1982-05-25T09:45'),
               *     i2 = DateTime.fromISO('1983-10-14T10:30');
               * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
               * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
               * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
               * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
               * @return {Duration}
               */
              diff(otherDateTime, unit = "milliseconds", opts = {}) {
                if (!this.isValid || !otherDateTime.isValid) {
                  return Duration.invalid(
                    this.invalid || otherDateTime.invalid,
                    "created by diffing an invalid DateTime"
                  );
                }

                const durOpts = Object.assign(
                  { locale: this.locale, numberingSystem: this.numberingSystem },
                  opts
                );

                const units = maybeArray(unit).map(Duration.normalizeUnit),
                  otherIsLater = otherDateTime.valueOf() > this.valueOf(),
                  earlier = otherIsLater ? this : otherDateTime,
                  later = otherIsLater ? otherDateTime : this,
                  diffed = diff(earlier, later, units, durOpts);

                return otherIsLater ? diffed.negate() : diffed;
              }

              /**
               * Return the difference between this DateTime and right now.
               * See {@link diff}
               * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
               * @param {Object} opts - options that affect the creation of the Duration
               * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
               * @return {Duration}
               */
              diffNow(unit = "milliseconds", opts = {}) {
                return this.diff(DateTime.local(), unit, opts);
              }

              /**
               * Return an Interval spanning between this DateTime and another DateTime
               * @param {DateTime} otherDateTime - the other end point of the Interval
               * @return {Interval}
               */
              until(otherDateTime) {
                return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
              }

              /**
               * Return whether this DateTime is in the same unit of time as another DateTime
               * @param {DateTime} otherDateTime - the other DateTime
               * @param {string} unit - the unit of time to check sameness on
               * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day
               * @return {boolean}
               */
              hasSame(otherDateTime, unit) {
                if (!this.isValid) return false;
                if (unit === "millisecond") {
                  return this.valueOf() === otherDateTime.valueOf();
                } else {
                  const inputMs = otherDateTime.valueOf();
                  return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);
                }
              }

              /**
               * Equality check
               * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.
               * To compare just the millisecond values, use `+dt1 === +dt2`.
               * @param {DateTime} other - the other DateTime
               * @return {boolean}
               */
              equals(other) {
                return (
                  this.isValid &&
                  other.isValid &&
                  this.valueOf() === other.valueOf() &&
                  this.zone.equals(other.zone) &&
                  this.loc.equals(other.loc)
                );
              }

              /**
               * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
               * platform supports Intl.RelativeTimeFormat. Rounds down by default.
               * @param {Object} options - options that affect the output
               * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
               * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
               * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
               * @param {boolean} [options.round=true] - whether to round the numbers in the output.
               * @param {boolean} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
               * @param {string} options.locale - override the locale of this DateTime
               * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
               * @example DateTime.local().plus({ days: 1 }).toRelative() //=> "in 1 day"
               * @example DateTime.local().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
               * @example DateTime.local().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
               * @example DateTime.local().minus({ days: 2 }).toRelative() //=> "2 days ago"
               * @example DateTime.local().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
               * @example DateTime.local().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
               */
              toRelative(options = {}) {
                if (!this.isValid) return null;
                const base = options.base || DateTime.fromObject({ zone: this.zone }),
                  padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;
                return diffRelative(
                  base,
                  this.plus(padding),
                  Object.assign(options, {
                    numeric: "always",
                    units: ["years", "months", "days", "hours", "minutes", "seconds"]
                  })
                );
              }

              /**
               * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
               * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
               * @param {Object} options - options that affect the output
               * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
               * @param {string} options.locale - override the locale of this DateTime
               * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
               * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
               * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
               * @example DateTime.local().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
               * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
               * @example DateTime.local().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
               */
              toRelativeCalendar(options = {}) {
                if (!this.isValid) return null;

                return diffRelative(
                  options.base || DateTime.fromObject({ zone: this.zone }),
                  this,
                  Object.assign(options, {
                    numeric: "auto",
                    units: ["years", "months", "days"],
                    calendary: true
                  })
                );
              }

              /**
               * Return the min of several date times
               * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
               * @return {DateTime} the min DateTime, or undefined if called with no argument
               */
              static min(...dateTimes) {
                if (!dateTimes.every(DateTime.isDateTime)) {
                  throw new InvalidArgumentError("min requires all arguments be DateTimes");
                }
                return bestBy(dateTimes, i => i.valueOf(), Math.min);
              }

              /**
               * Return the max of several date times
               * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
               * @return {DateTime} the max DateTime, or undefined if called with no argument
               */
              static max(...dateTimes) {
                if (!dateTimes.every(DateTime.isDateTime)) {
                  throw new InvalidArgumentError("max requires all arguments be DateTimes");
                }
                return bestBy(dateTimes, i => i.valueOf(), Math.max);
              }

              // MISC

              /**
               * Explain how a string would be parsed by fromFormat()
               * @param {string} text - the string to parse
               * @param {string} fmt - the format the string is expected to be in (see description)
               * @param {Object} options - options taken by fromFormat()
               * @return {Object}
               */
              static fromFormatExplain(text, fmt, options = {}) {
                const { locale = null, numberingSystem = null } = options,
                  localeToUse = Locale.fromOpts({
                    locale,
                    numberingSystem,
                    defaultToEN: true
                  });
                return explainFromTokens(localeToUse, text, fmt);
              }

              /**
               * @deprecated use fromFormatExplain instead
               */
              static fromStringExplain(text, fmt, options = {}) {
                return DateTime.fromFormatExplain(text, fmt, options);
              }

              // FORMAT PRESETS

              /**
               * {@link toLocaleString} format like 10/14/1983
               * @type {Object}
               */
              static get DATE_SHORT() {
                return DATE_SHORT;
              }

              /**
               * {@link toLocaleString} format like 'Oct 14, 1983'
               * @type {Object}
               */
              static get DATE_MED() {
                return DATE_MED;
              }

              /**
               * {@link toLocaleString} format like 'October 14, 1983'
               * @type {Object}
               */
              static get DATE_FULL() {
                return DATE_FULL;
              }

              /**
               * {@link toLocaleString} format like 'Tuesday, October 14, 1983'
               * @type {Object}
               */
              static get DATE_HUGE() {
                return DATE_HUGE;
              }

              /**
               * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get TIME_SIMPLE() {
                return TIME_SIMPLE;
              }

              /**
               * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get TIME_WITH_SECONDS() {
                return TIME_WITH_SECONDS;
              }

              /**
               * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get TIME_WITH_SHORT_OFFSET() {
                return TIME_WITH_SHORT_OFFSET;
              }

              /**
               * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get TIME_WITH_LONG_OFFSET() {
                return TIME_WITH_LONG_OFFSET;
              }

              /**
               * {@link toLocaleString} format like '09:30', always 24-hour.
               * @type {Object}
               */
              static get TIME_24_SIMPLE() {
                return TIME_24_SIMPLE;
              }

              /**
               * {@link toLocaleString} format like '09:30:23', always 24-hour.
               * @type {Object}
               */
              static get TIME_24_WITH_SECONDS() {
                return TIME_24_WITH_SECONDS;
              }

              /**
               * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.
               * @type {Object}
               */
              static get TIME_24_WITH_SHORT_OFFSET() {
                return TIME_24_WITH_SHORT_OFFSET;
              }

              /**
               * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
               * @type {Object}
               */
              static get TIME_24_WITH_LONG_OFFSET() {
                return TIME_24_WITH_LONG_OFFSET;
              }

              /**
               * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get DATETIME_SHORT() {
                return DATETIME_SHORT;
              }

              /**
               * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get DATETIME_SHORT_WITH_SECONDS() {
                return DATETIME_SHORT_WITH_SECONDS;
              }

              /**
               * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get DATETIME_MED() {
                return DATETIME_MED;
              }

              /**
               * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get DATETIME_MED_WITH_SECONDS() {
                return DATETIME_MED_WITH_SECONDS;
              }

              /**
               * {@link toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get DATETIME_MED_WITH_WEEKDAY() {
                return DATETIME_MED_WITH_WEEKDAY;
              }

              /**
               * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get DATETIME_FULL() {
                return DATETIME_FULL;
              }

              /**
               * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get DATETIME_FULL_WITH_SECONDS() {
                return DATETIME_FULL_WITH_SECONDS;
              }

              /**
               * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get DATETIME_HUGE() {
                return DATETIME_HUGE;
              }

              /**
               * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
               * @type {Object}
               */
              static get DATETIME_HUGE_WITH_SECONDS() {
                return DATETIME_HUGE_WITH_SECONDS;
              }
            }

            /**
             * @private
             */
            function friendlyDateTime(dateTimeish) {
              if (DateTime.isDateTime(dateTimeish)) {
                return dateTimeish;
              } else if (dateTimeish && dateTimeish.valueOf && isNumber$1(dateTimeish.valueOf())) {
                return DateTime.fromJSDate(dateTimeish);
              } else if (dateTimeish && typeof dateTimeish === "object") {
                return DateTime.fromObject(dateTimeish);
              } else {
                throw new InvalidArgumentError(
                  `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
                );
              }
            }

            var Luxon = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        DateTime: DateTime,
                        Duration: Duration,
                        Interval: Interval,
                        Info: Info,
                        Zone: Zone,
                        FixedOffsetZone: FixedOffsetZone,
                        IANAZone: IANAZone,
                        InvalidZone: InvalidZone,
                        LocalZone: LocalZone,
                        Settings: Settings
            });

            /*
             * Outlier
             * https://github.com/pablodenadai/Outlier
             *
             * Copyright (c) 2014 Pablo De Nadai
             * Licensed under the MIT license.
             */

            var Stats = function(array) {
                if (!array || !(array instanceof Array)) {
                    array = [];
                }

                array = array.slice(0);
                array.sort(function(a, b) {
                    return a - b;
                });

                this.array = array;
            };

            // Clones the current stats object, providing a new stats object which
            // can be changed without modifying the original object.
            // Returns a new stats object.
            Stats.prototype.clone = function() {
                return new Stats(this.array.slice(0));
            };

            // Finds the first quartile of the numbers.
            // Returns the first quartile.
            Stats.prototype.q1 = function() {
                var nums = this.clone();

                // The first quartile is the median of the lower half of the numbers
                return nums.slice(0, Math.floor(nums.size() / 2)).median();
            };

            // Finds the third quartile of the numbers.
            // Returns the third quartile.
            Stats.prototype.q3 = function() {
                var nums = this.clone();

                // The third quartile is the median of the upper half of the numbers
                return nums.slice(Math.ceil(nums.size() / 2)).median();
            };

            // Finds the interquartile range of the data set.
            // Returns the IQR.
            Stats.prototype.iqr = function() {
                return this.q3() - this.q1();
            };

            Stats.prototype.median = function() {
                var half = Math.floor(this.size() / 2);

                if (this.size() % 2) {
                    return this.array[half];
                } else {
                    // There are an even number of elements in the array; the median
                    // is the average of the middle two
                    return (this.array[half - 1] + this.array[half]) / 2;
                }
            };

            Stats.prototype.slice = function() {
                this.array = Array.prototype.slice.apply(this.array, arguments);
                return this;
            };

            Stats.prototype.each = function(fn) {
                for (var i = 0, l = this.size(); i < l; i++) {
                    fn.call(this.array[i], this.array[i], i, this.array);
                }
                return this;
            };

            // Finds all outliers in the data set, using the 1.5 * IQR away from the median test.
            // Returns a new stats object with the outliers.
            Stats.prototype.findOutliers = function() {
                // Get the median and the range that the number must fall within
                var median = this.median(),
                    range = this.iqr() * 1.5;

                // Create a new stats object to hold the outliers
                var outliers = [];

                // Go through each element in the data set and test to see if it
                // is an outlier
                this.each(function(num) {
                    if (Math.abs(num - median) > range) {
                        // The number is an outlier
                        outliers.push(num);
                    }
                });

                return outliers;
            };

            Stats.prototype.size = function() {
                return this.array.length;
            };

            // Tests if the given number would be an outlier in the data set.
            // num - The number to test.
            // Returns a boolean.
            Stats.prototype.testOutlier = function(num) {
                return (Math.abs(num - this.median()) > this.iqr() * 1.5);
            };

            var outlier = function(array) {
                return new Stats(array);
            };

            var Dimensions; (function (Dimensions) {
              const YEARLY = 'yearly'; Dimensions["YEARLY"] = YEARLY;
              const WEEKLY = 'weekly'; Dimensions["WEEKLY"] = WEEKLY;
              const MONTHLY = 'monthly'; Dimensions["MONTHLY"] = MONTHLY;
              const HOURLY = 'hourly'; Dimensions["HOURLY"] = HOURLY;
              const DAILY = 'daily'; Dimensions["DAILY"] = DAILY;
              const MINUTELY = 'minutely'; Dimensions["MINUTELY"] = MINUTELY;
              const SECONDLY = 'secondly'; Dimensions["SECONDLY"] = SECONDLY;
            })(Dimensions || (Dimensions = {}));

            var BooleanAnswer; (function (BooleanAnswer) {
              const UNKNOWN = -1; BooleanAnswer[BooleanAnswer["UNKNOWN"] = UNKNOWN] = "UNKNOWN";
              const FALSE = 0; BooleanAnswer[BooleanAnswer["FALSE"] = FALSE] = "FALSE";
              const TRUE = 1; BooleanAnswer[BooleanAnswer["TRUE"] = TRUE] = "TRUE";
            })(BooleanAnswer || (BooleanAnswer = {}));




















            function getLuxonDateTime(options) {
              const { dateObject, dateFormat, } = options;
              if (dateFormat === 'js' && typeof dateObject === 'object' || (typeof dateObject === 'object' && dateObject instanceof Date)) {
                return {
                  date: DateTime.fromJSDate(dateObject , { zone: options.time_zone, }),
                  format: 'js',
                };
              } else if (typeof dateFormat === 'string' && dateFormat !== 'iso' && dateFormat !== 'js') {
                return {
                  date: DateTime.fromFormat(dateObject , dateFormat, { zone: options.time_zone, }),
                  format: dateFormat,
                };
              } else {
                return {
                  date: DateTime.fromISO(dateObject , { zone: options.time_zone, }),
                  format: 'iso',
                };
              }
            }
            const generatedMockDateObject = {
              year: new Date().getFullYear(),
              month: 1,
              day: 1,
              hour: 0,
              minute: 0,
              second: 0,
              week: 1,
              weekday: 1,
              quarter_hour: 1,
              oridinalday:1,
            };
            const generatedMockDates = [generatedMockDateObject, ];

            for (let i = 0; i <= 366; i++){
              const newMockDate = Object.assign({}, generatedMockDateObject);
              if (i >= 1 && i <= 12) {
                newMockDate.month = i;
              }
              if (i >= 1 && i <= 52) {
                newMockDate.week = i;
              }
              if (i >= 1 && i <= 7) {
                newMockDate.weekday = i;
              }
              if (i >= 1 && i <= 366) {
                newMockDate.oridinalday = i;
              }
              if (i >= 1 && i <= 31) {
                newMockDate.day = i;
              }
              if (i >= 1 && i <= 96) {
                newMockDate.quarter_hour = i;
              }
              if (i <= 23) {
                newMockDate.hour = i;
              }
              if (i <= 59) {
                newMockDate.minute = i;
              }
              if (i <= 59) {
                newMockDate.second = i;
              }
              generatedMockDates.push(newMockDate);
            }











            function training_on_progress({ completion_percentage, loss, epoch, status, logs, defaultLog=true }) {
              if(defaultLog) console.log({ completion_percentage, loss, epoch, status, logs });
            }



            const mockDates = generatedMockDates;

            function getPartialHour(minute) {
              const partialHour = minute / 15;
              if (partialHour < 1) {
                return 1;
              } else if (partialHour < 2) {
                return 2;
              } else if (partialHour < 3) {
                return 3;
              } else {
                return 4;
              }
            }

            function getQuarterHour(parsedDate) {
              if(typeof parsedDate.hour ==='undefined' || typeof parsedDate.minute ==='undefined') throw new ReferenceError('both hour and minute are required')
              return parsedDate.hour * 4 + getPartialHour(parsedDate.minute);
            }

            function getParsedDate(date, options) {
              const luxonDate = DateTime.fromJSDate(date, options);
              const parsedDate = Object.assign({}, luxonDate.toObject());
              parsedDate.week = luxonDate.weekNumber;
              parsedDate.ordinal_day = luxonDate.ordinal;
              parsedDate.weekday = luxonDate.weekday;
              parsedDate.days_in_month = luxonDate.daysInMonth;

              parsedDate.weekend = (luxonDate.weekday === 6 || luxonDate.weekday === 7) ? true : false;
              parsedDate.quarter_hour = getQuarterHour(parsedDate);
              return parsedDate;
            }

            function getLocalParsedDate({ date, time_zone, dimension, }) {
              //modelDoc.dimension
              const end_date = DateTime.fromJSDate(date).plus({
                //@ts-ignore
                [ timeProperty[ dimension ]  ]: 1,
              }).toJSDate();
              const startOriginDate = DateTime.fromJSDate(date, { zone:time_zone, });
              const endOriginDate = DateTime.fromJSDate(end_date, { zone:time_zone, });
              const startDate = DateTime.fromJSDate(date);
              const endDate = DateTime.fromJSDate(end_date);
              const { year, month, day, ordinal, weekday, hour, minute, second, } = startOriginDate;

              return {
                year, month, day, hour, minute, second,
                days_in_month: startOriginDate.daysInMonth,
                ordinal_day: ordinal,
                week: startOriginDate.weekNumber,
                weekday: weekday,
                weekend: (startOriginDate.weekday >= 6),
                origin_time_zone: time_zone,
                start_origin_date_string: startOriginDate.toFormat(prettyTimeStringOutputFormat),
                // start_local_date_string,
                start_gmt_date_string: startDate.toJSDate().toUTCString(),
                end_origin_date_string: endOriginDate.toFormat(prettyTimeStringOutputFormat),
                // end_local_date_string,
                end_gmt_date_string: endDate.toJSDate().toUTCString(),
              };
            }

            const prettyTimeStringOutputFormat = 'ccc, dd LLL yyyy TTT';

            const timeProperty = {
              [Dimensions.MONTHLY]:'months',
              [Dimensions.WEEKLY]:'weeks',
              [Dimensions.DAILY]:'days',
              [Dimensions.HOURLY]:'hours',
            };

            const durationToDimensionProperty = {
              'years':Dimensions.YEARLY,
              'weeks':Dimensions.WEEKLY,
              'months':Dimensions.MONTHLY,
              'days':Dimensions.DAILY,
              'hours': Dimensions.HOURLY,
            };

            const ISOOptions = {
              includeOffset: false,
              // suppressSeconds:true,
              suppressMilliseconds: true,
            };
            const dimensionDurations = ['years', 'months', 'weeks', 'days', 'hours', ];
            const flattenDelimiter = '+=+';

            function getOpenHour(options = {}) {
              return 1;
              /*
              //TODO: fix this

              const { date, parsedDate, zone, } = options;
              const entity = this.entity || {};
              const dimension = this.dimension;
              const operations = entity.operations;
              const closed = 0;
              const opened = 1;
              let openFromCustomClosed = 1;
              let openFromCustomOpened = 0;
              if (!operations) throw new Error(`${entity.name} is missing operation details`);
              if (!operations.launch_date) throw new Error(`${entity.name} is missing a launch date`);
              if (!operations.is_24_hours && (!operations.business_hours || Object.keys(operations.business_hours).length<7)) throw new Error(`${entity.name} is missing business hours`);
              if (operations.override && operations.override.hours && operations.override.hours.closed_times) {
                operations.override.hours.closed_times.forEach(closed => {
                  const closedStart = luxon.DateTime.fromISO(closed.close_start, { zone, }).toJSDate();
                  const closedEnd = luxon.DateTime.fromISO(closed.close_end, { zone, }).toJSDate();
                  if (date >= closedStart && date < closedEnd) {
                    openFromCustomClosed = 0;
                    return closed;
                  }
                });
              }
              if (operations.business_hours) {
                let regular_closed = 0;
                if (dimension === 'hourly') {
                  if (parsedDate.weekday === 1 && isClosedOnDay({ weekday: 1, dayname: 'monday', parsedDate, date, operations, zone, })) regular_closed = 1;
                  if (parsedDate.weekday === 2 && isClosedOnDay({ weekday: 2, dayname: 'tuesday', parsedDate, date, operations, zone, })) regular_closed = 1;
                  if (parsedDate.weekday === 3 && isClosedOnDay({ weekday: 3, dayname: 'wednesday', parsedDate, date, operations, zone, })) regular_closed = 1;
                  if (parsedDate.weekday === 4 && isClosedOnDay({ weekday: 4, dayname: 'thursday', parsedDate, date, operations, zone, })) regular_closed = 1;
                  if (parsedDate.weekday === 5 && isClosedOnDay({ weekday: 5, dayname: 'friday', parsedDate, date, operations, zone, })) regular_closed = 1;
                  if (parsedDate.weekday === 6 && isClosedOnDay({ weekday: 6, dayname: 'saturday', parsedDate, date, operations, zone, })) regular_closed = 1;
                  if (parsedDate.weekday === 7 && isClosedOnDay({ weekday: 7, dayname: 'sunday', parsedDate, date, operations, zone, })) regular_closed = 1;
                }
                // if (operations.custom_times) {
                if (operations.override && operations.override.hours && operations.override.hours.custom_times) {  
                  operations.override.hours.custom_times.forEach(open => {
                    const openStart = luxon.DateTime.fromISO(open.custom_open, { zone, }).toJSDate();
                    const openEnd = luxon.DateTime.fromISO(open.custom_close, { zone, }).toJSDate();
                    if (date >= openStart && openEnd) {
                      // console.log('custom open date');
                      openFromCustomOpened = 1;
                      regular_closed = opened;
                      return opened;
                    }
                  });
                }
                
                if (regular_closed === 1) return closed;
              }
              
              return (openFromCustomClosed && opened) || openFromCustomOpened;
              */
            }

            function getIsOutlier(


             { outlier_property, } = {}) {
              if (outlier_property) {
                const data = this.data;
                const outlier$1 = outlier(data.map(datum => datum[ outlier_property ]));
                const datum = this.datum;
                const dataPoint = datum[ outlier_property ];
                return outlier$1.testOutlier(dataPoint) ? 1 : -1;
              } else {
                return 0; 
              }
            }

            function addMockDataToDataSet(DataSet, { mockEncodedData = [], includeConstants = true, }) {
              const newMockData = new Array().concat(mockEncodedData, includeConstants ? mockDates : []);
              DataSet.data = DataSet.data.concat(newMockData);
              return DataSet;
            }

            function removeMockDataFromDataSet(DataSet, { mockEncodedData = [], includeConstants = true, }) {
              const newMockData = new Array().concat(mockEncodedData, includeConstants ? mockDates : []);
              DataSet.data.splice(DataSet.data.length - newMockData.length, newMockData.length);
              return DataSet;
            }

            /**
             * Returns an array of JavaScript Dates by Month within a range of ISO dates 
             * @example
            getUniqueYears({ start: '2018-01-01', end: '2018-03-01', time_zone: 'America/Los_Angeles', }) => [  
              2017-01-01T08:00:00.000Z,
              2018-01-01T08:00:00.000Z,
              2019-01-01T08:00:00.000Z ]
             * @param {String} options.start - start of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.end - end of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.time_zone - valid IANA time_zone e.g. America/Los_Angeles 
             * @returns {Date[]} Array of JavaScript Dates
             */
            function getUniqueYears({ start, end, time_zone, }) {
              if (!time_zone) throw new ReferenceError('Missing required timezone');
              let startDate = DateTime.fromISO(start, { zone: time_zone, }).set({ month: 1, day: 1, hour:0, minute:0, second:0, millisecond:0, });
              const endDate = DateTime.fromISO(end, { zone: time_zone, }).set({ month: 1, day: 1, hour:0, minute:0, second:0, millisecond:0, });
              const uniqueDates = [];
              do {
                if (startDate.isValid === false) throw new SyntaxError('Date format is invalid, must be an ISO Date (ISO 8601 e.g. 2019-03-21T11:42:00 - YYYY-MM-DDTHH:mm:ss)');
                uniqueDates.push(startDate.toJSDate());
                startDate = startDate.plus({ years: 1, });
              } while (startDate <= endDate);
              return uniqueDates;
            }

            /**
             * Returns an array of JavaScript Dates by Month within a range of ISO dates 
             * @example
            getUniqueMonths({ start: '2018-01-01', end: '2018-03-01', time_zone: 'America/Los_Angeles', }) => [  
              2018-01-01T08:00:00.000Z,
              2018-02-01T08:00:00.000Z,
              2018-03-01T08:00:00.000Z ]
             * @param {String} options.start - start of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.end - end of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.time_zone - valid IANA time_zone e.g. America/Los_Angeles 
             * @returns {Date[]} Array of JavaScript Dates
             */
            function getUniqueMonths({ start, end, time_zone, }) {
              if (!time_zone) throw new ReferenceError('Missing required timezone');
              let startDate = DateTime.fromISO(start, { zone: time_zone, }).set({ day: 1, hour:0, minute:0, second:0, millisecond:0, });
              const endDate = DateTime.fromISO(end, { zone: time_zone, }).set({ day: 1, hour:0, minute:0, second:0, millisecond:0, });
              const uniqueDates = [];
              do {
                if (startDate.isValid === false) throw new SyntaxError('Date format is invalid, must be an ISO Date (ISO 8601 e.g. 2019-03-21T11:42:00 - YYYY-MM-DDTHH:mm:ss)');
                uniqueDates.push(startDate.toJSDate());
                startDate = startDate.plus({ months: 1, });
              } while (startDate <= endDate);
              return uniqueDates;
            }

            /**
             * Returns an array of JavaScript Dates by Weeks within a range of ISO dates 
             * @example
            getUniqueMonths({ start: '2018-01-01', end: '2018-01-31', weekday:'monday', time_zone: 'America/Los_Angeles', }) => [  
              2018-01-01T08:00:00.000Z,
              2018-01-08T08:00:00.000Z,
              2018-01-15T08:00:00.000Z,
              2018-01-22T08:00:00.000Z,
              2018-01-29T08:00:00.000Z ]]
             * @param {String} options.start - start of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.end - end of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.time_zone - valid IANA time_zone e.g. America/Los_Angeles 
             * @param {String|Number} options.weekday - 'monday' or '1'
             * @returns {Date[]} Array of JavaScript Dates
             */
            function getUniqueWeeks({ start, end, weekday = 'monday', time_zone, }) {
              if (!time_zone) throw new ReferenceError('Missing required timezone');
              const weekdayNumbers = {
                monday: 1,
                '1':1,
                tuesday: 2,
                '2':1,
                wednesday: 3,
                '3':1,
                thursday: 4,
                '4':1,
                friday: 5,
                '5':1,
                saturday: 6,
                '6':1,
                sunday: 7,
                '7':1,
                default: 1,
              };
              const weekdayString = weekday.toString().toLowerCase();
              const weekdayNumber = weekdayNumbers[weekdayString];
              if (!weekdayNumber) throw new ReferenceError(`Invalid weekday (${weekday}), must be either 1-7 or monday-sunday`);
              // start = DateTime.fromJSDate(new Date(start), { zone: time_zone, });
              // end = DateTime.fromJSDate(new Date(end), { zone: time_zone, });
              let startLuxon = DateTime.fromISO(start, { zone: time_zone, }).set({ hour:0, minute:0, second:0, millisecond:0, });
              let endLuxon = DateTime.fromISO(end, { zone: time_zone, }).set({ hour:0, minute:0, second:0, millisecond:0, });
              let startDate = (weekdayNumber >= startLuxon.weekday)
                ? startLuxon.plus({ days: weekdayNumber - startLuxon.weekday, })
                : startLuxon.minus({ days: startLuxon.weekday - weekdayNumber, });
              const endDate = (weekdayNumber >= endLuxon.weekday)
                ? endLuxon.plus({ days: weekdayNumber - endLuxon.weekday, })
                : endLuxon.minus({ days: endLuxon.weekday - weekdayNumber, });
              const uniqueDates = [];
              do {
                if (startDate.isValid === false) throw new SyntaxError('Date format is invalid, must be an ISO Date (ISO 8601 e.g. 2019-03-21T11:42:00 - YYYY-MM-DDTHH:mm:ss)');
                uniqueDates.push(startDate.toJSDate());
                startDate = startDate.plus({ days: 7, });
              } while (startDate <= endDate);
              return uniqueDates;
            }

            /**
             * Returns an array of JavaScript Dates by Days within a range of ISO dates 
             * @example
            getUniqueMonths({ start: '2018-01-01', end: '2018-01-31', weekday:'monday', time_zone: 'America/Los_Angeles', }) => [  
              2018-01-01T08:00:00.000Z,
              2018-01-02T08:00:00.000Z,
              ...
              2018-01-29T08:00:00.000Z,
              2018-01-30T08:00:00.000Z,
              2018-01-31T08:00:00.000Z ]]
             * @param {String} options.start - start of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.end - end of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.time_zone - valid IANA time_zone e.g. America/Los_Angeles 
             * @returns {Date[]} Array of JavaScript Dates
             */
            function getUniqueDays({ start, end, time_zone, }) {
              if (!time_zone) throw new ReferenceError('Missing required timezone');
              let startDate = DateTime.fromISO(start, { zone: time_zone, }).set({ hour: 0, minute: 0, second: 0, millisecond: 0, });
              const endDate = DateTime.fromISO(end, { zone: time_zone, }).set({ hour: 0, minute: 0, second: 0, millisecond: 0, });
              const uniqueDates = [];
              do {
                if (startDate.isValid === false) throw new SyntaxError('Date format is invalid, must be an ISO Date (ISO 8601 e.g. 2019-03-21T11:42:00 - YYYY-MM-DDTHH:mm:ss)');

                uniqueDates.push(startDate.toJSDate());
                startDate = startDate.plus({ days: 1, });
              } while (startDate <= endDate);
              // console.log({ uniqueDates });
              return uniqueDates;
            }

            /**
             * Returns an array of JavaScript Dates by Hours within a range of ISO dates 
             * @example
            getUniqueHours({ start: '2018-01-01', end: '2018-01-31', weekday:'monday', time_zone: 'America/Los_Angeles', }) => [  
              2018-01-01T00:08:00.000Z,
              2018-01-01T01:09:00.000Z,
              ...
              2018-01-01T21:00:00.000Z,
              2018-01-01T22:00:00.000Z,
              2018-01-01T23:00:00.000Z ]]
             * @param {String} options.start - start of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.end - end of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.time_zone - valid IANA time_zone e.g. America/Los_Angeles 
             * @returns {Date[]} Array of JavaScript Dates
             */
            function getUniqueHours({ start, end, time_zone, }) {
              if (!time_zone) throw new ReferenceError('Missing required timezone');
              let startDate = DateTime.fromISO(start, { zone: time_zone, }).set({ minute: 0, second: 0, millisecond: 0, });
              const endDate = DateTime.fromISO(end, { zone: time_zone, }).set({ minute: 0, second: 0, millisecond: 0, });
              const uniqueDates = [];
              do {
                if (startDate.isValid === false) throw new SyntaxError('Date format is invalid, must be an ISO Date (ISO 8601 e.g. 2019-03-21T11:42:00 - YYYY-MM-DDTHH:mm:ss)');
                uniqueDates.push(startDate.toJSDate());
                startDate = startDate.plus({ hours: 1, });
              } while (startDate <= endDate);
              return uniqueDates;
            }

            /**
             * Returns an array of JavaScript Dates by Hours within a range of ISO dates 
             * @example
            getUniqueHours({ start: '2018-01-01', end: '2018-01-31', weekday:'monday', time_zone: 'America/Los_Angeles', }) => [  
              2018-01-01T00:08:00.000Z,
              2018-01-01T01:09:00.000Z,
              ...
              2018-01-01T21:00:00.000Z,
              2018-01-01T22:00:00.000Z,
              2018-01-01T23:00:00.000Z ]]
             * @param {String} options.start - start of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.end - end of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.time_zone - valid IANA time_zone e.g. America/Los_Angeles 
             * @returns {Date[]} Array of JavaScript Dates
             */
            function getUniqueMinutes({ start, end, time_zone, }) {
              if (!time_zone) throw new ReferenceError('Missing required timezone');
              let startDate = DateTime.fromISO(start, { zone: time_zone, }).set({ second: 0, millisecond: 0, });
              const endDate = DateTime.fromISO(end, { zone: time_zone, }).set({ second: 0, millisecond: 0, });
              const uniqueDates = [];
              do {
                if (startDate.isValid === false) throw new SyntaxError('Date format is invalid, must be an ISO Date (ISO 8601 e.g. 2019-03-21T11:42:00 - YYYY-MM-DDTHH:mm:ss)');
                uniqueDates.push(startDate.toJSDate());
                startDate = startDate.plus({ minutes: 1, });
              } while (startDate <= endDate);
              return uniqueDates;
            }

            /**
             * Returns an array of JavaScript Dates by Hours within a range of ISO dates 
             * @example
            getUniqueSeconds({ start: '2018-01-01', end: '2018-01-31', weekday:'monday', time_zone: 'America/Los_Angeles', }) => [  
              2018-01-01T00:08:00.000Z,
              2018-01-01T01:09:00.000Z,
              ...
              2018-01-01T21:00:00.000Z,
              2018-01-01T22:00:00.000Z,
              2018-01-01T23:00:00.000Z ]]
             * @param {String} options.start - start of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.end - end of date range (ISO Date String) e.g. 2018-05-31
             * @param {String} options.time_zone - valid IANA time_zone e.g. America/Los_Angeles 
             * @returns {Date[]} Array of JavaScript Dates
             */
            function getUniqueSeconds({ start, end, time_zone, }) {
              if (!time_zone) throw new ReferenceError('Missing required timezone');
              let startDate = DateTime.fromISO(start, { zone: time_zone, }).set({ millisecond: 0, });
              const endDate = DateTime.fromISO(end, { zone: time_zone, }).set({ millisecond: 0, });
              const uniqueDates = [];
              do {
                if (startDate.isValid === false) throw new SyntaxError('Date format is invalid, must be an ISO Date (ISO 8601 e.g. 2019-03-21T11:42:00 - YYYY-MM-DDTHH:mm:ss)');
                uniqueDates.push(startDate.toJSDate());
                startDate = startDate.plus({ seconds: 1, });
              } while (startDate <= endDate);
              return uniqueDates;
            }

            const dimensionDates = {
              [Dimensions.YEARLY]: getUniqueYears,
              [Dimensions.MONTHLY]: getUniqueMonths,
              [Dimensions.WEEKLY]: getUniqueWeeks,
              [Dimensions.DAILY]: getUniqueDays,
              [Dimensions.HOURLY]: getUniqueHours,
              [Dimensions.MINUTELY]: getUniqueMinutes,
              [Dimensions.SECONDLY]: getUniqueSeconds,
            };
            function getEncodedFeatures({ DataSet, features = [], }) {
              if (DataSet.encoders.size) {
                const featuresCopy = new Array().concat(features);
                const encodedFeatures = [];
                for (let encode of DataSet.encoders.keys()) {
                  if (features.includes(encode)) {
                    const existingIndex = featuresCopy.indexOf(encode);
                    featuresCopy.splice(existingIndex, 1);
                    encodedFeatures.push(...DataSet.encoders.get(encode).labels.map((label) => `${DataSet.encoders.get(encode).prefix}${label}`));
                  }
                }
                return Array.from(new Set(encodedFeatures.concat(featuresCopy)));
              }
              return features;
            }

            var AutoFeatureTypes; (function (AutoFeatureTypes){
              const TEXT = 'text-encoded'; AutoFeatureTypes["TEXT"] = TEXT;
              const LABEL = 'text-label'; AutoFeatureTypes["LABEL"] = LABEL;
              const BOOLEAN = 'boolean'; AutoFeatureTypes["BOOLEAN"] = BOOLEAN;
              const NUMBER = 'number'; AutoFeatureTypes["NUMBER"] = NUMBER;
              const AUTO = 'auto-detect'; AutoFeatureTypes["AUTO"] = AUTO;
            })(AutoFeatureTypes || (AutoFeatureTypes = {}));















            function getAutoFeatures({ variables, datum }){
              return variables.map(variable => { 
                const autofeature = {
                  feature_field_name: variable,
                  feature_field_type: AutoFeatureTypes.AUTO,
                };
                if (typeof datum[variable] === 'number') autofeature.feature_field_type= AutoFeatureTypes.NUMBER;
                else if (typeof datum[variable] === 'boolean') autofeature.feature_field_type= AutoFeatureTypes.BOOLEAN;
                else if (typeof datum[variable] === 'string') autofeature.feature_field_type= AutoFeatureTypes.TEXT;

                return autofeature;
              });
            }

            function autoAssignFeatureColumns({ independent_variables, dependent_variables, datum, input_independent_features, output_dependent_features, training_feature_column_options = {}, preprocessing_feature_column_options = {}, }) {
              const autoFeatureFilter = (autoFeature) => Object.keys(training_feature_column_options).includes(autoFeature.feature_field_name) === false;
              const input_auto_features = new Array().concat(
                (independent_variables && independent_variables.length && datum)
                  ? getAutoFeatures({ variables: independent_variables, datum, })
                  : [],
                input_independent_features || []);
              const output_auto_features = new Array().concat(
                (dependent_variables && dependent_variables.length && datum)
                  ? getAutoFeatures({ variables: dependent_variables, datum, })
                  : [],
                output_dependent_features || []);
              // console.log('input_auto_features',input_auto_features,{training_feature_column_options})
              // console.log('output_auto_features',output_auto_features)
              const model_auto_features = new Array().concat(input_auto_features, output_auto_features);
              model_auto_features
                .filter(autoFeatureFilter)
                .forEach((auto_feature) => {
                if (auto_feature.feature_field_type === AutoFeatureTypes.TEXT) {
                  training_feature_column_options[auto_feature.feature_field_name] = ['onehot'];
                } else if (auto_feature.feature_field_type === AutoFeatureTypes.LABEL) {
                  training_feature_column_options[auto_feature.feature_field_name] = ['label'];
                } else if (auto_feature.feature_field_type === AutoFeatureTypes.BOOLEAN) {
                  training_feature_column_options[auto_feature.feature_field_name] = ['label', { binary: true, },];
                } else if ([AutoFeatureTypes.NUMBER, AutoFeatureTypes.AUTO,].includes(auto_feature.feature_field_type)) {
                  training_feature_column_options[auto_feature.feature_field_name] = ['scale', 'standard',];
                  // if ([['onehot'], 'onehot', ['label'], 'label', ['label', { binary: true, },]].includes(training_feature_column_options[auto_feature.feature_field_name]) === false) {
                  // }
                  // if (training_feature_column_options[auto_feature.feature_field_name]!==['onehot']) {
                    preprocessing_feature_column_options[auto_feature.feature_field_name] = ['median',];
                  // }
                }
              });
              return {
                x_raw_independent_features: input_auto_features.map(af => af.feature_field_name),
                y_raw_dependent_labels: output_auto_features.map(af => af.feature_field_name),
                training_feature_column_options,
                preprocessing_feature_column_options,
              };
            }

            /*!
             * Determine if an object is a Buffer
             *
             * @author   Feross Aboukhadijeh <https://feross.org>
             * @license  MIT
             */

            var isBuffer$2 = function isBuffer (obj) {
              return obj != null && obj.constructor != null &&
                typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
            };

            var flat = flatten$3;
            flatten$3.flatten = flatten$3;
            flatten$3.unflatten = unflatten;

            function keyIdentity (key) {
              return key
            }

            function flatten$3 (target, opts) {
              opts = opts || {};

              const delimiter = opts.delimiter || '.';
              const maxDepth = opts.maxDepth;
              const transformKey = opts.transformKey || keyIdentity;
              const output = {};

              function step (object, prev, currentDepth) {
                currentDepth = currentDepth || 1;
                Object.keys(object).forEach(function (key) {
                  const value = object[key];
                  const isarray = opts.safe && Array.isArray(value);
                  const type = Object.prototype.toString.call(value);
                  const isbuffer = isBuffer$2(value);
                  const isobject = (
                    type === '[object Object]' ||
                    type === '[object Array]'
                  );

                  const newKey = prev
                    ? prev + delimiter + transformKey(key)
                    : transformKey(key);

                  if (!isarray && !isbuffer && isobject && Object.keys(value).length &&
                    (!opts.maxDepth || currentDepth < maxDepth)) {
                    return step(value, newKey, currentDepth + 1)
                  }

                  output[newKey] = value;
                });
              }

              step(target);

              return output
            }

            function unflatten (target, opts) {
              opts = opts || {};

              const delimiter = opts.delimiter || '.';
              const overwrite = opts.overwrite || false;
              const transformKey = opts.transformKey || keyIdentity;
              const result = {};

              const isbuffer = isBuffer$2(target);
              if (isbuffer || Object.prototype.toString.call(target) !== '[object Object]') {
                return target
              }

              // safely ensure that the key is
              // an integer.
              function getkey (key) {
                const parsedKey = Number(key);

                return (
                  isNaN(parsedKey) ||
                  key.indexOf('.') !== -1 ||
                  opts.object
                ) ? key
                  : parsedKey
              }

              function addKeys (keyPrefix, recipient, target) {
                return Object.keys(target).reduce(function (result, key) {
                  result[keyPrefix + delimiter + key] = target[key];

                  return result
                }, recipient)
              }

              function isEmpty (val) {
                const type = Object.prototype.toString.call(val);
                const isArray = type === '[object Array]';
                const isObject = type === '[object Object]';

                if (!val) {
                  return true
                } else if (isArray) {
                  return !val.length
                } else if (isObject) {
                  return !Object.keys(val).length
                }
              }

              target = Object.keys(target).reduce((result, key) => {
                const type = Object.prototype.toString.call(target[key]);
                const isObject = (type === '[object Object]' || type === '[object Array]');
                if (!isObject || isEmpty(target[key])) {
                  result[key] = target[key];
                  return result
                } else {
                  return addKeys(
                    key,
                    result,
                    flatten$3(target[key], opts)
                  )
                }
              }, {});

              Object.keys(target).forEach(function (key) {
                const split = key.split(delimiter).map(transformKey);
                let key1 = getkey(split.shift());
                let key2 = getkey(split[0]);
                let recipient = result;

                while (key2 !== undefined) {
                  const type = Object.prototype.toString.call(recipient[key1]);
                  const isobject = (
                    type === '[object Object]' ||
                    type === '[object Array]'
                  );

                  // do not write over falsey, non-undefined values if overwrite is false
                  if (!overwrite && !isobject && typeof recipient[key1] !== 'undefined') {
                    return
                  }

                  if ((overwrite && !isobject) || (!overwrite && recipient[key1] == null)) {
                    recipient[key1] = (
                      typeof key2 === 'number' &&
                      !opts.object ? [] : {}
                    );
                  }

                  recipient = recipient[key1];
                  if (split.length > 0) {
                    key1 = getkey(split.shift());
                    key2 = getkey(split[0]);
                  }
                }

                // unflatten again for 'messy objects'
                recipient[key1] = unflatten(target[key], opts);
              });

              return result
            }

            var ModelTypes; (function (ModelTypes) {
              const FAST_FORECAST = 'ai-fast-forecast'; ModelTypes["FAST_FORECAST"] = FAST_FORECAST;
              const FORECAST = 'ai-forecast'; ModelTypes["FORECAST"] = FORECAST;
              const TIMESERIES_REGRESSION_FORECAST = 'ai-timeseries-regression-forecast'; ModelTypes["TIMESERIES_REGRESSION_FORECAST"] = TIMESERIES_REGRESSION_FORECAST;
              const LINEAR_REGRESSION = 'ai-linear-regression'; ModelTypes["LINEAR_REGRESSION"] = LINEAR_REGRESSION;
              const REGRESSION = 'ai-regression'; ModelTypes["REGRESSION"] = REGRESSION;
              const CLASSIFICATION = 'ai-classification'; ModelTypes["CLASSIFICATION"] = CLASSIFICATION;
              const LOGISTIC_CLASSIFICATION = 'ai-logistic-classification'; ModelTypes["LOGISTIC_CLASSIFICATION"] = LOGISTIC_CLASSIFICATION;
            })(ModelTypes || (ModelTypes = {}));
            var ModelCategories; (function (ModelCategories) {
              const PREDICTION = 'regression'; ModelCategories["PREDICTION"] = PREDICTION;
              const DECISION = 'classification'; ModelCategories["DECISION"] = DECISION;
              const FORECAST = 'timeseries'; ModelCategories["FORECAST"] = FORECAST;
              const RECOMMENDATION = 'recommendation'; ModelCategories["RECOMMENDATION"] = RECOMMENDATION;
              const REACTION = 'reinforced'; ModelCategories["REACTION"] = REACTION;
            })(ModelCategories || (ModelCategories = {}));









            const modelMap = {
              'ai-fast-forecast': LSTMTimeSeries,
              'ai-forecast': LSTMMultivariateTimeSeries,
              'ai-timeseries-regression-forecast': MultipleLinearRegression,
              'ai-linear-regression': MultipleLinearRegression,
              'ai-regression': DeepLearningRegression,
              'ai-classification': DeepLearningClassification,
              'ai-logistic-classification': LogisticRegression,
            };
            const modelCategoryMap = {
              [ModelTypes.FAST_FORECAST]: ModelCategories.FORECAST,
              [ModelTypes.FORECAST]: ModelCategories.FORECAST,
              [ModelTypes.TIMESERIES_REGRESSION_FORECAST]: ModelCategories.FORECAST,
              [ModelTypes.LINEAR_REGRESSION]: ModelCategories.PREDICTION,
              [ModelTypes.REGRESSION]: ModelCategories.PREDICTION,
              [ModelTypes.CLASSIFICATION]: ModelCategories.DECISION,
              [ModelTypes.LOGISTIC_CLASSIFICATION]: ModelCategories.DECISION,
            };


















































































            /**
             * Takes an object that describes a function to be created from a function body string
             * @example 
            getGeneratedStatefulFunction({ variable_name='myFunctionName', function_body='return 3', function_name_prefix='customFunction_', }) => 
            function customFunction_myFunctionName(state){ 
              'use strict';
              return 3;
            }
             */
            function getGeneratedStatefulFunction({ variable_name='', function_body='', props, function_name_prefix='next_value_', }) {
              const func = Function('state', `'use strict';${function_body}`).bind({ props, });
              Object.defineProperty(
                func,
                'name',
                {
                  value: `${function_name_prefix}${variable_name}`,
                });
                return func;
            }



              
            function sumPreviousRows( options) {
              const { property, rows, offset = 1, } = options;
              const reverseTransform = Boolean(this.reverseTransform);
              const OFFSET = (typeof this.offset === 'number') ? this.offset : offset;
              const index = OFFSET; //- 1;
              // console.log({index,OFFSET,'index-rows':index-rows})
              // if (this.debug) {
                if (OFFSET < 1) throw new RangeError(`Offset must be larger than or equal to the default of 1 [property:${property}]`);
                // if (index-rows < 0) throw new RangeError(`previous index must be greater than 0 [index-rows:${index-rows}]`);
              // }
              const begin = index;
              const end = rows+index;
              const sum = this.data
                .slice(begin, end)
                // .slice(index-rows, index)
                // .slice(index, rows + index)
                .reduce((result, val) => {
                  //@ts-ignore
                  const value = (reverseTransform) ? this.DataSet.inverseTransformObject(val) : val;
                  // console.log({ value, result, });
                  result = result + value[ property ];
                  return result;
                }, 0);
              // const sumSet = this.data
              //   .slice(begin, end).map(ss => ss[ property ]);
              // console.log('this.data.length', this.data.length,'this.data.map(d=>d[property])',this.data.map(d=>d[property]), { sumSet, property, offset, rows, sum, reverseTransform, index, begin, end, });

              return sum;
            }

            class ModelX  {
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
               

              

              
              
              
              
              
              
              
              
              

              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              

              
              
              
              
              

              constructor(configuration, options = {}) {
                this.debug = typeof configuration.debug === 'boolean' ? configuration.debug : true;
                this.config = {
                  use_cache: typeof configuration.use_cache === 'boolean' ? configuration.use_cache : true,
                  model_type: configuration.model_type || ModelTypes.REGRESSION,
                  use_mock_dates_to_fit_trainning_data: configuration.use_mock_dates_to_fit_trainning_data,
                };
                this.config.model_category = modelCategoryMap[this.config.model_type];
                this.status = {
                  trained: false,
                  lastTrained: undefined,
                };
                // this.modelDocument = Object.assign({ model_options: {}, model_configuration: {}, }, configuration.modelDocument);
                this.entity = configuration.entity || {};
                this.emptyObject = configuration.emptyObject || {};
                this.mockEncodedData = configuration.mockEncodedData || [];
                this.use_empty_objects = Boolean(Object.keys(this.emptyObject).length);
                this.use_mock_encoded_data = Boolean(this.mockEncodedData.length);
                this.dimension = configuration.dimension;
                this.training_data_filter_function_body = configuration.training_data_filter_function_body;
                this.training_data_filter_function = configuration.training_data_filter_function;
                this.trainingData = configuration.trainingData || [];
                this.removedFilterdtrainingData = [];
                this.DataSet = configuration.DataSet || new DataSet();
                // this.max_evaluation_outputs = configuration.max_evaluation_outputs || 5;
                this.testDataSet = configuration.testDataSet || new DataSet();
                this.trainDataSet = configuration.trainDataSet || new DataSet();
                this.x_indep_matrix_train = configuration.x_indep_matrix_train || [];
                this.x_indep_matrix_test = configuration.x_indep_matrix_test || [];
                this.y_dep_matrix_train = configuration.y_dep_matrix_train || [];
                this.y_dep_matrix_test = configuration.y_dep_matrix_test || [];
                this.x_independent_features = configuration.x_independent_features || [];
                this.x_raw_independent_features = configuration.x_raw_independent_features || [];
                this.y_dependent_labels = configuration.y_dependent_labels || [];
                this.y_raw_dependent_labels = configuration.y_raw_dependent_labels || [];


                this.auto_assign_features = typeof configuration.auto_assign_features === 'boolean' ? configuration.auto_assign_features : true;
                this.independent_variables = configuration.independent_variables;
                this.dependent_variables = configuration.dependent_variables;
                this.input_independent_features = configuration.input_independent_features;
                this.output_dependent_features = configuration.output_dependent_features;


                this.training_size_values = configuration.training_size_values;
                this.cross_validation_options = {
                  train_size: 0.7,
                  ...configuration.cross_validation_options,
                };
                this.preprocessing_feature_column_options = configuration.preprocessing_feature_column_options || {};
                this.training_feature_column_options = configuration.training_feature_column_options || {};
                const customFit = (configuration.training_options && configuration.training_options.fit) ? configuration.training_options.fit : {};
                this.training_options = {
                  stateful: true,
                  features: this.x_independent_features.length,
                  ...configuration.training_options,
                  fit: {
                    epochs: 100,
                    batchSize: 5,
                    verbose: 0,
                    callbacks: {
                      // onTrainBegin: function(logs: any){
                      //   console.log('onTrainBegin', { logs });
                      // },
                      // onTrainEnd: function(logs: any){
                      //   console.log('onTrainBegin', { logs });
                      // },
                      // onEpochBegin: function(epoch, logs){
                      //   console.log('onEpochBegin', { epoch, logs });
                      // },
                      // onEpochEnd: function(epoch, logs){
                      //   console.log('onEpochEnd', { epoch, logs });
                      // },
                      // onBatchBegin: function(batch, logs){
                      //   console.log('onBatchBegin', { batch, logs });
                      // },
                      // onBatchEnd: function(batch, logs){
                      //   console.log('onBatchEnd', { batch, logs });
                      // },
                      // onYield: function(epoch, batch, logs){
                      //   console.log('onYield', { epoch, batch, logs });
                      // }
                    },
                    ...customFit,
                  },
                };
                this.training_progress_callback = configuration.training_progress_callback || training_on_progress;
                if (this.training_options && this.training_options.fit && this.training_options.fit.callbacks && this.training_options.fit.epochs) {
                  this.training_options.fit.callbacks.onEpochEnd = (epoch, logs) => {
                    const totalEpochs = (this.training_options.fit)?this.training_options.fit.epochs :0;
                    const completion_percentage = (epoch / totalEpochs) || 0;
                    this.training_model_loss = logs.loss;
                    this.training_progress_callback({ completion_percentage, loss: logs.loss, epoch, logs, status: 'training', defaultLog: this.debug, });
                  };
                  this.training_options.fit.callbacks.onTrainEnd = (logs) => {
                    const totalEpochs = (this.training_options.fit)?this.training_options.fit.epochs :0;
                    const completion_percentage= 1;
                    this.training_progress_callback({ completion_percentage, loss: this.training_model_loss||0, epoch:totalEpochs, logs, status:'trained', defaultLog: this.debug, });
                  };
                  this.training_options.fit.callbacks.onTrainBegin = (logs) => {
                    const totalEpochs = (this.training_options.fit)?this.training_options.fit.epochs :0;
                    const completion_percentage= 0;
                    this.training_progress_callback({ completion_percentage, loss: logs.loss, epoch:totalEpochs, logs, status:'initializing', defaultLog: this.debug, });
                  };
                }
                // this.prediction_options = configuration.prediction_options || [];
                this.prediction_inputs = configuration.prediction_inputs || [];
                this.prediction_timeseries_time_zone = configuration.prediction_timeseries_time_zone || 'utc';
                this.prediction_timeseries_date_feature = configuration.prediction_timeseries_date_feature || 'date';
                this.prediction_timeseries_date_format = configuration.prediction_timeseries_date_format;
                this.validate_training_data = typeof configuration.validate_training_data === 'boolean' ? configuration.validate_training_data : true;
                // this.retrain_forecast_model_with_predictions = configuration.retrain_forecast_model_with_predictions || this.modelDocument.model_configuration.retrain_forecast_model_with_predictions;
                this.use_preprocessing_on_trainning_data = typeof configuration.use_preprocessing_on_trainning_data !== 'undefined'
                  ? configuration.use_preprocessing_on_trainning_data
                  : true;
                // this.use_mock_dates_to_fit_trainning_data = configuration.use_mock_dates_to_fit_trainning_data || this.modelDocument.model_options.use_mock_dates_to_fit_trainning_data;
                // this.use_next_value_functions_for_training_data = configuration.use_next_value_functions_for_training_data || this.modelDocument.model_options.use_next_value_functions_for_training_data;
                this.prediction_timeseries_start_date = configuration.prediction_timeseries_start_date;
                this.prediction_timeseries_end_date = configuration.prediction_timeseries_end_date;
                this.prediction_timeseries_dimension_feature = configuration.prediction_timeseries_dimension_feature || 'dimension';
                this.prediction_inputs_next_value_functions = configuration.prediction_inputs_next_value_functions || configuration.next_value_functions || [];
                this.Model = configuration.Model || new TensorScriptModelInterface();
                this.original_data_test = [];
                this.original_data_train = [];
                this.forecastDates = [];
                return this;
              }
              /**
               * Attempts to automatically figure out the time dimension of each date feature (hourly, daily, etc) and the format of the date property (e.g. JS Date Object, or ISO String, etc) from the dataset data
               */
              getTimeseriesDimension(options = {}) {
                let timeseriesDataSetDateFormat = this.prediction_timeseries_date_format;
                //@ts-ignore
                let timeseriesForecastDimension = options.dimension || this.dimension;
                //@ts-ignore
                let DataSetData = options.DataSetData || this.DataSet && this.DataSet.data ||[];
                if (timeseriesForecastDimension && timeseriesDataSetDateFormat) {
                  this.dimension = timeseriesForecastDimension;
                  return {
                    dimension: timeseriesForecastDimension,
                    dateFormat: timeseriesDataSetDateFormat,
                  };
                }
                if (typeof timeseriesForecastDimension !== 'string' && DataSetData && Array.isArray(DataSetData) && DataSetData.length) {
                  // console.log({
                  //   options, DataSetData, durationToDimensionProperty,
                  // });
                  if (DataSetData.length && DataSetData[0][this.prediction_timeseries_dimension_feature]) {
                    timeseriesForecastDimension = DataSetData[0][this.prediction_timeseries_dimension_feature];
                  } 
                  if (DataSetData.length > 1 && DataSetData[0][this.prediction_timeseries_date_feature]) {
                    const recentDateField = DataSetData[ 1 ][ this.prediction_timeseries_date_feature ];
                    const parsedRecentDateField = getLuxonDateTime({
                      dateObject: recentDateField,
                      dateFormat: this.prediction_timeseries_date_format,
                    });
                    timeseriesDataSetDateFormat = parsedRecentDateField.format;
                    const test_end_date = parsedRecentDateField.date;
                    const test_start_date = getLuxonDateTime({
                      dateObject: DataSetData[ 0 ][ this.prediction_timeseries_date_feature ],
                      dateFormat: this.prediction_timeseries_date_format,
                    }).date;
                    // console.log({parsedRecentDateField})

                    //@ts-ignore
                    const durationDifference = test_end_date.diff(test_start_date, dimensionDurations).toObject(); 
                    // timeseriesForecastDimension
                    const durationDimensions = Object.keys(durationDifference).filter(diffProp => durationDifference[ diffProp ] === 1);
                    // console.log({
                    //   // test_start_date, test_end_date,
                    //   durationDifference, durationDimensions,
                    // });
                    if (durationDimensions.length === 1) {
                      timeseriesForecastDimension = durationToDimensionProperty[ durationDimensions[0] ] ;
                    }
                  }
                }
                if (typeof timeseriesForecastDimension !== 'string' || Object.keys(dimensionDates).indexOf(timeseriesForecastDimension) === -1) throw new ReferenceError(`Invalid timeseries dimension (${timeseriesForecastDimension})`);
                this.prediction_timeseries_date_format = timeseriesDataSetDateFormat;
                this.dimension = timeseriesForecastDimension ;
                if (typeof timeseriesDataSetDateFormat === 'undefined') throw new ReferenceError('Invalid timeseries date format');
                return {
                  dimension: timeseriesForecastDimension,
                  dateFormat: timeseriesDataSetDateFormat,
                };
                // console.log({timeseriesForecastDimension})
              }
              getForecastDates(options = {}) {
                const start = (this.prediction_timeseries_start_date  && this.prediction_timeseries_start_date instanceof Date)
                  ? DateTime.fromJSDate(this.prediction_timeseries_start_date).toISO(ISOOptions)
                  : this.prediction_timeseries_start_date ;
                const end = (this.prediction_timeseries_end_date instanceof Date)
                  ? DateTime.fromJSDate(this.prediction_timeseries_end_date).toISO(ISOOptions)
                  : this.prediction_timeseries_end_date;
                if (!this.dimension) throw ReferenceError('Forecasts require a timeseries dimension');
                else if (!start || !end) throw ReferenceError('Start and End Forecast Dates are required');
                
                this.forecastDates = dimensionDates[ this.dimension ]({
                  start,
                  end,
                  time_zone: this.prediction_timeseries_time_zone,
                });
                return this.forecastDates;
              }
              addMockData({ use_mock_dates = false, } = {}) {
                if (use_mock_dates && this.use_mock_encoded_data && this.DataSet) this.DataSet = addMockDataToDataSet(this.DataSet, { includeConstants: true, mockEncodedData: this.mockEncodedData, }); 
                else if (use_mock_dates &&  this.DataSet) this.DataSet = addMockDataToDataSet(this.DataSet, {});
                else if (this.use_mock_encoded_data &&  this.DataSet) this.DataSet = addMockDataToDataSet(this.DataSet, { includeConstants: false, mockEncodedData: this.mockEncodedData, });
              }
              removeMockData({ use_mock_dates = false, } = {}) {
                if (use_mock_dates && this.use_mock_encoded_data && this.DataSet) this.DataSet = removeMockDataFromDataSet(this.DataSet, { includeConstants: true, mockEncodedData: this.mockEncodedData, }); 
                else if (use_mock_dates && this.DataSet) this.DataSet = removeMockDataFromDataSet(this.DataSet, {});
                else if (this.use_mock_encoded_data && this.DataSet) this.DataSet = removeMockDataFromDataSet(this.DataSet, { includeConstants: false, mockEncodedData: this.mockEncodedData, });
              }
              getCrosstrainingData() {
                let test;
                let train;
                // console.log('getCrosstrainingData', {
                //   model_category: this.config.model_category,
                //   cross_validation_options: this.cross_validation_options,
                //   'this.DataSet.data.length':this.DataSet.data.length,
                // })
                if (this.config.model_category === 'timeseries') {
                  // console.log('this.cross_validation_options',this.cross_validation_options)
                  const trainSizePercentage = this.cross_validation_options.train_size || 0.7;
                  // console.log('this.training_size_values ', this.training_size_values, { trainSizePercentage, });
                  const train_size = (this.training_size_values)
                    ? this.DataSet.data.length - this.training_size_values
                    : parseInt((this.DataSet.data.length * trainSizePercentage).toString());
                  // console.log({ train_size, });
                  // const test_size = this.DataSet.data.length - train_size;
                  test = this.DataSet.data.slice(train_size, this.DataSet.data.length);
                  // test.forEach(t => {
                  //   console.log('test',{
                  //     is_location_open:t.is_location_open,
                  //     hour:t.hour,
                  //     date:t.date,
                  //   })
                  // })
                  train = this.DataSet.data.slice(0, train_size);
                } else {
                  // : {train:ModelXDataTypes.Data,test:ModelXDataTypes.Data}
                  const testTrainSplit = cross_validation.train_test_split(this.DataSet.data, this.cross_validation_options) ;
                  train = testTrainSplit.train;
                  test = testTrainSplit.test;
                }
                return { test, train, };
              }
              
              validateTrainingData({ cross_validate_training_data, inputMatrix, } = {
                inputMatrix:undefined,
              }) {
                const checkValidationData = (inputMatrix) ? inputMatrix : this.x_indep_matrix_train;
                const dataType = (inputMatrix) ? 'Prediction' : 'Trainning';
                checkValidationData.forEach((trainningData, i) => { 
                  // console.log({ trainningData, i });
                  trainningData.forEach((trainningVal, v) => {
                    if (typeof trainningVal !== 'number' || isNaN(trainningVal)) {
                      // // console.error(`Trainning data (${i}) has an invalid ${this.x_independent_features[ v ]}. Value: ${trainningVal}`);
                      // const originalData = (inputMatrix)
                      //   ? inputMatrix[ i ]
                      //   : (cross_validate_training_data)
                      //     ? this.original_data_test[ i ]
                      //     : this.trainingData[ i ];
                      // const [scaledTrainningValue, ] = this.DataSet.reverseColumnMatrix({ vectors: [trainningData, ], labels: this.x_independent_features, });
                      // const inverseTransformedObject = this.DataSet.inverseTransformObject(scaledTrainningValue, {});
                      // // console.log({ i, trainningVal, v, scaledTrainningValue, inverseTransformedObject, originalData, });

                      throw new TypeError(`${dataType} data (${i}) has an invalid ${this.x_independent_features[ v ]}. Value: ${trainningVal}`);
                    }
                  });
                });
                return true;
              }
              
              async getDataSetProperties(options = {}) {
                const {
                  nextValueIncludeForecastDate = true,
                  nextValueIncludeForecastTimezone = true,
                  nextValueIncludeForecastAssociations = true,
                  nextValueIncludeDateProperty = true,
                  nextValueIncludeParsedDate = true,
                  nextValueIncludeLocalParsedDate = true,
                  nextValueIncludeForecastInputs = true,
                  // trainingData,
                } = options;
               
                const props = { Luxon, ModelXData, };
                const nextValueFunctions = this.prediction_inputs_next_value_functions.reduce((functionsObject, func) => {
                  functionsObject[func.variable_name] = getGeneratedStatefulFunction({
                    ...func,
                    props,
                    function_name_prefix: 'next_value_',
                  });
                  return functionsObject;
                }, {});
                const filterFunctionBody = `'use strict';
    ${this.training_data_filter_function_body}
    `;
                this.training_data_filter_function = (this.training_data_filter_function_body)
                  ? Function('datum', 'datumIndex', filterFunctionBody).bind({ props, })
                  : this.training_data_filter_function;
                if (typeof this.training_data_filter_function === 'function' && this.training_data_filter_function.name && this.training_data_filter_function.name.includes('anonymous')) Object.defineProperty(this.training_data_filter_function, 'name', { value: 'training_data_filter_function' });
                this.prediction_inputs_next_value_function = function nextValueFunction(state) {
                  const lastDataRow = state.lastDataRow || {};
                  const zone = lastDataRow.origin_time_zone || this.prediction_timeseries_time_zone;
                  const date = state.forecastDate;
                  // const isOutlierValue = () => 0;
                  state.sumPreviousRows = sumPreviousRows.bind({
                    data: state.data,
                    DataSet: state.DataSet,
                    offset: state.existingDatasetObjectIndex,
                    reverseTransform: state.reverseTransform,
                  });
                  const helperNextValueData = {};
                  if (nextValueIncludeForecastDate) {
                    helperNextValueData[ this.prediction_timeseries_date_feature ] = state.forecastDate;
                  }
                  if (nextValueIncludeDateProperty) {
                    helperNextValueData.date = state.forecastDate;
                  }
                  if (nextValueIncludeForecastTimezone) {
                    helperNextValueData.origin_time_zone = lastDataRow.origin_time_zone;
                  }
                  if (nextValueIncludeForecastAssociations) {
                    helperNextValueData.associated_data_location = lastDataRow.associated_data_location
                      ? lastDataRow.associated_data_location.toString()
                      : lastDataRow.associated_data_location;
                    helperNextValueData.associated_data_product = lastDataRow.associated_data_product
                      ? lastDataRow.associated_data_product.toString()
                      : lastDataRow.associated_data_product;
                    helperNextValueData.associated_data_entity = lastDataRow.associated_data_entity
                      ? lastDataRow.associated_data_entity.toString()
                      : lastDataRow.associated_data_entity;
                    helperNextValueData.forecast_entity_type = lastDataRow.feature_entity_type
                      ? lastDataRow.feature_entity_type.toString()
                      : lastDataRow.forecast_entity_type;
                    helperNextValueData.forecast_entity_title = lastDataRow.feature_entity_title
                      ? lastDataRow.feature_entity_title.toString()
                      : lastDataRow.forecast_entity_title;
                    helperNextValueData.forecast_entity_name = lastDataRow.feature_entity_name
                      ? lastDataRow.feature_entity_name.toString()
                      : lastDataRow.forecast_entity_name;
                    helperNextValueData.forecast_entity_id = lastDataRow.feature_entity_id
                      ? lastDataRow.feature_entity_id.toString()
                      : lastDataRow.forecast_entity_id;
                  }
                  if (nextValueIncludeParsedDate && state.forecastDate) {
                    const parsedDate = getParsedDate(state.forecastDate, { zone, });
                    const isOpen = getOpenHour.bind({ entity: this.entity,  dimension: this.dimension, }, { date, parsedDate, zone, });
                    const isOutlier = getIsOutlier.bind({ entity: this.entity, data: state.data, datum:helperNextValueData, });
                    state.parsedDate = parsedDate;
                    state.isOpen = isOpen;
                    state.isOutlier = isOutlier;
                    Object.assign(helperNextValueData, parsedDate); // const parsedDate = CONSTANTS.getParsedDate(date, { zone, });
                    // console.log({parsedDate,date,state})
                  }
                  if (nextValueIncludeLocalParsedDate) {
                    Object.assign(helperNextValueData, getLocalParsedDate({ date: state.forecastDate , time_zone: zone, dimension: this.dimension , }));
                  }
                  if (nextValueIncludeForecastInputs) {
                    Object.assign(helperNextValueData, state.rawInputPredictionObject);//inputs
                  }
                  return Object.keys(nextValueFunctions).reduce((nextValueObject, functionName) => {
                  /*
                    this.props = {
                      forecastDate,
                      luxon,
                    }
                    state = {
                          DataSet: this.DataSet,
                          rawInputPredictionObject,
                          forecastDate,
                          forecastDates,
                          forecastPredictionIndex,
                          unscaledLastForecastedValue,
                        }
                    */
                    nextValueObject[ functionName ] = nextValueFunctions[ functionName ](state);
                    return nextValueObject;
                  }, helperNextValueData);
                };
                if (this.config.model_category === ModelCategories.FORECAST) {
                  this.dimension = this.getTimeseriesDimension(options).dimension;
                }
                // console.log('this', this);
                // if (this.dimension && this.config.model_category === ModelCategories.FORECAST && this.prediction_inputs &&!this.prediction_inputs.length) {
                //   console.log('SET FORECAST DATES')
                //   this.prediction_inputs = this.trainingData;
                //   this.getForecastDates();
                // }
                if (this.dimension && this.config.model_category === ModelCategories.FORECAST && this.prediction_inputs && this.prediction_inputs.length && (!this.prediction_timeseries_start_date || !this.prediction_timeseries_end_date)) {
                  if (!this.prediction_timeseries_start_date) this.prediction_timeseries_start_date = this.prediction_inputs[0][this.prediction_timeseries_date_feature];
                  if (!this.prediction_timeseries_end_date) this.prediction_timeseries_end_date = this.prediction_inputs[this.prediction_inputs.length - 1][this.prediction_timeseries_date_feature];
                  //  || !this.prediction_timeseries_end_date
                  // this.getForecastDates();
                }
                if (this.dimension && this.config.model_category === ModelCategories.FORECAST && this.prediction_timeseries_start_date && this.prediction_timeseries_end_date) {
                  this.getForecastDates();
                }
              }
              async validateTimeseriesData(options



             = {}) {
                const { fixPredictionDates = true, } = options;
                const dimension = this.dimension ;
                let raw_prediction_inputs = options.prediction_inputs || await this.getPredictionData(options) || [];
                // console.log('ORIGINAL raw_prediction_inputs', raw_prediction_inputs);
                // console.log('this.DataSet', this.DataSet);

                const lastOriginalDataSetIndex = this.DataSet.data.length - 1;
                const lastOriginalDataSetObject = this.DataSet.data[ lastOriginalDataSetIndex ];
                let forecastDates = this.forecastDates;
                const datasetDateOptions = getLuxonDateTime({
                  dateObject: lastOriginalDataSetObject[ this.prediction_timeseries_date_feature ],
                  dateFormat: this.prediction_timeseries_date_format,
                  time_zone: this.prediction_timeseries_time_zone,
                });
                const lastOriginalForecastDateTimeLuxon = datasetDateOptions.date;
                const lastOriginalForecastDateTimeFormat = datasetDateOptions.format;
                const lastOriginalForecastDate = lastOriginalForecastDateTimeLuxon.toJSDate();
                const datasetDates = (lastOriginalDataSetObject[ this.prediction_timeseries_date_feature ] instanceof Date)
                  ? this.DataSet.columnArray(this.prediction_timeseries_date_feature)
                  : this.DataSet.columnArray(this.prediction_timeseries_date_feature).map((originalDateFormattedDate) => getLuxonDateTime({
                    dateObject: originalDateFormattedDate,
                    dateFormat: lastOriginalForecastDateTimeFormat,
                    time_zone: this.prediction_timeseries_time_zone,
                  }).date.toJSDate());
                const firstDatasetDate = datasetDates[ 0 ];
                // console.log({ fixPredictionDates, forecastDates, datasetDates, firstDatasetDate, });
                if (fixPredictionDates && typeof this.prediction_timeseries_start_date === 'string') this.prediction_timeseries_start_date = DateTime.fromISO(this.prediction_timeseries_start_date).toJSDate();
                if (fixPredictionDates && this.prediction_timeseries_start_date && this.prediction_timeseries_start_date < firstDatasetDate) { 
                  this.prediction_timeseries_start_date = firstDatasetDate;
                  forecastDates = this.getForecastDates();
                  console.log('modified',{ forecastDates, });
                } 
                // console.log({ forecastDates, });
                let forecastDateFirstDataSetDateIndex;
                if (forecastDates.length) {
                  forecastDateFirstDataSetDateIndex = datasetDates.findIndex((DataSetDate) => DataSetDate.valueOf() === forecastDates[0].valueOf());
                  // console.log({ forecastDateFirstDataSetDateIndex });
                  // const forecastDateLastDataSetDateIndex = forecastDates.findIndex(forecastDate => forecastDate.valueOf() === lastOriginalForecastDate.valueOf());
                  if(forecastDateFirstDataSetDateIndex === -1){
                    const lastDataSetDate = datasetDates[ datasetDates.length - 1 ];
                    const firstForecastInputDate = forecastDates[ 0 ];
                    const firstForecastDateFromInput = DateTime.fromJSDate(lastDataSetDate, { zone: this.prediction_timeseries_time_zone, }).plus({
                      //@ts-ignore
                      [timeProperty[dimension]]: 1,
                    });
                    // console.log({ lastDataSetDate, firstForecastInputDate, firstForecastDateFromInput, dimension, });
                    // console.log('timeProperty[ dimension ]', timeProperty[ dimension ], 'lastDataSetDate.valueOf()', lastDataSetDate.valueOf(), 'firstForecastInputDate.valueOf()', firstForecastInputDate.valueOf(), 'firstForecastDateFromInput.valueOf()', firstForecastDateFromInput.valueOf());
                    if (firstForecastDateFromInput.valueOf() === firstForecastInputDate.valueOf()) {
                      forecastDateFirstDataSetDateIndex = datasetDates.length;
                    }
                  }
                  if (forecastDateFirstDataSetDateIndex === -1) throw new RangeError(`Forecast Date Range (${this.prediction_timeseries_start_date} - ${this.prediction_timeseries_end_date}) must include an existing forecast date (${this.DataSet.data[ 0 ][ this.prediction_timeseries_date_feature ]} - ${this.DataSet.data[ lastOriginalDataSetIndex ][ this.prediction_timeseries_date_feature ]})`);
                  //ensure prediction input dates are dates
                  if (raw_prediction_inputs.length) {
                    if (raw_prediction_inputs[ 0 ][ this.prediction_timeseries_date_feature ] instanceof Date === false) {
                      raw_prediction_inputs = raw_prediction_inputs.map((raw_input) => {
                        return Object.assign({}, raw_input, {
                          [ this.prediction_timeseries_date_feature ]: getLuxonDateTime({
                            dateObject: raw_input[ this.prediction_timeseries_date_feature ],
                            dateFormat: lastOriginalForecastDateTimeFormat,
                            time_zone: this.prediction_timeseries_time_zone,
                          }).date.toJSDate(),
                        });
                      });
                    }
                    const firstRawInputDate = raw_prediction_inputs[ 0 ][ this.prediction_timeseries_date_feature ];
                    const firstForecastDate = forecastDates[ 0 ];
                    let raw_prediction_input_dates = raw_prediction_inputs.map((raw_input) => raw_input[ this.prediction_timeseries_date_feature ]);
                    if (fixPredictionDates && firstForecastDate > firstRawInputDate) {
                      // console.log('FIX INPUTS');
                      const matchingInputIndex = raw_prediction_input_dates.findIndex((inputPredictionDate) => inputPredictionDate.valueOf() === firstForecastDate.valueOf());
                      // const updated_raw_prediction_input_dates = raw_prediction_input_dates.slice(matchingInputIndex);
                      raw_prediction_inputs = raw_prediction_inputs.slice(matchingInputIndex);
                      raw_prediction_input_dates = raw_prediction_inputs.map((raw_input) => raw_input[ this.prediction_timeseries_date_feature ]);

                      // console.log({
                      //   matchingInputIndex,
                      //   // updated_raw_prediction_input_dates,
                      //   forecastDates
                      // });
                    }
                    // console.log({ firstRawInputDate, firstForecastDate, datasetDates, forecastDates, raw_prediction_input_dates, });

                    //make sure forecast prediction is inclusive of original dataset
                    const rawPredictionForecastDateIndex = forecastDates.findIndex((forecastDate) => forecastDate.valueOf() === raw_prediction_input_dates[0].valueOf());
                    // console.log({ rawPredictionForecastDateIndex, raw_prediction_input_dates, });
                    if (rawPredictionForecastDateIndex < 0) throw new RangeError(`Prediction Input First Date(${raw_prediction_input_dates[0]}) must be inclusive of forecastDates ( ${forecastDates[0]} - ${forecastDates[forecastDates.length - 1]})`);
                    // if (raw_prediction_inputs[ 0 ][ this.prediction_timeseries_date_feature ].valueOf() !== forecastDates[ 0 ].valueOf()) throw new RangeError(`Prediction input dates (${raw_prediction_inputs[ 0 ][ this.prediction_timeseries_date_feature ]} to ${raw_prediction_inputs[ raw_prediction_inputs.length - 1 ][ this.prediction_timeseries_date_feature ]}) must match forecast date range (${forecastDates[ 0 ]} to ${forecastDates[ forecastDates.length - 1 ]})`);
                  }
                  //      this.prediction_inputs = raw_prediction_inputs.map(prediction_value=>this.DataSet.transformObject(prediction_value));
                }
                
                return { forecastDates, forecastDateFirstDataSetDateIndex, lastOriginalForecastDate, raw_prediction_inputs, dimension, datasetDates, };
              }
              async getPredictionData(options = {}) {
                if (typeof options.getPredictionInputPromise === 'function') {
                  this.prediction_inputs = await options.getPredictionInputPromise({ModelX:this});
                }
                return this.prediction_inputs;
              }
              /**
               * 
               * @param options 
               */
              async trainModel(options = {}) {
                const { cross_validate_training_data=true, use_next_value_functions_for_training_data=false, use_mock_dates_to_fit_trainning_data=false, } = options;
                const modelObject = modelMap[this.config.model_type];
                const use_mock_dates = use_mock_dates_to_fit_trainning_data || this.config.use_mock_dates_to_fit_trainning_data;
                let trainingData = options.trainingData || this.trainingData || [];
                // if (!Array.isArray(trainingData) || !trainingData.length) trainingData = [];
                trainingData = new Array().concat(trainingData) ;
                // const use_next_val_functions = (typeof this.use_next_value_functions_for_training_data !== 'undefined')
                //   ? this.use_next_value_functions_for_training_data
                //   : use_next_value_functions_for_training_data
                // console.log('before',{ trainingData });

                let test;
                let train;
                this.status.trained = false;
                await this.getDataSetProperties({
                  DataSetData: trainingData,
                });
                // console.log('after getDataSetProperties',{ trainingData });

                if (typeof this.training_data_filter_function === 'function' && use_next_value_functions_for_training_data === false) {
                  // console.log('this.training_data_filter_function',this.training_data_filter_function)
                  trainingData = trainingData.filter(this.training_data_filter_function);
                } 
                if (!use_next_value_functions_for_training_data && this.use_empty_objects) {
                  trainingData = trainingData.map(trainningDatum => ({
                    ...this.emptyObject,
                    ...trainningDatum,
                  }));
                }
                // console.log('after',{ trainingData });
                this.DataSet = new DataSet(trainingData);

                // console.log('this.auto_assign_features', this.auto_assign_features);
                // console.log('before this.x_raw_independent_features', this.x_raw_independent_features);
                // console.log('before this.y_raw_dependent_labels', this.y_raw_dependent_labels);
                // console.log('before this.preprocessing_feature_column_options', this.preprocessing_feature_column_options);
                // console.log('before this.training_feature_column_options', this.training_feature_column_options);
                if (this.auto_assign_features && (!this.x_independent_features || !this.x_independent_features.length) && !this.y_dependent_labels || !this.y_dependent_labels.length) {
                  const autoFeatures = autoAssignFeatureColumns({
                    input_independent_features: this.input_independent_features,
                    output_dependent_features: this.output_dependent_features,
                    independent_variables: this.independent_variables,
                    dependent_variables: this.dependent_variables,
                    training_feature_column_options: this.training_feature_column_options,
                    preprocessing_feature_column_options: this.preprocessing_feature_column_options,
                    datum: trainingData[0],
                  });
                  this.x_raw_independent_features = Array.from(new Set(new Array().concat(this.x_raw_independent_features, autoFeatures.x_raw_independent_features)));
                  this.y_raw_dependent_labels = Array.from(new Set(new Array().concat(this.y_raw_dependent_labels,autoFeatures.y_raw_dependent_labels)));
                  this.preprocessing_feature_column_options = {
                    ...autoFeatures.preprocessing_feature_column_options,
                    ...this.preprocessing_feature_column_options
                  };

                  this.training_feature_column_options = {
                    ...autoFeatures.training_feature_column_options,
                    ...this.training_feature_column_options
                  };
                }
                // console.log('after this.x_raw_independent_features', this.x_raw_independent_features);
                // console.log('after this.y_raw_dependent_labels', this.y_raw_dependent_labels);
                // console.log('after this.preprocessing_feature_column_options', this.preprocessing_feature_column_options);
                // console.log('after this.training_feature_column_options', this.training_feature_column_options);
                
                // console.log('this.DataSet', this.DataSet);
                
                if (this.use_preprocessing_on_trainning_data && this.preprocessing_feature_column_options && Object.keys(this.preprocessing_feature_column_options).length) {
                  this.DataSet.fitColumns(this.preprocessing_feature_column_options);
                }
                if (use_next_value_functions_for_training_data) {
                  const trainingDates = trainingData.map(tdata => tdata[ this.prediction_timeseries_date_feature ]);
                  trainingData = trainingData.map((trainingDatum, dataIndex) => {
                    const forecastDate = trainingDatum[ this.prediction_timeseries_date_feature ];
                    const forecastPredictionIndex = dataIndex;
                    if (trainingDatum._id) trainingDatum._id = trainingDatum._id.toString();
                    if (trainingDatum.feature_entity_id) trainingDatum.feature_entity_id = trainingDatum.feature_entity_id.toString();
                    const trainningNextValueData = this.prediction_inputs_next_value_function
                      ? this.prediction_inputs_next_value_function({
                        rawInputPredictionObject: trainingDatum,
                        forecastDate,
                        forecastDates: trainingDates,
                        forecastPredictionIndex,
                        existingDatasetObjectIndex: dataIndex,
                        unscaledLastForecastedValue: trainingData[dataIndex - 1],
                        // data: this.DataSet.data.splice(forecastDateFirstDataSetDateIndex, 0, forecasts),
                        data: trainingData,
                        DataSet: this.DataSet||new DataSet(),
                        lastDataRow: trainingData[trainingData.length - 1],
                        reverseTransform: false,
                      })
                      : {};
                    // console.log({ forecastPredictionIndex, forecastDate, trainningNextValueData });
                    const calculatedDatum = this.use_empty_objects
                      ? Object.assign({},
                        this.emptyObject,
                        flat(trainingDatum, { maxDepth: 2, delimiter:flattenDelimiter, }),
                        flat(trainningNextValueData, { maxDepth: 2, delimiter:flattenDelimiter, })
                      )
                      : Object.assign({}, trainingDatum, trainningNextValueData);
                    // console.log({dataIndex,calculatedDatum});
                    return calculatedDatum;
                  });
                  if (typeof this.training_data_filter_function === 'function' && use_next_value_functions_for_training_data===true) {
                    trainingData = trainingData.filter((datum, datumIndex) => {
                      if (this.training_data_filter_function) {
                        const removeValue = this.training_data_filter_function(datum, datumIndex);
                        if (!removeValue) this.removedFilterdtrainingData.push(datum);
                        return removeValue;
                      }
                    });
                  }
                  // console.log('trainModel trainingData[0]', trainingData[0]);
                  // console.log('trainModel trainingData[trainingData.length-1]', trainingData[trainingData.length-1]);
                  // console.log('trainModel trainingData.length', trainingData.length);
                  // console.log('trainModel this.forecastDates', this.forecastDates);
                  this.DataSet = new DataSet(trainingData);
                }

                // console.log('this.preprocessingColumnOptions', this.preprocessingColumnOptions);
               
                ['is_location_open', 'is_open_hour', 'is_location_open',].forEach(feat_col_option => {
                  if (this.training_feature_column_options[ feat_col_option ]) {
                    this.training_feature_column_options[ feat_col_option ] = ['label', { binary: true, },];
                  }
                });
                // console.log('AFTER this.training_feature_column_options', this.training_feature_column_options);

              
                this.addMockData({ use_mock_dates, });
                this.DataSet.fitColumns(this.training_feature_column_options);
                this.removeMockData({ use_mock_dates, });
                // console.log('this.auto_assign_features', this.auto_assign_features);
                // console.log('before this.x_independent_features', this.x_independent_features);
                // console.log('before this.y_dependent_labels', this.y_dependent_labels);
                if (this.auto_assign_features && (!this.x_independent_features || !this.x_independent_features.length) && (!this.y_dependent_labels || !this.y_dependent_labels.length)) {
                  this.x_independent_features = new Array().concat(this.x_independent_features, getEncodedFeatures({ DataSet: this.DataSet, features: this.x_raw_independent_features }));
                  this.y_dependent_labels = new Array().concat(this.y_dependent_labels, getEncodedFeatures({ DataSet: this.DataSet, features: this.y_raw_dependent_labels }));
                }
                // console.log('after this.x_independent_features', this.x_independent_features);
                // console.log('after this.y_dependent_labels', this.y_dependent_labels);
                // console.log('this.DataSet', this.DataSet);
                // console.log('this.use_preprocessing_on_trainning_data', this.use_preprocessing_on_trainning_data);
                // console.log('this.preprocessing_feature_column_options', this.preprocessing_feature_column_options);

                if (!this.x_independent_features || !this.x_independent_features.length) throw new ReferenceError('Missing Inputs (x_independent_features)');
                if (!this.y_dependent_labels || !this.y_dependent_labels.length) throw new ReferenceError('Missing Outputs (y_dependent_labels)');
                this.x_independent_features = Array.from(new Set(this.x_independent_features));
                // console.log('AFTER this.x_independent_features', this.x_independent_features);
                this.y_dependent_labels = Array.from(new Set(this.y_dependent_labels));
                // console.log('AFTER this.y_dependent_labels', this.y_dependent_labels);
                // console.log('this.y_dependent_labels', this.y_dependent_labels);
                // console.log('IN MODEL trainingData.length', trainingData.length);
                // throw new Error('SHOULD NOT GET TO ADD MOCK DATA');
                // console.log({ cross_validate_training_data });
                // Object.defineProperty(this, 'x_indep_matrix_train', {
                //   writable: false,
                //   configurable: false,
                // });

                if (cross_validate_training_data) {
                  let crosstrainingData = this.getCrosstrainingData();
                  test = crosstrainingData.test;
                  train = crosstrainingData.train;
                  this.original_data_test = crosstrainingData.test;
                  this.original_data_train = crosstrainingData.train;
                  // console.log('IN MODEL test.length', test.length);
                  // console.log('IN MODEL train.length', train.length);
                  // Object.defineProperty(this.x_indep_matrix_train, '', {
                  //   writable: false,
                  //   configurable: false,
                    
                  // })
                  this.testDataSet = new DataSet(test);
                  this.trainDataSet = new DataSet(train);
                  this.x_indep_matrix_train = this.trainDataSet.columnMatrix(this.x_independent_features);
                  this.x_indep_matrix_test = this.testDataSet.columnMatrix(this.x_independent_features);
                  this.y_dep_matrix_train = this.trainDataSet.columnMatrix(this.y_dependent_labels);
                  this.y_dep_matrix_test = this.testDataSet.columnMatrix(this.y_dependent_labels);
                } else {
                  this.x_indep_matrix_train = this.DataSet.columnMatrix(this.x_independent_features);
                  this.y_dep_matrix_train = this.DataSet.columnMatrix(this.y_dependent_labels);
                }
                this.Model = new modelObject(this.training_options, { });
                if (this.config.model_category === 'timeseries') {
                  const validationData = await this.validateTimeseriesData(options);
                }
                if (this.validate_training_data) {
                  this.validateTrainingData({ cross_validate_training_data, });
                }
                if (this.config.model_category === 'timeseries' && this.config.model_type === 'ai-fast-forecast') {
                  // console.log('this.DataSet.data',this.DataSet.data)
                  // console.log('this.x_indep_matrix_train',this.x_indep_matrix_train)
                  // console.log('this.x_indep_matrix_train[0]', this.x_indep_matrix_train[ 0 ]);
                  // console.log('this.x_indep_matrix_train[this.x_indep_matrix_train.length-1]', this.x_indep_matrix_train[this.x_indep_matrix_train.length-1 ]);
                  // console.log('this.x_independent_features',this.x_independent_features)
                  // console.log('this.training_feature_column_options',this.training_feature_column_options)
                  // console.log('this.validate_training_data',this.validate_training_data)
                  await this.Model.train(this.x_indep_matrix_train, this.y_dep_matrix_train);
                } else {
                  // console.log('this.DataSet.data',this.DataSet.data)
                  // console.log('this.x_indep_matrix_train',this.x_indep_matrix_train)
                  // console.log('this.x_indep_matrix_train[0]', this.x_indep_matrix_train[ 0 ]);
                  // console.log('this.x_indep_matrix_train[this.x_indep_matrix_train.length-1]', this.x_indep_matrix_train[this.x_indep_matrix_train.length-1 ]);
                  // console.log('this.y_dep_matrix_train[0]', this.y_dep_matrix_train[ 0 ]);
                  // console.log('this.y_dep_matrix_train[this.y_dep_matrix_train.length-1]', this.y_dep_matrix_train[this.y_dep_matrix_train.length-1 ]);
                  // console.log('this.y_dep_matrix_train',this.y_dep_matrix_train)
                  // console.log('this.x_independent_features',this.x_independent_features)
                  // console.log('this.y_dependent_labels',this.y_dependent_labels)
                  // console.log('this.training_feature_column_options',this.training_feature_column_options)
                  // console.log('this.validate_training_data',this.validate_training_data)
                  await this.Model.train(this.x_indep_matrix_train, this.y_dep_matrix_train);
                }
                this.status.trained = true;
                return this;
              }
            }

            exports.ModelX = ModelX;

            Object.defineProperty(exports, '__esModule', { value: true });

})));
